
AVR_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000047a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  000047a4  00004838  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  008000c4  008000c4  0000489c  2**0
                  ALLOC
  3 .stab         000044c4  00000000  00000000  0000489c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013f3  00000000  00000000  00008d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000a153  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000a2b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000a442  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000c487  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000d588  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000e50c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000e68c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000e94e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f1dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__vector_1>
       8:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <__vector_2>
       c:	0c 94 21 1a 	jmp	0x3442	; 0x3442 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ea       	ldi	r30, 0xA4	; 164
      68:	f7 e4       	ldi	r31, 0x47	; 71
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3c       	cpi	r26, 0xC4	; 196
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 ec       	ldi	r26, 0xC4	; 196
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3e       	cpi	r26, 0xE4	; 228
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2a 20 	call	0x4054	; 0x4054 <main>
      8a:	0c 94 d0 23 	jmp	0x47a0	; 0x47a0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 99 23 	jmp	0x4732	; 0x4732 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab ea       	ldi	r26, 0xAB	; 171
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a5 23 	jmp	0x474a	; 0x474a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c1 23 	jmp	0x4782	; 0x4782 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a5 23 	jmp	0x474a	; 0x474a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c1 23 	jmp	0x4782	; 0x4782 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 99 23 	jmp	0x4732	; 0x4732 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b ea       	ldi	r24, 0xAB	; 171
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a1 23 	jmp	0x4742	; 0x4742 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b ea       	ldi	r22, 0xAB	; 171
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 bd 23 	jmp	0x477a	; 0x477a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a5 23 	jmp	0x474a	; 0x474a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c1 23 	jmp	0x4782	; 0x4782 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a5 23 	jmp	0x474a	; 0x474a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c1 23 	jmp	0x4782	; 0x4782 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a5 23 	jmp	0x474a	; 0x474a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c1 23 	jmp	0x4782	; 0x4782 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a9 23 	jmp	0x4752	; 0x4752 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 c5 23 	jmp	0x478a	; 0x478a <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <SPI_voidMasterInit>:
#include "SPI_interface.h"
#include "SPI_private.h"
#include "SPI_config.h"


void SPI_voidMasterInit(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	/******Select data order*******/						  // default
	CLR_BIT(SPCR, SPCR_DORD);
     ca6:	ad e2       	ldi	r26, 0x2D	; 45
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	ed e2       	ldi	r30, 0x2D	; 45
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8f 7d       	andi	r24, 0xDF	; 223
     cb2:	8c 93       	st	X, r24
	/******Select master******/
	SET_BIT(SPCR, SPCR_MSTR);
     cb4:	ad e2       	ldi	r26, 0x2D	; 45
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	ed e2       	ldi	r30, 0x2D	; 45
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 61       	ori	r24, 0x10	; 16
     cc0:	8c 93       	st	X, r24
	/******Clock Polarity -> leading edge -> rising ******/	  // default
	CLR_BIT(SPCR, SPCR_CPOL);
     cc2:	ad e2       	ldi	r26, 0x2D	; 45
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	ed e2       	ldi	r30, 0x2D	; 45
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	87 7f       	andi	r24, 0xF7	; 247
     cce:	8c 93       	st	X, r24
	/******Clock Phase    -> sample first ******/			  // default
	CLR_BIT(SPCR, SPCR_CPHA);
     cd0:	ad e2       	ldi	r26, 0x2D	; 45
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	ed e2       	ldi	r30, 0x2D	; 45
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8b 7f       	andi	r24, 0xFB	; 251
     cdc:	8c 93       	st	X, r24
	/******Select SPI clock rate******/
	SET_BIT(SPCR, SPCR_SPR0);
     cde:	ad e2       	ldi	r26, 0x2D	; 45
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	ed e2       	ldi	r30, 0x2D	; 45
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	81 60       	ori	r24, 0x01	; 1
     cea:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPCR_SPR1);
     cec:	ad e2       	ldi	r26, 0x2D	; 45
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	ed e2       	ldi	r30, 0x2D	; 45
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	8d 7f       	andi	r24, 0xFD	; 253
     cf8:	8c 93       	st	X, r24
	CLR_BIT(SPSR, SPSR_SPI2X);
     cfa:	ae e2       	ldi	r26, 0x2E	; 46
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	ee e2       	ldi	r30, 0x2E	; 46
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8e 7f       	andi	r24, 0xFE	; 254
     d06:	8c 93       	st	X, r24

	/******Enable SPI******/
	SET_BIT(SPCR, SPCR_SPE);
     d08:	ad e2       	ldi	r26, 0x2D	; 45
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	ed e2       	ldi	r30, 0x2D	; 45
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 64       	ori	r24, 0x40	; 64
     d14:	8c 93       	st	X, r24
}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <SPI_voidSlaveInit>:
void SPI_voidSlaveInit(void){
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
	/******Select data order******/
	CLR_BIT(SPCR, SPCR_DORD);								  // default
     d24:	ad e2       	ldi	r26, 0x2D	; 45
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	ed e2       	ldi	r30, 0x2D	; 45
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	8f 7d       	andi	r24, 0xDF	; 223
     d30:	8c 93       	st	X, r24
	/******Select slave******/
	CLR_BIT(SPCR, SPCR_MSTR);
     d32:	ad e2       	ldi	r26, 0x2D	; 45
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	ed e2       	ldi	r30, 0x2D	; 45
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	8f 7e       	andi	r24, 0xEF	; 239
     d3e:	8c 93       	st	X, r24
	/******Clock Polarity -> leading edge -> rising ******/   // default
	CLR_BIT(SPCR, SPCR_CPOL);
     d40:	ad e2       	ldi	r26, 0x2D	; 45
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	ed e2       	ldi	r30, 0x2D	; 45
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	87 7f       	andi	r24, 0xF7	; 247
     d4c:	8c 93       	st	X, r24
	/******Clock Phase    -> sample first ******/             // default
	CLR_BIT(SPCR, SPCR_CPHA);
     d4e:	ad e2       	ldi	r26, 0x2D	; 45
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	ed e2       	ldi	r30, 0x2D	; 45
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	8b 7f       	andi	r24, 0xFB	; 251
     d5a:	8c 93       	st	X, r24

	/******Enable SPI******/
	SET_BIT(SPCR, SPCR_SPE);
     d5c:	ad e2       	ldi	r26, 0x2D	; 45
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	ed e2       	ldi	r30, 0x2D	; 45
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	80 64       	ori	r24, 0x40	; 64
     d68:	8c 93       	st	X, r24
}
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <SPI_u8TransceiverDataSynch>:

uint8 SPI_u8TransceiverDataSynch(uint8 u8DataCpy){
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	0f 92       	push	r0
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	89 83       	std	Y+1, r24	; 0x01
	/*****Send Data****/
	SPDR = u8DataCpy;
     d7c:	ef e2       	ldi	r30, 0x2F	; 47
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	80 83       	st	Z, r24
	/*****wait until data received****/
	while(GET_BIT(SPSR, SPSR_SPIF)==0);
     d84:	ee e2       	ldi	r30, 0x2E	; 46
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	88 23       	and	r24, r24
     d8c:	dc f7       	brge	.-10     	; 0xd84 <SPI_u8TransceiverDataSynch+0x14>

	return SPDR;
     d8e:	ef e2       	ldi	r30, 0x2F	; 47
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
}
     d94:	0f 90       	pop	r0
     d96:	cf 91       	pop	r28
     d98:	df 91       	pop	r29
     d9a:	08 95       	ret

00000d9c <PASS_u8Setup>:
#include "../KeyPad/KPD_interface.h"

uint8 u8key[5];


uint8* PASS_u8Setup(void){
     d9c:	0f 93       	push	r16
     d9e:	1f 93       	push	r17
     da0:	df 93       	push	r29
     da2:	cf 93       	push	r28
     da4:	0f 92       	push	r0
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
//	while(KPD_u8GetKey() == 0);

	for(uint8 i=0; i<5; i++){
     daa:	19 82       	std	Y+1, r1	; 0x01
     dac:	0c c0       	rjmp	.+24     	; 0xdc6 <PASS_u8Setup+0x2a>
		u8key[i] = KPD_u8GetKey();
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	08 2f       	mov	r16, r24
     db2:	10 e0       	ldi	r17, 0x00	; 0
     db4:	0e 94 26 18 	call	0x304c	; 0x304c <KPD_u8GetKey>
     db8:	f8 01       	movw	r30, r16
     dba:	e6 53       	subi	r30, 0x36	; 54
     dbc:	ff 4f       	sbci	r31, 0xFF	; 255
     dbe:	80 83       	st	Z, r24


uint8* PASS_u8Setup(void){
//	while(KPD_u8GetKey() == 0);

	for(uint8 i=0; i<5; i++){
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	8f 5f       	subi	r24, 0xFF	; 255
     dc4:	89 83       	std	Y+1, r24	; 0x01
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	85 30       	cpi	r24, 0x05	; 5
     dca:	88 f3       	brcs	.-30     	; 0xdae <PASS_u8Setup+0x12>
		u8key[i] = KPD_u8GetKey();
	}
	return u8key;
     dcc:	8a ec       	ldi	r24, 0xCA	; 202
     dce:	90 e0       	ldi	r25, 0x00	; 0
}
     dd0:	0f 90       	pop	r0
     dd2:	cf 91       	pop	r28
     dd4:	df 91       	pop	r29
     dd6:	1f 91       	pop	r17
     dd8:	0f 91       	pop	r16
     dda:	08 95       	ret

00000ddc <PASS_u8ComparePassword>:

uint8 PASS_u8ComparePassword(uint8 key1, uint8 key2 ){
     ddc:	df 93       	push	r29
     dde:	cf 93       	push	r28
     de0:	00 d0       	rcall	.+0      	; 0xde2 <PASS_u8ComparePassword+0x6>
     de2:	0f 92       	push	r0
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	8a 83       	std	Y+2, r24	; 0x02
     dea:	6b 83       	std	Y+3, r22	; 0x03
	uint8 u8Error = 0;
     dec:	19 82       	std	Y+1, r1	; 0x01
	if(key1 == key2){
     dee:	9a 81       	ldd	r25, Y+2	; 0x02
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	98 17       	cp	r25, r24
     df4:	11 f4       	brne	.+4      	; 0xdfa <PASS_u8ComparePassword+0x1e>
		u8Error = 0;
     df6:	19 82       	std	Y+1, r1	; 0x01
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <PASS_u8ComparePassword+0x22>
	}
	else{
		u8Error = 1;
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8Error;
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
}
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	cf 91       	pop	r28
     e08:	df 91       	pop	r29
     e0a:	08 95       	ret

00000e0c <LCD_voidInit>:
#include "../DIO/DIO_interface.h"
#include "LCD_interface.h"
#include "../Password/Password_interface.h"
#include "util/delay.h"

void LCD_voidInit(void){
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
     e18:	c4 55       	subi	r28, 0x54	; 84
     e1a:	d0 40       	sbci	r29, 0x00	; 0
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	f8 94       	cli
     e20:	de bf       	out	0x3e, r29	; 62
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	cd bf       	out	0x3d, r28	; 61
	/* Pin Direction*/
	DIO_voidWritePort(lcd_DATAPORT   , DIO_OUTPUT);
     e26:	84 e0       	ldi	r24, 0x04	; 4
     e28:	61 e0       	ldi	r22, 0x01	; 1
     e2a:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <DIO_voidWritePort>
	DIO_voidWritePin (lcd_CONTROLPORT, lcd_RSPIN, DIO_OUTPUT);
     e2e:	83 e0       	ldi	r24, 0x03	; 3
     e30:	62 e0       	ldi	r22, 0x02	; 2
     e32:	41 e0       	ldi	r20, 0x01	; 1
     e34:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
	//DIO_voidWritePin (lcd_CONTROLPORT, lcd_RWPIN, DIO_OUTPUT);
	DIO_voidWritePin (lcd_CONTROLPORT, lcd_EPIN , DIO_OUTPUT);
     e38:	83 e0       	ldi	r24, 0x03	; 3
     e3a:	63 e0       	ldi	r22, 0x03	; 3
     e3c:	41 e0       	ldi	r20, 0x01	; 1
     e3e:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
	/* Make Enable Low*/
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
     e42:	83 e0       	ldi	r24, 0x03	; 3
     e44:	63 e0       	ldi	r22, 0x03	; 3
     e46:	40 e0       	ldi	r20, 0x00	; 0
     e48:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
     e4c:	fe 01       	movw	r30, r28
     e4e:	ef 5a       	subi	r30, 0xAF	; 175
     e50:	ff 4f       	sbci	r31, 0xFF	; 255
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	a0 ef       	ldi	r26, 0xF0	; 240
     e58:	b1 e4       	ldi	r27, 0x41	; 65
     e5a:	80 83       	st	Z, r24
     e5c:	91 83       	std	Z+1, r25	; 0x01
     e5e:	a2 83       	std	Z+2, r26	; 0x02
     e60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e62:	8e 01       	movw	r16, r28
     e64:	03 5b       	subi	r16, 0xB3	; 179
     e66:	1f 4f       	sbci	r17, 0xFF	; 255
     e68:	fe 01       	movw	r30, r28
     e6a:	ef 5a       	subi	r30, 0xAF	; 175
     e6c:	ff 4f       	sbci	r31, 0xFF	; 255
     e6e:	60 81       	ld	r22, Z
     e70:	71 81       	ldd	r23, Z+1	; 0x01
     e72:	82 81       	ldd	r24, Z+2	; 0x02
     e74:	93 81       	ldd	r25, Z+3	; 0x03
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	4a ef       	ldi	r20, 0xFA	; 250
     e7c:	54 e4       	ldi	r21, 0x44	; 68
     e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e82:	dc 01       	movw	r26, r24
     e84:	cb 01       	movw	r24, r22
     e86:	f8 01       	movw	r30, r16
     e88:	80 83       	st	Z, r24
     e8a:	91 83       	std	Z+1, r25	; 0x01
     e8c:	a2 83       	std	Z+2, r26	; 0x02
     e8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e90:	fe 01       	movw	r30, r28
     e92:	e3 5b       	subi	r30, 0xB3	; 179
     e94:	ff 4f       	sbci	r31, 0xFF	; 255
     e96:	60 81       	ld	r22, Z
     e98:	71 81       	ldd	r23, Z+1	; 0x01
     e9a:	82 81       	ldd	r24, Z+2	; 0x02
     e9c:	93 81       	ldd	r25, Z+3	; 0x03
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	40 e8       	ldi	r20, 0x80	; 128
     ea4:	5f e3       	ldi	r21, 0x3F	; 63
     ea6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     eaa:	88 23       	and	r24, r24
     eac:	44 f4       	brge	.+16     	; 0xebe <LCD_voidInit+0xb2>
		__ticks = 1;
     eae:	fe 01       	movw	r30, r28
     eb0:	e5 5b       	subi	r30, 0xB5	; 181
     eb2:	ff 4f       	sbci	r31, 0xFF	; 255
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	91 83       	std	Z+1, r25	; 0x01
     eba:	80 83       	st	Z, r24
     ebc:	64 c0       	rjmp	.+200    	; 0xf86 <LCD_voidInit+0x17a>
	else if (__tmp > 65535)
     ebe:	fe 01       	movw	r30, r28
     ec0:	e3 5b       	subi	r30, 0xB3	; 179
     ec2:	ff 4f       	sbci	r31, 0xFF	; 255
     ec4:	60 81       	ld	r22, Z
     ec6:	71 81       	ldd	r23, Z+1	; 0x01
     ec8:	82 81       	ldd	r24, Z+2	; 0x02
     eca:	93 81       	ldd	r25, Z+3	; 0x03
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	3f ef       	ldi	r19, 0xFF	; 255
     ed0:	4f e7       	ldi	r20, 0x7F	; 127
     ed2:	57 e4       	ldi	r21, 0x47	; 71
     ed4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ed8:	18 16       	cp	r1, r24
     eda:	0c f0       	brlt	.+2      	; 0xede <LCD_voidInit+0xd2>
     edc:	43 c0       	rjmp	.+134    	; 0xf64 <LCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ede:	fe 01       	movw	r30, r28
     ee0:	ef 5a       	subi	r30, 0xAF	; 175
     ee2:	ff 4f       	sbci	r31, 0xFF	; 255
     ee4:	60 81       	ld	r22, Z
     ee6:	71 81       	ldd	r23, Z+1	; 0x01
     ee8:	82 81       	ldd	r24, Z+2	; 0x02
     eea:	93 81       	ldd	r25, Z+3	; 0x03
     eec:	20 e0       	ldi	r18, 0x00	; 0
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	40 e2       	ldi	r20, 0x20	; 32
     ef2:	51 e4       	ldi	r21, 0x41	; 65
     ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef8:	dc 01       	movw	r26, r24
     efa:	cb 01       	movw	r24, r22
     efc:	8e 01       	movw	r16, r28
     efe:	05 5b       	subi	r16, 0xB5	; 181
     f00:	1f 4f       	sbci	r17, 0xFF	; 255
     f02:	bc 01       	movw	r22, r24
     f04:	cd 01       	movw	r24, r26
     f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	f8 01       	movw	r30, r16
     f10:	91 83       	std	Z+1, r25	; 0x01
     f12:	80 83       	st	Z, r24
     f14:	1f c0       	rjmp	.+62     	; 0xf54 <LCD_voidInit+0x148>
     f16:	fe 01       	movw	r30, r28
     f18:	e7 5b       	subi	r30, 0xB7	; 183
     f1a:	ff 4f       	sbci	r31, 0xFF	; 255
     f1c:	88 ec       	ldi	r24, 0xC8	; 200
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	91 83       	std	Z+1, r25	; 0x01
     f22:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f24:	fe 01       	movw	r30, r28
     f26:	e7 5b       	subi	r30, 0xB7	; 183
     f28:	ff 4f       	sbci	r31, 0xFF	; 255
     f2a:	80 81       	ld	r24, Z
     f2c:	91 81       	ldd	r25, Z+1	; 0x01
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	f1 f7       	brne	.-4      	; 0xf2e <LCD_voidInit+0x122>
     f32:	fe 01       	movw	r30, r28
     f34:	e7 5b       	subi	r30, 0xB7	; 183
     f36:	ff 4f       	sbci	r31, 0xFF	; 255
     f38:	91 83       	std	Z+1, r25	; 0x01
     f3a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f3c:	de 01       	movw	r26, r28
     f3e:	a5 5b       	subi	r26, 0xB5	; 181
     f40:	bf 4f       	sbci	r27, 0xFF	; 255
     f42:	fe 01       	movw	r30, r28
     f44:	e5 5b       	subi	r30, 0xB5	; 181
     f46:	ff 4f       	sbci	r31, 0xFF	; 255
     f48:	80 81       	ld	r24, Z
     f4a:	91 81       	ldd	r25, Z+1	; 0x01
     f4c:	01 97       	sbiw	r24, 0x01	; 1
     f4e:	11 96       	adiw	r26, 0x01	; 1
     f50:	9c 93       	st	X, r25
     f52:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f54:	fe 01       	movw	r30, r28
     f56:	e5 5b       	subi	r30, 0xB5	; 181
     f58:	ff 4f       	sbci	r31, 0xFF	; 255
     f5a:	80 81       	ld	r24, Z
     f5c:	91 81       	ldd	r25, Z+1	; 0x01
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	d1 f6       	brne	.-76     	; 0xf16 <LCD_voidInit+0x10a>
     f62:	27 c0       	rjmp	.+78     	; 0xfb2 <LCD_voidInit+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f64:	8e 01       	movw	r16, r28
     f66:	05 5b       	subi	r16, 0xB5	; 181
     f68:	1f 4f       	sbci	r17, 0xFF	; 255
     f6a:	fe 01       	movw	r30, r28
     f6c:	e3 5b       	subi	r30, 0xB3	; 179
     f6e:	ff 4f       	sbci	r31, 0xFF	; 255
     f70:	60 81       	ld	r22, Z
     f72:	71 81       	ldd	r23, Z+1	; 0x01
     f74:	82 81       	ldd	r24, Z+2	; 0x02
     f76:	93 81       	ldd	r25, Z+3	; 0x03
     f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	f8 01       	movw	r30, r16
     f82:	91 83       	std	Z+1, r25	; 0x01
     f84:	80 83       	st	Z, r24
     f86:	de 01       	movw	r26, r28
     f88:	a9 5b       	subi	r26, 0xB9	; 185
     f8a:	bf 4f       	sbci	r27, 0xFF	; 255
     f8c:	fe 01       	movw	r30, r28
     f8e:	e5 5b       	subi	r30, 0xB5	; 181
     f90:	ff 4f       	sbci	r31, 0xFF	; 255
     f92:	80 81       	ld	r24, Z
     f94:	91 81       	ldd	r25, Z+1	; 0x01
     f96:	8d 93       	st	X+, r24
     f98:	9c 93       	st	X, r25
     f9a:	fe 01       	movw	r30, r28
     f9c:	e9 5b       	subi	r30, 0xB9	; 185
     f9e:	ff 4f       	sbci	r31, 0xFF	; 255
     fa0:	80 81       	ld	r24, Z
     fa2:	91 81       	ldd	r25, Z+1	; 0x01
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	f1 f7       	brne	.-4      	; 0xfa4 <LCD_voidInit+0x198>
     fa8:	fe 01       	movw	r30, r28
     faa:	e9 5b       	subi	r30, 0xB9	; 185
     fac:	ff 4f       	sbci	r31, 0xFF	; 255
     fae:	91 83       	std	Z+1, r25	; 0x01
     fb0:	80 83       	st	Z, r24

	_delay_ms(30);
	LCD_voidSendCommand(lcd_Home);
     fb2:	82 e0       	ldi	r24, 0x02	; 2
     fb4:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_voidSendCommand>
     fb8:	fe 01       	movw	r30, r28
     fba:	ed 5b       	subi	r30, 0xBD	; 189
     fbc:	ff 4f       	sbci	r31, 0xFF	; 255
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	a0 ea       	ldi	r26, 0xA0	; 160
     fc4:	b0 e4       	ldi	r27, 0x40	; 64
     fc6:	80 83       	st	Z, r24
     fc8:	91 83       	std	Z+1, r25	; 0x01
     fca:	a2 83       	std	Z+2, r26	; 0x02
     fcc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fce:	8e 01       	movw	r16, r28
     fd0:	01 5c       	subi	r16, 0xC1	; 193
     fd2:	1f 4f       	sbci	r17, 0xFF	; 255
     fd4:	fe 01       	movw	r30, r28
     fd6:	ed 5b       	subi	r30, 0xBD	; 189
     fd8:	ff 4f       	sbci	r31, 0xFF	; 255
     fda:	60 81       	ld	r22, Z
     fdc:	71 81       	ldd	r23, Z+1	; 0x01
     fde:	82 81       	ldd	r24, Z+2	; 0x02
     fe0:	93 81       	ldd	r25, Z+3	; 0x03
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	4a ef       	ldi	r20, 0xFA	; 250
     fe8:	54 e4       	ldi	r21, 0x44	; 68
     fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	f8 01       	movw	r30, r16
     ff4:	80 83       	st	Z, r24
     ff6:	91 83       	std	Z+1, r25	; 0x01
     ff8:	a2 83       	std	Z+2, r26	; 0x02
     ffa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ffc:	fe 01       	movw	r30, r28
     ffe:	ff 96       	adiw	r30, 0x3f	; 63
    1000:	60 81       	ld	r22, Z
    1002:	71 81       	ldd	r23, Z+1	; 0x01
    1004:	82 81       	ldd	r24, Z+2	; 0x02
    1006:	93 81       	ldd	r25, Z+3	; 0x03
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e8       	ldi	r20, 0x80	; 128
    100e:	5f e3       	ldi	r21, 0x3F	; 63
    1010:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1014:	88 23       	and	r24, r24
    1016:	2c f4       	brge	.+10     	; 0x1022 <LCD_voidInit+0x216>
		__ticks = 1;
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	9e af       	std	Y+62, r25	; 0x3e
    101e:	8d af       	std	Y+61, r24	; 0x3d
    1020:	46 c0       	rjmp	.+140    	; 0x10ae <LCD_voidInit+0x2a2>
	else if (__tmp > 65535)
    1022:	fe 01       	movw	r30, r28
    1024:	ff 96       	adiw	r30, 0x3f	; 63
    1026:	60 81       	ld	r22, Z
    1028:	71 81       	ldd	r23, Z+1	; 0x01
    102a:	82 81       	ldd	r24, Z+2	; 0x02
    102c:	93 81       	ldd	r25, Z+3	; 0x03
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	3f ef       	ldi	r19, 0xFF	; 255
    1032:	4f e7       	ldi	r20, 0x7F	; 127
    1034:	57 e4       	ldi	r21, 0x47	; 71
    1036:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    103a:	18 16       	cp	r1, r24
    103c:	64 f5       	brge	.+88     	; 0x1096 <LCD_voidInit+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    103e:	fe 01       	movw	r30, r28
    1040:	ed 5b       	subi	r30, 0xBD	; 189
    1042:	ff 4f       	sbci	r31, 0xFF	; 255
    1044:	60 81       	ld	r22, Z
    1046:	71 81       	ldd	r23, Z+1	; 0x01
    1048:	82 81       	ldd	r24, Z+2	; 0x02
    104a:	93 81       	ldd	r25, Z+3	; 0x03
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	40 e2       	ldi	r20, 0x20	; 32
    1052:	51 e4       	ldi	r21, 0x41	; 65
    1054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	bc 01       	movw	r22, r24
    105e:	cd 01       	movw	r24, r26
    1060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	9e af       	std	Y+62, r25	; 0x3e
    106a:	8d af       	std	Y+61, r24	; 0x3d
    106c:	0f c0       	rjmp	.+30     	; 0x108c <LCD_voidInit+0x280>
    106e:	88 ec       	ldi	r24, 0xC8	; 200
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	9c af       	std	Y+60, r25	; 0x3c
    1074:	8b af       	std	Y+59, r24	; 0x3b
    1076:	8b ad       	ldd	r24, Y+59	; 0x3b
    1078:	9c ad       	ldd	r25, Y+60	; 0x3c
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	f1 f7       	brne	.-4      	; 0x107a <LCD_voidInit+0x26e>
    107e:	9c af       	std	Y+60, r25	; 0x3c
    1080:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1082:	8d ad       	ldd	r24, Y+61	; 0x3d
    1084:	9e ad       	ldd	r25, Y+62	; 0x3e
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	9e af       	std	Y+62, r25	; 0x3e
    108a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    108c:	8d ad       	ldd	r24, Y+61	; 0x3d
    108e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1090:	00 97       	sbiw	r24, 0x00	; 0
    1092:	69 f7       	brne	.-38     	; 0x106e <LCD_voidInit+0x262>
    1094:	16 c0       	rjmp	.+44     	; 0x10c2 <LCD_voidInit+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1096:	fe 01       	movw	r30, r28
    1098:	ff 96       	adiw	r30, 0x3f	; 63
    109a:	60 81       	ld	r22, Z
    109c:	71 81       	ldd	r23, Z+1	; 0x01
    109e:	82 81       	ldd	r24, Z+2	; 0x02
    10a0:	93 81       	ldd	r25, Z+3	; 0x03
    10a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a6:	dc 01       	movw	r26, r24
    10a8:	cb 01       	movw	r24, r22
    10aa:	9e af       	std	Y+62, r25	; 0x3e
    10ac:	8d af       	std	Y+61, r24	; 0x3d
    10ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    10b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    10b2:	9a af       	std	Y+58, r25	; 0x3a
    10b4:	89 af       	std	Y+57, r24	; 0x39
    10b6:	89 ad       	ldd	r24, Y+57	; 0x39
    10b8:	9a ad       	ldd	r25, Y+58	; 0x3a
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	f1 f7       	brne	.-4      	; 0x10ba <LCD_voidInit+0x2ae>
    10be:	9a af       	std	Y+58, r25	; 0x3a
    10c0:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);
	LCD_voidSendCommand(lcd_FunctionSet8bit);
    10c2:	88 e3       	ldi	r24, 0x38	; 56
    10c4:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_voidSendCommand>
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	a0 ea       	ldi	r26, 0xA0	; 160
    10ce:	b0 e4       	ldi	r27, 0x40	; 64
    10d0:	8d ab       	std	Y+53, r24	; 0x35
    10d2:	9e ab       	std	Y+54, r25	; 0x36
    10d4:	af ab       	std	Y+55, r26	; 0x37
    10d6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d8:	6d a9       	ldd	r22, Y+53	; 0x35
    10da:	7e a9       	ldd	r23, Y+54	; 0x36
    10dc:	8f a9       	ldd	r24, Y+55	; 0x37
    10de:	98 ad       	ldd	r25, Y+56	; 0x38
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	4a ef       	ldi	r20, 0xFA	; 250
    10e6:	54 e4       	ldi	r21, 0x44	; 68
    10e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	89 ab       	std	Y+49, r24	; 0x31
    10f2:	9a ab       	std	Y+50, r25	; 0x32
    10f4:	ab ab       	std	Y+51, r26	; 0x33
    10f6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    10f8:	69 a9       	ldd	r22, Y+49	; 0x31
    10fa:	7a a9       	ldd	r23, Y+50	; 0x32
    10fc:	8b a9       	ldd	r24, Y+51	; 0x33
    10fe:	9c a9       	ldd	r25, Y+52	; 0x34
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	40 e8       	ldi	r20, 0x80	; 128
    1106:	5f e3       	ldi	r21, 0x3F	; 63
    1108:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    110c:	88 23       	and	r24, r24
    110e:	2c f4       	brge	.+10     	; 0x111a <LCD_voidInit+0x30e>
		__ticks = 1;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	98 ab       	std	Y+48, r25	; 0x30
    1116:	8f a7       	std	Y+47, r24	; 0x2f
    1118:	3f c0       	rjmp	.+126    	; 0x1198 <LCD_voidInit+0x38c>
	else if (__tmp > 65535)
    111a:	69 a9       	ldd	r22, Y+49	; 0x31
    111c:	7a a9       	ldd	r23, Y+50	; 0x32
    111e:	8b a9       	ldd	r24, Y+51	; 0x33
    1120:	9c a9       	ldd	r25, Y+52	; 0x34
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	3f ef       	ldi	r19, 0xFF	; 255
    1126:	4f e7       	ldi	r20, 0x7F	; 127
    1128:	57 e4       	ldi	r21, 0x47	; 71
    112a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    112e:	18 16       	cp	r1, r24
    1130:	4c f5       	brge	.+82     	; 0x1184 <LCD_voidInit+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1132:	6d a9       	ldd	r22, Y+53	; 0x35
    1134:	7e a9       	ldd	r23, Y+54	; 0x36
    1136:	8f a9       	ldd	r24, Y+55	; 0x37
    1138:	98 ad       	ldd	r25, Y+56	; 0x38
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	40 e2       	ldi	r20, 0x20	; 32
    1140:	51 e4       	ldi	r21, 0x41	; 65
    1142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	bc 01       	movw	r22, r24
    114c:	cd 01       	movw	r24, r26
    114e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	98 ab       	std	Y+48, r25	; 0x30
    1158:	8f a7       	std	Y+47, r24	; 0x2f
    115a:	0f c0       	rjmp	.+30     	; 0x117a <LCD_voidInit+0x36e>
    115c:	88 ec       	ldi	r24, 0xC8	; 200
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	9e a7       	std	Y+46, r25	; 0x2e
    1162:	8d a7       	std	Y+45, r24	; 0x2d
    1164:	8d a5       	ldd	r24, Y+45	; 0x2d
    1166:	9e a5       	ldd	r25, Y+46	; 0x2e
    1168:	01 97       	sbiw	r24, 0x01	; 1
    116a:	f1 f7       	brne	.-4      	; 0x1168 <LCD_voidInit+0x35c>
    116c:	9e a7       	std	Y+46, r25	; 0x2e
    116e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1170:	8f a5       	ldd	r24, Y+47	; 0x2f
    1172:	98 a9       	ldd	r25, Y+48	; 0x30
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	98 ab       	std	Y+48, r25	; 0x30
    1178:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    117a:	8f a5       	ldd	r24, Y+47	; 0x2f
    117c:	98 a9       	ldd	r25, Y+48	; 0x30
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	69 f7       	brne	.-38     	; 0x115c <LCD_voidInit+0x350>
    1182:	14 c0       	rjmp	.+40     	; 0x11ac <LCD_voidInit+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1184:	69 a9       	ldd	r22, Y+49	; 0x31
    1186:	7a a9       	ldd	r23, Y+50	; 0x32
    1188:	8b a9       	ldd	r24, Y+51	; 0x33
    118a:	9c a9       	ldd	r25, Y+52	; 0x34
    118c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	98 ab       	std	Y+48, r25	; 0x30
    1196:	8f a7       	std	Y+47, r24	; 0x2f
    1198:	8f a5       	ldd	r24, Y+47	; 0x2f
    119a:	98 a9       	ldd	r25, Y+48	; 0x30
    119c:	9c a7       	std	Y+44, r25	; 0x2c
    119e:	8b a7       	std	Y+43, r24	; 0x2b
    11a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    11a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    11a4:	01 97       	sbiw	r24, 0x01	; 1
    11a6:	f1 f7       	brne	.-4      	; 0x11a4 <LCD_voidInit+0x398>
    11a8:	9c a7       	std	Y+44, r25	; 0x2c
    11aa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	LCD_voidSendCommand(lcd_DisplayOn);
    11ac:	8c e0       	ldi	r24, 0x0C	; 12
    11ae:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_voidSendCommand>
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	a0 ea       	ldi	r26, 0xA0	; 160
    11b8:	b0 e4       	ldi	r27, 0x40	; 64
    11ba:	8f a3       	std	Y+39, r24	; 0x27
    11bc:	98 a7       	std	Y+40, r25	; 0x28
    11be:	a9 a7       	std	Y+41, r26	; 0x29
    11c0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11c2:	6f a1       	ldd	r22, Y+39	; 0x27
    11c4:	78 a5       	ldd	r23, Y+40	; 0x28
    11c6:	89 a5       	ldd	r24, Y+41	; 0x29
    11c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	4a ef       	ldi	r20, 0xFA	; 250
    11d0:	54 e4       	ldi	r21, 0x44	; 68
    11d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	8b a3       	std	Y+35, r24	; 0x23
    11dc:	9c a3       	std	Y+36, r25	; 0x24
    11de:	ad a3       	std	Y+37, r26	; 0x25
    11e0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    11e2:	6b a1       	ldd	r22, Y+35	; 0x23
    11e4:	7c a1       	ldd	r23, Y+36	; 0x24
    11e6:	8d a1       	ldd	r24, Y+37	; 0x25
    11e8:	9e a1       	ldd	r25, Y+38	; 0x26
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	40 e8       	ldi	r20, 0x80	; 128
    11f0:	5f e3       	ldi	r21, 0x3F	; 63
    11f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11f6:	88 23       	and	r24, r24
    11f8:	2c f4       	brge	.+10     	; 0x1204 <LCD_voidInit+0x3f8>
		__ticks = 1;
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	9a a3       	std	Y+34, r25	; 0x22
    1200:	89 a3       	std	Y+33, r24	; 0x21
    1202:	3f c0       	rjmp	.+126    	; 0x1282 <LCD_voidInit+0x476>
	else if (__tmp > 65535)
    1204:	6b a1       	ldd	r22, Y+35	; 0x23
    1206:	7c a1       	ldd	r23, Y+36	; 0x24
    1208:	8d a1       	ldd	r24, Y+37	; 0x25
    120a:	9e a1       	ldd	r25, Y+38	; 0x26
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	3f ef       	ldi	r19, 0xFF	; 255
    1210:	4f e7       	ldi	r20, 0x7F	; 127
    1212:	57 e4       	ldi	r21, 0x47	; 71
    1214:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1218:	18 16       	cp	r1, r24
    121a:	4c f5       	brge	.+82     	; 0x126e <LCD_voidInit+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    121c:	6f a1       	ldd	r22, Y+39	; 0x27
    121e:	78 a5       	ldd	r23, Y+40	; 0x28
    1220:	89 a5       	ldd	r24, Y+41	; 0x29
    1222:	9a a5       	ldd	r25, Y+42	; 0x2a
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	40 e2       	ldi	r20, 0x20	; 32
    122a:	51 e4       	ldi	r21, 0x41	; 65
    122c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	bc 01       	movw	r22, r24
    1236:	cd 01       	movw	r24, r26
    1238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	9a a3       	std	Y+34, r25	; 0x22
    1242:	89 a3       	std	Y+33, r24	; 0x21
    1244:	0f c0       	rjmp	.+30     	; 0x1264 <LCD_voidInit+0x458>
    1246:	88 ec       	ldi	r24, 0xC8	; 200
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	98 a3       	std	Y+32, r25	; 0x20
    124c:	8f 8f       	std	Y+31, r24	; 0x1f
    124e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1250:	98 a1       	ldd	r25, Y+32	; 0x20
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	f1 f7       	brne	.-4      	; 0x1252 <LCD_voidInit+0x446>
    1256:	98 a3       	std	Y+32, r25	; 0x20
    1258:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    125a:	89 a1       	ldd	r24, Y+33	; 0x21
    125c:	9a a1       	ldd	r25, Y+34	; 0x22
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	9a a3       	std	Y+34, r25	; 0x22
    1262:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1264:	89 a1       	ldd	r24, Y+33	; 0x21
    1266:	9a a1       	ldd	r25, Y+34	; 0x22
    1268:	00 97       	sbiw	r24, 0x00	; 0
    126a:	69 f7       	brne	.-38     	; 0x1246 <LCD_voidInit+0x43a>
    126c:	14 c0       	rjmp	.+40     	; 0x1296 <LCD_voidInit+0x48a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    126e:	6b a1       	ldd	r22, Y+35	; 0x23
    1270:	7c a1       	ldd	r23, Y+36	; 0x24
    1272:	8d a1       	ldd	r24, Y+37	; 0x25
    1274:	9e a1       	ldd	r25, Y+38	; 0x26
    1276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	9a a3       	std	Y+34, r25	; 0x22
    1280:	89 a3       	std	Y+33, r24	; 0x21
    1282:	89 a1       	ldd	r24, Y+33	; 0x21
    1284:	9a a1       	ldd	r25, Y+34	; 0x22
    1286:	9e 8f       	std	Y+30, r25	; 0x1e
    1288:	8d 8f       	std	Y+29, r24	; 0x1d
    128a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    128c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    128e:	01 97       	sbiw	r24, 0x01	; 1
    1290:	f1 f7       	brne	.-4      	; 0x128e <LCD_voidInit+0x482>
    1292:	9e 8f       	std	Y+30, r25	; 0x1e
    1294:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand(lcd_Clear);
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_voidSendCommand>
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	a0 ea       	ldi	r26, 0xA0	; 160
    12a2:	b0 e4       	ldi	r27, 0x40	; 64
    12a4:	89 8f       	std	Y+25, r24	; 0x19
    12a6:	9a 8f       	std	Y+26, r25	; 0x1a
    12a8:	ab 8f       	std	Y+27, r26	; 0x1b
    12aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ac:	69 8d       	ldd	r22, Y+25	; 0x19
    12ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	4a ef       	ldi	r20, 0xFA	; 250
    12ba:	54 e4       	ldi	r21, 0x44	; 68
    12bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	8d 8b       	std	Y+21, r24	; 0x15
    12c6:	9e 8b       	std	Y+22, r25	; 0x16
    12c8:	af 8b       	std	Y+23, r26	; 0x17
    12ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12cc:	6d 89       	ldd	r22, Y+21	; 0x15
    12ce:	7e 89       	ldd	r23, Y+22	; 0x16
    12d0:	8f 89       	ldd	r24, Y+23	; 0x17
    12d2:	98 8d       	ldd	r25, Y+24	; 0x18
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	40 e8       	ldi	r20, 0x80	; 128
    12da:	5f e3       	ldi	r21, 0x3F	; 63
    12dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12e0:	88 23       	and	r24, r24
    12e2:	2c f4       	brge	.+10     	; 0x12ee <LCD_voidInit+0x4e2>
		__ticks = 1;
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	9c 8b       	std	Y+20, r25	; 0x14
    12ea:	8b 8b       	std	Y+19, r24	; 0x13
    12ec:	3f c0       	rjmp	.+126    	; 0x136c <LCD_voidInit+0x560>
	else if (__tmp > 65535)
    12ee:	6d 89       	ldd	r22, Y+21	; 0x15
    12f0:	7e 89       	ldd	r23, Y+22	; 0x16
    12f2:	8f 89       	ldd	r24, Y+23	; 0x17
    12f4:	98 8d       	ldd	r25, Y+24	; 0x18
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	3f ef       	ldi	r19, 0xFF	; 255
    12fa:	4f e7       	ldi	r20, 0x7F	; 127
    12fc:	57 e4       	ldi	r21, 0x47	; 71
    12fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1302:	18 16       	cp	r1, r24
    1304:	4c f5       	brge	.+82     	; 0x1358 <LCD_voidInit+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1306:	69 8d       	ldd	r22, Y+25	; 0x19
    1308:	7a 8d       	ldd	r23, Y+26	; 0x1a
    130a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    130c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	40 e2       	ldi	r20, 0x20	; 32
    1314:	51 e4       	ldi	r21, 0x41	; 65
    1316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	bc 01       	movw	r22, r24
    1320:	cd 01       	movw	r24, r26
    1322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1326:	dc 01       	movw	r26, r24
    1328:	cb 01       	movw	r24, r22
    132a:	9c 8b       	std	Y+20, r25	; 0x14
    132c:	8b 8b       	std	Y+19, r24	; 0x13
    132e:	0f c0       	rjmp	.+30     	; 0x134e <LCD_voidInit+0x542>
    1330:	88 ec       	ldi	r24, 0xC8	; 200
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	9a 8b       	std	Y+18, r25	; 0x12
    1336:	89 8b       	std	Y+17, r24	; 0x11
    1338:	89 89       	ldd	r24, Y+17	; 0x11
    133a:	9a 89       	ldd	r25, Y+18	; 0x12
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	f1 f7       	brne	.-4      	; 0x133c <LCD_voidInit+0x530>
    1340:	9a 8b       	std	Y+18, r25	; 0x12
    1342:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1344:	8b 89       	ldd	r24, Y+19	; 0x13
    1346:	9c 89       	ldd	r25, Y+20	; 0x14
    1348:	01 97       	sbiw	r24, 0x01	; 1
    134a:	9c 8b       	std	Y+20, r25	; 0x14
    134c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    134e:	8b 89       	ldd	r24, Y+19	; 0x13
    1350:	9c 89       	ldd	r25, Y+20	; 0x14
    1352:	00 97       	sbiw	r24, 0x00	; 0
    1354:	69 f7       	brne	.-38     	; 0x1330 <LCD_voidInit+0x524>
    1356:	14 c0       	rjmp	.+40     	; 0x1380 <LCD_voidInit+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1358:	6d 89       	ldd	r22, Y+21	; 0x15
    135a:	7e 89       	ldd	r23, Y+22	; 0x16
    135c:	8f 89       	ldd	r24, Y+23	; 0x17
    135e:	98 8d       	ldd	r25, Y+24	; 0x18
    1360:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1364:	dc 01       	movw	r26, r24
    1366:	cb 01       	movw	r24, r22
    1368:	9c 8b       	std	Y+20, r25	; 0x14
    136a:	8b 8b       	std	Y+19, r24	; 0x13
    136c:	8b 89       	ldd	r24, Y+19	; 0x13
    136e:	9c 89       	ldd	r25, Y+20	; 0x14
    1370:	98 8b       	std	Y+16, r25	; 0x10
    1372:	8f 87       	std	Y+15, r24	; 0x0f
    1374:	8f 85       	ldd	r24, Y+15	; 0x0f
    1376:	98 89       	ldd	r25, Y+16	; 0x10
    1378:	01 97       	sbiw	r24, 0x01	; 1
    137a:	f1 f7       	brne	.-4      	; 0x1378 <LCD_voidInit+0x56c>
    137c:	98 8b       	std	Y+16, r25	; 0x10
    137e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	LCD_voidSendCommand(lcd_EntryMode);
    1380:	86 e0       	ldi	r24, 0x06	; 6
    1382:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_voidSendCommand>
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	a0 ea       	ldi	r26, 0xA0	; 160
    138c:	b0 e4       	ldi	r27, 0x40	; 64
    138e:	8b 87       	std	Y+11, r24	; 0x0b
    1390:	9c 87       	std	Y+12, r25	; 0x0c
    1392:	ad 87       	std	Y+13, r26	; 0x0d
    1394:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1396:	6b 85       	ldd	r22, Y+11	; 0x0b
    1398:	7c 85       	ldd	r23, Y+12	; 0x0c
    139a:	8d 85       	ldd	r24, Y+13	; 0x0d
    139c:	9e 85       	ldd	r25, Y+14	; 0x0e
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	4a ef       	ldi	r20, 0xFA	; 250
    13a4:	54 e4       	ldi	r21, 0x44	; 68
    13a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13aa:	dc 01       	movw	r26, r24
    13ac:	cb 01       	movw	r24, r22
    13ae:	8f 83       	std	Y+7, r24	; 0x07
    13b0:	98 87       	std	Y+8, r25	; 0x08
    13b2:	a9 87       	std	Y+9, r26	; 0x09
    13b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13b6:	6f 81       	ldd	r22, Y+7	; 0x07
    13b8:	78 85       	ldd	r23, Y+8	; 0x08
    13ba:	89 85       	ldd	r24, Y+9	; 0x09
    13bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	40 e8       	ldi	r20, 0x80	; 128
    13c4:	5f e3       	ldi	r21, 0x3F	; 63
    13c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13ca:	88 23       	and	r24, r24
    13cc:	2c f4       	brge	.+10     	; 0x13d8 <LCD_voidInit+0x5cc>
		__ticks = 1;
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	9e 83       	std	Y+6, r25	; 0x06
    13d4:	8d 83       	std	Y+5, r24	; 0x05
    13d6:	3f c0       	rjmp	.+126    	; 0x1456 <LCD_voidInit+0x64a>
	else if (__tmp > 65535)
    13d8:	6f 81       	ldd	r22, Y+7	; 0x07
    13da:	78 85       	ldd	r23, Y+8	; 0x08
    13dc:	89 85       	ldd	r24, Y+9	; 0x09
    13de:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	3f ef       	ldi	r19, 0xFF	; 255
    13e4:	4f e7       	ldi	r20, 0x7F	; 127
    13e6:	57 e4       	ldi	r21, 0x47	; 71
    13e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13ec:	18 16       	cp	r1, r24
    13ee:	4c f5       	brge	.+82     	; 0x1442 <LCD_voidInit+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    13f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    13f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	40 e2       	ldi	r20, 0x20	; 32
    13fe:	51 e4       	ldi	r21, 0x41	; 65
    1400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	bc 01       	movw	r22, r24
    140a:	cd 01       	movw	r24, r26
    140c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	9e 83       	std	Y+6, r25	; 0x06
    1416:	8d 83       	std	Y+5, r24	; 0x05
    1418:	0f c0       	rjmp	.+30     	; 0x1438 <LCD_voidInit+0x62c>
    141a:	88 ec       	ldi	r24, 0xC8	; 200
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	9c 83       	std	Y+4, r25	; 0x04
    1420:	8b 83       	std	Y+3, r24	; 0x03
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	9c 81       	ldd	r25, Y+4	; 0x04
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	f1 f7       	brne	.-4      	; 0x1426 <LCD_voidInit+0x61a>
    142a:	9c 83       	std	Y+4, r25	; 0x04
    142c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    142e:	8d 81       	ldd	r24, Y+5	; 0x05
    1430:	9e 81       	ldd	r25, Y+6	; 0x06
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	9e 83       	std	Y+6, r25	; 0x06
    1436:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1438:	8d 81       	ldd	r24, Y+5	; 0x05
    143a:	9e 81       	ldd	r25, Y+6	; 0x06
    143c:	00 97       	sbiw	r24, 0x00	; 0
    143e:	69 f7       	brne	.-38     	; 0x141a <LCD_voidInit+0x60e>
    1440:	14 c0       	rjmp	.+40     	; 0x146a <LCD_voidInit+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1442:	6f 81       	ldd	r22, Y+7	; 0x07
    1444:	78 85       	ldd	r23, Y+8	; 0x08
    1446:	89 85       	ldd	r24, Y+9	; 0x09
    1448:	9a 85       	ldd	r25, Y+10	; 0x0a
    144a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	9e 83       	std	Y+6, r25	; 0x06
    1454:	8d 83       	std	Y+5, r24	; 0x05
    1456:	8d 81       	ldd	r24, Y+5	; 0x05
    1458:	9e 81       	ldd	r25, Y+6	; 0x06
    145a:	9a 83       	std	Y+2, r25	; 0x02
    145c:	89 83       	std	Y+1, r24	; 0x01
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	9a 81       	ldd	r25, Y+2	; 0x02
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	f1 f7       	brne	.-4      	; 0x1462 <LCD_voidInit+0x656>
    1466:	9a 83       	std	Y+2, r25	; 0x02
    1468:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    146a:	cc 5a       	subi	r28, 0xAC	; 172
    146c:	df 4f       	sbci	r29, 0xFF	; 255
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	f8 94       	cli
    1472:	de bf       	out	0x3e, r29	; 62
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	cd bf       	out	0x3d, r28	; 61
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	1f 91       	pop	r17
    147e:	0f 91       	pop	r16
    1480:	08 95       	ret

00001482 <LCD_voidInit_4bitMode>:
void LCD_voidInit_4bitMode(void){
    1482:	0f 93       	push	r16
    1484:	1f 93       	push	r17
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	c4 55       	subi	r28, 0x54	; 84
    1490:	d0 40       	sbci	r29, 0x00	; 0
    1492:	0f b6       	in	r0, 0x3f	; 63
    1494:	f8 94       	cli
    1496:	de bf       	out	0x3e, r29	; 62
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	cd bf       	out	0x3d, r28	; 61
	/* Pin Direction*/
	DIO_voidWritePort(lcd_DATAPORT, DIO_LOW);
    149c:	84 e0       	ldi	r24, 0x04	; 4
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <DIO_voidWritePort>
	DIO_voidWritePin (lcd_DATAPORT, DIO_PIN_NUM_D4, DIO_OUTPUT);
    14a4:	84 e0       	ldi	r24, 0x04	; 4
    14a6:	64 e0       	ldi	r22, 0x04	; 4
    14a8:	41 e0       	ldi	r20, 0x01	; 1
    14aa:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
	DIO_voidWritePin (lcd_DATAPORT, DIO_PIN_NUM_D5, DIO_OUTPUT);
    14ae:	84 e0       	ldi	r24, 0x04	; 4
    14b0:	65 e0       	ldi	r22, 0x05	; 5
    14b2:	41 e0       	ldi	r20, 0x01	; 1
    14b4:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
	DIO_voidWritePin (lcd_DATAPORT, DIO_PIN_NUM_D6, DIO_OUTPUT);
    14b8:	84 e0       	ldi	r24, 0x04	; 4
    14ba:	66 e0       	ldi	r22, 0x06	; 6
    14bc:	41 e0       	ldi	r20, 0x01	; 1
    14be:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
	DIO_voidWritePin (lcd_DATAPORT, DIO_PIN_NUM_D7, DIO_OUTPUT);
    14c2:	84 e0       	ldi	r24, 0x04	; 4
    14c4:	67 e0       	ldi	r22, 0x07	; 7
    14c6:	41 e0       	ldi	r20, 0x01	; 1
    14c8:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>

	DIO_voidWritePin (lcd_CONTROLPORT, lcd_RSPIN, DIO_OUTPUT);
    14cc:	83 e0       	ldi	r24, 0x03	; 3
    14ce:	62 e0       	ldi	r22, 0x02	; 2
    14d0:	41 e0       	ldi	r20, 0x01	; 1
    14d2:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
	//DIO_voidWritePin (lcd_CONTROLPORT, lcd_RWPIN, DIO_OUTPUT);
	DIO_voidWritePin (lcd_CONTROLPORT, lcd_EPIN , DIO_OUTPUT);
    14d6:	83 e0       	ldi	r24, 0x03	; 3
    14d8:	63 e0       	ldi	r22, 0x03	; 3
    14da:	41 e0       	ldi	r20, 0x01	; 1
    14dc:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
	/* Make Enable Low*/
	DIO_voidWritePin (lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    14e0:	83 e0       	ldi	r24, 0x03	; 3
    14e2:	63 e0       	ldi	r22, 0x03	; 3
    14e4:	40 e0       	ldi	r20, 0x00	; 0
    14e6:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
    14ea:	fe 01       	movw	r30, r28
    14ec:	ef 5a       	subi	r30, 0xAF	; 175
    14ee:	ff 4f       	sbci	r31, 0xFF	; 255
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	a8 e4       	ldi	r26, 0x48	; 72
    14f6:	b2 e4       	ldi	r27, 0x42	; 66
    14f8:	80 83       	st	Z, r24
    14fa:	91 83       	std	Z+1, r25	; 0x01
    14fc:	a2 83       	std	Z+2, r26	; 0x02
    14fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1500:	8e 01       	movw	r16, r28
    1502:	03 5b       	subi	r16, 0xB3	; 179
    1504:	1f 4f       	sbci	r17, 0xFF	; 255
    1506:	fe 01       	movw	r30, r28
    1508:	ef 5a       	subi	r30, 0xAF	; 175
    150a:	ff 4f       	sbci	r31, 0xFF	; 255
    150c:	60 81       	ld	r22, Z
    150e:	71 81       	ldd	r23, Z+1	; 0x01
    1510:	82 81       	ldd	r24, Z+2	; 0x02
    1512:	93 81       	ldd	r25, Z+3	; 0x03
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	4a ef       	ldi	r20, 0xFA	; 250
    151a:	54 e4       	ldi	r21, 0x44	; 68
    151c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	f8 01       	movw	r30, r16
    1526:	80 83       	st	Z, r24
    1528:	91 83       	std	Z+1, r25	; 0x01
    152a:	a2 83       	std	Z+2, r26	; 0x02
    152c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    152e:	fe 01       	movw	r30, r28
    1530:	e3 5b       	subi	r30, 0xB3	; 179
    1532:	ff 4f       	sbci	r31, 0xFF	; 255
    1534:	60 81       	ld	r22, Z
    1536:	71 81       	ldd	r23, Z+1	; 0x01
    1538:	82 81       	ldd	r24, Z+2	; 0x02
    153a:	93 81       	ldd	r25, Z+3	; 0x03
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	40 e8       	ldi	r20, 0x80	; 128
    1542:	5f e3       	ldi	r21, 0x3F	; 63
    1544:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1548:	88 23       	and	r24, r24
    154a:	44 f4       	brge	.+16     	; 0x155c <LCD_voidInit_4bitMode+0xda>
		__ticks = 1;
    154c:	fe 01       	movw	r30, r28
    154e:	e5 5b       	subi	r30, 0xB5	; 181
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	91 83       	std	Z+1, r25	; 0x01
    1558:	80 83       	st	Z, r24
    155a:	64 c0       	rjmp	.+200    	; 0x1624 <LCD_voidInit_4bitMode+0x1a2>
	else if (__tmp > 65535)
    155c:	fe 01       	movw	r30, r28
    155e:	e3 5b       	subi	r30, 0xB3	; 179
    1560:	ff 4f       	sbci	r31, 0xFF	; 255
    1562:	60 81       	ld	r22, Z
    1564:	71 81       	ldd	r23, Z+1	; 0x01
    1566:	82 81       	ldd	r24, Z+2	; 0x02
    1568:	93 81       	ldd	r25, Z+3	; 0x03
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	3f ef       	ldi	r19, 0xFF	; 255
    156e:	4f e7       	ldi	r20, 0x7F	; 127
    1570:	57 e4       	ldi	r21, 0x47	; 71
    1572:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1576:	18 16       	cp	r1, r24
    1578:	0c f0       	brlt	.+2      	; 0x157c <LCD_voidInit_4bitMode+0xfa>
    157a:	43 c0       	rjmp	.+134    	; 0x1602 <LCD_voidInit_4bitMode+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    157c:	fe 01       	movw	r30, r28
    157e:	ef 5a       	subi	r30, 0xAF	; 175
    1580:	ff 4f       	sbci	r31, 0xFF	; 255
    1582:	60 81       	ld	r22, Z
    1584:	71 81       	ldd	r23, Z+1	; 0x01
    1586:	82 81       	ldd	r24, Z+2	; 0x02
    1588:	93 81       	ldd	r25, Z+3	; 0x03
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	40 e2       	ldi	r20, 0x20	; 32
    1590:	51 e4       	ldi	r21, 0x41	; 65
    1592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	8e 01       	movw	r16, r28
    159c:	05 5b       	subi	r16, 0xB5	; 181
    159e:	1f 4f       	sbci	r17, 0xFF	; 255
    15a0:	bc 01       	movw	r22, r24
    15a2:	cd 01       	movw	r24, r26
    15a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	f8 01       	movw	r30, r16
    15ae:	91 83       	std	Z+1, r25	; 0x01
    15b0:	80 83       	st	Z, r24
    15b2:	1f c0       	rjmp	.+62     	; 0x15f2 <LCD_voidInit_4bitMode+0x170>
    15b4:	fe 01       	movw	r30, r28
    15b6:	e7 5b       	subi	r30, 0xB7	; 183
    15b8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ba:	88 ec       	ldi	r24, 0xC8	; 200
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	91 83       	std	Z+1, r25	; 0x01
    15c0:	80 83       	st	Z, r24
    15c2:	fe 01       	movw	r30, r28
    15c4:	e7 5b       	subi	r30, 0xB7	; 183
    15c6:	ff 4f       	sbci	r31, 0xFF	; 255
    15c8:	80 81       	ld	r24, Z
    15ca:	91 81       	ldd	r25, Z+1	; 0x01
    15cc:	01 97       	sbiw	r24, 0x01	; 1
    15ce:	f1 f7       	brne	.-4      	; 0x15cc <LCD_voidInit_4bitMode+0x14a>
    15d0:	fe 01       	movw	r30, r28
    15d2:	e7 5b       	subi	r30, 0xB7	; 183
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	91 83       	std	Z+1, r25	; 0x01
    15d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15da:	de 01       	movw	r26, r28
    15dc:	a5 5b       	subi	r26, 0xB5	; 181
    15de:	bf 4f       	sbci	r27, 0xFF	; 255
    15e0:	fe 01       	movw	r30, r28
    15e2:	e5 5b       	subi	r30, 0xB5	; 181
    15e4:	ff 4f       	sbci	r31, 0xFF	; 255
    15e6:	80 81       	ld	r24, Z
    15e8:	91 81       	ldd	r25, Z+1	; 0x01
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	11 96       	adiw	r26, 0x01	; 1
    15ee:	9c 93       	st	X, r25
    15f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15f2:	fe 01       	movw	r30, r28
    15f4:	e5 5b       	subi	r30, 0xB5	; 181
    15f6:	ff 4f       	sbci	r31, 0xFF	; 255
    15f8:	80 81       	ld	r24, Z
    15fa:	91 81       	ldd	r25, Z+1	; 0x01
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	d1 f6       	brne	.-76     	; 0x15b4 <LCD_voidInit_4bitMode+0x132>
    1600:	27 c0       	rjmp	.+78     	; 0x1650 <LCD_voidInit_4bitMode+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1602:	8e 01       	movw	r16, r28
    1604:	05 5b       	subi	r16, 0xB5	; 181
    1606:	1f 4f       	sbci	r17, 0xFF	; 255
    1608:	fe 01       	movw	r30, r28
    160a:	e3 5b       	subi	r30, 0xB3	; 179
    160c:	ff 4f       	sbci	r31, 0xFF	; 255
    160e:	60 81       	ld	r22, Z
    1610:	71 81       	ldd	r23, Z+1	; 0x01
    1612:	82 81       	ldd	r24, Z+2	; 0x02
    1614:	93 81       	ldd	r25, Z+3	; 0x03
    1616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	f8 01       	movw	r30, r16
    1620:	91 83       	std	Z+1, r25	; 0x01
    1622:	80 83       	st	Z, r24
    1624:	de 01       	movw	r26, r28
    1626:	a9 5b       	subi	r26, 0xB9	; 185
    1628:	bf 4f       	sbci	r27, 0xFF	; 255
    162a:	fe 01       	movw	r30, r28
    162c:	e5 5b       	subi	r30, 0xB5	; 181
    162e:	ff 4f       	sbci	r31, 0xFF	; 255
    1630:	80 81       	ld	r24, Z
    1632:	91 81       	ldd	r25, Z+1	; 0x01
    1634:	8d 93       	st	X+, r24
    1636:	9c 93       	st	X, r25
    1638:	fe 01       	movw	r30, r28
    163a:	e9 5b       	subi	r30, 0xB9	; 185
    163c:	ff 4f       	sbci	r31, 0xFF	; 255
    163e:	80 81       	ld	r24, Z
    1640:	91 81       	ldd	r25, Z+1	; 0x01
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	f1 f7       	brne	.-4      	; 0x1642 <LCD_voidInit_4bitMode+0x1c0>
    1646:	fe 01       	movw	r30, r28
    1648:	e9 5b       	subi	r30, 0xB9	; 185
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	91 83       	std	Z+1, r25	; 0x01
    164e:	80 83       	st	Z, r24

	_delay_ms(50);
	LCD_voidSendCommand_4bitMode(lcd_Home);
    1650:	82 e0       	ldi	r24, 0x02	; 2
    1652:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_voidSendCommand_4bitMode>
    1656:	fe 01       	movw	r30, r28
    1658:	ed 5b       	subi	r30, 0xBD	; 189
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	a0 ea       	ldi	r26, 0xA0	; 160
    1662:	b0 e4       	ldi	r27, 0x40	; 64
    1664:	80 83       	st	Z, r24
    1666:	91 83       	std	Z+1, r25	; 0x01
    1668:	a2 83       	std	Z+2, r26	; 0x02
    166a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    166c:	8e 01       	movw	r16, r28
    166e:	01 5c       	subi	r16, 0xC1	; 193
    1670:	1f 4f       	sbci	r17, 0xFF	; 255
    1672:	fe 01       	movw	r30, r28
    1674:	ed 5b       	subi	r30, 0xBD	; 189
    1676:	ff 4f       	sbci	r31, 0xFF	; 255
    1678:	60 81       	ld	r22, Z
    167a:	71 81       	ldd	r23, Z+1	; 0x01
    167c:	82 81       	ldd	r24, Z+2	; 0x02
    167e:	93 81       	ldd	r25, Z+3	; 0x03
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	4a ef       	ldi	r20, 0xFA	; 250
    1686:	54 e4       	ldi	r21, 0x44	; 68
    1688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	f8 01       	movw	r30, r16
    1692:	80 83       	st	Z, r24
    1694:	91 83       	std	Z+1, r25	; 0x01
    1696:	a2 83       	std	Z+2, r26	; 0x02
    1698:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    169a:	fe 01       	movw	r30, r28
    169c:	ff 96       	adiw	r30, 0x3f	; 63
    169e:	60 81       	ld	r22, Z
    16a0:	71 81       	ldd	r23, Z+1	; 0x01
    16a2:	82 81       	ldd	r24, Z+2	; 0x02
    16a4:	93 81       	ldd	r25, Z+3	; 0x03
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	40 e8       	ldi	r20, 0x80	; 128
    16ac:	5f e3       	ldi	r21, 0x3F	; 63
    16ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16b2:	88 23       	and	r24, r24
    16b4:	2c f4       	brge	.+10     	; 0x16c0 <LCD_voidInit_4bitMode+0x23e>
		__ticks = 1;
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	9e af       	std	Y+62, r25	; 0x3e
    16bc:	8d af       	std	Y+61, r24	; 0x3d
    16be:	46 c0       	rjmp	.+140    	; 0x174c <LCD_voidInit_4bitMode+0x2ca>
	else if (__tmp > 65535)
    16c0:	fe 01       	movw	r30, r28
    16c2:	ff 96       	adiw	r30, 0x3f	; 63
    16c4:	60 81       	ld	r22, Z
    16c6:	71 81       	ldd	r23, Z+1	; 0x01
    16c8:	82 81       	ldd	r24, Z+2	; 0x02
    16ca:	93 81       	ldd	r25, Z+3	; 0x03
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	3f ef       	ldi	r19, 0xFF	; 255
    16d0:	4f e7       	ldi	r20, 0x7F	; 127
    16d2:	57 e4       	ldi	r21, 0x47	; 71
    16d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16d8:	18 16       	cp	r1, r24
    16da:	64 f5       	brge	.+88     	; 0x1734 <LCD_voidInit_4bitMode+0x2b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16dc:	fe 01       	movw	r30, r28
    16de:	ed 5b       	subi	r30, 0xBD	; 189
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	60 81       	ld	r22, Z
    16e4:	71 81       	ldd	r23, Z+1	; 0x01
    16e6:	82 81       	ldd	r24, Z+2	; 0x02
    16e8:	93 81       	ldd	r25, Z+3	; 0x03
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	40 e2       	ldi	r20, 0x20	; 32
    16f0:	51 e4       	ldi	r21, 0x41	; 65
    16f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	bc 01       	movw	r22, r24
    16fc:	cd 01       	movw	r24, r26
    16fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	9e af       	std	Y+62, r25	; 0x3e
    1708:	8d af       	std	Y+61, r24	; 0x3d
    170a:	0f c0       	rjmp	.+30     	; 0x172a <LCD_voidInit_4bitMode+0x2a8>
    170c:	88 ec       	ldi	r24, 0xC8	; 200
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	9c af       	std	Y+60, r25	; 0x3c
    1712:	8b af       	std	Y+59, r24	; 0x3b
    1714:	8b ad       	ldd	r24, Y+59	; 0x3b
    1716:	9c ad       	ldd	r25, Y+60	; 0x3c
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <LCD_voidInit_4bitMode+0x296>
    171c:	9c af       	std	Y+60, r25	; 0x3c
    171e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1720:	8d ad       	ldd	r24, Y+61	; 0x3d
    1722:	9e ad       	ldd	r25, Y+62	; 0x3e
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	9e af       	std	Y+62, r25	; 0x3e
    1728:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172a:	8d ad       	ldd	r24, Y+61	; 0x3d
    172c:	9e ad       	ldd	r25, Y+62	; 0x3e
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	69 f7       	brne	.-38     	; 0x170c <LCD_voidInit_4bitMode+0x28a>
    1732:	16 c0       	rjmp	.+44     	; 0x1760 <LCD_voidInit_4bitMode+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1734:	fe 01       	movw	r30, r28
    1736:	ff 96       	adiw	r30, 0x3f	; 63
    1738:	60 81       	ld	r22, Z
    173a:	71 81       	ldd	r23, Z+1	; 0x01
    173c:	82 81       	ldd	r24, Z+2	; 0x02
    173e:	93 81       	ldd	r25, Z+3	; 0x03
    1740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	9e af       	std	Y+62, r25	; 0x3e
    174a:	8d af       	std	Y+61, r24	; 0x3d
    174c:	8d ad       	ldd	r24, Y+61	; 0x3d
    174e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1750:	9a af       	std	Y+58, r25	; 0x3a
    1752:	89 af       	std	Y+57, r24	; 0x39
    1754:	89 ad       	ldd	r24, Y+57	; 0x39
    1756:	9a ad       	ldd	r25, Y+58	; 0x3a
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	f1 f7       	brne	.-4      	; 0x1758 <LCD_voidInit_4bitMode+0x2d6>
    175c:	9a af       	std	Y+58, r25	; 0x3a
    175e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);
	LCD_voidSendCommand_4bitMode(lcd_FunctionSet4bit);
    1760:	88 e2       	ldi	r24, 0x28	; 40
    1762:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_voidSendCommand_4bitMode>
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	a0 ea       	ldi	r26, 0xA0	; 160
    176c:	b0 e4       	ldi	r27, 0x40	; 64
    176e:	8d ab       	std	Y+53, r24	; 0x35
    1770:	9e ab       	std	Y+54, r25	; 0x36
    1772:	af ab       	std	Y+55, r26	; 0x37
    1774:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1776:	6d a9       	ldd	r22, Y+53	; 0x35
    1778:	7e a9       	ldd	r23, Y+54	; 0x36
    177a:	8f a9       	ldd	r24, Y+55	; 0x37
    177c:	98 ad       	ldd	r25, Y+56	; 0x38
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	4a ef       	ldi	r20, 0xFA	; 250
    1784:	54 e4       	ldi	r21, 0x44	; 68
    1786:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	89 ab       	std	Y+49, r24	; 0x31
    1790:	9a ab       	std	Y+50, r25	; 0x32
    1792:	ab ab       	std	Y+51, r26	; 0x33
    1794:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1796:	69 a9       	ldd	r22, Y+49	; 0x31
    1798:	7a a9       	ldd	r23, Y+50	; 0x32
    179a:	8b a9       	ldd	r24, Y+51	; 0x33
    179c:	9c a9       	ldd	r25, Y+52	; 0x34
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	40 e8       	ldi	r20, 0x80	; 128
    17a4:	5f e3       	ldi	r21, 0x3F	; 63
    17a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17aa:	88 23       	and	r24, r24
    17ac:	2c f4       	brge	.+10     	; 0x17b8 <LCD_voidInit_4bitMode+0x336>
		__ticks = 1;
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	98 ab       	std	Y+48, r25	; 0x30
    17b4:	8f a7       	std	Y+47, r24	; 0x2f
    17b6:	3f c0       	rjmp	.+126    	; 0x1836 <LCD_voidInit_4bitMode+0x3b4>
	else if (__tmp > 65535)
    17b8:	69 a9       	ldd	r22, Y+49	; 0x31
    17ba:	7a a9       	ldd	r23, Y+50	; 0x32
    17bc:	8b a9       	ldd	r24, Y+51	; 0x33
    17be:	9c a9       	ldd	r25, Y+52	; 0x34
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	3f ef       	ldi	r19, 0xFF	; 255
    17c4:	4f e7       	ldi	r20, 0x7F	; 127
    17c6:	57 e4       	ldi	r21, 0x47	; 71
    17c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17cc:	18 16       	cp	r1, r24
    17ce:	4c f5       	brge	.+82     	; 0x1822 <LCD_voidInit_4bitMode+0x3a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d0:	6d a9       	ldd	r22, Y+53	; 0x35
    17d2:	7e a9       	ldd	r23, Y+54	; 0x36
    17d4:	8f a9       	ldd	r24, Y+55	; 0x37
    17d6:	98 ad       	ldd	r25, Y+56	; 0x38
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	40 e2       	ldi	r20, 0x20	; 32
    17de:	51 e4       	ldi	r21, 0x41	; 65
    17e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	bc 01       	movw	r22, r24
    17ea:	cd 01       	movw	r24, r26
    17ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	98 ab       	std	Y+48, r25	; 0x30
    17f6:	8f a7       	std	Y+47, r24	; 0x2f
    17f8:	0f c0       	rjmp	.+30     	; 0x1818 <LCD_voidInit_4bitMode+0x396>
    17fa:	88 ec       	ldi	r24, 0xC8	; 200
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	9e a7       	std	Y+46, r25	; 0x2e
    1800:	8d a7       	std	Y+45, r24	; 0x2d
    1802:	8d a5       	ldd	r24, Y+45	; 0x2d
    1804:	9e a5       	ldd	r25, Y+46	; 0x2e
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	f1 f7       	brne	.-4      	; 0x1806 <LCD_voidInit_4bitMode+0x384>
    180a:	9e a7       	std	Y+46, r25	; 0x2e
    180c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1810:	98 a9       	ldd	r25, Y+48	; 0x30
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	98 ab       	std	Y+48, r25	; 0x30
    1816:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1818:	8f a5       	ldd	r24, Y+47	; 0x2f
    181a:	98 a9       	ldd	r25, Y+48	; 0x30
    181c:	00 97       	sbiw	r24, 0x00	; 0
    181e:	69 f7       	brne	.-38     	; 0x17fa <LCD_voidInit_4bitMode+0x378>
    1820:	14 c0       	rjmp	.+40     	; 0x184a <LCD_voidInit_4bitMode+0x3c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1822:	69 a9       	ldd	r22, Y+49	; 0x31
    1824:	7a a9       	ldd	r23, Y+50	; 0x32
    1826:	8b a9       	ldd	r24, Y+51	; 0x33
    1828:	9c a9       	ldd	r25, Y+52	; 0x34
    182a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	98 ab       	std	Y+48, r25	; 0x30
    1834:	8f a7       	std	Y+47, r24	; 0x2f
    1836:	8f a5       	ldd	r24, Y+47	; 0x2f
    1838:	98 a9       	ldd	r25, Y+48	; 0x30
    183a:	9c a7       	std	Y+44, r25	; 0x2c
    183c:	8b a7       	std	Y+43, r24	; 0x2b
    183e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1840:	9c a5       	ldd	r25, Y+44	; 0x2c
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	f1 f7       	brne	.-4      	; 0x1842 <LCD_voidInit_4bitMode+0x3c0>
    1846:	9c a7       	std	Y+44, r25	; 0x2c
    1848:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	LCD_voidSendCommand_4bitMode(lcd_DisplayOn);
    184a:	8c e0       	ldi	r24, 0x0C	; 12
    184c:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_voidSendCommand_4bitMode>
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	a0 ea       	ldi	r26, 0xA0	; 160
    1856:	b0 e4       	ldi	r27, 0x40	; 64
    1858:	8f a3       	std	Y+39, r24	; 0x27
    185a:	98 a7       	std	Y+40, r25	; 0x28
    185c:	a9 a7       	std	Y+41, r26	; 0x29
    185e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1860:	6f a1       	ldd	r22, Y+39	; 0x27
    1862:	78 a5       	ldd	r23, Y+40	; 0x28
    1864:	89 a5       	ldd	r24, Y+41	; 0x29
    1866:	9a a5       	ldd	r25, Y+42	; 0x2a
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	4a ef       	ldi	r20, 0xFA	; 250
    186e:	54 e4       	ldi	r21, 0x44	; 68
    1870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	8b a3       	std	Y+35, r24	; 0x23
    187a:	9c a3       	std	Y+36, r25	; 0x24
    187c:	ad a3       	std	Y+37, r26	; 0x25
    187e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1880:	6b a1       	ldd	r22, Y+35	; 0x23
    1882:	7c a1       	ldd	r23, Y+36	; 0x24
    1884:	8d a1       	ldd	r24, Y+37	; 0x25
    1886:	9e a1       	ldd	r25, Y+38	; 0x26
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	40 e8       	ldi	r20, 0x80	; 128
    188e:	5f e3       	ldi	r21, 0x3F	; 63
    1890:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1894:	88 23       	and	r24, r24
    1896:	2c f4       	brge	.+10     	; 0x18a2 <LCD_voidInit_4bitMode+0x420>
		__ticks = 1;
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	9a a3       	std	Y+34, r25	; 0x22
    189e:	89 a3       	std	Y+33, r24	; 0x21
    18a0:	3f c0       	rjmp	.+126    	; 0x1920 <LCD_voidInit_4bitMode+0x49e>
	else if (__tmp > 65535)
    18a2:	6b a1       	ldd	r22, Y+35	; 0x23
    18a4:	7c a1       	ldd	r23, Y+36	; 0x24
    18a6:	8d a1       	ldd	r24, Y+37	; 0x25
    18a8:	9e a1       	ldd	r25, Y+38	; 0x26
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	3f ef       	ldi	r19, 0xFF	; 255
    18ae:	4f e7       	ldi	r20, 0x7F	; 127
    18b0:	57 e4       	ldi	r21, 0x47	; 71
    18b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18b6:	18 16       	cp	r1, r24
    18b8:	4c f5       	brge	.+82     	; 0x190c <LCD_voidInit_4bitMode+0x48a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ba:	6f a1       	ldd	r22, Y+39	; 0x27
    18bc:	78 a5       	ldd	r23, Y+40	; 0x28
    18be:	89 a5       	ldd	r24, Y+41	; 0x29
    18c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	40 e2       	ldi	r20, 0x20	; 32
    18c8:	51 e4       	ldi	r21, 0x41	; 65
    18ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	bc 01       	movw	r22, r24
    18d4:	cd 01       	movw	r24, r26
    18d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	9a a3       	std	Y+34, r25	; 0x22
    18e0:	89 a3       	std	Y+33, r24	; 0x21
    18e2:	0f c0       	rjmp	.+30     	; 0x1902 <LCD_voidInit_4bitMode+0x480>
    18e4:	88 ec       	ldi	r24, 0xC8	; 200
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	98 a3       	std	Y+32, r25	; 0x20
    18ea:	8f 8f       	std	Y+31, r24	; 0x1f
    18ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18ee:	98 a1       	ldd	r25, Y+32	; 0x20
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	f1 f7       	brne	.-4      	; 0x18f0 <LCD_voidInit_4bitMode+0x46e>
    18f4:	98 a3       	std	Y+32, r25	; 0x20
    18f6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f8:	89 a1       	ldd	r24, Y+33	; 0x21
    18fa:	9a a1       	ldd	r25, Y+34	; 0x22
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	9a a3       	std	Y+34, r25	; 0x22
    1900:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1902:	89 a1       	ldd	r24, Y+33	; 0x21
    1904:	9a a1       	ldd	r25, Y+34	; 0x22
    1906:	00 97       	sbiw	r24, 0x00	; 0
    1908:	69 f7       	brne	.-38     	; 0x18e4 <LCD_voidInit_4bitMode+0x462>
    190a:	14 c0       	rjmp	.+40     	; 0x1934 <LCD_voidInit_4bitMode+0x4b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190c:	6b a1       	ldd	r22, Y+35	; 0x23
    190e:	7c a1       	ldd	r23, Y+36	; 0x24
    1910:	8d a1       	ldd	r24, Y+37	; 0x25
    1912:	9e a1       	ldd	r25, Y+38	; 0x26
    1914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	9a a3       	std	Y+34, r25	; 0x22
    191e:	89 a3       	std	Y+33, r24	; 0x21
    1920:	89 a1       	ldd	r24, Y+33	; 0x21
    1922:	9a a1       	ldd	r25, Y+34	; 0x22
    1924:	9e 8f       	std	Y+30, r25	; 0x1e
    1926:	8d 8f       	std	Y+29, r24	; 0x1d
    1928:	8d 8d       	ldd	r24, Y+29	; 0x1d
    192a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	f1 f7       	brne	.-4      	; 0x192c <LCD_voidInit_4bitMode+0x4aa>
    1930:	9e 8f       	std	Y+30, r25	; 0x1e
    1932:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand_4bitMode(lcd_Clear);
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_voidSendCommand_4bitMode>
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	a0 ea       	ldi	r26, 0xA0	; 160
    1940:	b0 e4       	ldi	r27, 0x40	; 64
    1942:	89 8f       	std	Y+25, r24	; 0x19
    1944:	9a 8f       	std	Y+26, r25	; 0x1a
    1946:	ab 8f       	std	Y+27, r26	; 0x1b
    1948:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194a:	69 8d       	ldd	r22, Y+25	; 0x19
    194c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    194e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1950:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	4a ef       	ldi	r20, 0xFA	; 250
    1958:	54 e4       	ldi	r21, 0x44	; 68
    195a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	8d 8b       	std	Y+21, r24	; 0x15
    1964:	9e 8b       	std	Y+22, r25	; 0x16
    1966:	af 8b       	std	Y+23, r26	; 0x17
    1968:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    196a:	6d 89       	ldd	r22, Y+21	; 0x15
    196c:	7e 89       	ldd	r23, Y+22	; 0x16
    196e:	8f 89       	ldd	r24, Y+23	; 0x17
    1970:	98 8d       	ldd	r25, Y+24	; 0x18
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	40 e8       	ldi	r20, 0x80	; 128
    1978:	5f e3       	ldi	r21, 0x3F	; 63
    197a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    197e:	88 23       	and	r24, r24
    1980:	2c f4       	brge	.+10     	; 0x198c <LCD_voidInit_4bitMode+0x50a>
		__ticks = 1;
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	9c 8b       	std	Y+20, r25	; 0x14
    1988:	8b 8b       	std	Y+19, r24	; 0x13
    198a:	3f c0       	rjmp	.+126    	; 0x1a0a <LCD_voidInit_4bitMode+0x588>
	else if (__tmp > 65535)
    198c:	6d 89       	ldd	r22, Y+21	; 0x15
    198e:	7e 89       	ldd	r23, Y+22	; 0x16
    1990:	8f 89       	ldd	r24, Y+23	; 0x17
    1992:	98 8d       	ldd	r25, Y+24	; 0x18
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	3f ef       	ldi	r19, 0xFF	; 255
    1998:	4f e7       	ldi	r20, 0x7F	; 127
    199a:	57 e4       	ldi	r21, 0x47	; 71
    199c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19a0:	18 16       	cp	r1, r24
    19a2:	4c f5       	brge	.+82     	; 0x19f6 <LCD_voidInit_4bitMode+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a4:	69 8d       	ldd	r22, Y+25	; 0x19
    19a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	40 e2       	ldi	r20, 0x20	; 32
    19b2:	51 e4       	ldi	r21, 0x41	; 65
    19b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	bc 01       	movw	r22, r24
    19be:	cd 01       	movw	r24, r26
    19c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	9c 8b       	std	Y+20, r25	; 0x14
    19ca:	8b 8b       	std	Y+19, r24	; 0x13
    19cc:	0f c0       	rjmp	.+30     	; 0x19ec <LCD_voidInit_4bitMode+0x56a>
    19ce:	88 ec       	ldi	r24, 0xC8	; 200
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	9a 8b       	std	Y+18, r25	; 0x12
    19d4:	89 8b       	std	Y+17, r24	; 0x11
    19d6:	89 89       	ldd	r24, Y+17	; 0x11
    19d8:	9a 89       	ldd	r25, Y+18	; 0x12
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	f1 f7       	brne	.-4      	; 0x19da <LCD_voidInit_4bitMode+0x558>
    19de:	9a 8b       	std	Y+18, r25	; 0x12
    19e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e2:	8b 89       	ldd	r24, Y+19	; 0x13
    19e4:	9c 89       	ldd	r25, Y+20	; 0x14
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	9c 8b       	std	Y+20, r25	; 0x14
    19ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ec:	8b 89       	ldd	r24, Y+19	; 0x13
    19ee:	9c 89       	ldd	r25, Y+20	; 0x14
    19f0:	00 97       	sbiw	r24, 0x00	; 0
    19f2:	69 f7       	brne	.-38     	; 0x19ce <LCD_voidInit_4bitMode+0x54c>
    19f4:	14 c0       	rjmp	.+40     	; 0x1a1e <LCD_voidInit_4bitMode+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f6:	6d 89       	ldd	r22, Y+21	; 0x15
    19f8:	7e 89       	ldd	r23, Y+22	; 0x16
    19fa:	8f 89       	ldd	r24, Y+23	; 0x17
    19fc:	98 8d       	ldd	r25, Y+24	; 0x18
    19fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	9c 8b       	std	Y+20, r25	; 0x14
    1a08:	8b 8b       	std	Y+19, r24	; 0x13
    1a0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a0e:	98 8b       	std	Y+16, r25	; 0x10
    1a10:	8f 87       	std	Y+15, r24	; 0x0f
    1a12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a14:	98 89       	ldd	r25, Y+16	; 0x10
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	f1 f7       	brne	.-4      	; 0x1a16 <LCD_voidInit_4bitMode+0x594>
    1a1a:	98 8b       	std	Y+16, r25	; 0x10
    1a1c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	LCD_voidSendCommand_4bitMode(lcd_EntryMode);
    1a1e:	86 e0       	ldi	r24, 0x06	; 6
    1a20:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_voidSendCommand_4bitMode>
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	a0 ea       	ldi	r26, 0xA0	; 160
    1a2a:	b0 e4       	ldi	r27, 0x40	; 64
    1a2c:	8b 87       	std	Y+11, r24	; 0x0b
    1a2e:	9c 87       	std	Y+12, r25	; 0x0c
    1a30:	ad 87       	std	Y+13, r26	; 0x0d
    1a32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	4a ef       	ldi	r20, 0xFA	; 250
    1a42:	54 e4       	ldi	r21, 0x44	; 68
    1a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	8f 83       	std	Y+7, r24	; 0x07
    1a4e:	98 87       	std	Y+8, r25	; 0x08
    1a50:	a9 87       	std	Y+9, r26	; 0x09
    1a52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a54:	6f 81       	ldd	r22, Y+7	; 0x07
    1a56:	78 85       	ldd	r23, Y+8	; 0x08
    1a58:	89 85       	ldd	r24, Y+9	; 0x09
    1a5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	40 e8       	ldi	r20, 0x80	; 128
    1a62:	5f e3       	ldi	r21, 0x3F	; 63
    1a64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a68:	88 23       	and	r24, r24
    1a6a:	2c f4       	brge	.+10     	; 0x1a76 <LCD_voidInit_4bitMode+0x5f4>
		__ticks = 1;
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	9e 83       	std	Y+6, r25	; 0x06
    1a72:	8d 83       	std	Y+5, r24	; 0x05
    1a74:	3f c0       	rjmp	.+126    	; 0x1af4 <LCD_voidInit_4bitMode+0x672>
	else if (__tmp > 65535)
    1a76:	6f 81       	ldd	r22, Y+7	; 0x07
    1a78:	78 85       	ldd	r23, Y+8	; 0x08
    1a7a:	89 85       	ldd	r24, Y+9	; 0x09
    1a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	3f ef       	ldi	r19, 0xFF	; 255
    1a82:	4f e7       	ldi	r20, 0x7F	; 127
    1a84:	57 e4       	ldi	r21, 0x47	; 71
    1a86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a8a:	18 16       	cp	r1, r24
    1a8c:	4c f5       	brge	.+82     	; 0x1ae0 <LCD_voidInit_4bitMode+0x65e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	40 e2       	ldi	r20, 0x20	; 32
    1a9c:	51 e4       	ldi	r21, 0x41	; 65
    1a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	bc 01       	movw	r22, r24
    1aa8:	cd 01       	movw	r24, r26
    1aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	9e 83       	std	Y+6, r25	; 0x06
    1ab4:	8d 83       	std	Y+5, r24	; 0x05
    1ab6:	0f c0       	rjmp	.+30     	; 0x1ad6 <LCD_voidInit_4bitMode+0x654>
    1ab8:	88 ec       	ldi	r24, 0xC8	; 200
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	9c 83       	std	Y+4, r25	; 0x04
    1abe:	8b 83       	std	Y+3, r24	; 0x03
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac4:	01 97       	sbiw	r24, 0x01	; 1
    1ac6:	f1 f7       	brne	.-4      	; 0x1ac4 <LCD_voidInit_4bitMode+0x642>
    1ac8:	9c 83       	std	Y+4, r25	; 0x04
    1aca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1acc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ace:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	9e 83       	std	Y+6, r25	; 0x06
    1ad4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    1ada:	00 97       	sbiw	r24, 0x00	; 0
    1adc:	69 f7       	brne	.-38     	; 0x1ab8 <LCD_voidInit_4bitMode+0x636>
    1ade:	14 c0       	rjmp	.+40     	; 0x1b08 <LCD_voidInit_4bitMode+0x686>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae2:	78 85       	ldd	r23, Y+8	; 0x08
    1ae4:	89 85       	ldd	r24, Y+9	; 0x09
    1ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	9e 83       	std	Y+6, r25	; 0x06
    1af2:	8d 83       	std	Y+5, r24	; 0x05
    1af4:	8d 81       	ldd	r24, Y+5	; 0x05
    1af6:	9e 81       	ldd	r25, Y+6	; 0x06
    1af8:	9a 83       	std	Y+2, r25	; 0x02
    1afa:	89 83       	std	Y+1, r24	; 0x01
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	9a 81       	ldd	r25, Y+2	; 0x02
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	f1 f7       	brne	.-4      	; 0x1b00 <LCD_voidInit_4bitMode+0x67e>
    1b04:	9a 83       	std	Y+2, r25	; 0x02
    1b06:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    1b08:	cc 5a       	subi	r28, 0xAC	; 172
    1b0a:	df 4f       	sbci	r29, 0xFF	; 255
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	f8 94       	cli
    1b10:	de bf       	out	0x3e, r29	; 62
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	cd bf       	out	0x3d, r28	; 61
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	1f 91       	pop	r17
    1b1c:	0f 91       	pop	r16
    1b1e:	08 95       	ret

00001b20 <LCD_voidSendCommand>:
void LCD_voidSendCommand(uint8 u8CmdCpy){
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
    1b28:	2f 97       	sbiw	r28, 0x0f	; 15
    1b2a:	0f b6       	in	r0, 0x3f	; 63
    1b2c:	f8 94       	cli
    1b2e:	de bf       	out	0x3e, r29	; 62
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	cd bf       	out	0x3d, r28	; 61
    1b34:	8f 87       	std	Y+15, r24	; 0x0f
	/* Command(0) or Data(1) */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_RSPIN, DIO_LOW);
    1b36:	83 e0       	ldi	r24, 0x03	; 3
    1b38:	62 e0       	ldi	r22, 0x02	; 2
    1b3a:	40 e0       	ldi	r20, 0x00	; 0
    1b3c:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
	/* Read(1) or Write(0) */
	//DIO_voidWritePin(lcd_CONTROLPORT, lcd_RWPIN, DIO_LOW);
	/* Write Commands on Data Pins*/
	DIO_voidWritePort(lcd_DATAPORT, u8CmdCpy);
    1b40:	84 e0       	ldi	r24, 0x04	; 4
    1b42:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b44:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <DIO_voidWritePort>
	/* Enable Sequence */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    1b48:	83 e0       	ldi	r24, 0x03	; 3
    1b4a:	63 e0       	ldi	r22, 0x03	; 3
    1b4c:	41 e0       	ldi	r20, 0x01	; 1
    1b4e:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	a0 ea       	ldi	r26, 0xA0	; 160
    1b58:	b0 e4       	ldi	r27, 0x40	; 64
    1b5a:	8b 87       	std	Y+11, r24	; 0x0b
    1b5c:	9c 87       	std	Y+12, r25	; 0x0c
    1b5e:	ad 87       	std	Y+13, r26	; 0x0d
    1b60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	4a ef       	ldi	r20, 0xFA	; 250
    1b70:	54 e4       	ldi	r21, 0x44	; 68
    1b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	8f 83       	std	Y+7, r24	; 0x07
    1b7c:	98 87       	std	Y+8, r25	; 0x08
    1b7e:	a9 87       	std	Y+9, r26	; 0x09
    1b80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b82:	6f 81       	ldd	r22, Y+7	; 0x07
    1b84:	78 85       	ldd	r23, Y+8	; 0x08
    1b86:	89 85       	ldd	r24, Y+9	; 0x09
    1b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e8       	ldi	r20, 0x80	; 128
    1b90:	5f e3       	ldi	r21, 0x3F	; 63
    1b92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b96:	88 23       	and	r24, r24
    1b98:	2c f4       	brge	.+10     	; 0x1ba4 <LCD_voidSendCommand+0x84>
		__ticks = 1;
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	9e 83       	std	Y+6, r25	; 0x06
    1ba0:	8d 83       	std	Y+5, r24	; 0x05
    1ba2:	3f c0       	rjmp	.+126    	; 0x1c22 <LCD_voidSendCommand+0x102>
	else if (__tmp > 65535)
    1ba4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba6:	78 85       	ldd	r23, Y+8	; 0x08
    1ba8:	89 85       	ldd	r24, Y+9	; 0x09
    1baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	3f ef       	ldi	r19, 0xFF	; 255
    1bb0:	4f e7       	ldi	r20, 0x7F	; 127
    1bb2:	57 e4       	ldi	r21, 0x47	; 71
    1bb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bb8:	18 16       	cp	r1, r24
    1bba:	4c f5       	brge	.+82     	; 0x1c0e <LCD_voidSendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	40 e2       	ldi	r20, 0x20	; 32
    1bca:	51 e4       	ldi	r21, 0x41	; 65
    1bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	bc 01       	movw	r22, r24
    1bd6:	cd 01       	movw	r24, r26
    1bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	9e 83       	std	Y+6, r25	; 0x06
    1be2:	8d 83       	std	Y+5, r24	; 0x05
    1be4:	0f c0       	rjmp	.+30     	; 0x1c04 <LCD_voidSendCommand+0xe4>
    1be6:	88 ec       	ldi	r24, 0xC8	; 200
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	9c 83       	std	Y+4, r25	; 0x04
    1bec:	8b 83       	std	Y+3, r24	; 0x03
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	f1 f7       	brne	.-4      	; 0x1bf2 <LCD_voidSendCommand+0xd2>
    1bf6:	9c 83       	std	Y+4, r25	; 0x04
    1bf8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	9e 83       	std	Y+6, r25	; 0x06
    1c02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c04:	8d 81       	ldd	r24, Y+5	; 0x05
    1c06:	9e 81       	ldd	r25, Y+6	; 0x06
    1c08:	00 97       	sbiw	r24, 0x00	; 0
    1c0a:	69 f7       	brne	.-38     	; 0x1be6 <LCD_voidSendCommand+0xc6>
    1c0c:	14 c0       	rjmp	.+40     	; 0x1c36 <LCD_voidSendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c10:	78 85       	ldd	r23, Y+8	; 0x08
    1c12:	89 85       	ldd	r24, Y+9	; 0x09
    1c14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	9e 83       	std	Y+6, r25	; 0x06
    1c20:	8d 83       	std	Y+5, r24	; 0x05
    1c22:	8d 81       	ldd	r24, Y+5	; 0x05
    1c24:	9e 81       	ldd	r25, Y+6	; 0x06
    1c26:	9a 83       	std	Y+2, r25	; 0x02
    1c28:	89 83       	std	Y+1, r24	; 0x01
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	f1 f7       	brne	.-4      	; 0x1c2e <LCD_voidSendCommand+0x10e>
    1c32:	9a 83       	std	Y+2, r25	; 0x02
    1c34:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    1c36:	83 e0       	ldi	r24, 0x03	; 3
    1c38:	63 e0       	ldi	r22, 0x03	; 3
    1c3a:	40 e0       	ldi	r20, 0x00	; 0
    1c3c:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
}
    1c40:	2f 96       	adiw	r28, 0x0f	; 15
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	f8 94       	cli
    1c46:	de bf       	out	0x3e, r29	; 62
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	cd bf       	out	0x3d, r28	; 61
    1c4c:	cf 91       	pop	r28
    1c4e:	df 91       	pop	r29
    1c50:	08 95       	ret

00001c52 <LCD_voidSendCommand_4bitMode>:

void LCD_voidSendCommand_4bitMode(uint8 u8CmdCpy){
    1c52:	0f 93       	push	r16
    1c54:	1f 93       	push	r17
    1c56:	df 93       	push	r29
    1c58:	cf 93       	push	r28
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	c1 56       	subi	r28, 0x61	; 97
    1c60:	d0 40       	sbci	r29, 0x00	; 0
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	f8 94       	cli
    1c66:	de bf       	out	0x3e, r29	; 62
    1c68:	0f be       	out	0x3f, r0	; 63
    1c6a:	cd bf       	out	0x3d, r28	; 61
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	ef 59       	subi	r30, 0x9F	; 159
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	80 83       	st	Z, r24
    /* Send Higher nibble of command */
    DIO_voidWritePort(lcd_DATAPORT, (lcd_DATAPORT & 0x0F) | (u8CmdCpy & 0xF0));
    1c74:	fe 01       	movw	r30, r28
    1c76:	ef 59       	subi	r30, 0x9F	; 159
    1c78:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7a:	80 81       	ld	r24, Z
    1c7c:	80 7f       	andi	r24, 0xF0	; 240
    1c7e:	84 60       	ori	r24, 0x04	; 4
    1c80:	98 2f       	mov	r25, r24
    1c82:	84 e0       	ldi	r24, 0x04	; 4
    1c84:	69 2f       	mov	r22, r25
    1c86:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <DIO_voidWritePort>
    /* Command(0) or Data(1) */
    DIO_voidWritePin(lcd_CONTROLPORT, lcd_RSPIN, DIO_LOW);
    1c8a:	83 e0       	ldi	r24, 0x03	; 3
    1c8c:	62 e0       	ldi	r22, 0x02	; 2
    1c8e:	40 e0       	ldi	r20, 0x00	; 0
    1c90:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
    /* Read(1) or Write(0) */
    //DIO_voidWritePin(lcd_CONTROLPORT, lcd_RWPIN, DIO_LOW);

    /* Enable Sequence */
    DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    1c94:	83 e0       	ldi	r24, 0x03	; 3
    1c96:	63 e0       	ldi	r22, 0x03	; 3
    1c98:	41 e0       	ldi	r20, 0x01	; 1
    1c9a:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	e3 5a       	subi	r30, 0xA3	; 163
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	a0 ea       	ldi	r26, 0xA0	; 160
    1caa:	b0 e4       	ldi	r27, 0x40	; 64
    1cac:	80 83       	st	Z, r24
    1cae:	91 83       	std	Z+1, r25	; 0x01
    1cb0:	a2 83       	std	Z+2, r26	; 0x02
    1cb2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cb4:	8e 01       	movw	r16, r28
    1cb6:	07 5a       	subi	r16, 0xA7	; 167
    1cb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cba:	fe 01       	movw	r30, r28
    1cbc:	e3 5a       	subi	r30, 0xA3	; 163
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	60 81       	ld	r22, Z
    1cc2:	71 81       	ldd	r23, Z+1	; 0x01
    1cc4:	82 81       	ldd	r24, Z+2	; 0x02
    1cc6:	93 81       	ldd	r25, Z+3	; 0x03
    1cc8:	2b ea       	ldi	r18, 0xAB	; 171
    1cca:	3a ea       	ldi	r19, 0xAA	; 170
    1ccc:	4a e2       	ldi	r20, 0x2A	; 42
    1cce:	50 e4       	ldi	r21, 0x40	; 64
    1cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	f8 01       	movw	r30, r16
    1cda:	80 83       	st	Z, r24
    1cdc:	91 83       	std	Z+1, r25	; 0x01
    1cde:	a2 83       	std	Z+2, r26	; 0x02
    1ce0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	e7 5a       	subi	r30, 0xA7	; 167
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	60 81       	ld	r22, Z
    1cea:	71 81       	ldd	r23, Z+1	; 0x01
    1cec:	82 81       	ldd	r24, Z+2	; 0x02
    1cee:	93 81       	ldd	r25, Z+3	; 0x03
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e8       	ldi	r20, 0x80	; 128
    1cf6:	5f e3       	ldi	r21, 0x3F	; 63
    1cf8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cfc:	88 23       	and	r24, r24
    1cfe:	34 f4       	brge	.+12     	; 0x1d0c <LCD_voidSendCommand_4bitMode+0xba>
		__ticks = 1;
    1d00:	fe 01       	movw	r30, r28
    1d02:	e8 5a       	subi	r30, 0xA8	; 168
    1d04:	ff 4f       	sbci	r31, 0xFF	; 255
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	80 83       	st	Z, r24
    1d0a:	e0 c0       	rjmp	.+448    	; 0x1ecc <LCD_voidSendCommand_4bitMode+0x27a>
	else if (__tmp > 255)
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	e7 5a       	subi	r30, 0xA7	; 167
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	60 81       	ld	r22, Z
    1d14:	71 81       	ldd	r23, Z+1	; 0x01
    1d16:	82 81       	ldd	r24, Z+2	; 0x02
    1d18:	93 81       	ldd	r25, Z+3	; 0x03
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	4f e7       	ldi	r20, 0x7F	; 127
    1d20:	53 e4       	ldi	r21, 0x43	; 67
    1d22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d26:	18 16       	cp	r1, r24
    1d28:	0c f0       	brlt	.+2      	; 0x1d2c <LCD_voidSendCommand_4bitMode+0xda>
    1d2a:	c0 c0       	rjmp	.+384    	; 0x1eac <LCD_voidSendCommand_4bitMode+0x25a>
	{
		_delay_ms(__us / 1000.0);
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	e3 5a       	subi	r30, 0xA3	; 163
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	60 81       	ld	r22, Z
    1d34:	71 81       	ldd	r23, Z+1	; 0x01
    1d36:	82 81       	ldd	r24, Z+2	; 0x02
    1d38:	93 81       	ldd	r25, Z+3	; 0x03
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	4a e7       	ldi	r20, 0x7A	; 122
    1d40:	54 e4       	ldi	r21, 0x44	; 68
    1d42:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	ec 5a       	subi	r30, 0xAC	; 172
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	80 83       	st	Z, r24
    1d52:	91 83       	std	Z+1, r25	; 0x01
    1d54:	a2 83       	std	Z+2, r26	; 0x02
    1d56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d58:	8e 01       	movw	r16, r28
    1d5a:	00 5b       	subi	r16, 0xB0	; 176
    1d5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5e:	fe 01       	movw	r30, r28
    1d60:	ec 5a       	subi	r30, 0xAC	; 172
    1d62:	ff 4f       	sbci	r31, 0xFF	; 255
    1d64:	60 81       	ld	r22, Z
    1d66:	71 81       	ldd	r23, Z+1	; 0x01
    1d68:	82 81       	ldd	r24, Z+2	; 0x02
    1d6a:	93 81       	ldd	r25, Z+3	; 0x03
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	4a ef       	ldi	r20, 0xFA	; 250
    1d72:	54 e4       	ldi	r21, 0x44	; 68
    1d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	f8 01       	movw	r30, r16
    1d7e:	80 83       	st	Z, r24
    1d80:	91 83       	std	Z+1, r25	; 0x01
    1d82:	a2 83       	std	Z+2, r26	; 0x02
    1d84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d86:	fe 01       	movw	r30, r28
    1d88:	e0 5b       	subi	r30, 0xB0	; 176
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	60 81       	ld	r22, Z
    1d8e:	71 81       	ldd	r23, Z+1	; 0x01
    1d90:	82 81       	ldd	r24, Z+2	; 0x02
    1d92:	93 81       	ldd	r25, Z+3	; 0x03
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e8       	ldi	r20, 0x80	; 128
    1d9a:	5f e3       	ldi	r21, 0x3F	; 63
    1d9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1da0:	88 23       	and	r24, r24
    1da2:	44 f4       	brge	.+16     	; 0x1db4 <LCD_voidSendCommand_4bitMode+0x162>
		__ticks = 1;
    1da4:	fe 01       	movw	r30, r28
    1da6:	e2 5b       	subi	r30, 0xB2	; 178
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	91 83       	std	Z+1, r25	; 0x01
    1db0:	80 83       	st	Z, r24
    1db2:	64 c0       	rjmp	.+200    	; 0x1e7c <LCD_voidSendCommand_4bitMode+0x22a>
	else if (__tmp > 65535)
    1db4:	fe 01       	movw	r30, r28
    1db6:	e0 5b       	subi	r30, 0xB0	; 176
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	60 81       	ld	r22, Z
    1dbc:	71 81       	ldd	r23, Z+1	; 0x01
    1dbe:	82 81       	ldd	r24, Z+2	; 0x02
    1dc0:	93 81       	ldd	r25, Z+3	; 0x03
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	3f ef       	ldi	r19, 0xFF	; 255
    1dc6:	4f e7       	ldi	r20, 0x7F	; 127
    1dc8:	57 e4       	ldi	r21, 0x47	; 71
    1dca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dce:	18 16       	cp	r1, r24
    1dd0:	0c f0       	brlt	.+2      	; 0x1dd4 <LCD_voidSendCommand_4bitMode+0x182>
    1dd2:	43 c0       	rjmp	.+134    	; 0x1e5a <LCD_voidSendCommand_4bitMode+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	ec 5a       	subi	r30, 0xAC	; 172
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	60 81       	ld	r22, Z
    1ddc:	71 81       	ldd	r23, Z+1	; 0x01
    1dde:	82 81       	ldd	r24, Z+2	; 0x02
    1de0:	93 81       	ldd	r25, Z+3	; 0x03
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e2       	ldi	r20, 0x20	; 32
    1de8:	51 e4       	ldi	r21, 0x41	; 65
    1dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	8e 01       	movw	r16, r28
    1df4:	02 5b       	subi	r16, 0xB2	; 178
    1df6:	1f 4f       	sbci	r17, 0xFF	; 255
    1df8:	bc 01       	movw	r22, r24
    1dfa:	cd 01       	movw	r24, r26
    1dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	f8 01       	movw	r30, r16
    1e06:	91 83       	std	Z+1, r25	; 0x01
    1e08:	80 83       	st	Z, r24
    1e0a:	1f c0       	rjmp	.+62     	; 0x1e4a <LCD_voidSendCommand_4bitMode+0x1f8>
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	e4 5b       	subi	r30, 0xB4	; 180
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	88 ec       	ldi	r24, 0xC8	; 200
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	91 83       	std	Z+1, r25	; 0x01
    1e18:	80 83       	st	Z, r24
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	e4 5b       	subi	r30, 0xB4	; 180
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	80 81       	ld	r24, Z
    1e22:	91 81       	ldd	r25, Z+1	; 0x01
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	f1 f7       	brne	.-4      	; 0x1e24 <LCD_voidSendCommand_4bitMode+0x1d2>
    1e28:	fe 01       	movw	r30, r28
    1e2a:	e4 5b       	subi	r30, 0xB4	; 180
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	91 83       	std	Z+1, r25	; 0x01
    1e30:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e32:	de 01       	movw	r26, r28
    1e34:	a2 5b       	subi	r26, 0xB2	; 178
    1e36:	bf 4f       	sbci	r27, 0xFF	; 255
    1e38:	fe 01       	movw	r30, r28
    1e3a:	e2 5b       	subi	r30, 0xB2	; 178
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	80 81       	ld	r24, Z
    1e40:	91 81       	ldd	r25, Z+1	; 0x01
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	11 96       	adiw	r26, 0x01	; 1
    1e46:	9c 93       	st	X, r25
    1e48:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	e2 5b       	subi	r30, 0xB2	; 178
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	80 81       	ld	r24, Z
    1e52:	91 81       	ldd	r25, Z+1	; 0x01
    1e54:	00 97       	sbiw	r24, 0x00	; 0
    1e56:	d1 f6       	brne	.-76     	; 0x1e0c <LCD_voidSendCommand_4bitMode+0x1ba>
    1e58:	4b c0       	rjmp	.+150    	; 0x1ef0 <LCD_voidSendCommand_4bitMode+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5a:	8e 01       	movw	r16, r28
    1e5c:	02 5b       	subi	r16, 0xB2	; 178
    1e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e60:	fe 01       	movw	r30, r28
    1e62:	e0 5b       	subi	r30, 0xB0	; 176
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	60 81       	ld	r22, Z
    1e68:	71 81       	ldd	r23, Z+1	; 0x01
    1e6a:	82 81       	ldd	r24, Z+2	; 0x02
    1e6c:	93 81       	ldd	r25, Z+3	; 0x03
    1e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	f8 01       	movw	r30, r16
    1e78:	91 83       	std	Z+1, r25	; 0x01
    1e7a:	80 83       	st	Z, r24
    1e7c:	de 01       	movw	r26, r28
    1e7e:	a6 5b       	subi	r26, 0xB6	; 182
    1e80:	bf 4f       	sbci	r27, 0xFF	; 255
    1e82:	fe 01       	movw	r30, r28
    1e84:	e2 5b       	subi	r30, 0xB2	; 178
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	80 81       	ld	r24, Z
    1e8a:	91 81       	ldd	r25, Z+1	; 0x01
    1e8c:	11 96       	adiw	r26, 0x01	; 1
    1e8e:	9c 93       	st	X, r25
    1e90:	8e 93       	st	-X, r24
    1e92:	fe 01       	movw	r30, r28
    1e94:	e6 5b       	subi	r30, 0xB6	; 182
    1e96:	ff 4f       	sbci	r31, 0xFF	; 255
    1e98:	80 81       	ld	r24, Z
    1e9a:	91 81       	ldd	r25, Z+1	; 0x01
    1e9c:	01 97       	sbiw	r24, 0x01	; 1
    1e9e:	f1 f7       	brne	.-4      	; 0x1e9c <LCD_voidSendCommand_4bitMode+0x24a>
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	e6 5b       	subi	r30, 0xB6	; 182
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	91 83       	std	Z+1, r25	; 0x01
    1ea8:	80 83       	st	Z, r24
    1eaa:	22 c0       	rjmp	.+68     	; 0x1ef0 <LCD_voidSendCommand_4bitMode+0x29e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1eac:	8e 01       	movw	r16, r28
    1eae:	08 5a       	subi	r16, 0xA8	; 168
    1eb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	e7 5a       	subi	r30, 0xA7	; 167
    1eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb8:	60 81       	ld	r22, Z
    1eba:	71 81       	ldd	r23, Z+1	; 0x01
    1ebc:	82 81       	ldd	r24, Z+2	; 0x02
    1ebe:	93 81       	ldd	r25, Z+3	; 0x03
    1ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	f8 01       	movw	r30, r16
    1eca:	80 83       	st	Z, r24
    1ecc:	de 01       	movw	r26, r28
    1ece:	a7 5b       	subi	r26, 0xB7	; 183
    1ed0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	e8 5a       	subi	r30, 0xA8	; 168
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	80 81       	ld	r24, Z
    1eda:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1edc:	fe 01       	movw	r30, r28
    1ede:	e7 5b       	subi	r30, 0xB7	; 183
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	80 81       	ld	r24, Z
    1ee4:	8a 95       	dec	r24
    1ee6:	f1 f7       	brne	.-4      	; 0x1ee4 <LCD_voidSendCommand_4bitMode+0x292>
    1ee8:	fe 01       	movw	r30, r28
    1eea:	e7 5b       	subi	r30, 0xB7	; 183
    1eec:	ff 4f       	sbci	r31, 0xFF	; 255
    1eee:	80 83       	st	Z, r24
    _delay_us(5);
    DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    1ef0:	83 e0       	ldi	r24, 0x03	; 3
    1ef2:	63 e0       	ldi	r22, 0x03	; 3
    1ef4:	40 e0       	ldi	r20, 0x00	; 0
    1ef6:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
    1efa:	fe 01       	movw	r30, r28
    1efc:	eb 5b       	subi	r30, 0xBB	; 187
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	a8 e4       	ldi	r26, 0x48	; 72
    1f06:	b3 e4       	ldi	r27, 0x43	; 67
    1f08:	80 83       	st	Z, r24
    1f0a:	91 83       	std	Z+1, r25	; 0x01
    1f0c:	a2 83       	std	Z+2, r26	; 0x02
    1f0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f10:	8e 01       	movw	r16, r28
    1f12:	0f 5b       	subi	r16, 0xBF	; 191
    1f14:	1f 4f       	sbci	r17, 0xFF	; 255
    1f16:	fe 01       	movw	r30, r28
    1f18:	eb 5b       	subi	r30, 0xBB	; 187
    1f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1c:	60 81       	ld	r22, Z
    1f1e:	71 81       	ldd	r23, Z+1	; 0x01
    1f20:	82 81       	ldd	r24, Z+2	; 0x02
    1f22:	93 81       	ldd	r25, Z+3	; 0x03
    1f24:	2b ea       	ldi	r18, 0xAB	; 171
    1f26:	3a ea       	ldi	r19, 0xAA	; 170
    1f28:	4a e2       	ldi	r20, 0x2A	; 42
    1f2a:	50 e4       	ldi	r21, 0x40	; 64
    1f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	f8 01       	movw	r30, r16
    1f36:	80 83       	st	Z, r24
    1f38:	91 83       	std	Z+1, r25	; 0x01
    1f3a:	a2 83       	std	Z+2, r26	; 0x02
    1f3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f3e:	fe 01       	movw	r30, r28
    1f40:	ef 5b       	subi	r30, 0xBF	; 191
    1f42:	ff 4f       	sbci	r31, 0xFF	; 255
    1f44:	60 81       	ld	r22, Z
    1f46:	71 81       	ldd	r23, Z+1	; 0x01
    1f48:	82 81       	ldd	r24, Z+2	; 0x02
    1f4a:	93 81       	ldd	r25, Z+3	; 0x03
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	40 e8       	ldi	r20, 0x80	; 128
    1f52:	5f e3       	ldi	r21, 0x3F	; 63
    1f54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f58:	88 23       	and	r24, r24
    1f5a:	34 f4       	brge	.+12     	; 0x1f68 <LCD_voidSendCommand_4bitMode+0x316>
		__ticks = 1;
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	fe 01       	movw	r30, r28
    1f60:	e0 5c       	subi	r30, 0xC0	; 192
    1f62:	ff 4f       	sbci	r31, 0xFF	; 255
    1f64:	80 83       	st	Z, r24
    1f66:	9d c0       	rjmp	.+314    	; 0x20a2 <LCD_voidSendCommand_4bitMode+0x450>
	else if (__tmp > 255)
    1f68:	fe 01       	movw	r30, r28
    1f6a:	ef 5b       	subi	r30, 0xBF	; 191
    1f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6e:	60 81       	ld	r22, Z
    1f70:	71 81       	ldd	r23, Z+1	; 0x01
    1f72:	82 81       	ldd	r24, Z+2	; 0x02
    1f74:	93 81       	ldd	r25, Z+3	; 0x03
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	4f e7       	ldi	r20, 0x7F	; 127
    1f7c:	53 e4       	ldi	r21, 0x43	; 67
    1f7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f82:	18 16       	cp	r1, r24
    1f84:	0c f0       	brlt	.+2      	; 0x1f88 <LCD_voidSendCommand_4bitMode+0x336>
    1f86:	7e c0       	rjmp	.+252    	; 0x2084 <LCD_voidSendCommand_4bitMode+0x432>
	{
		_delay_ms(__us / 1000.0);
    1f88:	fe 01       	movw	r30, r28
    1f8a:	eb 5b       	subi	r30, 0xBB	; 187
    1f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8e:	60 81       	ld	r22, Z
    1f90:	71 81       	ldd	r23, Z+1	; 0x01
    1f92:	82 81       	ldd	r24, Z+2	; 0x02
    1f94:	93 81       	ldd	r25, Z+3	; 0x03
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	4a e7       	ldi	r20, 0x7A	; 122
    1f9c:	54 e4       	ldi	r21, 0x44	; 68
    1f9e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	8c af       	std	Y+60, r24	; 0x3c
    1fa8:	9d af       	std	Y+61, r25	; 0x3d
    1faa:	ae af       	std	Y+62, r26	; 0x3e
    1fac:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fae:	6c ad       	ldd	r22, Y+60	; 0x3c
    1fb0:	7d ad       	ldd	r23, Y+61	; 0x3d
    1fb2:	8e ad       	ldd	r24, Y+62	; 0x3e
    1fb4:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	4a ef       	ldi	r20, 0xFA	; 250
    1fbc:	54 e4       	ldi	r21, 0x44	; 68
    1fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	88 af       	std	Y+56, r24	; 0x38
    1fc8:	99 af       	std	Y+57, r25	; 0x39
    1fca:	aa af       	std	Y+58, r26	; 0x3a
    1fcc:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1fce:	68 ad       	ldd	r22, Y+56	; 0x38
    1fd0:	79 ad       	ldd	r23, Y+57	; 0x39
    1fd2:	8a ad       	ldd	r24, Y+58	; 0x3a
    1fd4:	9b ad       	ldd	r25, Y+59	; 0x3b
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	40 e8       	ldi	r20, 0x80	; 128
    1fdc:	5f e3       	ldi	r21, 0x3F	; 63
    1fde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fe2:	88 23       	and	r24, r24
    1fe4:	2c f4       	brge	.+10     	; 0x1ff0 <LCD_voidSendCommand_4bitMode+0x39e>
		__ticks = 1;
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	9f ab       	std	Y+55, r25	; 0x37
    1fec:	8e ab       	std	Y+54, r24	; 0x36
    1fee:	3f c0       	rjmp	.+126    	; 0x206e <LCD_voidSendCommand_4bitMode+0x41c>
	else if (__tmp > 65535)
    1ff0:	68 ad       	ldd	r22, Y+56	; 0x38
    1ff2:	79 ad       	ldd	r23, Y+57	; 0x39
    1ff4:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ff6:	9b ad       	ldd	r25, Y+59	; 0x3b
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	3f ef       	ldi	r19, 0xFF	; 255
    1ffc:	4f e7       	ldi	r20, 0x7F	; 127
    1ffe:	57 e4       	ldi	r21, 0x47	; 71
    2000:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2004:	18 16       	cp	r1, r24
    2006:	4c f5       	brge	.+82     	; 0x205a <LCD_voidSendCommand_4bitMode+0x408>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2008:	6c ad       	ldd	r22, Y+60	; 0x3c
    200a:	7d ad       	ldd	r23, Y+61	; 0x3d
    200c:	8e ad       	ldd	r24, Y+62	; 0x3e
    200e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	40 e2       	ldi	r20, 0x20	; 32
    2016:	51 e4       	ldi	r21, 0x41	; 65
    2018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	bc 01       	movw	r22, r24
    2022:	cd 01       	movw	r24, r26
    2024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	9f ab       	std	Y+55, r25	; 0x37
    202e:	8e ab       	std	Y+54, r24	; 0x36
    2030:	0f c0       	rjmp	.+30     	; 0x2050 <LCD_voidSendCommand_4bitMode+0x3fe>
    2032:	88 ec       	ldi	r24, 0xC8	; 200
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	9d ab       	std	Y+53, r25	; 0x35
    2038:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    203a:	8c a9       	ldd	r24, Y+52	; 0x34
    203c:	9d a9       	ldd	r25, Y+53	; 0x35
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	f1 f7       	brne	.-4      	; 0x203e <LCD_voidSendCommand_4bitMode+0x3ec>
    2042:	9d ab       	std	Y+53, r25	; 0x35
    2044:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2046:	8e a9       	ldd	r24, Y+54	; 0x36
    2048:	9f a9       	ldd	r25, Y+55	; 0x37
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	9f ab       	std	Y+55, r25	; 0x37
    204e:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2050:	8e a9       	ldd	r24, Y+54	; 0x36
    2052:	9f a9       	ldd	r25, Y+55	; 0x37
    2054:	00 97       	sbiw	r24, 0x00	; 0
    2056:	69 f7       	brne	.-38     	; 0x2032 <LCD_voidSendCommand_4bitMode+0x3e0>
    2058:	2d c0       	rjmp	.+90     	; 0x20b4 <LCD_voidSendCommand_4bitMode+0x462>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205a:	68 ad       	ldd	r22, Y+56	; 0x38
    205c:	79 ad       	ldd	r23, Y+57	; 0x39
    205e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2060:	9b ad       	ldd	r25, Y+59	; 0x3b
    2062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	9f ab       	std	Y+55, r25	; 0x37
    206c:	8e ab       	std	Y+54, r24	; 0x36
    206e:	8e a9       	ldd	r24, Y+54	; 0x36
    2070:	9f a9       	ldd	r25, Y+55	; 0x37
    2072:	9b ab       	std	Y+51, r25	; 0x33
    2074:	8a ab       	std	Y+50, r24	; 0x32
    2076:	8a a9       	ldd	r24, Y+50	; 0x32
    2078:	9b a9       	ldd	r25, Y+51	; 0x33
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	f1 f7       	brne	.-4      	; 0x207a <LCD_voidSendCommand_4bitMode+0x428>
    207e:	9b ab       	std	Y+51, r25	; 0x33
    2080:	8a ab       	std	Y+50, r24	; 0x32
    2082:	18 c0       	rjmp	.+48     	; 0x20b4 <LCD_voidSendCommand_4bitMode+0x462>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2084:	fe 01       	movw	r30, r28
    2086:	ef 5b       	subi	r30, 0xBF	; 191
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	60 81       	ld	r22, Z
    208c:	71 81       	ldd	r23, Z+1	; 0x01
    208e:	82 81       	ldd	r24, Z+2	; 0x02
    2090:	93 81       	ldd	r25, Z+3	; 0x03
    2092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	fe 01       	movw	r30, r28
    209c:	e0 5c       	subi	r30, 0xC0	; 192
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	80 83       	st	Z, r24
    20a2:	fe 01       	movw	r30, r28
    20a4:	e0 5c       	subi	r30, 0xC0	; 192
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	80 81       	ld	r24, Z
    20aa:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20ac:	89 a9       	ldd	r24, Y+49	; 0x31
    20ae:	8a 95       	dec	r24
    20b0:	f1 f7       	brne	.-4      	; 0x20ae <LCD_voidSendCommand_4bitMode+0x45c>
    20b2:	89 ab       	std	Y+49, r24	; 0x31
    _delay_us(200);

    /* Send Lower nibble of command */
    DIO_voidWritePort(lcd_DATAPORT, (lcd_DATAPORT & 0x0F) | (u8CmdCpy <<4));
    20b4:	fe 01       	movw	r30, r28
    20b6:	ef 59       	subi	r30, 0x9F	; 159
    20b8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ba:	80 81       	ld	r24, Z
    20bc:	88 2f       	mov	r24, r24
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	82 95       	swap	r24
    20c2:	92 95       	swap	r25
    20c4:	90 7f       	andi	r25, 0xF0	; 240
    20c6:	98 27       	eor	r25, r24
    20c8:	80 7f       	andi	r24, 0xF0	; 240
    20ca:	98 27       	eor	r25, r24
    20cc:	84 60       	ori	r24, 0x04	; 4
    20ce:	98 2f       	mov	r25, r24
    20d0:	84 e0       	ldi	r24, 0x04	; 4
    20d2:	69 2f       	mov	r22, r25
    20d4:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <DIO_voidWritePort>
    /* Enable Sequence */
    DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    20d8:	83 e0       	ldi	r24, 0x03	; 3
    20da:	63 e0       	ldi	r22, 0x03	; 3
    20dc:	41 e0       	ldi	r20, 0x01	; 1
    20de:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	a0 ea       	ldi	r26, 0xA0	; 160
    20e8:	b0 e4       	ldi	r27, 0x40	; 64
    20ea:	8d a7       	std	Y+45, r24	; 0x2d
    20ec:	9e a7       	std	Y+46, r25	; 0x2e
    20ee:	af a7       	std	Y+47, r26	; 0x2f
    20f0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20f2:	6d a5       	ldd	r22, Y+45	; 0x2d
    20f4:	7e a5       	ldd	r23, Y+46	; 0x2e
    20f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    20f8:	98 a9       	ldd	r25, Y+48	; 0x30
    20fa:	2b ea       	ldi	r18, 0xAB	; 171
    20fc:	3a ea       	ldi	r19, 0xAA	; 170
    20fe:	4a e2       	ldi	r20, 0x2A	; 42
    2100:	50 e4       	ldi	r21, 0x40	; 64
    2102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	89 a7       	std	Y+41, r24	; 0x29
    210c:	9a a7       	std	Y+42, r25	; 0x2a
    210e:	ab a7       	std	Y+43, r26	; 0x2b
    2110:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2112:	69 a5       	ldd	r22, Y+41	; 0x29
    2114:	7a a5       	ldd	r23, Y+42	; 0x2a
    2116:	8b a5       	ldd	r24, Y+43	; 0x2b
    2118:	9c a5       	ldd	r25, Y+44	; 0x2c
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e8       	ldi	r20, 0x80	; 128
    2120:	5f e3       	ldi	r21, 0x3F	; 63
    2122:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2126:	88 23       	and	r24, r24
    2128:	1c f4       	brge	.+6      	; 0x2130 <LCD_voidSendCommand_4bitMode+0x4de>
		__ticks = 1;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	88 a7       	std	Y+40, r24	; 0x28
    212e:	91 c0       	rjmp	.+290    	; 0x2252 <LCD_voidSendCommand_4bitMode+0x600>
	else if (__tmp > 255)
    2130:	69 a5       	ldd	r22, Y+41	; 0x29
    2132:	7a a5       	ldd	r23, Y+42	; 0x2a
    2134:	8b a5       	ldd	r24, Y+43	; 0x2b
    2136:	9c a5       	ldd	r25, Y+44	; 0x2c
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	4f e7       	ldi	r20, 0x7F	; 127
    213e:	53 e4       	ldi	r21, 0x43	; 67
    2140:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2144:	18 16       	cp	r1, r24
    2146:	0c f0       	brlt	.+2      	; 0x214a <LCD_voidSendCommand_4bitMode+0x4f8>
    2148:	7b c0       	rjmp	.+246    	; 0x2240 <LCD_voidSendCommand_4bitMode+0x5ee>
	{
		_delay_ms(__us / 1000.0);
    214a:	6d a5       	ldd	r22, Y+45	; 0x2d
    214c:	7e a5       	ldd	r23, Y+46	; 0x2e
    214e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2150:	98 a9       	ldd	r25, Y+48	; 0x30
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	4a e7       	ldi	r20, 0x7A	; 122
    2158:	54 e4       	ldi	r21, 0x44	; 68
    215a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	8c a3       	std	Y+36, r24	; 0x24
    2164:	9d a3       	std	Y+37, r25	; 0x25
    2166:	ae a3       	std	Y+38, r26	; 0x26
    2168:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    216a:	6c a1       	ldd	r22, Y+36	; 0x24
    216c:	7d a1       	ldd	r23, Y+37	; 0x25
    216e:	8e a1       	ldd	r24, Y+38	; 0x26
    2170:	9f a1       	ldd	r25, Y+39	; 0x27
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	4a ef       	ldi	r20, 0xFA	; 250
    2178:	54 e4       	ldi	r21, 0x44	; 68
    217a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	88 a3       	std	Y+32, r24	; 0x20
    2184:	99 a3       	std	Y+33, r25	; 0x21
    2186:	aa a3       	std	Y+34, r26	; 0x22
    2188:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    218a:	68 a1       	ldd	r22, Y+32	; 0x20
    218c:	79 a1       	ldd	r23, Y+33	; 0x21
    218e:	8a a1       	ldd	r24, Y+34	; 0x22
    2190:	9b a1       	ldd	r25, Y+35	; 0x23
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	40 e8       	ldi	r20, 0x80	; 128
    2198:	5f e3       	ldi	r21, 0x3F	; 63
    219a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    219e:	88 23       	and	r24, r24
    21a0:	2c f4       	brge	.+10     	; 0x21ac <LCD_voidSendCommand_4bitMode+0x55a>
		__ticks = 1;
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	9f 8f       	std	Y+31, r25	; 0x1f
    21a8:	8e 8f       	std	Y+30, r24	; 0x1e
    21aa:	3f c0       	rjmp	.+126    	; 0x222a <LCD_voidSendCommand_4bitMode+0x5d8>
	else if (__tmp > 65535)
    21ac:	68 a1       	ldd	r22, Y+32	; 0x20
    21ae:	79 a1       	ldd	r23, Y+33	; 0x21
    21b0:	8a a1       	ldd	r24, Y+34	; 0x22
    21b2:	9b a1       	ldd	r25, Y+35	; 0x23
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	3f ef       	ldi	r19, 0xFF	; 255
    21b8:	4f e7       	ldi	r20, 0x7F	; 127
    21ba:	57 e4       	ldi	r21, 0x47	; 71
    21bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21c0:	18 16       	cp	r1, r24
    21c2:	4c f5       	brge	.+82     	; 0x2216 <LCD_voidSendCommand_4bitMode+0x5c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c4:	6c a1       	ldd	r22, Y+36	; 0x24
    21c6:	7d a1       	ldd	r23, Y+37	; 0x25
    21c8:	8e a1       	ldd	r24, Y+38	; 0x26
    21ca:	9f a1       	ldd	r25, Y+39	; 0x27
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	40 e2       	ldi	r20, 0x20	; 32
    21d2:	51 e4       	ldi	r21, 0x41	; 65
    21d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	bc 01       	movw	r22, r24
    21de:	cd 01       	movw	r24, r26
    21e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	9f 8f       	std	Y+31, r25	; 0x1f
    21ea:	8e 8f       	std	Y+30, r24	; 0x1e
    21ec:	0f c0       	rjmp	.+30     	; 0x220c <LCD_voidSendCommand_4bitMode+0x5ba>
    21ee:	88 ec       	ldi	r24, 0xC8	; 200
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	9d 8f       	std	Y+29, r25	; 0x1d
    21f4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21f8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    21fa:	01 97       	sbiw	r24, 0x01	; 1
    21fc:	f1 f7       	brne	.-4      	; 0x21fa <LCD_voidSendCommand_4bitMode+0x5a8>
    21fe:	9d 8f       	std	Y+29, r25	; 0x1d
    2200:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2202:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2204:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	9f 8f       	std	Y+31, r25	; 0x1f
    220a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    220c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    220e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2210:	00 97       	sbiw	r24, 0x00	; 0
    2212:	69 f7       	brne	.-38     	; 0x21ee <LCD_voidSendCommand_4bitMode+0x59c>
    2214:	24 c0       	rjmp	.+72     	; 0x225e <LCD_voidSendCommand_4bitMode+0x60c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2216:	68 a1       	ldd	r22, Y+32	; 0x20
    2218:	79 a1       	ldd	r23, Y+33	; 0x21
    221a:	8a a1       	ldd	r24, Y+34	; 0x22
    221c:	9b a1       	ldd	r25, Y+35	; 0x23
    221e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	9f 8f       	std	Y+31, r25	; 0x1f
    2228:	8e 8f       	std	Y+30, r24	; 0x1e
    222a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    222c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    222e:	9b 8f       	std	Y+27, r25	; 0x1b
    2230:	8a 8f       	std	Y+26, r24	; 0x1a
    2232:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2234:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	f1 f7       	brne	.-4      	; 0x2236 <LCD_voidSendCommand_4bitMode+0x5e4>
    223a:	9b 8f       	std	Y+27, r25	; 0x1b
    223c:	8a 8f       	std	Y+26, r24	; 0x1a
    223e:	0f c0       	rjmp	.+30     	; 0x225e <LCD_voidSendCommand_4bitMode+0x60c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2240:	69 a5       	ldd	r22, Y+41	; 0x29
    2242:	7a a5       	ldd	r23, Y+42	; 0x2a
    2244:	8b a5       	ldd	r24, Y+43	; 0x2b
    2246:	9c a5       	ldd	r25, Y+44	; 0x2c
    2248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	88 a7       	std	Y+40, r24	; 0x28
    2252:	88 a5       	ldd	r24, Y+40	; 0x28
    2254:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2256:	89 8d       	ldd	r24, Y+25	; 0x19
    2258:	8a 95       	dec	r24
    225a:	f1 f7       	brne	.-4      	; 0x2258 <LCD_voidSendCommand_4bitMode+0x606>
    225c:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(5);
    DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    225e:	83 e0       	ldi	r24, 0x03	; 3
    2260:	63 e0       	ldi	r22, 0x03	; 3
    2262:	40 e0       	ldi	r20, 0x00	; 0
    2264:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	a0 ea       	ldi	r26, 0xA0	; 160
    226e:	b0 e4       	ldi	r27, 0x40	; 64
    2270:	8d 8b       	std	Y+21, r24	; 0x15
    2272:	9e 8b       	std	Y+22, r25	; 0x16
    2274:	af 8b       	std	Y+23, r26	; 0x17
    2276:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2278:	6d 89       	ldd	r22, Y+21	; 0x15
    227a:	7e 89       	ldd	r23, Y+22	; 0x16
    227c:	8f 89       	ldd	r24, Y+23	; 0x17
    227e:	98 8d       	ldd	r25, Y+24	; 0x18
    2280:	2b ea       	ldi	r18, 0xAB	; 171
    2282:	3a ea       	ldi	r19, 0xAA	; 170
    2284:	4a e2       	ldi	r20, 0x2A	; 42
    2286:	50 e4       	ldi	r21, 0x40	; 64
    2288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	89 8b       	std	Y+17, r24	; 0x11
    2292:	9a 8b       	std	Y+18, r25	; 0x12
    2294:	ab 8b       	std	Y+19, r26	; 0x13
    2296:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2298:	69 89       	ldd	r22, Y+17	; 0x11
    229a:	7a 89       	ldd	r23, Y+18	; 0x12
    229c:	8b 89       	ldd	r24, Y+19	; 0x13
    229e:	9c 89       	ldd	r25, Y+20	; 0x14
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 e8       	ldi	r20, 0x80	; 128
    22a6:	5f e3       	ldi	r21, 0x3F	; 63
    22a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22ac:	88 23       	and	r24, r24
    22ae:	1c f4       	brge	.+6      	; 0x22b6 <LCD_voidSendCommand_4bitMode+0x664>
		__ticks = 1;
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	88 8b       	std	Y+16, r24	; 0x10
    22b4:	91 c0       	rjmp	.+290    	; 0x23d8 <LCD_voidSendCommand_4bitMode+0x786>
	else if (__tmp > 255)
    22b6:	69 89       	ldd	r22, Y+17	; 0x11
    22b8:	7a 89       	ldd	r23, Y+18	; 0x12
    22ba:	8b 89       	ldd	r24, Y+19	; 0x13
    22bc:	9c 89       	ldd	r25, Y+20	; 0x14
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	4f e7       	ldi	r20, 0x7F	; 127
    22c4:	53 e4       	ldi	r21, 0x43	; 67
    22c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22ca:	18 16       	cp	r1, r24
    22cc:	0c f0       	brlt	.+2      	; 0x22d0 <LCD_voidSendCommand_4bitMode+0x67e>
    22ce:	7b c0       	rjmp	.+246    	; 0x23c6 <LCD_voidSendCommand_4bitMode+0x774>
	{
		_delay_ms(__us / 1000.0);
    22d0:	6d 89       	ldd	r22, Y+21	; 0x15
    22d2:	7e 89       	ldd	r23, Y+22	; 0x16
    22d4:	8f 89       	ldd	r24, Y+23	; 0x17
    22d6:	98 8d       	ldd	r25, Y+24	; 0x18
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	4a e7       	ldi	r20, 0x7A	; 122
    22de:	54 e4       	ldi	r21, 0x44	; 68
    22e0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	8c 87       	std	Y+12, r24	; 0x0c
    22ea:	9d 87       	std	Y+13, r25	; 0x0d
    22ec:	ae 87       	std	Y+14, r26	; 0x0e
    22ee:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f0:	6c 85       	ldd	r22, Y+12	; 0x0c
    22f2:	7d 85       	ldd	r23, Y+13	; 0x0d
    22f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    22f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	4a ef       	ldi	r20, 0xFA	; 250
    22fe:	54 e4       	ldi	r21, 0x44	; 68
    2300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	88 87       	std	Y+8, r24	; 0x08
    230a:	99 87       	std	Y+9, r25	; 0x09
    230c:	aa 87       	std	Y+10, r26	; 0x0a
    230e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2310:	68 85       	ldd	r22, Y+8	; 0x08
    2312:	79 85       	ldd	r23, Y+9	; 0x09
    2314:	8a 85       	ldd	r24, Y+10	; 0x0a
    2316:	9b 85       	ldd	r25, Y+11	; 0x0b
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e8       	ldi	r20, 0x80	; 128
    231e:	5f e3       	ldi	r21, 0x3F	; 63
    2320:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2324:	88 23       	and	r24, r24
    2326:	2c f4       	brge	.+10     	; 0x2332 <LCD_voidSendCommand_4bitMode+0x6e0>
		__ticks = 1;
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	9f 83       	std	Y+7, r25	; 0x07
    232e:	8e 83       	std	Y+6, r24	; 0x06
    2330:	3f c0       	rjmp	.+126    	; 0x23b0 <LCD_voidSendCommand_4bitMode+0x75e>
	else if (__tmp > 65535)
    2332:	68 85       	ldd	r22, Y+8	; 0x08
    2334:	79 85       	ldd	r23, Y+9	; 0x09
    2336:	8a 85       	ldd	r24, Y+10	; 0x0a
    2338:	9b 85       	ldd	r25, Y+11	; 0x0b
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	3f ef       	ldi	r19, 0xFF	; 255
    233e:	4f e7       	ldi	r20, 0x7F	; 127
    2340:	57 e4       	ldi	r21, 0x47	; 71
    2342:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2346:	18 16       	cp	r1, r24
    2348:	4c f5       	brge	.+82     	; 0x239c <LCD_voidSendCommand_4bitMode+0x74a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234a:	6c 85       	ldd	r22, Y+12	; 0x0c
    234c:	7d 85       	ldd	r23, Y+13	; 0x0d
    234e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2350:	9f 85       	ldd	r25, Y+15	; 0x0f
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	40 e2       	ldi	r20, 0x20	; 32
    2358:	51 e4       	ldi	r21, 0x41	; 65
    235a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	bc 01       	movw	r22, r24
    2364:	cd 01       	movw	r24, r26
    2366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	9f 83       	std	Y+7, r25	; 0x07
    2370:	8e 83       	std	Y+6, r24	; 0x06
    2372:	0f c0       	rjmp	.+30     	; 0x2392 <LCD_voidSendCommand_4bitMode+0x740>
    2374:	88 ec       	ldi	r24, 0xC8	; 200
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	9d 83       	std	Y+5, r25	; 0x05
    237a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    237c:	8c 81       	ldd	r24, Y+4	; 0x04
    237e:	9d 81       	ldd	r25, Y+5	; 0x05
    2380:	01 97       	sbiw	r24, 0x01	; 1
    2382:	f1 f7       	brne	.-4      	; 0x2380 <LCD_voidSendCommand_4bitMode+0x72e>
    2384:	9d 83       	std	Y+5, r25	; 0x05
    2386:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2388:	8e 81       	ldd	r24, Y+6	; 0x06
    238a:	9f 81       	ldd	r25, Y+7	; 0x07
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	9f 83       	std	Y+7, r25	; 0x07
    2390:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2392:	8e 81       	ldd	r24, Y+6	; 0x06
    2394:	9f 81       	ldd	r25, Y+7	; 0x07
    2396:	00 97       	sbiw	r24, 0x00	; 0
    2398:	69 f7       	brne	.-38     	; 0x2374 <LCD_voidSendCommand_4bitMode+0x722>
    239a:	24 c0       	rjmp	.+72     	; 0x23e4 <LCD_voidSendCommand_4bitMode+0x792>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    239c:	68 85       	ldd	r22, Y+8	; 0x08
    239e:	79 85       	ldd	r23, Y+9	; 0x09
    23a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    23a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    23a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	9f 83       	std	Y+7, r25	; 0x07
    23ae:	8e 83       	std	Y+6, r24	; 0x06
    23b0:	8e 81       	ldd	r24, Y+6	; 0x06
    23b2:	9f 81       	ldd	r25, Y+7	; 0x07
    23b4:	9b 83       	std	Y+3, r25	; 0x03
    23b6:	8a 83       	std	Y+2, r24	; 0x02
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	9b 81       	ldd	r25, Y+3	; 0x03
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	f1 f7       	brne	.-4      	; 0x23bc <LCD_voidSendCommand_4bitMode+0x76a>
    23c0:	9b 83       	std	Y+3, r25	; 0x03
    23c2:	8a 83       	std	Y+2, r24	; 0x02
    23c4:	0f c0       	rjmp	.+30     	; 0x23e4 <LCD_voidSendCommand_4bitMode+0x792>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23c6:	69 89       	ldd	r22, Y+17	; 0x11
    23c8:	7a 89       	ldd	r23, Y+18	; 0x12
    23ca:	8b 89       	ldd	r24, Y+19	; 0x13
    23cc:	9c 89       	ldd	r25, Y+20	; 0x14
    23ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	88 8b       	std	Y+16, r24	; 0x10
    23d8:	88 89       	ldd	r24, Y+16	; 0x10
    23da:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	8a 95       	dec	r24
    23e0:	f1 f7       	brne	.-4      	; 0x23de <LCD_voidSendCommand_4bitMode+0x78c>
    23e2:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(5);
}
    23e4:	cf 59       	subi	r28, 0x9F	; 159
    23e6:	df 4f       	sbci	r29, 0xFF	; 255
    23e8:	0f b6       	in	r0, 0x3f	; 63
    23ea:	f8 94       	cli
    23ec:	de bf       	out	0x3e, r29	; 62
    23ee:	0f be       	out	0x3f, r0	; 63
    23f0:	cd bf       	out	0x3d, r28	; 61
    23f2:	cf 91       	pop	r28
    23f4:	df 91       	pop	r29
    23f6:	1f 91       	pop	r17
    23f8:	0f 91       	pop	r16
    23fa:	08 95       	ret

000023fc <LCD_voidWriteCharctr>:


void LCD_voidWriteCharctr(uint8 u8DataCpy){		//LCD_voidWriteCharctr('A')
    23fc:	df 93       	push	r29
    23fe:	cf 93       	push	r28
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
    2404:	2f 97       	sbiw	r28, 0x0f	; 15
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	de bf       	out	0x3e, r29	; 62
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	cd bf       	out	0x3d, r28	; 61
    2410:	8f 87       	std	Y+15, r24	; 0x0f
	/* Command(0) or Data(1) */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_RSPIN, DIO_HIGH);
    2412:	83 e0       	ldi	r24, 0x03	; 3
    2414:	62 e0       	ldi	r22, 0x02	; 2
    2416:	41 e0       	ldi	r20, 0x01	; 1
    2418:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
	/* Read(1) or Write(0) */
	//DIO_voidWritePin(lcd_CONTROLPORT, lcd_RWPIN, DIO_LOW);
	/* Write Data on Data Pins*/
	DIO_voidWritePort(lcd_DATAPORT, u8DataCpy);
    241c:	84 e0       	ldi	r24, 0x04	; 4
    241e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2420:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <DIO_voidWritePort>
	/* Enable Sequence */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    2424:	83 e0       	ldi	r24, 0x03	; 3
    2426:	63 e0       	ldi	r22, 0x03	; 3
    2428:	41 e0       	ldi	r20, 0x01	; 1
    242a:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	a0 ea       	ldi	r26, 0xA0	; 160
    2434:	b0 e4       	ldi	r27, 0x40	; 64
    2436:	8b 87       	std	Y+11, r24	; 0x0b
    2438:	9c 87       	std	Y+12, r25	; 0x0c
    243a:	ad 87       	std	Y+13, r26	; 0x0d
    243c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    243e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2440:	7c 85       	ldd	r23, Y+12	; 0x0c
    2442:	8d 85       	ldd	r24, Y+13	; 0x0d
    2444:	9e 85       	ldd	r25, Y+14	; 0x0e
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	4a ef       	ldi	r20, 0xFA	; 250
    244c:	54 e4       	ldi	r21, 0x44	; 68
    244e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	8f 83       	std	Y+7, r24	; 0x07
    2458:	98 87       	std	Y+8, r25	; 0x08
    245a:	a9 87       	std	Y+9, r26	; 0x09
    245c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    245e:	6f 81       	ldd	r22, Y+7	; 0x07
    2460:	78 85       	ldd	r23, Y+8	; 0x08
    2462:	89 85       	ldd	r24, Y+9	; 0x09
    2464:	9a 85       	ldd	r25, Y+10	; 0x0a
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	40 e8       	ldi	r20, 0x80	; 128
    246c:	5f e3       	ldi	r21, 0x3F	; 63
    246e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2472:	88 23       	and	r24, r24
    2474:	2c f4       	brge	.+10     	; 0x2480 <LCD_voidWriteCharctr+0x84>
		__ticks = 1;
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	9e 83       	std	Y+6, r25	; 0x06
    247c:	8d 83       	std	Y+5, r24	; 0x05
    247e:	3f c0       	rjmp	.+126    	; 0x24fe <LCD_voidWriteCharctr+0x102>
	else if (__tmp > 65535)
    2480:	6f 81       	ldd	r22, Y+7	; 0x07
    2482:	78 85       	ldd	r23, Y+8	; 0x08
    2484:	89 85       	ldd	r24, Y+9	; 0x09
    2486:	9a 85       	ldd	r25, Y+10	; 0x0a
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	3f ef       	ldi	r19, 0xFF	; 255
    248c:	4f e7       	ldi	r20, 0x7F	; 127
    248e:	57 e4       	ldi	r21, 0x47	; 71
    2490:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2494:	18 16       	cp	r1, r24
    2496:	4c f5       	brge	.+82     	; 0x24ea <LCD_voidWriteCharctr+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2498:	6b 85       	ldd	r22, Y+11	; 0x0b
    249a:	7c 85       	ldd	r23, Y+12	; 0x0c
    249c:	8d 85       	ldd	r24, Y+13	; 0x0d
    249e:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	40 e2       	ldi	r20, 0x20	; 32
    24a6:	51 e4       	ldi	r21, 0x41	; 65
    24a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	bc 01       	movw	r22, r24
    24b2:	cd 01       	movw	r24, r26
    24b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	9e 83       	std	Y+6, r25	; 0x06
    24be:	8d 83       	std	Y+5, r24	; 0x05
    24c0:	0f c0       	rjmp	.+30     	; 0x24e0 <LCD_voidWriteCharctr+0xe4>
    24c2:	88 ec       	ldi	r24, 0xC8	; 200
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	9c 83       	std	Y+4, r25	; 0x04
    24c8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24ca:	8b 81       	ldd	r24, Y+3	; 0x03
    24cc:	9c 81       	ldd	r25, Y+4	; 0x04
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	f1 f7       	brne	.-4      	; 0x24ce <LCD_voidWriteCharctr+0xd2>
    24d2:	9c 83       	std	Y+4, r25	; 0x04
    24d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d6:	8d 81       	ldd	r24, Y+5	; 0x05
    24d8:	9e 81       	ldd	r25, Y+6	; 0x06
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	9e 83       	std	Y+6, r25	; 0x06
    24de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e0:	8d 81       	ldd	r24, Y+5	; 0x05
    24e2:	9e 81       	ldd	r25, Y+6	; 0x06
    24e4:	00 97       	sbiw	r24, 0x00	; 0
    24e6:	69 f7       	brne	.-38     	; 0x24c2 <LCD_voidWriteCharctr+0xc6>
    24e8:	14 c0       	rjmp	.+40     	; 0x2512 <LCD_voidWriteCharctr+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ea:	6f 81       	ldd	r22, Y+7	; 0x07
    24ec:	78 85       	ldd	r23, Y+8	; 0x08
    24ee:	89 85       	ldd	r24, Y+9	; 0x09
    24f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	9e 83       	std	Y+6, r25	; 0x06
    24fc:	8d 83       	std	Y+5, r24	; 0x05
    24fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2500:	9e 81       	ldd	r25, Y+6	; 0x06
    2502:	9a 83       	std	Y+2, r25	; 0x02
    2504:	89 83       	std	Y+1, r24	; 0x01
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	9a 81       	ldd	r25, Y+2	; 0x02
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	f1 f7       	brne	.-4      	; 0x250a <LCD_voidWriteCharctr+0x10e>
    250e:	9a 83       	std	Y+2, r25	; 0x02
    2510:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    2512:	83 e0       	ldi	r24, 0x03	; 3
    2514:	63 e0       	ldi	r22, 0x03	; 3
    2516:	40 e0       	ldi	r20, 0x00	; 0
    2518:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>

}
    251c:	2f 96       	adiw	r28, 0x0f	; 15
    251e:	0f b6       	in	r0, 0x3f	; 63
    2520:	f8 94       	cli
    2522:	de bf       	out	0x3e, r29	; 62
    2524:	0f be       	out	0x3f, r0	; 63
    2526:	cd bf       	out	0x3d, r28	; 61
    2528:	cf 91       	pop	r28
    252a:	df 91       	pop	r29
    252c:	08 95       	ret

0000252e <LCD_voidWriteCharctr_4bitMode>:
void LCD_voidWriteCharctr_4bitMode(uint8 u8DataCpy){		//LCD_voidWriteCharctr('A')
    252e:	0f 93       	push	r16
    2530:	1f 93       	push	r17
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
    253a:	c1 56       	subi	r28, 0x61	; 97
    253c:	d0 40       	sbci	r29, 0x00	; 0
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	f8 94       	cli
    2542:	de bf       	out	0x3e, r29	; 62
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	cd bf       	out	0x3d, r28	; 61
    2548:	fe 01       	movw	r30, r28
    254a:	ef 59       	subi	r30, 0x9F	; 159
    254c:	ff 4f       	sbci	r31, 0xFF	; 255
    254e:	80 83       	st	Z, r24
	/* Command(0) or Data(1) */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_RSPIN, DIO_HIGH);
    2550:	83 e0       	ldi	r24, 0x03	; 3
    2552:	62 e0       	ldi	r22, 0x02	; 2
    2554:	41 e0       	ldi	r20, 0x01	; 1
    2556:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
	/* Read(1) or Write(0) */
	//DIO_voidWritePin(lcd_CONTROLPORT, lcd_RWPIN, DIO_LOW);
	/* Write Data on Data Pins, sending upper nibble*/
	DIO_voidWritePort(lcd_DATAPORT, (lcd_DATAPORT & 0x0F) | (u8DataCpy & 0xF0));
    255a:	fe 01       	movw	r30, r28
    255c:	ef 59       	subi	r30, 0x9F	; 159
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	80 81       	ld	r24, Z
    2562:	80 7f       	andi	r24, 0xF0	; 240
    2564:	84 60       	ori	r24, 0x04	; 4
    2566:	98 2f       	mov	r25, r24
    2568:	84 e0       	ldi	r24, 0x04	; 4
    256a:	69 2f       	mov	r22, r25
    256c:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <DIO_voidWritePort>
	/* Enable Sequence */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    2570:	83 e0       	ldi	r24, 0x03	; 3
    2572:	63 e0       	ldi	r22, 0x03	; 3
    2574:	41 e0       	ldi	r20, 0x01	; 1
    2576:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
    257a:	fe 01       	movw	r30, r28
    257c:	e3 5a       	subi	r30, 0xA3	; 163
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	80 e0       	ldi	r24, 0x00	; 0
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	a0 ea       	ldi	r26, 0xA0	; 160
    2586:	b0 e4       	ldi	r27, 0x40	; 64
    2588:	80 83       	st	Z, r24
    258a:	91 83       	std	Z+1, r25	; 0x01
    258c:	a2 83       	std	Z+2, r26	; 0x02
    258e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2590:	8e 01       	movw	r16, r28
    2592:	07 5a       	subi	r16, 0xA7	; 167
    2594:	1f 4f       	sbci	r17, 0xFF	; 255
    2596:	fe 01       	movw	r30, r28
    2598:	e3 5a       	subi	r30, 0xA3	; 163
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	60 81       	ld	r22, Z
    259e:	71 81       	ldd	r23, Z+1	; 0x01
    25a0:	82 81       	ldd	r24, Z+2	; 0x02
    25a2:	93 81       	ldd	r25, Z+3	; 0x03
    25a4:	2b ea       	ldi	r18, 0xAB	; 171
    25a6:	3a ea       	ldi	r19, 0xAA	; 170
    25a8:	4a e2       	ldi	r20, 0x2A	; 42
    25aa:	50 e4       	ldi	r21, 0x40	; 64
    25ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	f8 01       	movw	r30, r16
    25b6:	80 83       	st	Z, r24
    25b8:	91 83       	std	Z+1, r25	; 0x01
    25ba:	a2 83       	std	Z+2, r26	; 0x02
    25bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25be:	fe 01       	movw	r30, r28
    25c0:	e7 5a       	subi	r30, 0xA7	; 167
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	60 81       	ld	r22, Z
    25c6:	71 81       	ldd	r23, Z+1	; 0x01
    25c8:	82 81       	ldd	r24, Z+2	; 0x02
    25ca:	93 81       	ldd	r25, Z+3	; 0x03
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	40 e8       	ldi	r20, 0x80	; 128
    25d2:	5f e3       	ldi	r21, 0x3F	; 63
    25d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25d8:	88 23       	and	r24, r24
    25da:	34 f4       	brge	.+12     	; 0x25e8 <LCD_voidWriteCharctr_4bitMode+0xba>
		__ticks = 1;
    25dc:	fe 01       	movw	r30, r28
    25de:	e8 5a       	subi	r30, 0xA8	; 168
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	80 83       	st	Z, r24
    25e6:	e0 c0       	rjmp	.+448    	; 0x27a8 <LCD_voidWriteCharctr_4bitMode+0x27a>
	else if (__tmp > 255)
    25e8:	fe 01       	movw	r30, r28
    25ea:	e7 5a       	subi	r30, 0xA7	; 167
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	60 81       	ld	r22, Z
    25f0:	71 81       	ldd	r23, Z+1	; 0x01
    25f2:	82 81       	ldd	r24, Z+2	; 0x02
    25f4:	93 81       	ldd	r25, Z+3	; 0x03
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	4f e7       	ldi	r20, 0x7F	; 127
    25fc:	53 e4       	ldi	r21, 0x43	; 67
    25fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2602:	18 16       	cp	r1, r24
    2604:	0c f0       	brlt	.+2      	; 0x2608 <LCD_voidWriteCharctr_4bitMode+0xda>
    2606:	c0 c0       	rjmp	.+384    	; 0x2788 <LCD_voidWriteCharctr_4bitMode+0x25a>
	{
		_delay_ms(__us / 1000.0);
    2608:	fe 01       	movw	r30, r28
    260a:	e3 5a       	subi	r30, 0xA3	; 163
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	60 81       	ld	r22, Z
    2610:	71 81       	ldd	r23, Z+1	; 0x01
    2612:	82 81       	ldd	r24, Z+2	; 0x02
    2614:	93 81       	ldd	r25, Z+3	; 0x03
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	4a e7       	ldi	r20, 0x7A	; 122
    261c:	54 e4       	ldi	r21, 0x44	; 68
    261e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	fe 01       	movw	r30, r28
    2628:	ec 5a       	subi	r30, 0xAC	; 172
    262a:	ff 4f       	sbci	r31, 0xFF	; 255
    262c:	80 83       	st	Z, r24
    262e:	91 83       	std	Z+1, r25	; 0x01
    2630:	a2 83       	std	Z+2, r26	; 0x02
    2632:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2634:	8e 01       	movw	r16, r28
    2636:	00 5b       	subi	r16, 0xB0	; 176
    2638:	1f 4f       	sbci	r17, 0xFF	; 255
    263a:	fe 01       	movw	r30, r28
    263c:	ec 5a       	subi	r30, 0xAC	; 172
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	60 81       	ld	r22, Z
    2642:	71 81       	ldd	r23, Z+1	; 0x01
    2644:	82 81       	ldd	r24, Z+2	; 0x02
    2646:	93 81       	ldd	r25, Z+3	; 0x03
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	4a ef       	ldi	r20, 0xFA	; 250
    264e:	54 e4       	ldi	r21, 0x44	; 68
    2650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	f8 01       	movw	r30, r16
    265a:	80 83       	st	Z, r24
    265c:	91 83       	std	Z+1, r25	; 0x01
    265e:	a2 83       	std	Z+2, r26	; 0x02
    2660:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2662:	fe 01       	movw	r30, r28
    2664:	e0 5b       	subi	r30, 0xB0	; 176
    2666:	ff 4f       	sbci	r31, 0xFF	; 255
    2668:	60 81       	ld	r22, Z
    266a:	71 81       	ldd	r23, Z+1	; 0x01
    266c:	82 81       	ldd	r24, Z+2	; 0x02
    266e:	93 81       	ldd	r25, Z+3	; 0x03
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	40 e8       	ldi	r20, 0x80	; 128
    2676:	5f e3       	ldi	r21, 0x3F	; 63
    2678:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    267c:	88 23       	and	r24, r24
    267e:	44 f4       	brge	.+16     	; 0x2690 <LCD_voidWriteCharctr_4bitMode+0x162>
		__ticks = 1;
    2680:	fe 01       	movw	r30, r28
    2682:	e2 5b       	subi	r30, 0xB2	; 178
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	91 83       	std	Z+1, r25	; 0x01
    268c:	80 83       	st	Z, r24
    268e:	64 c0       	rjmp	.+200    	; 0x2758 <LCD_voidWriteCharctr_4bitMode+0x22a>
	else if (__tmp > 65535)
    2690:	fe 01       	movw	r30, r28
    2692:	e0 5b       	subi	r30, 0xB0	; 176
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	60 81       	ld	r22, Z
    2698:	71 81       	ldd	r23, Z+1	; 0x01
    269a:	82 81       	ldd	r24, Z+2	; 0x02
    269c:	93 81       	ldd	r25, Z+3	; 0x03
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	3f ef       	ldi	r19, 0xFF	; 255
    26a2:	4f e7       	ldi	r20, 0x7F	; 127
    26a4:	57 e4       	ldi	r21, 0x47	; 71
    26a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26aa:	18 16       	cp	r1, r24
    26ac:	0c f0       	brlt	.+2      	; 0x26b0 <LCD_voidWriteCharctr_4bitMode+0x182>
    26ae:	43 c0       	rjmp	.+134    	; 0x2736 <LCD_voidWriteCharctr_4bitMode+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b0:	fe 01       	movw	r30, r28
    26b2:	ec 5a       	subi	r30, 0xAC	; 172
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	60 81       	ld	r22, Z
    26b8:	71 81       	ldd	r23, Z+1	; 0x01
    26ba:	82 81       	ldd	r24, Z+2	; 0x02
    26bc:	93 81       	ldd	r25, Z+3	; 0x03
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	40 e2       	ldi	r20, 0x20	; 32
    26c4:	51 e4       	ldi	r21, 0x41	; 65
    26c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	8e 01       	movw	r16, r28
    26d0:	02 5b       	subi	r16, 0xB2	; 178
    26d2:	1f 4f       	sbci	r17, 0xFF	; 255
    26d4:	bc 01       	movw	r22, r24
    26d6:	cd 01       	movw	r24, r26
    26d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	f8 01       	movw	r30, r16
    26e2:	91 83       	std	Z+1, r25	; 0x01
    26e4:	80 83       	st	Z, r24
    26e6:	1f c0       	rjmp	.+62     	; 0x2726 <LCD_voidWriteCharctr_4bitMode+0x1f8>
    26e8:	fe 01       	movw	r30, r28
    26ea:	e4 5b       	subi	r30, 0xB4	; 180
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	88 ec       	ldi	r24, 0xC8	; 200
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	91 83       	std	Z+1, r25	; 0x01
    26f4:	80 83       	st	Z, r24
    26f6:	fe 01       	movw	r30, r28
    26f8:	e4 5b       	subi	r30, 0xB4	; 180
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	80 81       	ld	r24, Z
    26fe:	91 81       	ldd	r25, Z+1	; 0x01
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	f1 f7       	brne	.-4      	; 0x2700 <LCD_voidWriteCharctr_4bitMode+0x1d2>
    2704:	fe 01       	movw	r30, r28
    2706:	e4 5b       	subi	r30, 0xB4	; 180
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	91 83       	std	Z+1, r25	; 0x01
    270c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    270e:	de 01       	movw	r26, r28
    2710:	a2 5b       	subi	r26, 0xB2	; 178
    2712:	bf 4f       	sbci	r27, 0xFF	; 255
    2714:	fe 01       	movw	r30, r28
    2716:	e2 5b       	subi	r30, 0xB2	; 178
    2718:	ff 4f       	sbci	r31, 0xFF	; 255
    271a:	80 81       	ld	r24, Z
    271c:	91 81       	ldd	r25, Z+1	; 0x01
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	11 96       	adiw	r26, 0x01	; 1
    2722:	9c 93       	st	X, r25
    2724:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2726:	fe 01       	movw	r30, r28
    2728:	e2 5b       	subi	r30, 0xB2	; 178
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	80 81       	ld	r24, Z
    272e:	91 81       	ldd	r25, Z+1	; 0x01
    2730:	00 97       	sbiw	r24, 0x00	; 0
    2732:	d1 f6       	brne	.-76     	; 0x26e8 <LCD_voidWriteCharctr_4bitMode+0x1ba>
    2734:	4b c0       	rjmp	.+150    	; 0x27cc <LCD_voidWriteCharctr_4bitMode+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2736:	8e 01       	movw	r16, r28
    2738:	02 5b       	subi	r16, 0xB2	; 178
    273a:	1f 4f       	sbci	r17, 0xFF	; 255
    273c:	fe 01       	movw	r30, r28
    273e:	e0 5b       	subi	r30, 0xB0	; 176
    2740:	ff 4f       	sbci	r31, 0xFF	; 255
    2742:	60 81       	ld	r22, Z
    2744:	71 81       	ldd	r23, Z+1	; 0x01
    2746:	82 81       	ldd	r24, Z+2	; 0x02
    2748:	93 81       	ldd	r25, Z+3	; 0x03
    274a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	f8 01       	movw	r30, r16
    2754:	91 83       	std	Z+1, r25	; 0x01
    2756:	80 83       	st	Z, r24
    2758:	de 01       	movw	r26, r28
    275a:	a6 5b       	subi	r26, 0xB6	; 182
    275c:	bf 4f       	sbci	r27, 0xFF	; 255
    275e:	fe 01       	movw	r30, r28
    2760:	e2 5b       	subi	r30, 0xB2	; 178
    2762:	ff 4f       	sbci	r31, 0xFF	; 255
    2764:	80 81       	ld	r24, Z
    2766:	91 81       	ldd	r25, Z+1	; 0x01
    2768:	11 96       	adiw	r26, 0x01	; 1
    276a:	9c 93       	st	X, r25
    276c:	8e 93       	st	-X, r24
    276e:	fe 01       	movw	r30, r28
    2770:	e6 5b       	subi	r30, 0xB6	; 182
    2772:	ff 4f       	sbci	r31, 0xFF	; 255
    2774:	80 81       	ld	r24, Z
    2776:	91 81       	ldd	r25, Z+1	; 0x01
    2778:	01 97       	sbiw	r24, 0x01	; 1
    277a:	f1 f7       	brne	.-4      	; 0x2778 <LCD_voidWriteCharctr_4bitMode+0x24a>
    277c:	fe 01       	movw	r30, r28
    277e:	e6 5b       	subi	r30, 0xB6	; 182
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	91 83       	std	Z+1, r25	; 0x01
    2784:	80 83       	st	Z, r24
    2786:	22 c0       	rjmp	.+68     	; 0x27cc <LCD_voidWriteCharctr_4bitMode+0x29e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2788:	8e 01       	movw	r16, r28
    278a:	08 5a       	subi	r16, 0xA8	; 168
    278c:	1f 4f       	sbci	r17, 0xFF	; 255
    278e:	fe 01       	movw	r30, r28
    2790:	e7 5a       	subi	r30, 0xA7	; 167
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	60 81       	ld	r22, Z
    2796:	71 81       	ldd	r23, Z+1	; 0x01
    2798:	82 81       	ldd	r24, Z+2	; 0x02
    279a:	93 81       	ldd	r25, Z+3	; 0x03
    279c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	f8 01       	movw	r30, r16
    27a6:	80 83       	st	Z, r24
    27a8:	de 01       	movw	r26, r28
    27aa:	a7 5b       	subi	r26, 0xB7	; 183
    27ac:	bf 4f       	sbci	r27, 0xFF	; 255
    27ae:	fe 01       	movw	r30, r28
    27b0:	e8 5a       	subi	r30, 0xA8	; 168
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	80 81       	ld	r24, Z
    27b6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27b8:	fe 01       	movw	r30, r28
    27ba:	e7 5b       	subi	r30, 0xB7	; 183
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	80 81       	ld	r24, Z
    27c0:	8a 95       	dec	r24
    27c2:	f1 f7       	brne	.-4      	; 0x27c0 <LCD_voidWriteCharctr_4bitMode+0x292>
    27c4:	fe 01       	movw	r30, r28
    27c6:	e7 5b       	subi	r30, 0xB7	; 183
    27c8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ca:	80 83       	st	Z, r24
	_delay_us(5);
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    27cc:	83 e0       	ldi	r24, 0x03	; 3
    27ce:	63 e0       	ldi	r22, 0x03	; 3
    27d0:	40 e0       	ldi	r20, 0x00	; 0
    27d2:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
    27d6:	fe 01       	movw	r30, r28
    27d8:	eb 5b       	subi	r30, 0xBB	; 187
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	a8 e4       	ldi	r26, 0x48	; 72
    27e2:	b3 e4       	ldi	r27, 0x43	; 67
    27e4:	80 83       	st	Z, r24
    27e6:	91 83       	std	Z+1, r25	; 0x01
    27e8:	a2 83       	std	Z+2, r26	; 0x02
    27ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    27ec:	8e 01       	movw	r16, r28
    27ee:	0f 5b       	subi	r16, 0xBF	; 191
    27f0:	1f 4f       	sbci	r17, 0xFF	; 255
    27f2:	fe 01       	movw	r30, r28
    27f4:	eb 5b       	subi	r30, 0xBB	; 187
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	60 81       	ld	r22, Z
    27fa:	71 81       	ldd	r23, Z+1	; 0x01
    27fc:	82 81       	ldd	r24, Z+2	; 0x02
    27fe:	93 81       	ldd	r25, Z+3	; 0x03
    2800:	2b ea       	ldi	r18, 0xAB	; 171
    2802:	3a ea       	ldi	r19, 0xAA	; 170
    2804:	4a e2       	ldi	r20, 0x2A	; 42
    2806:	50 e4       	ldi	r21, 0x40	; 64
    2808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	f8 01       	movw	r30, r16
    2812:	80 83       	st	Z, r24
    2814:	91 83       	std	Z+1, r25	; 0x01
    2816:	a2 83       	std	Z+2, r26	; 0x02
    2818:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    281a:	fe 01       	movw	r30, r28
    281c:	ef 5b       	subi	r30, 0xBF	; 191
    281e:	ff 4f       	sbci	r31, 0xFF	; 255
    2820:	60 81       	ld	r22, Z
    2822:	71 81       	ldd	r23, Z+1	; 0x01
    2824:	82 81       	ldd	r24, Z+2	; 0x02
    2826:	93 81       	ldd	r25, Z+3	; 0x03
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	40 e8       	ldi	r20, 0x80	; 128
    282e:	5f e3       	ldi	r21, 0x3F	; 63
    2830:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2834:	88 23       	and	r24, r24
    2836:	34 f4       	brge	.+12     	; 0x2844 <LCD_voidWriteCharctr_4bitMode+0x316>
		__ticks = 1;
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	fe 01       	movw	r30, r28
    283c:	e0 5c       	subi	r30, 0xC0	; 192
    283e:	ff 4f       	sbci	r31, 0xFF	; 255
    2840:	80 83       	st	Z, r24
    2842:	9d c0       	rjmp	.+314    	; 0x297e <LCD_voidWriteCharctr_4bitMode+0x450>
	else if (__tmp > 255)
    2844:	fe 01       	movw	r30, r28
    2846:	ef 5b       	subi	r30, 0xBF	; 191
    2848:	ff 4f       	sbci	r31, 0xFF	; 255
    284a:	60 81       	ld	r22, Z
    284c:	71 81       	ldd	r23, Z+1	; 0x01
    284e:	82 81       	ldd	r24, Z+2	; 0x02
    2850:	93 81       	ldd	r25, Z+3	; 0x03
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	4f e7       	ldi	r20, 0x7F	; 127
    2858:	53 e4       	ldi	r21, 0x43	; 67
    285a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    285e:	18 16       	cp	r1, r24
    2860:	0c f0       	brlt	.+2      	; 0x2864 <LCD_voidWriteCharctr_4bitMode+0x336>
    2862:	7e c0       	rjmp	.+252    	; 0x2960 <LCD_voidWriteCharctr_4bitMode+0x432>
	{
		_delay_ms(__us / 1000.0);
    2864:	fe 01       	movw	r30, r28
    2866:	eb 5b       	subi	r30, 0xBB	; 187
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	60 81       	ld	r22, Z
    286c:	71 81       	ldd	r23, Z+1	; 0x01
    286e:	82 81       	ldd	r24, Z+2	; 0x02
    2870:	93 81       	ldd	r25, Z+3	; 0x03
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	4a e7       	ldi	r20, 0x7A	; 122
    2878:	54 e4       	ldi	r21, 0x44	; 68
    287a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	8c af       	std	Y+60, r24	; 0x3c
    2884:	9d af       	std	Y+61, r25	; 0x3d
    2886:	ae af       	std	Y+62, r26	; 0x3e
    2888:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    288a:	6c ad       	ldd	r22, Y+60	; 0x3c
    288c:	7d ad       	ldd	r23, Y+61	; 0x3d
    288e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2890:	9f ad       	ldd	r25, Y+63	; 0x3f
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	4a ef       	ldi	r20, 0xFA	; 250
    2898:	54 e4       	ldi	r21, 0x44	; 68
    289a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	88 af       	std	Y+56, r24	; 0x38
    28a4:	99 af       	std	Y+57, r25	; 0x39
    28a6:	aa af       	std	Y+58, r26	; 0x3a
    28a8:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    28aa:	68 ad       	ldd	r22, Y+56	; 0x38
    28ac:	79 ad       	ldd	r23, Y+57	; 0x39
    28ae:	8a ad       	ldd	r24, Y+58	; 0x3a
    28b0:	9b ad       	ldd	r25, Y+59	; 0x3b
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	40 e8       	ldi	r20, 0x80	; 128
    28b8:	5f e3       	ldi	r21, 0x3F	; 63
    28ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28be:	88 23       	and	r24, r24
    28c0:	2c f4       	brge	.+10     	; 0x28cc <LCD_voidWriteCharctr_4bitMode+0x39e>
		__ticks = 1;
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	9f ab       	std	Y+55, r25	; 0x37
    28c8:	8e ab       	std	Y+54, r24	; 0x36
    28ca:	3f c0       	rjmp	.+126    	; 0x294a <LCD_voidWriteCharctr_4bitMode+0x41c>
	else if (__tmp > 65535)
    28cc:	68 ad       	ldd	r22, Y+56	; 0x38
    28ce:	79 ad       	ldd	r23, Y+57	; 0x39
    28d0:	8a ad       	ldd	r24, Y+58	; 0x3a
    28d2:	9b ad       	ldd	r25, Y+59	; 0x3b
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	3f ef       	ldi	r19, 0xFF	; 255
    28d8:	4f e7       	ldi	r20, 0x7F	; 127
    28da:	57 e4       	ldi	r21, 0x47	; 71
    28dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28e0:	18 16       	cp	r1, r24
    28e2:	4c f5       	brge	.+82     	; 0x2936 <LCD_voidWriteCharctr_4bitMode+0x408>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e4:	6c ad       	ldd	r22, Y+60	; 0x3c
    28e6:	7d ad       	ldd	r23, Y+61	; 0x3d
    28e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    28ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	40 e2       	ldi	r20, 0x20	; 32
    28f2:	51 e4       	ldi	r21, 0x41	; 65
    28f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	bc 01       	movw	r22, r24
    28fe:	cd 01       	movw	r24, r26
    2900:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	9f ab       	std	Y+55, r25	; 0x37
    290a:	8e ab       	std	Y+54, r24	; 0x36
    290c:	0f c0       	rjmp	.+30     	; 0x292c <LCD_voidWriteCharctr_4bitMode+0x3fe>
    290e:	88 ec       	ldi	r24, 0xC8	; 200
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	9d ab       	std	Y+53, r25	; 0x35
    2914:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2916:	8c a9       	ldd	r24, Y+52	; 0x34
    2918:	9d a9       	ldd	r25, Y+53	; 0x35
    291a:	01 97       	sbiw	r24, 0x01	; 1
    291c:	f1 f7       	brne	.-4      	; 0x291a <LCD_voidWriteCharctr_4bitMode+0x3ec>
    291e:	9d ab       	std	Y+53, r25	; 0x35
    2920:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2922:	8e a9       	ldd	r24, Y+54	; 0x36
    2924:	9f a9       	ldd	r25, Y+55	; 0x37
    2926:	01 97       	sbiw	r24, 0x01	; 1
    2928:	9f ab       	std	Y+55, r25	; 0x37
    292a:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    292c:	8e a9       	ldd	r24, Y+54	; 0x36
    292e:	9f a9       	ldd	r25, Y+55	; 0x37
    2930:	00 97       	sbiw	r24, 0x00	; 0
    2932:	69 f7       	brne	.-38     	; 0x290e <LCD_voidWriteCharctr_4bitMode+0x3e0>
    2934:	2d c0       	rjmp	.+90     	; 0x2990 <LCD_voidWriteCharctr_4bitMode+0x462>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2936:	68 ad       	ldd	r22, Y+56	; 0x38
    2938:	79 ad       	ldd	r23, Y+57	; 0x39
    293a:	8a ad       	ldd	r24, Y+58	; 0x3a
    293c:	9b ad       	ldd	r25, Y+59	; 0x3b
    293e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2942:	dc 01       	movw	r26, r24
    2944:	cb 01       	movw	r24, r22
    2946:	9f ab       	std	Y+55, r25	; 0x37
    2948:	8e ab       	std	Y+54, r24	; 0x36
    294a:	8e a9       	ldd	r24, Y+54	; 0x36
    294c:	9f a9       	ldd	r25, Y+55	; 0x37
    294e:	9b ab       	std	Y+51, r25	; 0x33
    2950:	8a ab       	std	Y+50, r24	; 0x32
    2952:	8a a9       	ldd	r24, Y+50	; 0x32
    2954:	9b a9       	ldd	r25, Y+51	; 0x33
    2956:	01 97       	sbiw	r24, 0x01	; 1
    2958:	f1 f7       	brne	.-4      	; 0x2956 <LCD_voidWriteCharctr_4bitMode+0x428>
    295a:	9b ab       	std	Y+51, r25	; 0x33
    295c:	8a ab       	std	Y+50, r24	; 0x32
    295e:	18 c0       	rjmp	.+48     	; 0x2990 <LCD_voidWriteCharctr_4bitMode+0x462>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2960:	fe 01       	movw	r30, r28
    2962:	ef 5b       	subi	r30, 0xBF	; 191
    2964:	ff 4f       	sbci	r31, 0xFF	; 255
    2966:	60 81       	ld	r22, Z
    2968:	71 81       	ldd	r23, Z+1	; 0x01
    296a:	82 81       	ldd	r24, Z+2	; 0x02
    296c:	93 81       	ldd	r25, Z+3	; 0x03
    296e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	fe 01       	movw	r30, r28
    2978:	e0 5c       	subi	r30, 0xC0	; 192
    297a:	ff 4f       	sbci	r31, 0xFF	; 255
    297c:	80 83       	st	Z, r24
    297e:	fe 01       	movw	r30, r28
    2980:	e0 5c       	subi	r30, 0xC0	; 192
    2982:	ff 4f       	sbci	r31, 0xFF	; 255
    2984:	80 81       	ld	r24, Z
    2986:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2988:	89 a9       	ldd	r24, Y+49	; 0x31
    298a:	8a 95       	dec	r24
    298c:	f1 f7       	brne	.-4      	; 0x298a <LCD_voidWriteCharctr_4bitMode+0x45c>
    298e:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);

	/* Write Data on Data Pins, sending lower nibble*/
	DIO_voidWritePort(lcd_DATAPORT, (lcd_DATAPORT & 0x0F) | (u8DataCpy <<4));
    2990:	fe 01       	movw	r30, r28
    2992:	ef 59       	subi	r30, 0x9F	; 159
    2994:	ff 4f       	sbci	r31, 0xFF	; 255
    2996:	80 81       	ld	r24, Z
    2998:	88 2f       	mov	r24, r24
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	82 95       	swap	r24
    299e:	92 95       	swap	r25
    29a0:	90 7f       	andi	r25, 0xF0	; 240
    29a2:	98 27       	eor	r25, r24
    29a4:	80 7f       	andi	r24, 0xF0	; 240
    29a6:	98 27       	eor	r25, r24
    29a8:	84 60       	ori	r24, 0x04	; 4
    29aa:	98 2f       	mov	r25, r24
    29ac:	84 e0       	ldi	r24, 0x04	; 4
    29ae:	69 2f       	mov	r22, r25
    29b0:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <DIO_voidWritePort>
	/* Enable Sequence */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    29b4:	83 e0       	ldi	r24, 0x03	; 3
    29b6:	63 e0       	ldi	r22, 0x03	; 3
    29b8:	41 e0       	ldi	r20, 0x01	; 1
    29ba:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	a0 ea       	ldi	r26, 0xA0	; 160
    29c4:	b0 e4       	ldi	r27, 0x40	; 64
    29c6:	8d a7       	std	Y+45, r24	; 0x2d
    29c8:	9e a7       	std	Y+46, r25	; 0x2e
    29ca:	af a7       	std	Y+47, r26	; 0x2f
    29cc:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    29ce:	6d a5       	ldd	r22, Y+45	; 0x2d
    29d0:	7e a5       	ldd	r23, Y+46	; 0x2e
    29d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    29d4:	98 a9       	ldd	r25, Y+48	; 0x30
    29d6:	2b ea       	ldi	r18, 0xAB	; 171
    29d8:	3a ea       	ldi	r19, 0xAA	; 170
    29da:	4a e2       	ldi	r20, 0x2A	; 42
    29dc:	50 e4       	ldi	r21, 0x40	; 64
    29de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	89 a7       	std	Y+41, r24	; 0x29
    29e8:	9a a7       	std	Y+42, r25	; 0x2a
    29ea:	ab a7       	std	Y+43, r26	; 0x2b
    29ec:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    29ee:	69 a5       	ldd	r22, Y+41	; 0x29
    29f0:	7a a5       	ldd	r23, Y+42	; 0x2a
    29f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    29f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	40 e8       	ldi	r20, 0x80	; 128
    29fc:	5f e3       	ldi	r21, 0x3F	; 63
    29fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a02:	88 23       	and	r24, r24
    2a04:	1c f4       	brge	.+6      	; 0x2a0c <LCD_voidWriteCharctr_4bitMode+0x4de>
		__ticks = 1;
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	88 a7       	std	Y+40, r24	; 0x28
    2a0a:	91 c0       	rjmp	.+290    	; 0x2b2e <LCD_voidWriteCharctr_4bitMode+0x600>
	else if (__tmp > 255)
    2a0c:	69 a5       	ldd	r22, Y+41	; 0x29
    2a0e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2a10:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a12:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	4f e7       	ldi	r20, 0x7F	; 127
    2a1a:	53 e4       	ldi	r21, 0x43	; 67
    2a1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a20:	18 16       	cp	r1, r24
    2a22:	0c f0       	brlt	.+2      	; 0x2a26 <LCD_voidWriteCharctr_4bitMode+0x4f8>
    2a24:	7b c0       	rjmp	.+246    	; 0x2b1c <LCD_voidWriteCharctr_4bitMode+0x5ee>
	{
		_delay_ms(__us / 1000.0);
    2a26:	6d a5       	ldd	r22, Y+45	; 0x2d
    2a28:	7e a5       	ldd	r23, Y+46	; 0x2e
    2a2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a2c:	98 a9       	ldd	r25, Y+48	; 0x30
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	4a e7       	ldi	r20, 0x7A	; 122
    2a34:	54 e4       	ldi	r21, 0x44	; 68
    2a36:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	cb 01       	movw	r24, r22
    2a3e:	8c a3       	std	Y+36, r24	; 0x24
    2a40:	9d a3       	std	Y+37, r25	; 0x25
    2a42:	ae a3       	std	Y+38, r26	; 0x26
    2a44:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a46:	6c a1       	ldd	r22, Y+36	; 0x24
    2a48:	7d a1       	ldd	r23, Y+37	; 0x25
    2a4a:	8e a1       	ldd	r24, Y+38	; 0x26
    2a4c:	9f a1       	ldd	r25, Y+39	; 0x27
    2a4e:	20 e0       	ldi	r18, 0x00	; 0
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	4a ef       	ldi	r20, 0xFA	; 250
    2a54:	54 e4       	ldi	r21, 0x44	; 68
    2a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	88 a3       	std	Y+32, r24	; 0x20
    2a60:	99 a3       	std	Y+33, r25	; 0x21
    2a62:	aa a3       	std	Y+34, r26	; 0x22
    2a64:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2a66:	68 a1       	ldd	r22, Y+32	; 0x20
    2a68:	79 a1       	ldd	r23, Y+33	; 0x21
    2a6a:	8a a1       	ldd	r24, Y+34	; 0x22
    2a6c:	9b a1       	ldd	r25, Y+35	; 0x23
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	40 e8       	ldi	r20, 0x80	; 128
    2a74:	5f e3       	ldi	r21, 0x3F	; 63
    2a76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a7a:	88 23       	and	r24, r24
    2a7c:	2c f4       	brge	.+10     	; 0x2a88 <LCD_voidWriteCharctr_4bitMode+0x55a>
		__ticks = 1;
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	9f 8f       	std	Y+31, r25	; 0x1f
    2a84:	8e 8f       	std	Y+30, r24	; 0x1e
    2a86:	3f c0       	rjmp	.+126    	; 0x2b06 <LCD_voidWriteCharctr_4bitMode+0x5d8>
	else if (__tmp > 65535)
    2a88:	68 a1       	ldd	r22, Y+32	; 0x20
    2a8a:	79 a1       	ldd	r23, Y+33	; 0x21
    2a8c:	8a a1       	ldd	r24, Y+34	; 0x22
    2a8e:	9b a1       	ldd	r25, Y+35	; 0x23
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	3f ef       	ldi	r19, 0xFF	; 255
    2a94:	4f e7       	ldi	r20, 0x7F	; 127
    2a96:	57 e4       	ldi	r21, 0x47	; 71
    2a98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a9c:	18 16       	cp	r1, r24
    2a9e:	4c f5       	brge	.+82     	; 0x2af2 <LCD_voidWriteCharctr_4bitMode+0x5c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa0:	6c a1       	ldd	r22, Y+36	; 0x24
    2aa2:	7d a1       	ldd	r23, Y+37	; 0x25
    2aa4:	8e a1       	ldd	r24, Y+38	; 0x26
    2aa6:	9f a1       	ldd	r25, Y+39	; 0x27
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	40 e2       	ldi	r20, 0x20	; 32
    2aae:	51 e4       	ldi	r21, 0x41	; 65
    2ab0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	bc 01       	movw	r22, r24
    2aba:	cd 01       	movw	r24, r26
    2abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	9f 8f       	std	Y+31, r25	; 0x1f
    2ac6:	8e 8f       	std	Y+30, r24	; 0x1e
    2ac8:	0f c0       	rjmp	.+30     	; 0x2ae8 <LCD_voidWriteCharctr_4bitMode+0x5ba>
    2aca:	88 ec       	ldi	r24, 0xC8	; 200
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	9d 8f       	std	Y+29, r25	; 0x1d
    2ad0:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ad2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ad4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2ad6:	01 97       	sbiw	r24, 0x01	; 1
    2ad8:	f1 f7       	brne	.-4      	; 0x2ad6 <LCD_voidWriteCharctr_4bitMode+0x5a8>
    2ada:	9d 8f       	std	Y+29, r25	; 0x1d
    2adc:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ade:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ae0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	9f 8f       	std	Y+31, r25	; 0x1f
    2ae6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2aea:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2aec:	00 97       	sbiw	r24, 0x00	; 0
    2aee:	69 f7       	brne	.-38     	; 0x2aca <LCD_voidWriteCharctr_4bitMode+0x59c>
    2af0:	24 c0       	rjmp	.+72     	; 0x2b3a <LCD_voidWriteCharctr_4bitMode+0x60c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af2:	68 a1       	ldd	r22, Y+32	; 0x20
    2af4:	79 a1       	ldd	r23, Y+33	; 0x21
    2af6:	8a a1       	ldd	r24, Y+34	; 0x22
    2af8:	9b a1       	ldd	r25, Y+35	; 0x23
    2afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afe:	dc 01       	movw	r26, r24
    2b00:	cb 01       	movw	r24, r22
    2b02:	9f 8f       	std	Y+31, r25	; 0x1f
    2b04:	8e 8f       	std	Y+30, r24	; 0x1e
    2b06:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b08:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b0a:	9b 8f       	std	Y+27, r25	; 0x1b
    2b0c:	8a 8f       	std	Y+26, r24	; 0x1a
    2b0e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b10:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2b12:	01 97       	sbiw	r24, 0x01	; 1
    2b14:	f1 f7       	brne	.-4      	; 0x2b12 <LCD_voidWriteCharctr_4bitMode+0x5e4>
    2b16:	9b 8f       	std	Y+27, r25	; 0x1b
    2b18:	8a 8f       	std	Y+26, r24	; 0x1a
    2b1a:	0f c0       	rjmp	.+30     	; 0x2b3a <LCD_voidWriteCharctr_4bitMode+0x60c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b1c:	69 a5       	ldd	r22, Y+41	; 0x29
    2b1e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b20:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b22:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	88 a7       	std	Y+40, r24	; 0x28
    2b2e:	88 a5       	ldd	r24, Y+40	; 0x28
    2b30:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b32:	89 8d       	ldd	r24, Y+25	; 0x19
    2b34:	8a 95       	dec	r24
    2b36:	f1 f7       	brne	.-4      	; 0x2b34 <LCD_voidWriteCharctr_4bitMode+0x606>
    2b38:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(5);
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    2b3a:	83 e0       	ldi	r24, 0x03	; 3
    2b3c:	63 e0       	ldi	r22, 0x03	; 3
    2b3e:	40 e0       	ldi	r20, 0x00	; 0
    2b40:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	a8 e4       	ldi	r26, 0x48	; 72
    2b4a:	b3 e4       	ldi	r27, 0x43	; 67
    2b4c:	8d 8b       	std	Y+21, r24	; 0x15
    2b4e:	9e 8b       	std	Y+22, r25	; 0x16
    2b50:	af 8b       	std	Y+23, r26	; 0x17
    2b52:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b54:	6d 89       	ldd	r22, Y+21	; 0x15
    2b56:	7e 89       	ldd	r23, Y+22	; 0x16
    2b58:	8f 89       	ldd	r24, Y+23	; 0x17
    2b5a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b5c:	2b ea       	ldi	r18, 0xAB	; 171
    2b5e:	3a ea       	ldi	r19, 0xAA	; 170
    2b60:	4a e2       	ldi	r20, 0x2A	; 42
    2b62:	50 e4       	ldi	r21, 0x40	; 64
    2b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	89 8b       	std	Y+17, r24	; 0x11
    2b6e:	9a 8b       	std	Y+18, r25	; 0x12
    2b70:	ab 8b       	std	Y+19, r26	; 0x13
    2b72:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2b74:	69 89       	ldd	r22, Y+17	; 0x11
    2b76:	7a 89       	ldd	r23, Y+18	; 0x12
    2b78:	8b 89       	ldd	r24, Y+19	; 0x13
    2b7a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	40 e8       	ldi	r20, 0x80	; 128
    2b82:	5f e3       	ldi	r21, 0x3F	; 63
    2b84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b88:	88 23       	and	r24, r24
    2b8a:	1c f4       	brge	.+6      	; 0x2b92 <LCD_voidWriteCharctr_4bitMode+0x664>
		__ticks = 1;
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	88 8b       	std	Y+16, r24	; 0x10
    2b90:	91 c0       	rjmp	.+290    	; 0x2cb4 <LCD_voidWriteCharctr_4bitMode+0x786>
	else if (__tmp > 255)
    2b92:	69 89       	ldd	r22, Y+17	; 0x11
    2b94:	7a 89       	ldd	r23, Y+18	; 0x12
    2b96:	8b 89       	ldd	r24, Y+19	; 0x13
    2b98:	9c 89       	ldd	r25, Y+20	; 0x14
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	4f e7       	ldi	r20, 0x7F	; 127
    2ba0:	53 e4       	ldi	r21, 0x43	; 67
    2ba2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ba6:	18 16       	cp	r1, r24
    2ba8:	0c f0       	brlt	.+2      	; 0x2bac <LCD_voidWriteCharctr_4bitMode+0x67e>
    2baa:	7b c0       	rjmp	.+246    	; 0x2ca2 <LCD_voidWriteCharctr_4bitMode+0x774>
	{
		_delay_ms(__us / 1000.0);
    2bac:	6d 89       	ldd	r22, Y+21	; 0x15
    2bae:	7e 89       	ldd	r23, Y+22	; 0x16
    2bb0:	8f 89       	ldd	r24, Y+23	; 0x17
    2bb2:	98 8d       	ldd	r25, Y+24	; 0x18
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	4a e7       	ldi	r20, 0x7A	; 122
    2bba:	54 e4       	ldi	r21, 0x44	; 68
    2bbc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	8c 87       	std	Y+12, r24	; 0x0c
    2bc6:	9d 87       	std	Y+13, r25	; 0x0d
    2bc8:	ae 87       	std	Y+14, r26	; 0x0e
    2bca:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bcc:	6c 85       	ldd	r22, Y+12	; 0x0c
    2bce:	7d 85       	ldd	r23, Y+13	; 0x0d
    2bd0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bd2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bd4:	20 e0       	ldi	r18, 0x00	; 0
    2bd6:	30 e0       	ldi	r19, 0x00	; 0
    2bd8:	4a ef       	ldi	r20, 0xFA	; 250
    2bda:	54 e4       	ldi	r21, 0x44	; 68
    2bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	88 87       	std	Y+8, r24	; 0x08
    2be6:	99 87       	std	Y+9, r25	; 0x09
    2be8:	aa 87       	std	Y+10, r26	; 0x0a
    2bea:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2bec:	68 85       	ldd	r22, Y+8	; 0x08
    2bee:	79 85       	ldd	r23, Y+9	; 0x09
    2bf0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bf2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	40 e8       	ldi	r20, 0x80	; 128
    2bfa:	5f e3       	ldi	r21, 0x3F	; 63
    2bfc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c00:	88 23       	and	r24, r24
    2c02:	2c f4       	brge	.+10     	; 0x2c0e <LCD_voidWriteCharctr_4bitMode+0x6e0>
		__ticks = 1;
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	9f 83       	std	Y+7, r25	; 0x07
    2c0a:	8e 83       	std	Y+6, r24	; 0x06
    2c0c:	3f c0       	rjmp	.+126    	; 0x2c8c <LCD_voidWriteCharctr_4bitMode+0x75e>
	else if (__tmp > 65535)
    2c0e:	68 85       	ldd	r22, Y+8	; 0x08
    2c10:	79 85       	ldd	r23, Y+9	; 0x09
    2c12:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c14:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c16:	20 e0       	ldi	r18, 0x00	; 0
    2c18:	3f ef       	ldi	r19, 0xFF	; 255
    2c1a:	4f e7       	ldi	r20, 0x7F	; 127
    2c1c:	57 e4       	ldi	r21, 0x47	; 71
    2c1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c22:	18 16       	cp	r1, r24
    2c24:	4c f5       	brge	.+82     	; 0x2c78 <LCD_voidWriteCharctr_4bitMode+0x74a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c26:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c28:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c2a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c2c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	40 e2       	ldi	r20, 0x20	; 32
    2c34:	51 e4       	ldi	r21, 0x41	; 65
    2c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	bc 01       	movw	r22, r24
    2c40:	cd 01       	movw	r24, r26
    2c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c46:	dc 01       	movw	r26, r24
    2c48:	cb 01       	movw	r24, r22
    2c4a:	9f 83       	std	Y+7, r25	; 0x07
    2c4c:	8e 83       	std	Y+6, r24	; 0x06
    2c4e:	0f c0       	rjmp	.+30     	; 0x2c6e <LCD_voidWriteCharctr_4bitMode+0x740>
    2c50:	88 ec       	ldi	r24, 0xC8	; 200
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	9d 83       	std	Y+5, r25	; 0x05
    2c56:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c58:	8c 81       	ldd	r24, Y+4	; 0x04
    2c5a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c5c:	01 97       	sbiw	r24, 0x01	; 1
    2c5e:	f1 f7       	brne	.-4      	; 0x2c5c <LCD_voidWriteCharctr_4bitMode+0x72e>
    2c60:	9d 83       	std	Y+5, r25	; 0x05
    2c62:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c64:	8e 81       	ldd	r24, Y+6	; 0x06
    2c66:	9f 81       	ldd	r25, Y+7	; 0x07
    2c68:	01 97       	sbiw	r24, 0x01	; 1
    2c6a:	9f 83       	std	Y+7, r25	; 0x07
    2c6c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c6e:	8e 81       	ldd	r24, Y+6	; 0x06
    2c70:	9f 81       	ldd	r25, Y+7	; 0x07
    2c72:	00 97       	sbiw	r24, 0x00	; 0
    2c74:	69 f7       	brne	.-38     	; 0x2c50 <LCD_voidWriteCharctr_4bitMode+0x722>
    2c76:	24 c0       	rjmp	.+72     	; 0x2cc0 <LCD_voidWriteCharctr_4bitMode+0x792>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c78:	68 85       	ldd	r22, Y+8	; 0x08
    2c7a:	79 85       	ldd	r23, Y+9	; 0x09
    2c7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c7e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c84:	dc 01       	movw	r26, r24
    2c86:	cb 01       	movw	r24, r22
    2c88:	9f 83       	std	Y+7, r25	; 0x07
    2c8a:	8e 83       	std	Y+6, r24	; 0x06
    2c8c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c8e:	9f 81       	ldd	r25, Y+7	; 0x07
    2c90:	9b 83       	std	Y+3, r25	; 0x03
    2c92:	8a 83       	std	Y+2, r24	; 0x02
    2c94:	8a 81       	ldd	r24, Y+2	; 0x02
    2c96:	9b 81       	ldd	r25, Y+3	; 0x03
    2c98:	01 97       	sbiw	r24, 0x01	; 1
    2c9a:	f1 f7       	brne	.-4      	; 0x2c98 <LCD_voidWriteCharctr_4bitMode+0x76a>
    2c9c:	9b 83       	std	Y+3, r25	; 0x03
    2c9e:	8a 83       	std	Y+2, r24	; 0x02
    2ca0:	0f c0       	rjmp	.+30     	; 0x2cc0 <LCD_voidWriteCharctr_4bitMode+0x792>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ca2:	69 89       	ldd	r22, Y+17	; 0x11
    2ca4:	7a 89       	ldd	r23, Y+18	; 0x12
    2ca6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ca8:	9c 89       	ldd	r25, Y+20	; 0x14
    2caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	88 8b       	std	Y+16, r24	; 0x10
    2cb4:	88 89       	ldd	r24, Y+16	; 0x10
    2cb6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2cb8:	89 81       	ldd	r24, Y+1	; 0x01
    2cba:	8a 95       	dec	r24
    2cbc:	f1 f7       	brne	.-4      	; 0x2cba <LCD_voidWriteCharctr_4bitMode+0x78c>
    2cbe:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);

}
    2cc0:	cf 59       	subi	r28, 0x9F	; 159
    2cc2:	df 4f       	sbci	r29, 0xFF	; 255
    2cc4:	0f b6       	in	r0, 0x3f	; 63
    2cc6:	f8 94       	cli
    2cc8:	de bf       	out	0x3e, r29	; 62
    2cca:	0f be       	out	0x3f, r0	; 63
    2ccc:	cd bf       	out	0x3d, r28	; 61
    2cce:	cf 91       	pop	r28
    2cd0:	df 91       	pop	r29
    2cd2:	1f 91       	pop	r17
    2cd4:	0f 91       	pop	r16
    2cd6:	08 95       	ret

00002cd8 <LCD_voidWriteString>:
void LCD_voidWriteString(uint8 *pu8StringCpy, uint8 u8Index){	//LCD_voidWriteString('Tasneem')
    2cd8:	df 93       	push	r29
    2cda:	cf 93       	push	r28
    2cdc:	00 d0       	rcall	.+0      	; 0x2cde <LCD_voidWriteString+0x6>
    2cde:	00 d0       	rcall	.+0      	; 0x2ce0 <LCD_voidWriteString+0x8>
    2ce0:	cd b7       	in	r28, 0x3d	; 61
    2ce2:	de b7       	in	r29, 0x3e	; 62
    2ce4:	9b 83       	std	Y+3, r25	; 0x03
    2ce6:	8a 83       	std	Y+2, r24	; 0x02
    2ce8:	6c 83       	std	Y+4, r22	; 0x04
	/*uint8 i=0;
	 *while(pu8StringCpy[i] != '\0'){
	 *		LCD_voidWriteCharctr(pu8StringCpy[i]);
	 *		i++;
	 *}*/
	for(uint8 i=0; i<u8Index; i++){
    2cea:	19 82       	std	Y+1, r1	; 0x01
    2cec:	0e c0       	rjmp	.+28     	; 0x2d0a <LCD_voidWriteString+0x32>
		LCD_voidWriteCharctr(pu8StringCpy[i]);
    2cee:	89 81       	ldd	r24, Y+1	; 0x01
    2cf0:	28 2f       	mov	r18, r24
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf8:	fc 01       	movw	r30, r24
    2cfa:	e2 0f       	add	r30, r18
    2cfc:	f3 1f       	adc	r31, r19
    2cfe:	80 81       	ld	r24, Z
    2d00:	0e 94 fe 11 	call	0x23fc	; 0x23fc <LCD_voidWriteCharctr>
	/*uint8 i=0;
	 *while(pu8StringCpy[i] != '\0'){
	 *		LCD_voidWriteCharctr(pu8StringCpy[i]);
	 *		i++;
	 *}*/
	for(uint8 i=0; i<u8Index; i++){
    2d04:	89 81       	ldd	r24, Y+1	; 0x01
    2d06:	8f 5f       	subi	r24, 0xFF	; 255
    2d08:	89 83       	std	Y+1, r24	; 0x01
    2d0a:	99 81       	ldd	r25, Y+1	; 0x01
    2d0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d0e:	98 17       	cp	r25, r24
    2d10:	70 f3       	brcs	.-36     	; 0x2cee <LCD_voidWriteString+0x16>
		LCD_voidWriteCharctr(pu8StringCpy[i]);
	}
}
    2d12:	0f 90       	pop	r0
    2d14:	0f 90       	pop	r0
    2d16:	0f 90       	pop	r0
    2d18:	0f 90       	pop	r0
    2d1a:	cf 91       	pop	r28
    2d1c:	df 91       	pop	r29
    2d1e:	08 95       	ret

00002d20 <LCD_voidWriteString_4bitMode>:
void LCD_voidWriteString_4bitMode(uint8 *pu8StringCpy, uint8 u8Index){	//LCD_voidWriteString('Tasneem')
    2d20:	df 93       	push	r29
    2d22:	cf 93       	push	r28
    2d24:	00 d0       	rcall	.+0      	; 0x2d26 <LCD_voidWriteString_4bitMode+0x6>
    2d26:	00 d0       	rcall	.+0      	; 0x2d28 <LCD_voidWriteString_4bitMode+0x8>
    2d28:	cd b7       	in	r28, 0x3d	; 61
    2d2a:	de b7       	in	r29, 0x3e	; 62
    2d2c:	9b 83       	std	Y+3, r25	; 0x03
    2d2e:	8a 83       	std	Y+2, r24	; 0x02
    2d30:	6c 83       	std	Y+4, r22	; 0x04
	for(uint8 i=0; i<u8Index; i++){
    2d32:	19 82       	std	Y+1, r1	; 0x01
    2d34:	0e c0       	rjmp	.+28     	; 0x2d52 <LCD_voidWriteString_4bitMode+0x32>
		LCD_voidWriteCharctr_4bitMode(pu8StringCpy[i]);
    2d36:	89 81       	ldd	r24, Y+1	; 0x01
    2d38:	28 2f       	mov	r18, r24
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d40:	fc 01       	movw	r30, r24
    2d42:	e2 0f       	add	r30, r18
    2d44:	f3 1f       	adc	r31, r19
    2d46:	80 81       	ld	r24, Z
    2d48:	0e 94 97 12 	call	0x252e	; 0x252e <LCD_voidWriteCharctr_4bitMode>
	for(uint8 i=0; i<u8Index; i++){
		LCD_voidWriteCharctr(pu8StringCpy[i]);
	}
}
void LCD_voidWriteString_4bitMode(uint8 *pu8StringCpy, uint8 u8Index){	//LCD_voidWriteString('Tasneem')
	for(uint8 i=0; i<u8Index; i++){
    2d4c:	89 81       	ldd	r24, Y+1	; 0x01
    2d4e:	8f 5f       	subi	r24, 0xFF	; 255
    2d50:	89 83       	std	Y+1, r24	; 0x01
    2d52:	99 81       	ldd	r25, Y+1	; 0x01
    2d54:	8c 81       	ldd	r24, Y+4	; 0x04
    2d56:	98 17       	cp	r25, r24
    2d58:	70 f3       	brcs	.-36     	; 0x2d36 <LCD_voidWriteString_4bitMode+0x16>
		LCD_voidWriteCharctr_4bitMode(pu8StringCpy[i]);
	}
}
    2d5a:	0f 90       	pop	r0
    2d5c:	0f 90       	pop	r0
    2d5e:	0f 90       	pop	r0
    2d60:	0f 90       	pop	r0
    2d62:	cf 91       	pop	r28
    2d64:	df 91       	pop	r29
    2d66:	08 95       	ret

00002d68 <Gotoxy>:
void Gotoxy(uint8 x, uint8 y){
    2d68:	df 93       	push	r29
    2d6a:	cf 93       	push	r28
    2d6c:	00 d0       	rcall	.+0      	; 0x2d6e <Gotoxy+0x6>
    2d6e:	00 d0       	rcall	.+0      	; 0x2d70 <Gotoxy+0x8>
    2d70:	cd b7       	in	r28, 0x3d	; 61
    2d72:	de b7       	in	r29, 0x3e	; 62
    2d74:	89 83       	std	Y+1, r24	; 0x01
    2d76:	6a 83       	std	Y+2, r22	; 0x02
	if(x>=0 && x<16)
    2d78:	89 81       	ldd	r24, Y+1	; 0x01
    2d7a:	80 31       	cpi	r24, 0x10	; 16
    2d7c:	c8 f4       	brcc	.+50     	; 0x2db0 <Gotoxy+0x48>
	{
		switch(y){
    2d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d80:	28 2f       	mov	r18, r24
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	3c 83       	std	Y+4, r19	; 0x04
    2d86:	2b 83       	std	Y+3, r18	; 0x03
    2d88:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8c:	81 30       	cpi	r24, 0x01	; 1
    2d8e:	91 05       	cpc	r25, r1
    2d90:	31 f0       	breq	.+12     	; 0x2d9e <Gotoxy+0x36>
    2d92:	2b 81       	ldd	r18, Y+3	; 0x03
    2d94:	3c 81       	ldd	r19, Y+4	; 0x04
    2d96:	22 30       	cpi	r18, 0x02	; 2
    2d98:	31 05       	cpc	r19, r1
    2d9a:	31 f0       	breq	.+12     	; 0x2da8 <Gotoxy+0x40>
    2d9c:	09 c0       	rjmp	.+18     	; 0x2db0 <Gotoxy+0x48>
		case LineOne:
			LCD_voidSendCommand(LineOneStart+x);	//set DDRAM address
    2d9e:	89 81       	ldd	r24, Y+1	; 0x01
    2da0:	80 58       	subi	r24, 0x80	; 128
    2da2:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_voidSendCommand>
    2da6:	04 c0       	rjmp	.+8      	; 0x2db0 <Gotoxy+0x48>
			break;
		case LineTwo:
			LCD_voidSendCommand(LineTwoStart+x);	//set DDRAM address
    2da8:	89 81       	ldd	r24, Y+1	; 0x01
    2daa:	80 54       	subi	r24, 0x40	; 64
    2dac:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_voidSendCommand>
	}
	else
	{
		//do nothing
	}
}
    2db0:	0f 90       	pop	r0
    2db2:	0f 90       	pop	r0
    2db4:	0f 90       	pop	r0
    2db6:	0f 90       	pop	r0
    2db8:	cf 91       	pop	r28
    2dba:	df 91       	pop	r29
    2dbc:	08 95       	ret

00002dbe <LCD_voidGotoxy_4bitMode>:

void LCD_voidGotoxy_4bitMode(uint8 x, uint8 y){
    2dbe:	df 93       	push	r29
    2dc0:	cf 93       	push	r28
    2dc2:	00 d0       	rcall	.+0      	; 0x2dc4 <LCD_voidGotoxy_4bitMode+0x6>
    2dc4:	00 d0       	rcall	.+0      	; 0x2dc6 <LCD_voidGotoxy_4bitMode+0x8>
    2dc6:	cd b7       	in	r28, 0x3d	; 61
    2dc8:	de b7       	in	r29, 0x3e	; 62
    2dca:	89 83       	std	Y+1, r24	; 0x01
    2dcc:	6a 83       	std	Y+2, r22	; 0x02
	if(x>=0 && x<16)
    2dce:	89 81       	ldd	r24, Y+1	; 0x01
    2dd0:	80 31       	cpi	r24, 0x10	; 16
    2dd2:	c8 f4       	brcc	.+50     	; 0x2e06 <LCD_voidGotoxy_4bitMode+0x48>
	{
		switch(y){
    2dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd6:	28 2f       	mov	r18, r24
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	3c 83       	std	Y+4, r19	; 0x04
    2ddc:	2b 83       	std	Y+3, r18	; 0x03
    2dde:	8b 81       	ldd	r24, Y+3	; 0x03
    2de0:	9c 81       	ldd	r25, Y+4	; 0x04
    2de2:	81 30       	cpi	r24, 0x01	; 1
    2de4:	91 05       	cpc	r25, r1
    2de6:	31 f0       	breq	.+12     	; 0x2df4 <LCD_voidGotoxy_4bitMode+0x36>
    2de8:	2b 81       	ldd	r18, Y+3	; 0x03
    2dea:	3c 81       	ldd	r19, Y+4	; 0x04
    2dec:	22 30       	cpi	r18, 0x02	; 2
    2dee:	31 05       	cpc	r19, r1
    2df0:	31 f0       	breq	.+12     	; 0x2dfe <LCD_voidGotoxy_4bitMode+0x40>
    2df2:	09 c0       	rjmp	.+18     	; 0x2e06 <LCD_voidGotoxy_4bitMode+0x48>
		case LineOne:
			LCD_voidSendCommand_4bitMode(LineOneStart+x);	//set DDRAM address
    2df4:	89 81       	ldd	r24, Y+1	; 0x01
    2df6:	80 58       	subi	r24, 0x80	; 128
    2df8:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_voidSendCommand_4bitMode>
    2dfc:	04 c0       	rjmp	.+8      	; 0x2e06 <LCD_voidGotoxy_4bitMode+0x48>
			break;
		case LineTwo:
			LCD_voidSendCommand_4bitMode(LineTwoStart+x);	//set DDRAM address
    2dfe:	89 81       	ldd	r24, Y+1	; 0x01
    2e00:	80 54       	subi	r24, 0x40	; 64
    2e02:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_voidSendCommand_4bitMode>
	}
	else
	{
		//do nothing
	}
}
    2e06:	0f 90       	pop	r0
    2e08:	0f 90       	pop	r0
    2e0a:	0f 90       	pop	r0
    2e0c:	0f 90       	pop	r0
    2e0e:	cf 91       	pop	r28
    2e10:	df 91       	pop	r29
    2e12:	08 95       	ret

00002e14 <LCD_voidWriteExtraChar>:
void LCD_voidWriteExtraChar(uint8 Y, uint8 X){
    2e14:	df 93       	push	r29
    2e16:	cf 93       	push	r28
    2e18:	00 d0       	rcall	.+0      	; 0x2e1a <LCD_voidWriteExtraChar+0x6>
    2e1a:	cd b7       	in	r28, 0x3d	; 61
    2e1c:	de b7       	in	r29, 0x3e	; 62
    2e1e:	89 83       	std	Y+1, r24	; 0x01
    2e20:	6a 83       	std	Y+2, r22	; 0x02

}
    2e22:	0f 90       	pop	r0
    2e24:	0f 90       	pop	r0
    2e26:	cf 91       	pop	r28
    2e28:	df 91       	pop	r29
    2e2a:	08 95       	ret

00002e2c <LCD_voidDisplayKeys>:


void LCD_voidDisplayKeys(uint8 *u8key, uint8 *index){
    2e2c:	df 93       	push	r29
    2e2e:	cf 93       	push	r28
    2e30:	cd b7       	in	r28, 0x3d	; 61
    2e32:	de b7       	in	r29, 0x3e	; 62
    2e34:	62 97       	sbiw	r28, 0x12	; 18
    2e36:	0f b6       	in	r0, 0x3f	; 63
    2e38:	f8 94       	cli
    2e3a:	de bf       	out	0x3e, r29	; 62
    2e3c:	0f be       	out	0x3f, r0	; 63
    2e3e:	cd bf       	out	0x3d, r28	; 61
    2e40:	98 8b       	std	Y+16, r25	; 0x10
    2e42:	8f 87       	std	Y+15, r24	; 0x0f
    2e44:	7a 8b       	std	Y+18, r23	; 0x12
    2e46:	69 8b       	std	Y+17, r22	; 0x11
	if ((u8key[*index] >= '0' && u8key[*index] <= '9') || (u8key[*index] >= 'A' && u8key[*index] <= 'D') || (u8key[*index] =='*')||(u8key[*index] =='#')) {
    2e48:	e9 89       	ldd	r30, Y+17	; 0x11
    2e4a:	fa 89       	ldd	r31, Y+18	; 0x12
    2e4c:	80 81       	ld	r24, Z
    2e4e:	28 2f       	mov	r18, r24
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e54:	98 89       	ldd	r25, Y+16	; 0x10
    2e56:	fc 01       	movw	r30, r24
    2e58:	e2 0f       	add	r30, r18
    2e5a:	f3 1f       	adc	r31, r19
    2e5c:	80 81       	ld	r24, Z
    2e5e:	80 33       	cpi	r24, 0x30	; 48
    2e60:	68 f0       	brcs	.+26     	; 0x2e7c <LCD_voidDisplayKeys+0x50>
    2e62:	e9 89       	ldd	r30, Y+17	; 0x11
    2e64:	fa 89       	ldd	r31, Y+18	; 0x12
    2e66:	80 81       	ld	r24, Z
    2e68:	28 2f       	mov	r18, r24
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e6e:	98 89       	ldd	r25, Y+16	; 0x10
    2e70:	fc 01       	movw	r30, r24
    2e72:	e2 0f       	add	r30, r18
    2e74:	f3 1f       	adc	r31, r19
    2e76:	80 81       	ld	r24, Z
    2e78:	8a 33       	cpi	r24, 0x3A	; 58
    2e7a:	a8 f1       	brcs	.+106    	; 0x2ee6 <LCD_voidDisplayKeys+0xba>
    2e7c:	e9 89       	ldd	r30, Y+17	; 0x11
    2e7e:	fa 89       	ldd	r31, Y+18	; 0x12
    2e80:	80 81       	ld	r24, Z
    2e82:	28 2f       	mov	r18, r24
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e88:	98 89       	ldd	r25, Y+16	; 0x10
    2e8a:	fc 01       	movw	r30, r24
    2e8c:	e2 0f       	add	r30, r18
    2e8e:	f3 1f       	adc	r31, r19
    2e90:	80 81       	ld	r24, Z
    2e92:	81 34       	cpi	r24, 0x41	; 65
    2e94:	68 f0       	brcs	.+26     	; 0x2eb0 <LCD_voidDisplayKeys+0x84>
    2e96:	e9 89       	ldd	r30, Y+17	; 0x11
    2e98:	fa 89       	ldd	r31, Y+18	; 0x12
    2e9a:	80 81       	ld	r24, Z
    2e9c:	28 2f       	mov	r18, r24
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ea2:	98 89       	ldd	r25, Y+16	; 0x10
    2ea4:	fc 01       	movw	r30, r24
    2ea6:	e2 0f       	add	r30, r18
    2ea8:	f3 1f       	adc	r31, r19
    2eaa:	80 81       	ld	r24, Z
    2eac:	85 34       	cpi	r24, 0x45	; 69
    2eae:	d8 f0       	brcs	.+54     	; 0x2ee6 <LCD_voidDisplayKeys+0xba>
    2eb0:	e9 89       	ldd	r30, Y+17	; 0x11
    2eb2:	fa 89       	ldd	r31, Y+18	; 0x12
    2eb4:	80 81       	ld	r24, Z
    2eb6:	28 2f       	mov	r18, r24
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ebc:	98 89       	ldd	r25, Y+16	; 0x10
    2ebe:	fc 01       	movw	r30, r24
    2ec0:	e2 0f       	add	r30, r18
    2ec2:	f3 1f       	adc	r31, r19
    2ec4:	80 81       	ld	r24, Z
    2ec6:	8a 32       	cpi	r24, 0x2A	; 42
    2ec8:	71 f0       	breq	.+28     	; 0x2ee6 <LCD_voidDisplayKeys+0xba>
    2eca:	e9 89       	ldd	r30, Y+17	; 0x11
    2ecc:	fa 89       	ldd	r31, Y+18	; 0x12
    2ece:	80 81       	ld	r24, Z
    2ed0:	28 2f       	mov	r18, r24
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ed6:	98 89       	ldd	r25, Y+16	; 0x10
    2ed8:	fc 01       	movw	r30, r24
    2eda:	e2 0f       	add	r30, r18
    2edc:	f3 1f       	adc	r31, r19
    2ede:	80 81       	ld	r24, Z
    2ee0:	83 32       	cpi	r24, 0x23	; 35
    2ee2:	09 f0       	breq	.+2      	; 0x2ee6 <LCD_voidDisplayKeys+0xba>
    2ee4:	86 c0       	rjmp	.+268    	; 0x2ff2 <LCD_voidDisplayKeys+0x1c6>
		LCD_voidWriteCharctr_4bitMode(u8key[*index]);
    2ee6:	e9 89       	ldd	r30, Y+17	; 0x11
    2ee8:	fa 89       	ldd	r31, Y+18	; 0x12
    2eea:	80 81       	ld	r24, Z
    2eec:	28 2f       	mov	r18, r24
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ef2:	98 89       	ldd	r25, Y+16	; 0x10
    2ef4:	fc 01       	movw	r30, r24
    2ef6:	e2 0f       	add	r30, r18
    2ef8:	f3 1f       	adc	r31, r19
    2efa:	80 81       	ld	r24, Z
    2efc:	0e 94 97 12 	call	0x252e	; 0x252e <LCD_voidWriteCharctr_4bitMode>
    2f00:	80 e0       	ldi	r24, 0x00	; 0
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	aa ef       	ldi	r26, 0xFA	; 250
    2f06:	b3 e4       	ldi	r27, 0x43	; 67
    2f08:	8b 87       	std	Y+11, r24	; 0x0b
    2f0a:	9c 87       	std	Y+12, r25	; 0x0c
    2f0c:	ad 87       	std	Y+13, r26	; 0x0d
    2f0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f10:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f12:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f14:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f16:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f18:	20 e0       	ldi	r18, 0x00	; 0
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	4a ef       	ldi	r20, 0xFA	; 250
    2f1e:	54 e4       	ldi	r21, 0x44	; 68
    2f20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f24:	dc 01       	movw	r26, r24
    2f26:	cb 01       	movw	r24, r22
    2f28:	8f 83       	std	Y+7, r24	; 0x07
    2f2a:	98 87       	std	Y+8, r25	; 0x08
    2f2c:	a9 87       	std	Y+9, r26	; 0x09
    2f2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f30:	6f 81       	ldd	r22, Y+7	; 0x07
    2f32:	78 85       	ldd	r23, Y+8	; 0x08
    2f34:	89 85       	ldd	r24, Y+9	; 0x09
    2f36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f38:	20 e0       	ldi	r18, 0x00	; 0
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	40 e8       	ldi	r20, 0x80	; 128
    2f3e:	5f e3       	ldi	r21, 0x3F	; 63
    2f40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f44:	88 23       	and	r24, r24
    2f46:	2c f4       	brge	.+10     	; 0x2f52 <LCD_voidDisplayKeys+0x126>
		__ticks = 1;
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	9e 83       	std	Y+6, r25	; 0x06
    2f4e:	8d 83       	std	Y+5, r24	; 0x05
    2f50:	3f c0       	rjmp	.+126    	; 0x2fd0 <LCD_voidDisplayKeys+0x1a4>
	else if (__tmp > 65535)
    2f52:	6f 81       	ldd	r22, Y+7	; 0x07
    2f54:	78 85       	ldd	r23, Y+8	; 0x08
    2f56:	89 85       	ldd	r24, Y+9	; 0x09
    2f58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	3f ef       	ldi	r19, 0xFF	; 255
    2f5e:	4f e7       	ldi	r20, 0x7F	; 127
    2f60:	57 e4       	ldi	r21, 0x47	; 71
    2f62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f66:	18 16       	cp	r1, r24
    2f68:	4c f5       	brge	.+82     	; 0x2fbc <LCD_voidDisplayKeys+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f70:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f72:	20 e0       	ldi	r18, 0x00	; 0
    2f74:	30 e0       	ldi	r19, 0x00	; 0
    2f76:	40 e2       	ldi	r20, 0x20	; 32
    2f78:	51 e4       	ldi	r21, 0x41	; 65
    2f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	bc 01       	movw	r22, r24
    2f84:	cd 01       	movw	r24, r26
    2f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	9e 83       	std	Y+6, r25	; 0x06
    2f90:	8d 83       	std	Y+5, r24	; 0x05
    2f92:	0f c0       	rjmp	.+30     	; 0x2fb2 <LCD_voidDisplayKeys+0x186>
    2f94:	88 ec       	ldi	r24, 0xC8	; 200
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	9c 83       	std	Y+4, r25	; 0x04
    2f9a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa0:	01 97       	sbiw	r24, 0x01	; 1
    2fa2:	f1 f7       	brne	.-4      	; 0x2fa0 <LCD_voidDisplayKeys+0x174>
    2fa4:	9c 83       	std	Y+4, r25	; 0x04
    2fa6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    2faa:	9e 81       	ldd	r25, Y+6	; 0x06
    2fac:	01 97       	sbiw	r24, 0x01	; 1
    2fae:	9e 83       	std	Y+6, r25	; 0x06
    2fb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb6:	00 97       	sbiw	r24, 0x00	; 0
    2fb8:	69 f7       	brne	.-38     	; 0x2f94 <LCD_voidDisplayKeys+0x168>
    2fba:	14 c0       	rjmp	.+40     	; 0x2fe4 <LCD_voidDisplayKeys+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fbc:	6f 81       	ldd	r22, Y+7	; 0x07
    2fbe:	78 85       	ldd	r23, Y+8	; 0x08
    2fc0:	89 85       	ldd	r24, Y+9	; 0x09
    2fc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	9e 83       	std	Y+6, r25	; 0x06
    2fce:	8d 83       	std	Y+5, r24	; 0x05
    2fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd4:	9a 83       	std	Y+2, r25	; 0x02
    2fd6:	89 83       	std	Y+1, r24	; 0x01
    2fd8:	89 81       	ldd	r24, Y+1	; 0x01
    2fda:	9a 81       	ldd	r25, Y+2	; 0x02
    2fdc:	01 97       	sbiw	r24, 0x01	; 1
    2fde:	f1 f7       	brne	.-4      	; 0x2fdc <LCD_voidDisplayKeys+0x1b0>
    2fe0:	9a 83       	std	Y+2, r25	; 0x02
    2fe2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		(*index)++;
    2fe4:	e9 89       	ldd	r30, Y+17	; 0x11
    2fe6:	fa 89       	ldd	r31, Y+18	; 0x12
    2fe8:	80 81       	ld	r24, Z
    2fea:	8f 5f       	subi	r24, 0xFF	; 255
    2fec:	e9 89       	ldd	r30, Y+17	; 0x11
    2fee:	fa 89       	ldd	r31, Y+18	; 0x12
    2ff0:	80 83       	st	Z, r24
//
//	case '*': LCD_voidWriteCharctr_4bitMode(u8key[*index]); break;
//	case '#': LCD_voidWriteCharctr_4bitMode(u8key[*index]); break;
//	}
//	(*index)++;
}
    2ff2:	62 96       	adiw	r28, 0x12	; 18
    2ff4:	0f b6       	in	r0, 0x3f	; 63
    2ff6:	f8 94       	cli
    2ff8:	de bf       	out	0x3e, r29	; 62
    2ffa:	0f be       	out	0x3f, r0	; 63
    2ffc:	cd bf       	out	0x3d, r28	; 61
    2ffe:	cf 91       	pop	r28
    3000:	df 91       	pop	r29
    3002:	08 95       	ret

00003004 <KPD_voidInit>:
					 { '4', '5', '6', 'B'},
					 { '7', '8', '9', 'C'},
					 { '*', '0', '#', 'D'}};


void KPD_voidInit(void){
    3004:	df 93       	push	r29
    3006:	cf 93       	push	r28
    3008:	0f 92       	push	r0
    300a:	cd b7       	in	r28, 0x3d	; 61
    300c:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	for(i=ROW_START; i<=ROW_END; i++){
    300e:	19 82       	std	Y+1, r1	; 0x01
    3010:	08 c0       	rjmp	.+16     	; 0x3022 <KPD_voidInit+0x1e>
		//make all rows input pull up
		DIO_voidPullUpState(KPD_PORT,i, ENABLE_PULLUP);
    3012:	81 e0       	ldi	r24, 0x01	; 1
    3014:	69 81       	ldd	r22, Y+1	; 0x01
    3016:	41 e0       	ldi	r20, 0x01	; 1
    3018:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <DIO_voidPullUpState>
					 { '*', '0', '#', 'D'}};


void KPD_voidInit(void){
	uint8 i;
	for(i=ROW_START; i<=ROW_END; i++){
    301c:	89 81       	ldd	r24, Y+1	; 0x01
    301e:	8f 5f       	subi	r24, 0xFF	; 255
    3020:	89 83       	std	Y+1, r24	; 0x01
    3022:	89 81       	ldd	r24, Y+1	; 0x01
    3024:	84 30       	cpi	r24, 0x04	; 4
    3026:	a8 f3       	brcs	.-22     	; 0x3012 <KPD_voidInit+0xe>
		//make all rows input pull up
		DIO_voidPullUpState(KPD_PORT,i, ENABLE_PULLUP);
	}
	for(i=COLUMN_START; i<=COLUMN_END; i++){
    3028:	84 e0       	ldi	r24, 0x04	; 4
    302a:	89 83       	std	Y+1, r24	; 0x01
    302c:	08 c0       	rjmp	.+16     	; 0x303e <KPD_voidInit+0x3a>
		//make all column pins high
		//DIO_voidWritePin(KPD_PORT,i, DIO_INPUT);
		DIO_voidWritePin(KPD_PORT,i, DIO_HIGH);
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	69 81       	ldd	r22, Y+1	; 0x01
    3032:	41 e0       	ldi	r20, 0x01	; 1
    3034:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
	uint8 i;
	for(i=ROW_START; i<=ROW_END; i++){
		//make all rows input pull up
		DIO_voidPullUpState(KPD_PORT,i, ENABLE_PULLUP);
	}
	for(i=COLUMN_START; i<=COLUMN_END; i++){
    3038:	89 81       	ldd	r24, Y+1	; 0x01
    303a:	8f 5f       	subi	r24, 0xFF	; 255
    303c:	89 83       	std	Y+1, r24	; 0x01
    303e:	89 81       	ldd	r24, Y+1	; 0x01
    3040:	88 30       	cpi	r24, 0x08	; 8
    3042:	a8 f3       	brcs	.-22     	; 0x302e <KPD_voidInit+0x2a>
		//make all column pins high
		//DIO_voidWritePin(KPD_PORT,i, DIO_INPUT);
		DIO_voidWritePin(KPD_PORT,i, DIO_HIGH);
		}
}
    3044:	0f 90       	pop	r0
    3046:	cf 91       	pop	r28
    3048:	df 91       	pop	r29
    304a:	08 95       	ret

0000304c <KPD_u8GetKey>:

uint8 KPD_u8GetKey(void){
    304c:	df 93       	push	r29
    304e:	cf 93       	push	r28
    3050:	cd b7       	in	r28, 0x3d	; 61
    3052:	de b7       	in	r29, 0x3e	; 62
    3054:	64 97       	sbiw	r28, 0x14	; 20
    3056:	0f b6       	in	r0, 0x3f	; 63
    3058:	f8 94       	cli
    305a:	de bf       	out	0x3e, r29	; 62
    305c:	0f be       	out	0x3f, r0	; 63
    305e:	cd bf       	out	0x3d, r28	; 61
	uint8 key = NoPressedKey;
    3060:	8f ef       	ldi	r24, 0xFF	; 255
    3062:	8c 8b       	std	Y+20, r24	; 0x14
	uint8 i, j, k;
	uint8 result, exitflag = DIO_LOW;
    3064:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;i<4;i++){			//loop over columns
    3066:	1b 8a       	std	Y+19, r1	; 0x13
    3068:	b6 c0       	rjmp	.+364    	; 0x31d6 <KPD_u8GetKey+0x18a>
		//set all columns high
		for(k=COLUMN_START; k<=COLUMN_END;k++){
    306a:	84 e0       	ldi	r24, 0x04	; 4
    306c:	89 8b       	std	Y+17, r24	; 0x11
    306e:	08 c0       	rjmp	.+16     	; 0x3080 <KPD_u8GetKey+0x34>
			DIO_voidWritePin(KPD_PORT,k, DIO_HIGH);
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	69 89       	ldd	r22, Y+17	; 0x11
    3074:	41 e0       	ldi	r20, 0x01	; 1
    3076:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
	uint8 key = NoPressedKey;
	uint8 i, j, k;
	uint8 result, exitflag = DIO_LOW;
	for(i=0;i<4;i++){			//loop over columns
		//set all columns high
		for(k=COLUMN_START; k<=COLUMN_END;k++){
    307a:	89 89       	ldd	r24, Y+17	; 0x11
    307c:	8f 5f       	subi	r24, 0xFF	; 255
    307e:	89 8b       	std	Y+17, r24	; 0x11
    3080:	89 89       	ldd	r24, Y+17	; 0x11
    3082:	88 30       	cpi	r24, 0x08	; 8
    3084:	a8 f3       	brcs	.-22     	; 0x3070 <KPD_u8GetKey+0x24>
			DIO_voidWritePin(KPD_PORT,k, DIO_HIGH);
		}
		//set column low
		DIO_voidWritePin(KPD_PORT,(COLUMN_START+i), DIO_LOW);
    3086:	8b 89       	ldd	r24, Y+19	; 0x13
    3088:	98 2f       	mov	r25, r24
    308a:	9c 5f       	subi	r25, 0xFC	; 252
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	69 2f       	mov	r22, r25
    3090:	40 e0       	ldi	r20, 0x00	; 0
    3092:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>

		for(j=0;j<4;j++){		//loop over rows
    3096:	1a 8a       	std	Y+18, r1	; 0x12
    3098:	94 c0       	rjmp	.+296    	; 0x31c2 <KPD_u8GetKey+0x176>
			result = DIO_u8ReadPin(KPD_PORT, (ROW_START+j));
    309a:	81 e0       	ldi	r24, 0x01	; 1
    309c:	6a 89       	ldd	r22, Y+18	; 0x12
    309e:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <DIO_u8ReadPin>
    30a2:	88 8b       	std	Y+16, r24	; 0x10
    30a4:	80 e0       	ldi	r24, 0x00	; 0
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	a0 ea       	ldi	r26, 0xA0	; 160
    30aa:	b1 e4       	ldi	r27, 0x41	; 65
    30ac:	8b 87       	std	Y+11, r24	; 0x0b
    30ae:	9c 87       	std	Y+12, r25	; 0x0c
    30b0:	ad 87       	std	Y+13, r26	; 0x0d
    30b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    30b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    30b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	4a ef       	ldi	r20, 0xFA	; 250
    30c2:	54 e4       	ldi	r21, 0x44	; 68
    30c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c8:	dc 01       	movw	r26, r24
    30ca:	cb 01       	movw	r24, r22
    30cc:	8f 83       	std	Y+7, r24	; 0x07
    30ce:	98 87       	std	Y+8, r25	; 0x08
    30d0:	a9 87       	std	Y+9, r26	; 0x09
    30d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30d4:	6f 81       	ldd	r22, Y+7	; 0x07
    30d6:	78 85       	ldd	r23, Y+8	; 0x08
    30d8:	89 85       	ldd	r24, Y+9	; 0x09
    30da:	9a 85       	ldd	r25, Y+10	; 0x0a
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	40 e8       	ldi	r20, 0x80	; 128
    30e2:	5f e3       	ldi	r21, 0x3F	; 63
    30e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30e8:	88 23       	and	r24, r24
    30ea:	2c f4       	brge	.+10     	; 0x30f6 <KPD_u8GetKey+0xaa>
		__ticks = 1;
    30ec:	81 e0       	ldi	r24, 0x01	; 1
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	9e 83       	std	Y+6, r25	; 0x06
    30f2:	8d 83       	std	Y+5, r24	; 0x05
    30f4:	3f c0       	rjmp	.+126    	; 0x3174 <KPD_u8GetKey+0x128>
	else if (__tmp > 65535)
    30f6:	6f 81       	ldd	r22, Y+7	; 0x07
    30f8:	78 85       	ldd	r23, Y+8	; 0x08
    30fa:	89 85       	ldd	r24, Y+9	; 0x09
    30fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	3f ef       	ldi	r19, 0xFF	; 255
    3102:	4f e7       	ldi	r20, 0x7F	; 127
    3104:	57 e4       	ldi	r21, 0x47	; 71
    3106:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    310a:	18 16       	cp	r1, r24
    310c:	4c f5       	brge	.+82     	; 0x3160 <KPD_u8GetKey+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    310e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3110:	7c 85       	ldd	r23, Y+12	; 0x0c
    3112:	8d 85       	ldd	r24, Y+13	; 0x0d
    3114:	9e 85       	ldd	r25, Y+14	; 0x0e
    3116:	20 e0       	ldi	r18, 0x00	; 0
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	40 e2       	ldi	r20, 0x20	; 32
    311c:	51 e4       	ldi	r21, 0x41	; 65
    311e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3122:	dc 01       	movw	r26, r24
    3124:	cb 01       	movw	r24, r22
    3126:	bc 01       	movw	r22, r24
    3128:	cd 01       	movw	r24, r26
    312a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    312e:	dc 01       	movw	r26, r24
    3130:	cb 01       	movw	r24, r22
    3132:	9e 83       	std	Y+6, r25	; 0x06
    3134:	8d 83       	std	Y+5, r24	; 0x05
    3136:	0f c0       	rjmp	.+30     	; 0x3156 <KPD_u8GetKey+0x10a>
    3138:	88 ec       	ldi	r24, 0xC8	; 200
    313a:	90 e0       	ldi	r25, 0x00	; 0
    313c:	9c 83       	std	Y+4, r25	; 0x04
    313e:	8b 83       	std	Y+3, r24	; 0x03
    3140:	8b 81       	ldd	r24, Y+3	; 0x03
    3142:	9c 81       	ldd	r25, Y+4	; 0x04
    3144:	01 97       	sbiw	r24, 0x01	; 1
    3146:	f1 f7       	brne	.-4      	; 0x3144 <KPD_u8GetKey+0xf8>
    3148:	9c 83       	std	Y+4, r25	; 0x04
    314a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    314c:	8d 81       	ldd	r24, Y+5	; 0x05
    314e:	9e 81       	ldd	r25, Y+6	; 0x06
    3150:	01 97       	sbiw	r24, 0x01	; 1
    3152:	9e 83       	std	Y+6, r25	; 0x06
    3154:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3156:	8d 81       	ldd	r24, Y+5	; 0x05
    3158:	9e 81       	ldd	r25, Y+6	; 0x06
    315a:	00 97       	sbiw	r24, 0x00	; 0
    315c:	69 f7       	brne	.-38     	; 0x3138 <KPD_u8GetKey+0xec>
    315e:	14 c0       	rjmp	.+40     	; 0x3188 <KPD_u8GetKey+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3160:	6f 81       	ldd	r22, Y+7	; 0x07
    3162:	78 85       	ldd	r23, Y+8	; 0x08
    3164:	89 85       	ldd	r24, Y+9	; 0x09
    3166:	9a 85       	ldd	r25, Y+10	; 0x0a
    3168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    316c:	dc 01       	movw	r26, r24
    316e:	cb 01       	movw	r24, r22
    3170:	9e 83       	std	Y+6, r25	; 0x06
    3172:	8d 83       	std	Y+5, r24	; 0x05
    3174:	8d 81       	ldd	r24, Y+5	; 0x05
    3176:	9e 81       	ldd	r25, Y+6	; 0x06
    3178:	9a 83       	std	Y+2, r25	; 0x02
    317a:	89 83       	std	Y+1, r24	; 0x01
    317c:	89 81       	ldd	r24, Y+1	; 0x01
    317e:	9a 81       	ldd	r25, Y+2	; 0x02
    3180:	01 97       	sbiw	r24, 0x01	; 1
    3182:	f1 f7       	brne	.-4      	; 0x3180 <KPD_u8GetKey+0x134>
    3184:	9a 83       	std	Y+2, r25	; 0x02
    3186:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(20);
			if(result == DIO_LOW){
    3188:	88 89       	ldd	r24, Y+16	; 0x10
    318a:	88 23       	and	r24, r24
    318c:	b9 f4       	brne	.+46     	; 0x31bc <KPD_u8GetKey+0x170>
				key = KPD_arr[j][i];
    318e:	8a 89       	ldd	r24, Y+18	; 0x12
    3190:	48 2f       	mov	r20, r24
    3192:	50 e0       	ldi	r21, 0x00	; 0
    3194:	8b 89       	ldd	r24, Y+19	; 0x13
    3196:	28 2f       	mov	r18, r24
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	ca 01       	movw	r24, r20
    319c:	88 0f       	add	r24, r24
    319e:	99 1f       	adc	r25, r25
    31a0:	88 0f       	add	r24, r24
    31a2:	99 1f       	adc	r25, r25
    31a4:	82 0f       	add	r24, r18
    31a6:	93 1f       	adc	r25, r19
    31a8:	fc 01       	movw	r30, r24
    31aa:	ed 54       	subi	r30, 0x4D	; 77
    31ac:	ff 4f       	sbci	r31, 0xFF	; 255
    31ae:	80 81       	ld	r24, Z
    31b0:	8c 8b       	std	Y+20, r24	; 0x14
				exitflag = DIO_HIGH;
    31b2:	81 e0       	ldi	r24, 0x01	; 1
    31b4:	8f 87       	std	Y+15, r24	; 0x0f
				if(exitflag ==DIO_HIGH){
    31b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    31b8:	81 30       	cpi	r24, 0x01	; 1
    31ba:	39 f0       	breq	.+14     	; 0x31ca <KPD_u8GetKey+0x17e>
			DIO_voidWritePin(KPD_PORT,k, DIO_HIGH);
		}
		//set column low
		DIO_voidWritePin(KPD_PORT,(COLUMN_START+i), DIO_LOW);

		for(j=0;j<4;j++){		//loop over rows
    31bc:	8a 89       	ldd	r24, Y+18	; 0x12
    31be:	8f 5f       	subi	r24, 0xFF	; 255
    31c0:	8a 8b       	std	Y+18, r24	; 0x12
    31c2:	8a 89       	ldd	r24, Y+18	; 0x12
    31c4:	84 30       	cpi	r24, 0x04	; 4
    31c6:	08 f4       	brcc	.+2      	; 0x31ca <KPD_u8GetKey+0x17e>
    31c8:	68 cf       	rjmp	.-304    	; 0x309a <KPD_u8GetKey+0x4e>
				if(exitflag ==DIO_HIGH){
					break;
				}
			}
		}
		if(exitflag == DIO_HIGH){
    31ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    31cc:	81 30       	cpi	r24, 0x01	; 1
    31ce:	39 f0       	breq	.+14     	; 0x31de <KPD_u8GetKey+0x192>

uint8 KPD_u8GetKey(void){
	uint8 key = NoPressedKey;
	uint8 i, j, k;
	uint8 result, exitflag = DIO_LOW;
	for(i=0;i<4;i++){			//loop over columns
    31d0:	8b 89       	ldd	r24, Y+19	; 0x13
    31d2:	8f 5f       	subi	r24, 0xFF	; 255
    31d4:	8b 8b       	std	Y+19, r24	; 0x13
    31d6:	8b 89       	ldd	r24, Y+19	; 0x13
    31d8:	84 30       	cpi	r24, 0x04	; 4
    31da:	08 f4       	brcc	.+2      	; 0x31de <KPD_u8GetKey+0x192>
    31dc:	46 cf       	rjmp	.-372    	; 0x306a <KPD_u8GetKey+0x1e>
		}
		if(exitflag == DIO_HIGH){
			break;
		}
	}
	return key;
    31de:	8c 89       	ldd	r24, Y+20	; 0x14
}
    31e0:	64 96       	adiw	r28, 0x14	; 20
    31e2:	0f b6       	in	r0, 0x3f	; 63
    31e4:	f8 94       	cli
    31e6:	de bf       	out	0x3e, r29	; 62
    31e8:	0f be       	out	0x3f, r0	; 63
    31ea:	cd bf       	out	0x3d, r28	; 61
    31ec:	cf 91       	pop	r28
    31ee:	df 91       	pop	r29
    31f0:	08 95       	ret

000031f2 <EXT_INTERRUPT_VID_INIT>:
void (*EXTI0_CALLBACK_PTR)(void)=NULL;
void (*EXTI1_CALLBACK_PTR)(void)=NULL;
void (*EXTI2_CALLBACK_PTR)(void)=NULL;


void EXT_INTERRUPT_VID_INIT(void){
    31f2:	df 93       	push	r29
    31f4:	cf 93       	push	r28
    31f6:	cd b7       	in	r28, 0x3d	; 61
    31f8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,ISC01);
#elif EXT0_MODE==   IOC
	SET_BIT(MCUCR,ISC00);
	CLR_BIT(MCUCR,ISC01);
#elif EXT0_MODE==   FALLING_EDGE
	CLR_BIT(MCUCR,ISC00);
    31fa:	a5 e5       	ldi	r26, 0x55	; 85
    31fc:	b0 e0       	ldi	r27, 0x00	; 0
    31fe:	e5 e5       	ldi	r30, 0x55	; 85
    3200:	f0 e0       	ldi	r31, 0x00	; 0
    3202:	80 81       	ld	r24, Z
    3204:	8e 7f       	andi	r24, 0xFE	; 254
    3206:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC01);
    3208:	a5 e5       	ldi	r26, 0x55	; 85
    320a:	b0 e0       	ldi	r27, 0x00	; 0
    320c:	e5 e5       	ldi	r30, 0x55	; 85
    320e:	f0 e0       	ldi	r31, 0x00	; 0
    3210:	80 81       	ld	r24, Z
    3212:	82 60       	ori	r24, 0x02	; 2
    3214:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,ISC11);
#elif EXT1_MODE==   IOC
	SET_BIT(MCUCR,ISC10);
	CLR_BIT(MCUCR,ISC11);
#elif EXT1_MODE==   FALLING_EDGE
	CLR_BIT(MCUCR,ISC10);
    3216:	a5 e5       	ldi	r26, 0x55	; 85
    3218:	b0 e0       	ldi	r27, 0x00	; 0
    321a:	e5 e5       	ldi	r30, 0x55	; 85
    321c:	f0 e0       	ldi	r31, 0x00	; 0
    321e:	80 81       	ld	r24, Z
    3220:	8b 7f       	andi	r24, 0xFB	; 251
    3222:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC11);
    3224:	a5 e5       	ldi	r26, 0x55	; 85
    3226:	b0 e0       	ldi	r27, 0x00	; 0
    3228:	e5 e5       	ldi	r30, 0x55	; 85
    322a:	f0 e0       	ldi	r31, 0x00	; 0
    322c:	80 81       	ld	r24, Z
    322e:	88 60       	ori	r24, 0x08	; 8
    3230:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC11);
#else
#endif

#if EXT2_MODE== FALLING_EDGE
	CLR_BIT(MCUCSR,ISC2);
    3232:	a4 e5       	ldi	r26, 0x54	; 84
    3234:	b0 e0       	ldi	r27, 0x00	; 0
    3236:	e4 e5       	ldi	r30, 0x54	; 84
    3238:	f0 e0       	ldi	r31, 0x00	; 0
    323a:	80 81       	ld	r24, Z
    323c:	8f 7b       	andi	r24, 0xBF	; 191
    323e:	8c 93       	st	X, r24
	SET_BIT(MCUCSR,ISC2);


#else
#endif
}
    3240:	cf 91       	pop	r28
    3242:	df 91       	pop	r29
    3244:	08 95       	ret

00003246 <EXT_INTERRUPT_VID_ENABLE>:

void EXT_INTERRUPT_VID_ENABLE(uint8 interrupt_number){
    3246:	df 93       	push	r29
    3248:	cf 93       	push	r28
    324a:	00 d0       	rcall	.+0      	; 0x324c <EXT_INTERRUPT_VID_ENABLE+0x6>
    324c:	0f 92       	push	r0
    324e:	cd b7       	in	r28, 0x3d	; 61
    3250:	de b7       	in	r29, 0x3e	; 62
    3252:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt_number){
    3254:	89 81       	ldd	r24, Y+1	; 0x01
    3256:	28 2f       	mov	r18, r24
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	3b 83       	std	Y+3, r19	; 0x03
    325c:	2a 83       	std	Y+2, r18	; 0x02
    325e:	8a 81       	ldd	r24, Y+2	; 0x02
    3260:	9b 81       	ldd	r25, Y+3	; 0x03
    3262:	81 30       	cpi	r24, 0x01	; 1
    3264:	91 05       	cpc	r25, r1
    3266:	89 f0       	breq	.+34     	; 0x328a <EXT_INTERRUPT_VID_ENABLE+0x44>
    3268:	2a 81       	ldd	r18, Y+2	; 0x02
    326a:	3b 81       	ldd	r19, Y+3	; 0x03
    326c:	22 30       	cpi	r18, 0x02	; 2
    326e:	31 05       	cpc	r19, r1
    3270:	a1 f0       	breq	.+40     	; 0x329a <EXT_INTERRUPT_VID_ENABLE+0x54>
    3272:	8a 81       	ldd	r24, Y+2	; 0x02
    3274:	9b 81       	ldd	r25, Y+3	; 0x03
    3276:	00 97       	sbiw	r24, 0x00	; 0
    3278:	b9 f4       	brne	.+46     	; 0x32a8 <EXT_INTERRUPT_VID_ENABLE+0x62>
	case EXT0:
		SET_BIT(GICR, INT0);
    327a:	ab e5       	ldi	r26, 0x5B	; 91
    327c:	b0 e0       	ldi	r27, 0x00	; 0
    327e:	eb e5       	ldi	r30, 0x5B	; 91
    3280:	f0 e0       	ldi	r31, 0x00	; 0
    3282:	80 81       	ld	r24, Z
    3284:	80 64       	ori	r24, 0x40	; 64
    3286:	8c 93       	st	X, r24
    3288:	0f c0       	rjmp	.+30     	; 0x32a8 <EXT_INTERRUPT_VID_ENABLE+0x62>
		break;
	case EXT1:
		SET_BIT(GICR, INT1);
    328a:	ab e5       	ldi	r26, 0x5B	; 91
    328c:	b0 e0       	ldi	r27, 0x00	; 0
    328e:	eb e5       	ldi	r30, 0x5B	; 91
    3290:	f0 e0       	ldi	r31, 0x00	; 0
    3292:	80 81       	ld	r24, Z
    3294:	80 68       	ori	r24, 0x80	; 128
    3296:	8c 93       	st	X, r24
    3298:	07 c0       	rjmp	.+14     	; 0x32a8 <EXT_INTERRUPT_VID_ENABLE+0x62>
		break;
	case EXT2:
		SET_BIT(GICR, INT2);
    329a:	ab e5       	ldi	r26, 0x5B	; 91
    329c:	b0 e0       	ldi	r27, 0x00	; 0
    329e:	eb e5       	ldi	r30, 0x5B	; 91
    32a0:	f0 e0       	ldi	r31, 0x00	; 0
    32a2:	80 81       	ld	r24, Z
    32a4:	80 62       	ori	r24, 0x20	; 32
    32a6:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    32a8:	0f 90       	pop	r0
    32aa:	0f 90       	pop	r0
    32ac:	0f 90       	pop	r0
    32ae:	cf 91       	pop	r28
    32b0:	df 91       	pop	r29
    32b2:	08 95       	ret

000032b4 <EXT_INTERRUPT_VID_DISABLE>:

void EXT_INTERRUPT_VID_DISABLE(uint8 interrupt_number){
    32b4:	df 93       	push	r29
    32b6:	cf 93       	push	r28
    32b8:	00 d0       	rcall	.+0      	; 0x32ba <EXT_INTERRUPT_VID_DISABLE+0x6>
    32ba:	0f 92       	push	r0
    32bc:	cd b7       	in	r28, 0x3d	; 61
    32be:	de b7       	in	r29, 0x3e	; 62
    32c0:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt_number){
    32c2:	89 81       	ldd	r24, Y+1	; 0x01
    32c4:	28 2f       	mov	r18, r24
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	3b 83       	std	Y+3, r19	; 0x03
    32ca:	2a 83       	std	Y+2, r18	; 0x02
    32cc:	8a 81       	ldd	r24, Y+2	; 0x02
    32ce:	9b 81       	ldd	r25, Y+3	; 0x03
    32d0:	81 30       	cpi	r24, 0x01	; 1
    32d2:	91 05       	cpc	r25, r1
    32d4:	89 f0       	breq	.+34     	; 0x32f8 <EXT_INTERRUPT_VID_DISABLE+0x44>
    32d6:	2a 81       	ldd	r18, Y+2	; 0x02
    32d8:	3b 81       	ldd	r19, Y+3	; 0x03
    32da:	22 30       	cpi	r18, 0x02	; 2
    32dc:	31 05       	cpc	r19, r1
    32de:	a1 f0       	breq	.+40     	; 0x3308 <EXT_INTERRUPT_VID_DISABLE+0x54>
    32e0:	8a 81       	ldd	r24, Y+2	; 0x02
    32e2:	9b 81       	ldd	r25, Y+3	; 0x03
    32e4:	00 97       	sbiw	r24, 0x00	; 0
    32e6:	b9 f4       	brne	.+46     	; 0x3316 <EXT_INTERRUPT_VID_DISABLE+0x62>
		case EXT0:
			CLR_BIT(GICR, INT0);
    32e8:	ab e5       	ldi	r26, 0x5B	; 91
    32ea:	b0 e0       	ldi	r27, 0x00	; 0
    32ec:	eb e5       	ldi	r30, 0x5B	; 91
    32ee:	f0 e0       	ldi	r31, 0x00	; 0
    32f0:	80 81       	ld	r24, Z
    32f2:	8f 7b       	andi	r24, 0xBF	; 191
    32f4:	8c 93       	st	X, r24
    32f6:	0f c0       	rjmp	.+30     	; 0x3316 <EXT_INTERRUPT_VID_DISABLE+0x62>
			break;
		case EXT1:
			CLR_BIT(GICR, INT1);
    32f8:	ab e5       	ldi	r26, 0x5B	; 91
    32fa:	b0 e0       	ldi	r27, 0x00	; 0
    32fc:	eb e5       	ldi	r30, 0x5B	; 91
    32fe:	f0 e0       	ldi	r31, 0x00	; 0
    3300:	80 81       	ld	r24, Z
    3302:	8f 77       	andi	r24, 0x7F	; 127
    3304:	8c 93       	st	X, r24
    3306:	07 c0       	rjmp	.+14     	; 0x3316 <EXT_INTERRUPT_VID_DISABLE+0x62>
			break;
		case EXT2:
			CLR_BIT(GICR, INT2);
    3308:	ab e5       	ldi	r26, 0x5B	; 91
    330a:	b0 e0       	ldi	r27, 0x00	; 0
    330c:	eb e5       	ldi	r30, 0x5B	; 91
    330e:	f0 e0       	ldi	r31, 0x00	; 0
    3310:	80 81       	ld	r24, Z
    3312:	8f 7d       	andi	r24, 0xDF	; 223
    3314:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
}
    3316:	0f 90       	pop	r0
    3318:	0f 90       	pop	r0
    331a:	0f 90       	pop	r0
    331c:	cf 91       	pop	r28
    331e:	df 91       	pop	r29
    3320:	08 95       	ret

00003322 <EXT0_VID_SET_CALL_BACK>:

	void EXT0_VID_SET_CALL_BACK(void (*PTR)(void)){
    3322:	df 93       	push	r29
    3324:	cf 93       	push	r28
    3326:	00 d0       	rcall	.+0      	; 0x3328 <EXT0_VID_SET_CALL_BACK+0x6>
    3328:	cd b7       	in	r28, 0x3d	; 61
    332a:	de b7       	in	r29, 0x3e	; 62
    332c:	9a 83       	std	Y+2, r25	; 0x02
    332e:	89 83       	std	Y+1, r24	; 0x01
		EXTI0_CALLBACK_PTR=PTR;
    3330:	89 81       	ldd	r24, Y+1	; 0x01
    3332:	9a 81       	ldd	r25, Y+2	; 0x02
    3334:	90 93 c5 00 	sts	0x00C5, r25
    3338:	80 93 c4 00 	sts	0x00C4, r24
	}
    333c:	0f 90       	pop	r0
    333e:	0f 90       	pop	r0
    3340:	cf 91       	pop	r28
    3342:	df 91       	pop	r29
    3344:	08 95       	ret

00003346 <EXT1_VID_SET_CALL_BACK>:

	void EXT1_VID_SET_CALL_BACK(void (*PTR)(void)){
    3346:	df 93       	push	r29
    3348:	cf 93       	push	r28
    334a:	00 d0       	rcall	.+0      	; 0x334c <EXT1_VID_SET_CALL_BACK+0x6>
    334c:	cd b7       	in	r28, 0x3d	; 61
    334e:	de b7       	in	r29, 0x3e	; 62
    3350:	9a 83       	std	Y+2, r25	; 0x02
    3352:	89 83       	std	Y+1, r24	; 0x01
		EXTI1_CALLBACK_PTR=PTR;
    3354:	89 81       	ldd	r24, Y+1	; 0x01
    3356:	9a 81       	ldd	r25, Y+2	; 0x02
    3358:	90 93 c7 00 	sts	0x00C7, r25
    335c:	80 93 c6 00 	sts	0x00C6, r24
	}
    3360:	0f 90       	pop	r0
    3362:	0f 90       	pop	r0
    3364:	cf 91       	pop	r28
    3366:	df 91       	pop	r29
    3368:	08 95       	ret

0000336a <EXT2_VID_SET_CALL_BACK>:

	void EXT2_VID_SET_CALL_BACK(void (*PTR)(void)){
    336a:	df 93       	push	r29
    336c:	cf 93       	push	r28
    336e:	00 d0       	rcall	.+0      	; 0x3370 <EXT2_VID_SET_CALL_BACK+0x6>
    3370:	cd b7       	in	r28, 0x3d	; 61
    3372:	de b7       	in	r29, 0x3e	; 62
    3374:	9a 83       	std	Y+2, r25	; 0x02
    3376:	89 83       	std	Y+1, r24	; 0x01
		EXTI2_CALLBACK_PTR=PTR;
    3378:	89 81       	ldd	r24, Y+1	; 0x01
    337a:	9a 81       	ldd	r25, Y+2	; 0x02
    337c:	90 93 c9 00 	sts	0x00C9, r25
    3380:	80 93 c8 00 	sts	0x00C8, r24
	}
    3384:	0f 90       	pop	r0
    3386:	0f 90       	pop	r0
    3388:	cf 91       	pop	r28
    338a:	df 91       	pop	r29
    338c:	08 95       	ret

0000338e <__vector_1>:


	void __vector_1 (void) __attribute__ ((signal,used, externally_visible)) ; \
	void __vector_1 (void){
    338e:	1f 92       	push	r1
    3390:	0f 92       	push	r0
    3392:	0f b6       	in	r0, 0x3f	; 63
    3394:	0f 92       	push	r0
    3396:	11 24       	eor	r1, r1
    3398:	2f 93       	push	r18
    339a:	3f 93       	push	r19
    339c:	4f 93       	push	r20
    339e:	5f 93       	push	r21
    33a0:	6f 93       	push	r22
    33a2:	7f 93       	push	r23
    33a4:	8f 93       	push	r24
    33a6:	9f 93       	push	r25
    33a8:	af 93       	push	r26
    33aa:	bf 93       	push	r27
    33ac:	ef 93       	push	r30
    33ae:	ff 93       	push	r31
    33b0:	df 93       	push	r29
    33b2:	cf 93       	push	r28
    33b4:	cd b7       	in	r28, 0x3d	; 61
    33b6:	de b7       	in	r29, 0x3e	; 62
		EXTI0_CALLBACK_PTR();
    33b8:	e0 91 c4 00 	lds	r30, 0x00C4
    33bc:	f0 91 c5 00 	lds	r31, 0x00C5
    33c0:	09 95       	icall
	}
    33c2:	cf 91       	pop	r28
    33c4:	df 91       	pop	r29
    33c6:	ff 91       	pop	r31
    33c8:	ef 91       	pop	r30
    33ca:	bf 91       	pop	r27
    33cc:	af 91       	pop	r26
    33ce:	9f 91       	pop	r25
    33d0:	8f 91       	pop	r24
    33d2:	7f 91       	pop	r23
    33d4:	6f 91       	pop	r22
    33d6:	5f 91       	pop	r21
    33d8:	4f 91       	pop	r20
    33da:	3f 91       	pop	r19
    33dc:	2f 91       	pop	r18
    33de:	0f 90       	pop	r0
    33e0:	0f be       	out	0x3f, r0	; 63
    33e2:	0f 90       	pop	r0
    33e4:	1f 90       	pop	r1
    33e6:	18 95       	reti

000033e8 <__vector_2>:

	void __vector_2 (void) __attribute__ ((signal,used, externally_visible)) ; \
	void __vector_2 (void){
    33e8:	1f 92       	push	r1
    33ea:	0f 92       	push	r0
    33ec:	0f b6       	in	r0, 0x3f	; 63
    33ee:	0f 92       	push	r0
    33f0:	11 24       	eor	r1, r1
    33f2:	2f 93       	push	r18
    33f4:	3f 93       	push	r19
    33f6:	4f 93       	push	r20
    33f8:	5f 93       	push	r21
    33fa:	6f 93       	push	r22
    33fc:	7f 93       	push	r23
    33fe:	8f 93       	push	r24
    3400:	9f 93       	push	r25
    3402:	af 93       	push	r26
    3404:	bf 93       	push	r27
    3406:	ef 93       	push	r30
    3408:	ff 93       	push	r31
    340a:	df 93       	push	r29
    340c:	cf 93       	push	r28
    340e:	cd b7       	in	r28, 0x3d	; 61
    3410:	de b7       	in	r29, 0x3e	; 62
		EXTI1_CALLBACK_PTR();
    3412:	e0 91 c6 00 	lds	r30, 0x00C6
    3416:	f0 91 c7 00 	lds	r31, 0x00C7
    341a:	09 95       	icall
	}
    341c:	cf 91       	pop	r28
    341e:	df 91       	pop	r29
    3420:	ff 91       	pop	r31
    3422:	ef 91       	pop	r30
    3424:	bf 91       	pop	r27
    3426:	af 91       	pop	r26
    3428:	9f 91       	pop	r25
    342a:	8f 91       	pop	r24
    342c:	7f 91       	pop	r23
    342e:	6f 91       	pop	r22
    3430:	5f 91       	pop	r21
    3432:	4f 91       	pop	r20
    3434:	3f 91       	pop	r19
    3436:	2f 91       	pop	r18
    3438:	0f 90       	pop	r0
    343a:	0f be       	out	0x3f, r0	; 63
    343c:	0f 90       	pop	r0
    343e:	1f 90       	pop	r1
    3440:	18 95       	reti

00003442 <__vector_3>:


	void __vector_3 (void) __attribute__ ((signal,used, externally_visible)) ; \
	void __vector_3 (void){
    3442:	1f 92       	push	r1
    3444:	0f 92       	push	r0
    3446:	0f b6       	in	r0, 0x3f	; 63
    3448:	0f 92       	push	r0
    344a:	11 24       	eor	r1, r1
    344c:	2f 93       	push	r18
    344e:	3f 93       	push	r19
    3450:	4f 93       	push	r20
    3452:	5f 93       	push	r21
    3454:	6f 93       	push	r22
    3456:	7f 93       	push	r23
    3458:	8f 93       	push	r24
    345a:	9f 93       	push	r25
    345c:	af 93       	push	r26
    345e:	bf 93       	push	r27
    3460:	ef 93       	push	r30
    3462:	ff 93       	push	r31
    3464:	df 93       	push	r29
    3466:	cf 93       	push	r28
    3468:	cd b7       	in	r28, 0x3d	; 61
    346a:	de b7       	in	r29, 0x3e	; 62
		EXTI2_CALLBACK_PTR();
    346c:	e0 91 c8 00 	lds	r30, 0x00C8
    3470:	f0 91 c9 00 	lds	r31, 0x00C9
    3474:	09 95       	icall
	}
    3476:	cf 91       	pop	r28
    3478:	df 91       	pop	r29
    347a:	ff 91       	pop	r31
    347c:	ef 91       	pop	r30
    347e:	bf 91       	pop	r27
    3480:	af 91       	pop	r26
    3482:	9f 91       	pop	r25
    3484:	8f 91       	pop	r24
    3486:	7f 91       	pop	r23
    3488:	6f 91       	pop	r22
    348a:	5f 91       	pop	r21
    348c:	4f 91       	pop	r20
    348e:	3f 91       	pop	r19
    3490:	2f 91       	pop	r18
    3492:	0f 90       	pop	r0
    3494:	0f be       	out	0x3f, r0	; 63
    3496:	0f 90       	pop	r0
    3498:	1f 90       	pop	r1
    349a:	18 95       	reti

0000349c <Global_Interrupt_Enable>:
#include "../BIT_Math.h"
#include "Global_Interrupt_register.h"
#include "Global_Interrupt_interface.h"

void Global_Interrupt_Enable(void)
{
    349c:	df 93       	push	r29
    349e:	cf 93       	push	r28
    34a0:	cd b7       	in	r28, 0x3d	; 61
    34a2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I);
    34a4:	af e5       	ldi	r26, 0x5F	; 95
    34a6:	b0 e0       	ldi	r27, 0x00	; 0
    34a8:	ef e5       	ldi	r30, 0x5F	; 95
    34aa:	f0 e0       	ldi	r31, 0x00	; 0
    34ac:	80 81       	ld	r24, Z
    34ae:	80 68       	ori	r24, 0x80	; 128
    34b0:	8c 93       	st	X, r24
}
    34b2:	cf 91       	pop	r28
    34b4:	df 91       	pop	r29
    34b6:	08 95       	ret

000034b8 <Global_Interrupt_Disable>:
void Global_Interrupt_Disable(void)
{
    34b8:	df 93       	push	r29
    34ba:	cf 93       	push	r28
    34bc:	cd b7       	in	r28, 0x3d	; 61
    34be:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
    34c0:	af e5       	ldi	r26, 0x5F	; 95
    34c2:	b0 e0       	ldi	r27, 0x00	; 0
    34c4:	ef e5       	ldi	r30, 0x5F	; 95
    34c6:	f0 e0       	ldi	r31, 0x00	; 0
    34c8:	80 81       	ld	r24, Z
    34ca:	8f 77       	andi	r24, 0x7F	; 127
    34cc:	8c 93       	st	X, r24
}
    34ce:	cf 91       	pop	r28
    34d0:	df 91       	pop	r29
    34d2:	08 95       	ret

000034d4 <EEPROM_voidRead>:
#include "EEPROM_config.h"



void EEPROM_voidRead(uint8 u8LocationAddressCpy , uint8* pu8DataCpy)
{
    34d4:	df 93       	push	r29
    34d6:	cf 93       	push	r28
    34d8:	00 d0       	rcall	.+0      	; 0x34da <EEPROM_voidRead+0x6>
    34da:	0f 92       	push	r0
    34dc:	cd b7       	in	r28, 0x3d	; 61
    34de:	de b7       	in	r29, 0x3e	; 62
    34e0:	89 83       	std	Y+1, r24	; 0x01
    34e2:	7b 83       	std	Y+3, r23	; 0x03
    34e4:	6a 83       	std	Y+2, r22	; 0x02
	/* Start condition  */
	TWI_enStartCondition();
    34e6:	0e 94 0c 1c 	call	0x3818	; 0x3818 <TWI_enStartCondition>
	/* Send SLA With Write */
	TWI_enSetSlaveAddress_Write(SLAVE_ADDRESS_WRITE);
    34ea:	80 ea       	ldi	r24, 0xA0	; 160
    34ec:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <TWI_enSetSlaveAddress_Write>
	/* Send Memory location */
	TWI_enMasterWriteData(u8LocationAddressCpy);
    34f0:	89 81       	ldd	r24, Y+1	; 0x01
    34f2:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <TWI_enMasterWriteData>
	/* Repeat Start to change Write operation to Read operation */
	TWI_enRepeatStart();
    34f6:	0e 94 3d 1c 	call	0x387a	; 0x387a <TWI_enRepeatStart>
	//	TWI_enSetSlaveAddress_Write(SLAVE_ADDRESS_READ);   //will be also read successfully
	TWI_enSetSlaveAddress_Read(SLAVE_ADDRESS_WRITE);
    34fa:	80 ea       	ldi	r24, 0xA0	; 160
    34fc:	0e 94 ac 1c 	call	0x3958	; 0x3958 <TWI_enSetSlaveAddress_Read>
	/* Master Receive Data*/
	TWI_enMasterReadData(pu8DataCpy);
    3500:	8a 81       	ldd	r24, Y+2	; 0x02
    3502:	9b 81       	ldd	r25, Y+3	; 0x03
    3504:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <TWI_enMasterReadData>
	TWI_voidStopCondition();
    3508:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <TWI_voidStopCondition>

}
    350c:	0f 90       	pop	r0
    350e:	0f 90       	pop	r0
    3510:	0f 90       	pop	r0
    3512:	cf 91       	pop	r28
    3514:	df 91       	pop	r29
    3516:	08 95       	ret

00003518 <EEPROM_voidWrite>:

void EEPROM_voidWrite(uint8 u8LocationAddressCpy , uint8 u8DataCpy){
    3518:	df 93       	push	r29
    351a:	cf 93       	push	r28
    351c:	cd b7       	in	r28, 0x3d	; 61
    351e:	de b7       	in	r29, 0x3e	; 62
    3520:	60 97       	sbiw	r28, 0x10	; 16
    3522:	0f b6       	in	r0, 0x3f	; 63
    3524:	f8 94       	cli
    3526:	de bf       	out	0x3e, r29	; 62
    3528:	0f be       	out	0x3f, r0	; 63
    352a:	cd bf       	out	0x3d, r28	; 61
    352c:	8f 87       	std	Y+15, r24	; 0x0f
    352e:	68 8b       	std	Y+16, r22	; 0x10

	/* Start condition  */
	TWI_enStartCondition();
    3530:	0e 94 0c 1c 	call	0x3818	; 0x3818 <TWI_enStartCondition>
	/* Send SLA With Write */
	TWI_enSetSlaveAddress_Write(SLAVE_ADDRESS_WRITE);
    3534:	80 ea       	ldi	r24, 0xA0	; 160
    3536:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <TWI_enSetSlaveAddress_Write>
	/* Send Memory location */
	TWI_enMasterWriteData(u8LocationAddressCpy);
    353a:	8f 85       	ldd	r24, Y+15	; 0x0f
    353c:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <TWI_enMasterWriteData>
	TWI_enMasterWriteData(u8DataCpy);
    3540:	88 89       	ldd	r24, Y+16	; 0x10
    3542:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <TWI_enMasterWriteData>
	TWI_voidStopCondition();
    3546:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <TWI_voidStopCondition>
    354a:	80 e0       	ldi	r24, 0x00	; 0
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	a0 e2       	ldi	r26, 0x20	; 32
    3550:	b1 e4       	ldi	r27, 0x41	; 65
    3552:	8b 87       	std	Y+11, r24	; 0x0b
    3554:	9c 87       	std	Y+12, r25	; 0x0c
    3556:	ad 87       	std	Y+13, r26	; 0x0d
    3558:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    355a:	6b 85       	ldd	r22, Y+11	; 0x0b
    355c:	7c 85       	ldd	r23, Y+12	; 0x0c
    355e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3560:	9e 85       	ldd	r25, Y+14	; 0x0e
    3562:	20 e0       	ldi	r18, 0x00	; 0
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	4a ef       	ldi	r20, 0xFA	; 250
    3568:	54 e4       	ldi	r21, 0x44	; 68
    356a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    356e:	dc 01       	movw	r26, r24
    3570:	cb 01       	movw	r24, r22
    3572:	8f 83       	std	Y+7, r24	; 0x07
    3574:	98 87       	std	Y+8, r25	; 0x08
    3576:	a9 87       	std	Y+9, r26	; 0x09
    3578:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    357a:	6f 81       	ldd	r22, Y+7	; 0x07
    357c:	78 85       	ldd	r23, Y+8	; 0x08
    357e:	89 85       	ldd	r24, Y+9	; 0x09
    3580:	9a 85       	ldd	r25, Y+10	; 0x0a
    3582:	20 e0       	ldi	r18, 0x00	; 0
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	40 e8       	ldi	r20, 0x80	; 128
    3588:	5f e3       	ldi	r21, 0x3F	; 63
    358a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    358e:	88 23       	and	r24, r24
    3590:	2c f4       	brge	.+10     	; 0x359c <EEPROM_voidWrite+0x84>
		__ticks = 1;
    3592:	81 e0       	ldi	r24, 0x01	; 1
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	9e 83       	std	Y+6, r25	; 0x06
    3598:	8d 83       	std	Y+5, r24	; 0x05
    359a:	3f c0       	rjmp	.+126    	; 0x361a <EEPROM_voidWrite+0x102>
	else if (__tmp > 65535)
    359c:	6f 81       	ldd	r22, Y+7	; 0x07
    359e:	78 85       	ldd	r23, Y+8	; 0x08
    35a0:	89 85       	ldd	r24, Y+9	; 0x09
    35a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a4:	20 e0       	ldi	r18, 0x00	; 0
    35a6:	3f ef       	ldi	r19, 0xFF	; 255
    35a8:	4f e7       	ldi	r20, 0x7F	; 127
    35aa:	57 e4       	ldi	r21, 0x47	; 71
    35ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35b0:	18 16       	cp	r1, r24
    35b2:	4c f5       	brge	.+82     	; 0x3606 <EEPROM_voidWrite+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    35b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    35b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    35ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    35bc:	20 e0       	ldi	r18, 0x00	; 0
    35be:	30 e0       	ldi	r19, 0x00	; 0
    35c0:	40 e2       	ldi	r20, 0x20	; 32
    35c2:	51 e4       	ldi	r21, 0x41	; 65
    35c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35c8:	dc 01       	movw	r26, r24
    35ca:	cb 01       	movw	r24, r22
    35cc:	bc 01       	movw	r22, r24
    35ce:	cd 01       	movw	r24, r26
    35d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d4:	dc 01       	movw	r26, r24
    35d6:	cb 01       	movw	r24, r22
    35d8:	9e 83       	std	Y+6, r25	; 0x06
    35da:	8d 83       	std	Y+5, r24	; 0x05
    35dc:	0f c0       	rjmp	.+30     	; 0x35fc <EEPROM_voidWrite+0xe4>
    35de:	88 ec       	ldi	r24, 0xC8	; 200
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	9c 83       	std	Y+4, r25	; 0x04
    35e4:	8b 83       	std	Y+3, r24	; 0x03
    35e6:	8b 81       	ldd	r24, Y+3	; 0x03
    35e8:	9c 81       	ldd	r25, Y+4	; 0x04
    35ea:	01 97       	sbiw	r24, 0x01	; 1
    35ec:	f1 f7       	brne	.-4      	; 0x35ea <EEPROM_voidWrite+0xd2>
    35ee:	9c 83       	std	Y+4, r25	; 0x04
    35f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35f2:	8d 81       	ldd	r24, Y+5	; 0x05
    35f4:	9e 81       	ldd	r25, Y+6	; 0x06
    35f6:	01 97       	sbiw	r24, 0x01	; 1
    35f8:	9e 83       	std	Y+6, r25	; 0x06
    35fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35fc:	8d 81       	ldd	r24, Y+5	; 0x05
    35fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3600:	00 97       	sbiw	r24, 0x00	; 0
    3602:	69 f7       	brne	.-38     	; 0x35de <EEPROM_voidWrite+0xc6>
    3604:	14 c0       	rjmp	.+40     	; 0x362e <EEPROM_voidWrite+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3606:	6f 81       	ldd	r22, Y+7	; 0x07
    3608:	78 85       	ldd	r23, Y+8	; 0x08
    360a:	89 85       	ldd	r24, Y+9	; 0x09
    360c:	9a 85       	ldd	r25, Y+10	; 0x0a
    360e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3612:	dc 01       	movw	r26, r24
    3614:	cb 01       	movw	r24, r22
    3616:	9e 83       	std	Y+6, r25	; 0x06
    3618:	8d 83       	std	Y+5, r24	; 0x05
    361a:	8d 81       	ldd	r24, Y+5	; 0x05
    361c:	9e 81       	ldd	r25, Y+6	; 0x06
    361e:	9a 83       	std	Y+2, r25	; 0x02
    3620:	89 83       	std	Y+1, r24	; 0x01
    3622:	89 81       	ldd	r24, Y+1	; 0x01
    3624:	9a 81       	ldd	r25, Y+2	; 0x02
    3626:	01 97       	sbiw	r24, 0x01	; 1
    3628:	f1 f7       	brne	.-4      	; 0x3626 <EEPROM_voidWrite+0x10e>
    362a:	9a 83       	std	Y+2, r25	; 0x02
    362c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

}
    362e:	60 96       	adiw	r28, 0x10	; 16
    3630:	0f b6       	in	r0, 0x3f	; 63
    3632:	f8 94       	cli
    3634:	de bf       	out	0x3e, r29	; 62
    3636:	0f be       	out	0x3f, r0	; 63
    3638:	cd bf       	out	0x3d, r28	; 61
    363a:	cf 91       	pop	r28
    363c:	df 91       	pop	r29
    363e:	08 95       	ret

00003640 <EEPROM_voidWritePage>:

void EEPROM_voidWritePage(uint8 u8LocationAddressCpy , uint8* pu8DataCpy, uint8 length){
    3640:	df 93       	push	r29
    3642:	cf 93       	push	r28
    3644:	cd b7       	in	r28, 0x3d	; 61
    3646:	de b7       	in	r29, 0x3e	; 62
    3648:	63 97       	sbiw	r28, 0x13	; 19
    364a:	0f b6       	in	r0, 0x3f	; 63
    364c:	f8 94       	cli
    364e:	de bf       	out	0x3e, r29	; 62
    3650:	0f be       	out	0x3f, r0	; 63
    3652:	cd bf       	out	0x3d, r28	; 61
    3654:	88 8b       	std	Y+16, r24	; 0x10
    3656:	7a 8b       	std	Y+18, r23	; 0x12
    3658:	69 8b       	std	Y+17, r22	; 0x11
    365a:	4b 8b       	std	Y+19, r20	; 0x13

	/* Start condition  */
	TWI_enStartCondition();
    365c:	0e 94 0c 1c 	call	0x3818	; 0x3818 <TWI_enStartCondition>
	/* Send SLA With Write */
	TWI_enSetSlaveAddress_Write(SLAVE_ADDRESS_WRITE);
    3660:	80 ea       	ldi	r24, 0xA0	; 160
    3662:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <TWI_enSetSlaveAddress_Write>
	/* Send Memory location */
	TWI_enMasterWriteData(u8LocationAddressCpy);
    3666:	88 89       	ldd	r24, Y+16	; 0x10
    3668:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <TWI_enMasterWriteData>
	for(uint8 i=0; i<length; i++){
    366c:	1f 86       	std	Y+15, r1	; 0x0f
    366e:	80 c0       	rjmp	.+256    	; 0x3770 <EEPROM_voidWritePage+0x130>
		TWI_enMasterWriteData(pu8DataCpy[i]);
    3670:	8f 85       	ldd	r24, Y+15	; 0x0f
    3672:	28 2f       	mov	r18, r24
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	89 89       	ldd	r24, Y+17	; 0x11
    3678:	9a 89       	ldd	r25, Y+18	; 0x12
    367a:	fc 01       	movw	r30, r24
    367c:	e2 0f       	add	r30, r18
    367e:	f3 1f       	adc	r31, r19
    3680:	80 81       	ld	r24, Z
    3682:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <TWI_enMasterWriteData>
    3686:	80 e0       	ldi	r24, 0x00	; 0
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	a0 ea       	ldi	r26, 0xA0	; 160
    368c:	b0 e4       	ldi	r27, 0x40	; 64
    368e:	8b 87       	std	Y+11, r24	; 0x0b
    3690:	9c 87       	std	Y+12, r25	; 0x0c
    3692:	ad 87       	std	Y+13, r26	; 0x0d
    3694:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3696:	6b 85       	ldd	r22, Y+11	; 0x0b
    3698:	7c 85       	ldd	r23, Y+12	; 0x0c
    369a:	8d 85       	ldd	r24, Y+13	; 0x0d
    369c:	9e 85       	ldd	r25, Y+14	; 0x0e
    369e:	20 e0       	ldi	r18, 0x00	; 0
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	4a ef       	ldi	r20, 0xFA	; 250
    36a4:	54 e4       	ldi	r21, 0x44	; 68
    36a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36aa:	dc 01       	movw	r26, r24
    36ac:	cb 01       	movw	r24, r22
    36ae:	8f 83       	std	Y+7, r24	; 0x07
    36b0:	98 87       	std	Y+8, r25	; 0x08
    36b2:	a9 87       	std	Y+9, r26	; 0x09
    36b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36b6:	6f 81       	ldd	r22, Y+7	; 0x07
    36b8:	78 85       	ldd	r23, Y+8	; 0x08
    36ba:	89 85       	ldd	r24, Y+9	; 0x09
    36bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    36be:	20 e0       	ldi	r18, 0x00	; 0
    36c0:	30 e0       	ldi	r19, 0x00	; 0
    36c2:	40 e8       	ldi	r20, 0x80	; 128
    36c4:	5f e3       	ldi	r21, 0x3F	; 63
    36c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36ca:	88 23       	and	r24, r24
    36cc:	2c f4       	brge	.+10     	; 0x36d8 <EEPROM_voidWritePage+0x98>
		__ticks = 1;
    36ce:	81 e0       	ldi	r24, 0x01	; 1
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	9e 83       	std	Y+6, r25	; 0x06
    36d4:	8d 83       	std	Y+5, r24	; 0x05
    36d6:	3f c0       	rjmp	.+126    	; 0x3756 <EEPROM_voidWritePage+0x116>
	else if (__tmp > 65535)
    36d8:	6f 81       	ldd	r22, Y+7	; 0x07
    36da:	78 85       	ldd	r23, Y+8	; 0x08
    36dc:	89 85       	ldd	r24, Y+9	; 0x09
    36de:	9a 85       	ldd	r25, Y+10	; 0x0a
    36e0:	20 e0       	ldi	r18, 0x00	; 0
    36e2:	3f ef       	ldi	r19, 0xFF	; 255
    36e4:	4f e7       	ldi	r20, 0x7F	; 127
    36e6:	57 e4       	ldi	r21, 0x47	; 71
    36e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36ec:	18 16       	cp	r1, r24
    36ee:	4c f5       	brge	.+82     	; 0x3742 <EEPROM_voidWritePage+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    36f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    36f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    36f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    36f8:	20 e0       	ldi	r18, 0x00	; 0
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	40 e2       	ldi	r20, 0x20	; 32
    36fe:	51 e4       	ldi	r21, 0x41	; 65
    3700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3704:	dc 01       	movw	r26, r24
    3706:	cb 01       	movw	r24, r22
    3708:	bc 01       	movw	r22, r24
    370a:	cd 01       	movw	r24, r26
    370c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3710:	dc 01       	movw	r26, r24
    3712:	cb 01       	movw	r24, r22
    3714:	9e 83       	std	Y+6, r25	; 0x06
    3716:	8d 83       	std	Y+5, r24	; 0x05
    3718:	0f c0       	rjmp	.+30     	; 0x3738 <EEPROM_voidWritePage+0xf8>
    371a:	88 ec       	ldi	r24, 0xC8	; 200
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	9c 83       	std	Y+4, r25	; 0x04
    3720:	8b 83       	std	Y+3, r24	; 0x03
    3722:	8b 81       	ldd	r24, Y+3	; 0x03
    3724:	9c 81       	ldd	r25, Y+4	; 0x04
    3726:	01 97       	sbiw	r24, 0x01	; 1
    3728:	f1 f7       	brne	.-4      	; 0x3726 <EEPROM_voidWritePage+0xe6>
    372a:	9c 83       	std	Y+4, r25	; 0x04
    372c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    372e:	8d 81       	ldd	r24, Y+5	; 0x05
    3730:	9e 81       	ldd	r25, Y+6	; 0x06
    3732:	01 97       	sbiw	r24, 0x01	; 1
    3734:	9e 83       	std	Y+6, r25	; 0x06
    3736:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3738:	8d 81       	ldd	r24, Y+5	; 0x05
    373a:	9e 81       	ldd	r25, Y+6	; 0x06
    373c:	00 97       	sbiw	r24, 0x00	; 0
    373e:	69 f7       	brne	.-38     	; 0x371a <EEPROM_voidWritePage+0xda>
    3740:	14 c0       	rjmp	.+40     	; 0x376a <EEPROM_voidWritePage+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3742:	6f 81       	ldd	r22, Y+7	; 0x07
    3744:	78 85       	ldd	r23, Y+8	; 0x08
    3746:	89 85       	ldd	r24, Y+9	; 0x09
    3748:	9a 85       	ldd	r25, Y+10	; 0x0a
    374a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    374e:	dc 01       	movw	r26, r24
    3750:	cb 01       	movw	r24, r22
    3752:	9e 83       	std	Y+6, r25	; 0x06
    3754:	8d 83       	std	Y+5, r24	; 0x05
    3756:	8d 81       	ldd	r24, Y+5	; 0x05
    3758:	9e 81       	ldd	r25, Y+6	; 0x06
    375a:	9a 83       	std	Y+2, r25	; 0x02
    375c:	89 83       	std	Y+1, r24	; 0x01
    375e:	89 81       	ldd	r24, Y+1	; 0x01
    3760:	9a 81       	ldd	r25, Y+2	; 0x02
    3762:	01 97       	sbiw	r24, 0x01	; 1
    3764:	f1 f7       	brne	.-4      	; 0x3762 <EEPROM_voidWritePage+0x122>
    3766:	9a 83       	std	Y+2, r25	; 0x02
    3768:	89 83       	std	Y+1, r24	; 0x01
	TWI_enStartCondition();
	/* Send SLA With Write */
	TWI_enSetSlaveAddress_Write(SLAVE_ADDRESS_WRITE);
	/* Send Memory location */
	TWI_enMasterWriteData(u8LocationAddressCpy);
	for(uint8 i=0; i<length; i++){
    376a:	8f 85       	ldd	r24, Y+15	; 0x0f
    376c:	8f 5f       	subi	r24, 0xFF	; 255
    376e:	8f 87       	std	Y+15, r24	; 0x0f
    3770:	9f 85       	ldd	r25, Y+15	; 0x0f
    3772:	8b 89       	ldd	r24, Y+19	; 0x13
    3774:	98 17       	cp	r25, r24
    3776:	08 f4       	brcc	.+2      	; 0x377a <EEPROM_voidWritePage+0x13a>
    3778:	7b cf       	rjmp	.-266    	; 0x3670 <EEPROM_voidWritePage+0x30>
		TWI_enMasterWriteData(pu8DataCpy[i]);
		_delay_ms(5);

	}

	TWI_voidStopCondition();
    377a:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <TWI_voidStopCondition>

}
    377e:	63 96       	adiw	r28, 0x13	; 19
    3780:	0f b6       	in	r0, 0x3f	; 63
    3782:	f8 94       	cli
    3784:	de bf       	out	0x3e, r29	; 62
    3786:	0f be       	out	0x3f, r0	; 63
    3788:	cd bf       	out	0x3d, r28	; 61
    378a:	cf 91       	pop	r28
    378c:	df 91       	pop	r29
    378e:	08 95       	ret

00003790 <TWI_voidMasterInit>:
#include "../BIT_Math.h"
#include "TWI_interface.h"
#include "TWI_private.h"
#include "TWI_config.h"

void TWI_voidMasterInit(void){
    3790:	df 93       	push	r29
    3792:	cf 93       	push	r28
    3794:	cd b7       	in	r28, 0x3d	; 61
    3796:	de b7       	in	r29, 0x3e	; 62
	/* Set Clock configuration  TWBR = 2 */
	TWBR = 2;
    3798:	e0 e2       	ldi	r30, 0x20	; 32
    379a:	f0 e0       	ldi	r31, 0x00	; 0
    379c:	82 e0       	ldi	r24, 0x02	; 2
    379e:	80 83       	st	Z, r24
	CLR_BIT(TWSR , TWSR_TWPS0);
    37a0:	a1 e2       	ldi	r26, 0x21	; 33
    37a2:	b0 e0       	ldi	r27, 0x00	; 0
    37a4:	e1 e2       	ldi	r30, 0x21	; 33
    37a6:	f0 e0       	ldi	r31, 0x00	; 0
    37a8:	80 81       	ld	r24, Z
    37aa:	8e 7f       	andi	r24, 0xFE	; 254
    37ac:	8c 93       	st	X, r24
	CLR_BIT(TWSR , TWSR_TWPS1);
    37ae:	a1 e2       	ldi	r26, 0x21	; 33
    37b0:	b0 e0       	ldi	r27, 0x00	; 0
    37b2:	e1 e2       	ldi	r30, 0x21	; 33
    37b4:	f0 e0       	ldi	r31, 0x00	; 0
    37b6:	80 81       	ld	r24, Z
    37b8:	8d 7f       	andi	r24, 0xFD	; 253
    37ba:	8c 93       	st	X, r24

	/* Enable Acknowledge bit */
	SET_BIT(TWCR , TWCR_TWEA);
    37bc:	a6 e5       	ldi	r26, 0x56	; 86
    37be:	b0 e0       	ldi	r27, 0x00	; 0
    37c0:	e6 e5       	ldi	r30, 0x56	; 86
    37c2:	f0 e0       	ldi	r31, 0x00	; 0
    37c4:	80 81       	ld	r24, Z
    37c6:	80 64       	ori	r24, 0x40	; 64
    37c8:	8c 93       	st	X, r24
	/* Set my own Address */
	TWAR = MASTER_ADDRESS << 1;
    37ca:	e2 e2       	ldi	r30, 0x22	; 34
    37cc:	f0 e0       	ldi	r31, 0x00	; 0
    37ce:	84 e1       	ldi	r24, 0x14	; 20
    37d0:	80 83       	st	Z, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    37d2:	a6 e5       	ldi	r26, 0x56	; 86
    37d4:	b0 e0       	ldi	r27, 0x00	; 0
    37d6:	e6 e5       	ldi	r30, 0x56	; 86
    37d8:	f0 e0       	ldi	r31, 0x00	; 0
    37da:	80 81       	ld	r24, Z
    37dc:	84 60       	ori	r24, 0x04	; 4
    37de:	8c 93       	st	X, r24

}
    37e0:	cf 91       	pop	r28
    37e2:	df 91       	pop	r29
    37e4:	08 95       	ret

000037e6 <TWI_voidSlaveInit>:
void TWI_voidSlaveInit(void){
    37e6:	df 93       	push	r29
    37e8:	cf 93       	push	r28
    37ea:	cd b7       	in	r28, 0x3d	; 61
    37ec:	de b7       	in	r29, 0x3e	; 62
	/* Enable Acknowledge bit */
	SET_BIT(TWCR , TWCR_TWEA);
    37ee:	a6 e5       	ldi	r26, 0x56	; 86
    37f0:	b0 e0       	ldi	r27, 0x00	; 0
    37f2:	e6 e5       	ldi	r30, 0x56	; 86
    37f4:	f0 e0       	ldi	r31, 0x00	; 0
    37f6:	80 81       	ld	r24, Z
    37f8:	80 64       	ori	r24, 0x40	; 64
    37fa:	8c 93       	st	X, r24
	/* Set my own Address */
	TWAR = SLAVE_ADDRESS << 1;
    37fc:	e2 e2       	ldi	r30, 0x22	; 34
    37fe:	f0 e0       	ldi	r31, 0x00	; 0
    3800:	88 e2       	ldi	r24, 0x28	; 40
    3802:	80 83       	st	Z, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    3804:	a6 e5       	ldi	r26, 0x56	; 86
    3806:	b0 e0       	ldi	r27, 0x00	; 0
    3808:	e6 e5       	ldi	r30, 0x56	; 86
    380a:	f0 e0       	ldi	r31, 0x00	; 0
    380c:	80 81       	ld	r24, Z
    380e:	84 60       	ori	r24, 0x04	; 4
    3810:	8c 93       	st	X, r24
}
    3812:	cf 91       	pop	r28
    3814:	df 91       	pop	r29
    3816:	08 95       	ret

00003818 <TWI_enStartCondition>:

TWI_ErrorState_t TWI_enStartCondition(void){
    3818:	df 93       	push	r29
    381a:	cf 93       	push	r28
    381c:	0f 92       	push	r0
    381e:	cd b7       	in	r28, 0x3d	; 61
    3820:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    3822:	19 82       	std	Y+1, r1	; 0x01
	/* enable start condition */
	SET_BIT(TWCR , TWCR_TWSTA);
    3824:	a6 e5       	ldi	r26, 0x56	; 86
    3826:	b0 e0       	ldi	r27, 0x00	; 0
    3828:	e6 e5       	ldi	r30, 0x56	; 86
    382a:	f0 e0       	ldi	r31, 0x00	; 0
    382c:	80 81       	ld	r24, Z
    382e:	80 62       	ori	r24, 0x20	; 32
    3830:	8c 93       	st	X, r24
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    3832:	a6 e5       	ldi	r26, 0x56	; 86
    3834:	b0 e0       	ldi	r27, 0x00	; 0
    3836:	e6 e5       	ldi	r30, 0x56	; 86
    3838:	f0 e0       	ldi	r31, 0x00	; 0
    383a:	80 81       	ld	r24, Z
    383c:	80 68       	ori	r24, 0x80	; 128
    383e:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    3840:	a6 e5       	ldi	r26, 0x56	; 86
    3842:	b0 e0       	ldi	r27, 0x00	; 0
    3844:	e6 e5       	ldi	r30, 0x56	; 86
    3846:	f0 e0       	ldi	r31, 0x00	; 0
    3848:	80 81       	ld	r24, Z
    384a:	84 60       	ori	r24, 0x04	; 4
    384c:	8c 93       	st	X, r24

	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    384e:	e6 e5       	ldi	r30, 0x56	; 86
    3850:	f0 e0       	ldi	r31, 0x00	; 0
    3852:	80 81       	ld	r24, Z
    3854:	88 23       	and	r24, r24
    3856:	dc f7       	brge	.-10     	; 0x384e <TWI_enStartCondition+0x36>

	if((TWSR & 0XF8) != START_CONDITION)
    3858:	e1 e2       	ldi	r30, 0x21	; 33
    385a:	f0 e0       	ldi	r31, 0x00	; 0
    385c:	80 81       	ld	r24, Z
    385e:	88 2f       	mov	r24, r24
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	88 7f       	andi	r24, 0xF8	; 248
    3864:	90 70       	andi	r25, 0x00	; 0
    3866:	88 30       	cpi	r24, 0x08	; 8
    3868:	91 05       	cpc	r25, r1
    386a:	11 f0       	breq	.+4      	; 0x3870 <TWI_enStartCondition+0x58>
	{
		Local_ErrorState = START_CONDITION_ERR;
    386c:	81 e0       	ldi	r24, 0x01	; 1
    386e:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do Nothing */
	}

	return Local_ErrorState;
    3870:	89 81       	ldd	r24, Y+1	; 0x01


}
    3872:	0f 90       	pop	r0
    3874:	cf 91       	pop	r28
    3876:	df 91       	pop	r29
    3878:	08 95       	ret

0000387a <TWI_enRepeatStart>:
TWI_ErrorState_t TWI_enRepeatStart(void){
    387a:	df 93       	push	r29
    387c:	cf 93       	push	r28
    387e:	0f 92       	push	r0
    3880:	cd b7       	in	r28, 0x3d	; 61
    3882:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    3884:	19 82       	std	Y+1, r1	; 0x01
	/* enable start condition */
	SET_BIT(TWCR , TWCR_TWSTA);
    3886:	a6 e5       	ldi	r26, 0x56	; 86
    3888:	b0 e0       	ldi	r27, 0x00	; 0
    388a:	e6 e5       	ldi	r30, 0x56	; 86
    388c:	f0 e0       	ldi	r31, 0x00	; 0
    388e:	80 81       	ld	r24, Z
    3890:	80 62       	ori	r24, 0x20	; 32
    3892:	8c 93       	st	X, r24
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    3894:	a6 e5       	ldi	r26, 0x56	; 86
    3896:	b0 e0       	ldi	r27, 0x00	; 0
    3898:	e6 e5       	ldi	r30, 0x56	; 86
    389a:	f0 e0       	ldi	r31, 0x00	; 0
    389c:	80 81       	ld	r24, Z
    389e:	80 68       	ori	r24, 0x80	; 128
    38a0:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    38a2:	a6 e5       	ldi	r26, 0x56	; 86
    38a4:	b0 e0       	ldi	r27, 0x00	; 0
    38a6:	e6 e5       	ldi	r30, 0x56	; 86
    38a8:	f0 e0       	ldi	r31, 0x00	; 0
    38aa:	80 81       	ld	r24, Z
    38ac:	84 60       	ori	r24, 0x04	; 4
    38ae:	8c 93       	st	X, r24

	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    38b0:	e6 e5       	ldi	r30, 0x56	; 86
    38b2:	f0 e0       	ldi	r31, 0x00	; 0
    38b4:	80 81       	ld	r24, Z
    38b6:	88 23       	and	r24, r24
    38b8:	dc f7       	brge	.-10     	; 0x38b0 <TWI_enRepeatStart+0x36>

	if((TWSR & 0XF8) != REPEATE_START_CONDITION)
    38ba:	e1 e2       	ldi	r30, 0x21	; 33
    38bc:	f0 e0       	ldi	r31, 0x00	; 0
    38be:	80 81       	ld	r24, Z
    38c0:	88 2f       	mov	r24, r24
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	88 7f       	andi	r24, 0xF8	; 248
    38c6:	90 70       	andi	r25, 0x00	; 0
    38c8:	80 31       	cpi	r24, 0x10	; 16
    38ca:	91 05       	cpc	r25, r1
    38cc:	11 f0       	breq	.+4      	; 0x38d2 <TWI_enRepeatStart+0x58>
	{
		Local_ErrorState = REPEAT_START_ERR;
    38ce:	82 e0       	ldi	r24, 0x02	; 2
    38d0:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do Nothing */
	}

	return Local_ErrorState;
    38d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    38d4:	0f 90       	pop	r0
    38d6:	cf 91       	pop	r28
    38d8:	df 91       	pop	r29
    38da:	08 95       	ret

000038dc <TWI_enSetSlaveAddress_Write>:
TWI_ErrorState_t TWI_enSetSlaveAddress_Write(uint8 u8SlaveAddressCpy){
    38dc:	df 93       	push	r29
    38de:	cf 93       	push	r28
    38e0:	00 d0       	rcall	.+0      	; 0x38e2 <TWI_enSetSlaveAddress_Write+0x6>
    38e2:	cd b7       	in	r28, 0x3d	; 61
    38e4:	de b7       	in	r29, 0x3e	; 62
    38e6:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    38e8:	19 82       	std	Y+1, r1	; 0x01

	/* Set Slave address in TWDR register */
	TWDR = u8SlaveAddressCpy;
    38ea:	e3 e2       	ldi	r30, 0x23	; 35
    38ec:	f0 e0       	ldi	r31, 0x00	; 0
    38ee:	8a 81       	ldd	r24, Y+2	; 0x02
    38f0:	80 83       	st	Z, r24

	/* Clear the start condition bit */
	CLR_BIT(TWCR , TWCR_TWSTA);
    38f2:	a6 e5       	ldi	r26, 0x56	; 86
    38f4:	b0 e0       	ldi	r27, 0x00	; 0
    38f6:	e6 e5       	ldi	r30, 0x56	; 86
    38f8:	f0 e0       	ldi	r31, 0x00	; 0
    38fa:	80 81       	ld	r24, Z
    38fc:	8f 7d       	andi	r24, 0xDF	; 223
    38fe:	8c 93       	st	X, r24
	/* Clear bit 0 to make write operation */
	CLR_BIT(TWDR , TWDR_TWD0);
    3900:	a3 e2       	ldi	r26, 0x23	; 35
    3902:	b0 e0       	ldi	r27, 0x00	; 0
    3904:	e3 e2       	ldi	r30, 0x23	; 35
    3906:	f0 e0       	ldi	r31, 0x00	; 0
    3908:	80 81       	ld	r24, Z
    390a:	8e 7f       	andi	r24, 0xFE	; 254
    390c:	8c 93       	st	X, r24

	/*************************************************/
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    390e:	a6 e5       	ldi	r26, 0x56	; 86
    3910:	b0 e0       	ldi	r27, 0x00	; 0
    3912:	e6 e5       	ldi	r30, 0x56	; 86
    3914:	f0 e0       	ldi	r31, 0x00	; 0
    3916:	80 81       	ld	r24, Z
    3918:	80 68       	ori	r24, 0x80	; 128
    391a:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    391c:	a6 e5       	ldi	r26, 0x56	; 86
    391e:	b0 e0       	ldi	r27, 0x00	; 0
    3920:	e6 e5       	ldi	r30, 0x56	; 86
    3922:	f0 e0       	ldi	r31, 0x00	; 0
    3924:	80 81       	ld	r24, Z
    3926:	84 60       	ori	r24, 0x04	; 4
    3928:	8c 93       	st	X, r24
	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    392a:	e6 e5       	ldi	r30, 0x56	; 86
    392c:	f0 e0       	ldi	r31, 0x00	; 0
    392e:	80 81       	ld	r24, Z
    3930:	88 23       	and	r24, r24
    3932:	dc f7       	brge	.-10     	; 0x392a <TWI_enSetSlaveAddress_Write+0x4e>

	if((TWSR & 0XF8) == SLA_WITH_W_NOACK)
    3934:	e1 e2       	ldi	r30, 0x21	; 33
    3936:	f0 e0       	ldi	r31, 0x00	; 0
    3938:	80 81       	ld	r24, Z
    393a:	88 2f       	mov	r24, r24
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	88 7f       	andi	r24, 0xF8	; 248
    3940:	90 70       	andi	r25, 0x00	; 0
    3942:	80 32       	cpi	r24, 0x20	; 32
    3944:	91 05       	cpc	r25, r1
    3946:	11 f4       	brne	.+4      	; 0x394c <TWI_enSetSlaveAddress_Write+0x70>
	{
		Local_ErrorState = SLA_W_NOACK_ERR;
    3948:	83 e0       	ldi	r24, 0x03	; 3
    394a:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/* Do Nothing */
	}
	return Local_ErrorState;
    394c:	89 81       	ldd	r24, Y+1	; 0x01
}
    394e:	0f 90       	pop	r0
    3950:	0f 90       	pop	r0
    3952:	cf 91       	pop	r28
    3954:	df 91       	pop	r29
    3956:	08 95       	ret

00003958 <TWI_enSetSlaveAddress_Read>:
TWI_ErrorState_t TWI_enSetSlaveAddress_Read(uint8 u8SlaveAddressCpy){
    3958:	df 93       	push	r29
    395a:	cf 93       	push	r28
    395c:	00 d0       	rcall	.+0      	; 0x395e <TWI_enSetSlaveAddress_Read+0x6>
    395e:	cd b7       	in	r28, 0x3d	; 61
    3960:	de b7       	in	r29, 0x3e	; 62
    3962:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    3964:	19 82       	std	Y+1, r1	; 0x01

	/* Set Slave address in TWDR register */
	TWDR = u8SlaveAddressCpy | 1;   //first bit will be 1
    3966:	e3 e2       	ldi	r30, 0x23	; 35
    3968:	f0 e0       	ldi	r31, 0x00	; 0
    396a:	8a 81       	ldd	r24, Y+2	; 0x02
    396c:	81 60       	ori	r24, 0x01	; 1
    396e:	80 83       	st	Z, r24

	/* Clear the start condition bit */
	CLR_BIT(TWCR , TWCR_TWSTA);
    3970:	a6 e5       	ldi	r26, 0x56	; 86
    3972:	b0 e0       	ldi	r27, 0x00	; 0
    3974:	e6 e5       	ldi	r30, 0x56	; 86
    3976:	f0 e0       	ldi	r31, 0x00	; 0
    3978:	80 81       	ld	r24, Z
    397a:	8f 7d       	andi	r24, 0xDF	; 223
    397c:	8c 93       	st	X, r24
	/* Set bit 0 to make Read operation */
	//SET_BIT(TWDR , TWDR_TWD0);		//already is set to 1

	/*************************************************/
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    397e:	a6 e5       	ldi	r26, 0x56	; 86
    3980:	b0 e0       	ldi	r27, 0x00	; 0
    3982:	e6 e5       	ldi	r30, 0x56	; 86
    3984:	f0 e0       	ldi	r31, 0x00	; 0
    3986:	80 81       	ld	r24, Z
    3988:	80 68       	ori	r24, 0x80	; 128
    398a:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    398c:	a6 e5       	ldi	r26, 0x56	; 86
    398e:	b0 e0       	ldi	r27, 0x00	; 0
    3990:	e6 e5       	ldi	r30, 0x56	; 86
    3992:	f0 e0       	ldi	r31, 0x00	; 0
    3994:	80 81       	ld	r24, Z
    3996:	84 60       	ori	r24, 0x04	; 4
    3998:	8c 93       	st	X, r24
	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    399a:	e6 e5       	ldi	r30, 0x56	; 86
    399c:	f0 e0       	ldi	r31, 0x00	; 0
    399e:	80 81       	ld	r24, Z
    39a0:	88 23       	and	r24, r24
    39a2:	dc f7       	brge	.-10     	; 0x399a <TWI_enSetSlaveAddress_Read+0x42>

	if((TWSR & 0XF8) == SLA_WITH_R_NOACK)
    39a4:	e1 e2       	ldi	r30, 0x21	; 33
    39a6:	f0 e0       	ldi	r31, 0x00	; 0
    39a8:	80 81       	ld	r24, Z
    39aa:	88 2f       	mov	r24, r24
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	88 7f       	andi	r24, 0xF8	; 248
    39b0:	90 70       	andi	r25, 0x00	; 0
    39b2:	88 33       	cpi	r24, 0x38	; 56
    39b4:	91 05       	cpc	r25, r1
    39b6:	11 f4       	brne	.+4      	; 0x39bc <TWI_enSetSlaveAddress_Read+0x64>
	{
		Local_ErrorState = SLA_R_NOACK_ERR;
    39b8:	84 e0       	ldi	r24, 0x04	; 4
    39ba:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/* Do Nothing */
	}
	return Local_ErrorState;
    39bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    39be:	0f 90       	pop	r0
    39c0:	0f 90       	pop	r0
    39c2:	cf 91       	pop	r28
    39c4:	df 91       	pop	r29
    39c6:	08 95       	ret

000039c8 <TWI_enMasterWriteData>:
TWI_ErrorState_t TWI_enMasterWriteData(uint8 u8DataCpy){
    39c8:	df 93       	push	r29
    39ca:	cf 93       	push	r28
    39cc:	00 d0       	rcall	.+0      	; 0x39ce <TWI_enMasterWriteData+0x6>
    39ce:	cd b7       	in	r28, 0x3d	; 61
    39d0:	de b7       	in	r29, 0x3e	; 62
    39d2:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    39d4:	19 82       	std	Y+1, r1	; 0x01
	/* Write data to TWDR */
	TWDR = u8DataCpy;
    39d6:	e3 e2       	ldi	r30, 0x23	; 35
    39d8:	f0 e0       	ldi	r31, 0x00	; 0
    39da:	8a 81       	ldd	r24, Y+2	; 0x02
    39dc:	80 83       	st	Z, r24

	/*************************************************/
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    39de:	a6 e5       	ldi	r26, 0x56	; 86
    39e0:	b0 e0       	ldi	r27, 0x00	; 0
    39e2:	e6 e5       	ldi	r30, 0x56	; 86
    39e4:	f0 e0       	ldi	r31, 0x00	; 0
    39e6:	80 81       	ld	r24, Z
    39e8:	80 68       	ori	r24, 0x80	; 128
    39ea:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    39ec:	a6 e5       	ldi	r26, 0x56	; 86
    39ee:	b0 e0       	ldi	r27, 0x00	; 0
    39f0:	e6 e5       	ldi	r30, 0x56	; 86
    39f2:	f0 e0       	ldi	r31, 0x00	; 0
    39f4:	80 81       	ld	r24, Z
    39f6:	84 60       	ori	r24, 0x04	; 4
    39f8:	8c 93       	st	X, r24
	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    39fa:	e6 e5       	ldi	r30, 0x56	; 86
    39fc:	f0 e0       	ldi	r31, 0x00	; 0
    39fe:	80 81       	ld	r24, Z
    3a00:	88 23       	and	r24, r24
    3a02:	dc f7       	brge	.-10     	; 0x39fa <TWI_enMasterWriteData+0x32>

	if((TWSR & 0XF8) == MASTER_SEND_DATA_NOACK)
    3a04:	e1 e2       	ldi	r30, 0x21	; 33
    3a06:	f0 e0       	ldi	r31, 0x00	; 0
    3a08:	80 81       	ld	r24, Z
    3a0a:	88 2f       	mov	r24, r24
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	88 7f       	andi	r24, 0xF8	; 248
    3a10:	90 70       	andi	r25, 0x00	; 0
    3a12:	80 33       	cpi	r24, 0x30	; 48
    3a14:	91 05       	cpc	r25, r1
    3a16:	11 f4       	brne	.+4      	; 0x3a1c <TWI_enMasterWriteData+0x54>
	{
		Local_ErrorState = MASTER_SEND_DATA_ERR;
    3a18:	85 e0       	ldi	r24, 0x05	; 5
    3a1a:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do Nothing */
	}

	return Local_ErrorState;
    3a1c:	89 81       	ldd	r24, Y+1	; 0x01

}
    3a1e:	0f 90       	pop	r0
    3a20:	0f 90       	pop	r0
    3a22:	cf 91       	pop	r28
    3a24:	df 91       	pop	r29
    3a26:	08 95       	ret

00003a28 <TWI_enMasterReadData>:
TWI_ErrorState_t TWI_enMasterReadData(uint8* u8DataCpy){
    3a28:	df 93       	push	r29
    3a2a:	cf 93       	push	r28
    3a2c:	00 d0       	rcall	.+0      	; 0x3a2e <TWI_enMasterReadData+0x6>
    3a2e:	0f 92       	push	r0
    3a30:	cd b7       	in	r28, 0x3d	; 61
    3a32:	de b7       	in	r29, 0x3e	; 62
    3a34:	9b 83       	std	Y+3, r25	; 0x03
    3a36:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    3a38:	19 82       	std	Y+1, r1	; 0x01

		/* Clear interrupt flag to start the operation */
		SET_BIT(TWCR , TWCR_TWINT);
    3a3a:	a6 e5       	ldi	r26, 0x56	; 86
    3a3c:	b0 e0       	ldi	r27, 0x00	; 0
    3a3e:	e6 e5       	ldi	r30, 0x56	; 86
    3a40:	f0 e0       	ldi	r31, 0x00	; 0
    3a42:	80 81       	ld	r24, Z
    3a44:	80 68       	ori	r24, 0x80	; 128
    3a46:	8c 93       	st	X, r24
		/* Enable TWI */
		SET_BIT(TWCR , TWCR_TWEN);
    3a48:	a6 e5       	ldi	r26, 0x56	; 86
    3a4a:	b0 e0       	ldi	r27, 0x00	; 0
    3a4c:	e6 e5       	ldi	r30, 0x56	; 86
    3a4e:	f0 e0       	ldi	r31, 0x00	; 0
    3a50:	80 81       	ld	r24, Z
    3a52:	84 60       	ori	r24, 0x04	; 4
    3a54:	8c 93       	st	X, r24

		/*Wait until the interrupt flag us raised again  */
		while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    3a56:	e6 e5       	ldi	r30, 0x56	; 86
    3a58:	f0 e0       	ldi	r31, 0x00	; 0
    3a5a:	80 81       	ld	r24, Z
    3a5c:	88 23       	and	r24, r24
    3a5e:	dc f7       	brge	.-10     	; 0x3a56 <TWI_enMasterReadData+0x2e>

		if((TWSR & 0XF8) == MASTER_RECEIVE_DATA_NOACK)
    3a60:	e1 e2       	ldi	r30, 0x21	; 33
    3a62:	f0 e0       	ldi	r31, 0x00	; 0
    3a64:	80 81       	ld	r24, Z
    3a66:	88 2f       	mov	r24, r24
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	88 7f       	andi	r24, 0xF8	; 248
    3a6c:	90 70       	andi	r25, 0x00	; 0
    3a6e:	88 35       	cpi	r24, 0x58	; 88
    3a70:	91 05       	cpc	r25, r1
    3a72:	11 f4       	brne	.+4      	; 0x3a78 <TWI_enMasterReadData+0x50>
		{
			Local_ErrorState = MASTER_RECEIVE_DATA_ERR;
    3a74:	86 e0       	ldi	r24, 0x06	; 6
    3a76:	89 83       	std	Y+1, r24	; 0x01
		}
		else
		{
		}
			*u8DataCpy = TWDR;
    3a78:	e3 e2       	ldi	r30, 0x23	; 35
    3a7a:	f0 e0       	ldi	r31, 0x00	; 0
    3a7c:	80 81       	ld	r24, Z
    3a7e:	ea 81       	ldd	r30, Y+2	; 0x02
    3a80:	fb 81       	ldd	r31, Y+3	; 0x03
    3a82:	80 83       	st	Z, r24

		return Local_ErrorState;
    3a84:	89 81       	ldd	r24, Y+1	; 0x01

}
    3a86:	0f 90       	pop	r0
    3a88:	0f 90       	pop	r0
    3a8a:	0f 90       	pop	r0
    3a8c:	cf 91       	pop	r28
    3a8e:	df 91       	pop	r29
    3a90:	08 95       	ret

00003a92 <TWI_voidStopCondition>:

void TWI_voidStopCondition(void){
    3a92:	df 93       	push	r29
    3a94:	cf 93       	push	r28
    3a96:	cd b7       	in	r28, 0x3d	; 61
    3a98:	de b7       	in	r29, 0x3e	; 62
	/* Set bit TWSTO to make stop condition */
	SET_BIT(TWCR , TWCR_TWSTO);
    3a9a:	a6 e5       	ldi	r26, 0x56	; 86
    3a9c:	b0 e0       	ldi	r27, 0x00	; 0
    3a9e:	e6 e5       	ldi	r30, 0x56	; 86
    3aa0:	f0 e0       	ldi	r31, 0x00	; 0
    3aa2:	80 81       	ld	r24, Z
    3aa4:	80 61       	ori	r24, 0x10	; 16
    3aa6:	8c 93       	st	X, r24

	/************************************************/
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    3aa8:	a6 e5       	ldi	r26, 0x56	; 86
    3aaa:	b0 e0       	ldi	r27, 0x00	; 0
    3aac:	e6 e5       	ldi	r30, 0x56	; 86
    3aae:	f0 e0       	ldi	r31, 0x00	; 0
    3ab0:	80 81       	ld	r24, Z
    3ab2:	80 68       	ori	r24, 0x80	; 128
    3ab4:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    3ab6:	a6 e5       	ldi	r26, 0x56	; 86
    3ab8:	b0 e0       	ldi	r27, 0x00	; 0
    3aba:	e6 e5       	ldi	r30, 0x56	; 86
    3abc:	f0 e0       	ldi	r31, 0x00	; 0
    3abe:	80 81       	ld	r24, Z
    3ac0:	84 60       	ori	r24, 0x04	; 4
    3ac2:	8c 93       	st	X, r24
}
    3ac4:	cf 91       	pop	r28
    3ac6:	df 91       	pop	r29
    3ac8:	08 95       	ret

00003aca <DIO_voidInit>:
#include "DIO_private.h"
#include "DIO_config.h"


void DIO_voidInit(void)
{
    3aca:	df 93       	push	r29
    3acc:	cf 93       	push	r28
    3ace:	cd b7       	in	r28, 0x3d	; 61
    3ad0:	de b7       	in	r29, 0x3e	; 62
	DDRA=CONCAT(DIO_PIN_NUM_A7_DIR,DIO_PIN_NUM_A6_DIR,DIO_PIN_NUM_A5_DIR,DIO_PIN_NUM_A4_DIR,DIO_PIN_NUM_A3_DIR,DIO_PIN_NUM_A2_DIR,DIO_PIN_NUM_A1_DIR,DIO_PIN_NUM_A0_DIR);
    3ad2:	ea e3       	ldi	r30, 0x3A	; 58
    3ad4:	f0 e0       	ldi	r31, 0x00	; 0
    3ad6:	80 ef       	ldi	r24, 0xF0	; 240
    3ad8:	80 83       	st	Z, r24
	DDRB=CONCAT(DIO_PIN_NUM_B7_DIR,DIO_PIN_NUM_B6_DIR,DIO_PIN_NUM_B5_DIR,DIO_PIN_NUM_B4_DIR,DIO_PIN_NUM_B3_DIR,DIO_PIN_NUM_B2_DIR,DIO_PIN_NUM_B1_DIR,DIO_PIN_NUM_B0_DIR);
    3ada:	e7 e3       	ldi	r30, 0x37	; 55
    3adc:	f0 e0       	ldi	r31, 0x00	; 0
    3ade:	8f ef       	ldi	r24, 0xFF	; 255
    3ae0:	80 83       	st	Z, r24
	DDRC=CONCAT(DIO_PIN_NUM_C7_DIR,DIO_PIN_NUM_C6_DIR,DIO_PIN_NUM_C5_DIR,DIO_PIN_NUM_C4_DIR,DIO_PIN_NUM_C3_DIR,DIO_PIN_NUM_C2_DIR,DIO_PIN_NUM_C1_DIR,DIO_PIN_NUM_C0_DIR);
    3ae2:	e4 e3       	ldi	r30, 0x34	; 52
    3ae4:	f0 e0       	ldi	r31, 0x00	; 0
    3ae6:	8f ef       	ldi	r24, 0xFF	; 255
    3ae8:	80 83       	st	Z, r24
	DDRD=CONCAT(DIO_PIN_NUM_D7_DIR,DIO_PIN_NUM_D6_DIR,DIO_PIN_NUM_D5_DIR,DIO_PIN_NUM_D4_DIR,DIO_PIN_NUM_D3_DIR,DIO_PIN_NUM_D2_DIR,DIO_PIN_NUM_D1_DIR,DIO_PIN_NUM_D0_DIR);
    3aea:	e1 e3       	ldi	r30, 0x31	; 49
    3aec:	f0 e0       	ldi	r31, 0x00	; 0
    3aee:	8f ef       	ldi	r24, 0xFF	; 255
    3af0:	80 83       	st	Z, r24
}
    3af2:	cf 91       	pop	r28
    3af4:	df 91       	pop	r29
    3af6:	08 95       	ret

00003af8 <DIO_voidWritePin>:
void DIO_voidWritePin(uint8 u8PortCpy, uint8 u8PinCpy, uint8 u8ValueCpy)
{
    3af8:	df 93       	push	r29
    3afa:	cf 93       	push	r28
    3afc:	00 d0       	rcall	.+0      	; 0x3afe <DIO_voidWritePin+0x6>
    3afe:	00 d0       	rcall	.+0      	; 0x3b00 <DIO_voidWritePin+0x8>
    3b00:	0f 92       	push	r0
    3b02:	cd b7       	in	r28, 0x3d	; 61
    3b04:	de b7       	in	r29, 0x3e	; 62
    3b06:	89 83       	std	Y+1, r24	; 0x01
    3b08:	6a 83       	std	Y+2, r22	; 0x02
    3b0a:	4b 83       	std	Y+3, r20	; 0x03
	switch(u8PortCpy){
    3b0c:	89 81       	ldd	r24, Y+1	; 0x01
    3b0e:	28 2f       	mov	r18, r24
    3b10:	30 e0       	ldi	r19, 0x00	; 0
    3b12:	3d 83       	std	Y+5, r19	; 0x05
    3b14:	2c 83       	std	Y+4, r18	; 0x04
    3b16:	8c 81       	ldd	r24, Y+4	; 0x04
    3b18:	9d 81       	ldd	r25, Y+5	; 0x05
    3b1a:	82 30       	cpi	r24, 0x02	; 2
    3b1c:	91 05       	cpc	r25, r1
    3b1e:	09 f4       	brne	.+2      	; 0x3b22 <DIO_voidWritePin+0x2a>
    3b20:	48 c0       	rjmp	.+144    	; 0x3bb2 <DIO_voidWritePin+0xba>
    3b22:	2c 81       	ldd	r18, Y+4	; 0x04
    3b24:	3d 81       	ldd	r19, Y+5	; 0x05
    3b26:	23 30       	cpi	r18, 0x03	; 3
    3b28:	31 05       	cpc	r19, r1
    3b2a:	34 f4       	brge	.+12     	; 0x3b38 <DIO_voidWritePin+0x40>
    3b2c:	8c 81       	ldd	r24, Y+4	; 0x04
    3b2e:	9d 81       	ldd	r25, Y+5	; 0x05
    3b30:	81 30       	cpi	r24, 0x01	; 1
    3b32:	91 05       	cpc	r25, r1
    3b34:	71 f0       	breq	.+28     	; 0x3b52 <DIO_voidWritePin+0x5a>
    3b36:	cb c0       	rjmp	.+406    	; 0x3cce <DIO_voidWritePin+0x1d6>
    3b38:	2c 81       	ldd	r18, Y+4	; 0x04
    3b3a:	3d 81       	ldd	r19, Y+5	; 0x05
    3b3c:	23 30       	cpi	r18, 0x03	; 3
    3b3e:	31 05       	cpc	r19, r1
    3b40:	09 f4       	brne	.+2      	; 0x3b44 <DIO_voidWritePin+0x4c>
    3b42:	67 c0       	rjmp	.+206    	; 0x3c12 <DIO_voidWritePin+0x11a>
    3b44:	8c 81       	ldd	r24, Y+4	; 0x04
    3b46:	9d 81       	ldd	r25, Y+5	; 0x05
    3b48:	84 30       	cpi	r24, 0x04	; 4
    3b4a:	91 05       	cpc	r25, r1
    3b4c:	09 f4       	brne	.+2      	; 0x3b50 <DIO_voidWritePin+0x58>
    3b4e:	91 c0       	rjmp	.+290    	; 0x3c72 <DIO_voidWritePin+0x17a>
    3b50:	be c0       	rjmp	.+380    	; 0x3cce <DIO_voidWritePin+0x1d6>
	case PORT_A:
		if (u8ValueCpy == DIO_HIGH)
    3b52:	8b 81       	ldd	r24, Y+3	; 0x03
    3b54:	81 30       	cpi	r24, 0x01	; 1
    3b56:	a1 f4       	brne	.+40     	; 0x3b80 <DIO_voidWritePin+0x88>
		{
			SET_BIT(PORTA, u8PinCpy);
    3b58:	ab e3       	ldi	r26, 0x3B	; 59
    3b5a:	b0 e0       	ldi	r27, 0x00	; 0
    3b5c:	eb e3       	ldi	r30, 0x3B	; 59
    3b5e:	f0 e0       	ldi	r31, 0x00	; 0
    3b60:	80 81       	ld	r24, Z
    3b62:	48 2f       	mov	r20, r24
    3b64:	8a 81       	ldd	r24, Y+2	; 0x02
    3b66:	28 2f       	mov	r18, r24
    3b68:	30 e0       	ldi	r19, 0x00	; 0
    3b6a:	81 e0       	ldi	r24, 0x01	; 1
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	02 2e       	mov	r0, r18
    3b70:	02 c0       	rjmp	.+4      	; 0x3b76 <DIO_voidWritePin+0x7e>
    3b72:	88 0f       	add	r24, r24
    3b74:	99 1f       	adc	r25, r25
    3b76:	0a 94       	dec	r0
    3b78:	e2 f7       	brpl	.-8      	; 0x3b72 <DIO_voidWritePin+0x7a>
    3b7a:	84 2b       	or	r24, r20
    3b7c:	8c 93       	st	X, r24
    3b7e:	a7 c0       	rjmp	.+334    	; 0x3cce <DIO_voidWritePin+0x1d6>
		}
		else if(u8ValueCpy == DIO_LOW)
    3b80:	8b 81       	ldd	r24, Y+3	; 0x03
    3b82:	88 23       	and	r24, r24
    3b84:	09 f0       	breq	.+2      	; 0x3b88 <DIO_voidWritePin+0x90>
    3b86:	a3 c0       	rjmp	.+326    	; 0x3cce <DIO_voidWritePin+0x1d6>
		{
			CLR_BIT(PORTA, u8PinCpy);
    3b88:	ab e3       	ldi	r26, 0x3B	; 59
    3b8a:	b0 e0       	ldi	r27, 0x00	; 0
    3b8c:	eb e3       	ldi	r30, 0x3B	; 59
    3b8e:	f0 e0       	ldi	r31, 0x00	; 0
    3b90:	80 81       	ld	r24, Z
    3b92:	48 2f       	mov	r20, r24
    3b94:	8a 81       	ldd	r24, Y+2	; 0x02
    3b96:	28 2f       	mov	r18, r24
    3b98:	30 e0       	ldi	r19, 0x00	; 0
    3b9a:	81 e0       	ldi	r24, 0x01	; 1
    3b9c:	90 e0       	ldi	r25, 0x00	; 0
    3b9e:	02 2e       	mov	r0, r18
    3ba0:	02 c0       	rjmp	.+4      	; 0x3ba6 <DIO_voidWritePin+0xae>
    3ba2:	88 0f       	add	r24, r24
    3ba4:	99 1f       	adc	r25, r25
    3ba6:	0a 94       	dec	r0
    3ba8:	e2 f7       	brpl	.-8      	; 0x3ba2 <DIO_voidWritePin+0xaa>
    3baa:	80 95       	com	r24
    3bac:	84 23       	and	r24, r20
    3bae:	8c 93       	st	X, r24
    3bb0:	8e c0       	rjmp	.+284    	; 0x3cce <DIO_voidWritePin+0x1d6>
		}
		break;
	case PORT_B:
		if (u8ValueCpy == DIO_HIGH)
    3bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb4:	81 30       	cpi	r24, 0x01	; 1
    3bb6:	a1 f4       	brne	.+40     	; 0x3be0 <DIO_voidWritePin+0xe8>
		{
			SET_BIT(PORTB, u8PinCpy);
    3bb8:	a8 e3       	ldi	r26, 0x38	; 56
    3bba:	b0 e0       	ldi	r27, 0x00	; 0
    3bbc:	e8 e3       	ldi	r30, 0x38	; 56
    3bbe:	f0 e0       	ldi	r31, 0x00	; 0
    3bc0:	80 81       	ld	r24, Z
    3bc2:	48 2f       	mov	r20, r24
    3bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc6:	28 2f       	mov	r18, r24
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	81 e0       	ldi	r24, 0x01	; 1
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	02 2e       	mov	r0, r18
    3bd0:	02 c0       	rjmp	.+4      	; 0x3bd6 <DIO_voidWritePin+0xde>
    3bd2:	88 0f       	add	r24, r24
    3bd4:	99 1f       	adc	r25, r25
    3bd6:	0a 94       	dec	r0
    3bd8:	e2 f7       	brpl	.-8      	; 0x3bd2 <DIO_voidWritePin+0xda>
    3bda:	84 2b       	or	r24, r20
    3bdc:	8c 93       	st	X, r24
    3bde:	77 c0       	rjmp	.+238    	; 0x3cce <DIO_voidWritePin+0x1d6>
		}
		else if(u8ValueCpy == DIO_LOW)
    3be0:	8b 81       	ldd	r24, Y+3	; 0x03
    3be2:	88 23       	and	r24, r24
    3be4:	09 f0       	breq	.+2      	; 0x3be8 <DIO_voidWritePin+0xf0>
    3be6:	73 c0       	rjmp	.+230    	; 0x3cce <DIO_voidWritePin+0x1d6>
		{
			CLR_BIT(PORTB, u8PinCpy);
    3be8:	a8 e3       	ldi	r26, 0x38	; 56
    3bea:	b0 e0       	ldi	r27, 0x00	; 0
    3bec:	e8 e3       	ldi	r30, 0x38	; 56
    3bee:	f0 e0       	ldi	r31, 0x00	; 0
    3bf0:	80 81       	ld	r24, Z
    3bf2:	48 2f       	mov	r20, r24
    3bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf6:	28 2f       	mov	r18, r24
    3bf8:	30 e0       	ldi	r19, 0x00	; 0
    3bfa:	81 e0       	ldi	r24, 0x01	; 1
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	02 2e       	mov	r0, r18
    3c00:	02 c0       	rjmp	.+4      	; 0x3c06 <DIO_voidWritePin+0x10e>
    3c02:	88 0f       	add	r24, r24
    3c04:	99 1f       	adc	r25, r25
    3c06:	0a 94       	dec	r0
    3c08:	e2 f7       	brpl	.-8      	; 0x3c02 <DIO_voidWritePin+0x10a>
    3c0a:	80 95       	com	r24
    3c0c:	84 23       	and	r24, r20
    3c0e:	8c 93       	st	X, r24
    3c10:	5e c0       	rjmp	.+188    	; 0x3cce <DIO_voidWritePin+0x1d6>
		}
		break;
	case PORT_C:
		if (u8ValueCpy == DIO_HIGH)
    3c12:	8b 81       	ldd	r24, Y+3	; 0x03
    3c14:	81 30       	cpi	r24, 0x01	; 1
    3c16:	a1 f4       	brne	.+40     	; 0x3c40 <DIO_voidWritePin+0x148>
		{
			SET_BIT(PORTC, u8PinCpy);
    3c18:	a5 e3       	ldi	r26, 0x35	; 53
    3c1a:	b0 e0       	ldi	r27, 0x00	; 0
    3c1c:	e5 e3       	ldi	r30, 0x35	; 53
    3c1e:	f0 e0       	ldi	r31, 0x00	; 0
    3c20:	80 81       	ld	r24, Z
    3c22:	48 2f       	mov	r20, r24
    3c24:	8a 81       	ldd	r24, Y+2	; 0x02
    3c26:	28 2f       	mov	r18, r24
    3c28:	30 e0       	ldi	r19, 0x00	; 0
    3c2a:	81 e0       	ldi	r24, 0x01	; 1
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	02 2e       	mov	r0, r18
    3c30:	02 c0       	rjmp	.+4      	; 0x3c36 <DIO_voidWritePin+0x13e>
    3c32:	88 0f       	add	r24, r24
    3c34:	99 1f       	adc	r25, r25
    3c36:	0a 94       	dec	r0
    3c38:	e2 f7       	brpl	.-8      	; 0x3c32 <DIO_voidWritePin+0x13a>
    3c3a:	84 2b       	or	r24, r20
    3c3c:	8c 93       	st	X, r24
    3c3e:	47 c0       	rjmp	.+142    	; 0x3cce <DIO_voidWritePin+0x1d6>
		}
		else if(u8ValueCpy == DIO_LOW){
    3c40:	8b 81       	ldd	r24, Y+3	; 0x03
    3c42:	88 23       	and	r24, r24
    3c44:	09 f0       	breq	.+2      	; 0x3c48 <DIO_voidWritePin+0x150>
    3c46:	43 c0       	rjmp	.+134    	; 0x3cce <DIO_voidWritePin+0x1d6>
			CLR_BIT(PORTC, u8PinCpy);
    3c48:	a5 e3       	ldi	r26, 0x35	; 53
    3c4a:	b0 e0       	ldi	r27, 0x00	; 0
    3c4c:	e5 e3       	ldi	r30, 0x35	; 53
    3c4e:	f0 e0       	ldi	r31, 0x00	; 0
    3c50:	80 81       	ld	r24, Z
    3c52:	48 2f       	mov	r20, r24
    3c54:	8a 81       	ldd	r24, Y+2	; 0x02
    3c56:	28 2f       	mov	r18, r24
    3c58:	30 e0       	ldi	r19, 0x00	; 0
    3c5a:	81 e0       	ldi	r24, 0x01	; 1
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	02 2e       	mov	r0, r18
    3c60:	02 c0       	rjmp	.+4      	; 0x3c66 <DIO_voidWritePin+0x16e>
    3c62:	88 0f       	add	r24, r24
    3c64:	99 1f       	adc	r25, r25
    3c66:	0a 94       	dec	r0
    3c68:	e2 f7       	brpl	.-8      	; 0x3c62 <DIO_voidWritePin+0x16a>
    3c6a:	80 95       	com	r24
    3c6c:	84 23       	and	r24, r20
    3c6e:	8c 93       	st	X, r24
    3c70:	2e c0       	rjmp	.+92     	; 0x3cce <DIO_voidWritePin+0x1d6>
		}
		break;
	case PORT_D:
		if (u8ValueCpy == DIO_HIGH){
    3c72:	8b 81       	ldd	r24, Y+3	; 0x03
    3c74:	81 30       	cpi	r24, 0x01	; 1
    3c76:	a1 f4       	brne	.+40     	; 0x3ca0 <DIO_voidWritePin+0x1a8>
			SET_BIT(PORTD, u8PinCpy);
    3c78:	a2 e3       	ldi	r26, 0x32	; 50
    3c7a:	b0 e0       	ldi	r27, 0x00	; 0
    3c7c:	e2 e3       	ldi	r30, 0x32	; 50
    3c7e:	f0 e0       	ldi	r31, 0x00	; 0
    3c80:	80 81       	ld	r24, Z
    3c82:	48 2f       	mov	r20, r24
    3c84:	8a 81       	ldd	r24, Y+2	; 0x02
    3c86:	28 2f       	mov	r18, r24
    3c88:	30 e0       	ldi	r19, 0x00	; 0
    3c8a:	81 e0       	ldi	r24, 0x01	; 1
    3c8c:	90 e0       	ldi	r25, 0x00	; 0
    3c8e:	02 2e       	mov	r0, r18
    3c90:	02 c0       	rjmp	.+4      	; 0x3c96 <DIO_voidWritePin+0x19e>
    3c92:	88 0f       	add	r24, r24
    3c94:	99 1f       	adc	r25, r25
    3c96:	0a 94       	dec	r0
    3c98:	e2 f7       	brpl	.-8      	; 0x3c92 <DIO_voidWritePin+0x19a>
    3c9a:	84 2b       	or	r24, r20
    3c9c:	8c 93       	st	X, r24
    3c9e:	17 c0       	rjmp	.+46     	; 0x3cce <DIO_voidWritePin+0x1d6>
		}
		else if(u8ValueCpy == DIO_LOW){
    3ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca2:	88 23       	and	r24, r24
    3ca4:	a1 f4       	brne	.+40     	; 0x3cce <DIO_voidWritePin+0x1d6>
			CLR_BIT(PORTD, u8PinCpy);
    3ca6:	a2 e3       	ldi	r26, 0x32	; 50
    3ca8:	b0 e0       	ldi	r27, 0x00	; 0
    3caa:	e2 e3       	ldi	r30, 0x32	; 50
    3cac:	f0 e0       	ldi	r31, 0x00	; 0
    3cae:	80 81       	ld	r24, Z
    3cb0:	48 2f       	mov	r20, r24
    3cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb4:	28 2f       	mov	r18, r24
    3cb6:	30 e0       	ldi	r19, 0x00	; 0
    3cb8:	81 e0       	ldi	r24, 0x01	; 1
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	02 2e       	mov	r0, r18
    3cbe:	02 c0       	rjmp	.+4      	; 0x3cc4 <DIO_voidWritePin+0x1cc>
    3cc0:	88 0f       	add	r24, r24
    3cc2:	99 1f       	adc	r25, r25
    3cc4:	0a 94       	dec	r0
    3cc6:	e2 f7       	brpl	.-8      	; 0x3cc0 <DIO_voidWritePin+0x1c8>
    3cc8:	80 95       	com	r24
    3cca:	84 23       	and	r24, r20
    3ccc:	8c 93       	st	X, r24
		}
		break;
		}
}
    3cce:	0f 90       	pop	r0
    3cd0:	0f 90       	pop	r0
    3cd2:	0f 90       	pop	r0
    3cd4:	0f 90       	pop	r0
    3cd6:	0f 90       	pop	r0
    3cd8:	cf 91       	pop	r28
    3cda:	df 91       	pop	r29
    3cdc:	08 95       	ret

00003cde <DIO_u8ReadPin>:
uint8 DIO_u8ReadPin(uint8 u8PortCpy, uint8 u8PinCpy)
{
    3cde:	df 93       	push	r29
    3ce0:	cf 93       	push	r28
    3ce2:	00 d0       	rcall	.+0      	; 0x3ce4 <DIO_u8ReadPin+0x6>
    3ce4:	00 d0       	rcall	.+0      	; 0x3ce6 <DIO_u8ReadPin+0x8>
    3ce6:	0f 92       	push	r0
    3ce8:	cd b7       	in	r28, 0x3d	; 61
    3cea:	de b7       	in	r29, 0x3e	; 62
    3cec:	8a 83       	std	Y+2, r24	; 0x02
    3cee:	6b 83       	std	Y+3, r22	; 0x03
	uint8 u8PinVal;
	switch(u8PortCpy)
    3cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    3cf2:	28 2f       	mov	r18, r24
    3cf4:	30 e0       	ldi	r19, 0x00	; 0
    3cf6:	3d 83       	std	Y+5, r19	; 0x05
    3cf8:	2c 83       	std	Y+4, r18	; 0x04
    3cfa:	4c 81       	ldd	r20, Y+4	; 0x04
    3cfc:	5d 81       	ldd	r21, Y+5	; 0x05
    3cfe:	42 30       	cpi	r20, 0x02	; 2
    3d00:	51 05       	cpc	r21, r1
    3d02:	41 f1       	breq	.+80     	; 0x3d54 <DIO_u8ReadPin+0x76>
    3d04:	8c 81       	ldd	r24, Y+4	; 0x04
    3d06:	9d 81       	ldd	r25, Y+5	; 0x05
    3d08:	83 30       	cpi	r24, 0x03	; 3
    3d0a:	91 05       	cpc	r25, r1
    3d0c:	34 f4       	brge	.+12     	; 0x3d1a <DIO_u8ReadPin+0x3c>
    3d0e:	2c 81       	ldd	r18, Y+4	; 0x04
    3d10:	3d 81       	ldd	r19, Y+5	; 0x05
    3d12:	21 30       	cpi	r18, 0x01	; 1
    3d14:	31 05       	cpc	r19, r1
    3d16:	61 f0       	breq	.+24     	; 0x3d30 <DIO_u8ReadPin+0x52>
    3d18:	52 c0       	rjmp	.+164    	; 0x3dbe <DIO_u8ReadPin+0xe0>
    3d1a:	4c 81       	ldd	r20, Y+4	; 0x04
    3d1c:	5d 81       	ldd	r21, Y+5	; 0x05
    3d1e:	43 30       	cpi	r20, 0x03	; 3
    3d20:	51 05       	cpc	r21, r1
    3d22:	51 f1       	breq	.+84     	; 0x3d78 <DIO_u8ReadPin+0x9a>
    3d24:	8c 81       	ldd	r24, Y+4	; 0x04
    3d26:	9d 81       	ldd	r25, Y+5	; 0x05
    3d28:	84 30       	cpi	r24, 0x04	; 4
    3d2a:	91 05       	cpc	r25, r1
    3d2c:	b9 f1       	breq	.+110    	; 0x3d9c <DIO_u8ReadPin+0xbe>
    3d2e:	47 c0       	rjmp	.+142    	; 0x3dbe <DIO_u8ReadPin+0xe0>
	{
		case PORT_A:
			u8PinVal=GET_BIT(PINA,u8PinCpy);
    3d30:	e9 e3       	ldi	r30, 0x39	; 57
    3d32:	f0 e0       	ldi	r31, 0x00	; 0
    3d34:	80 81       	ld	r24, Z
    3d36:	28 2f       	mov	r18, r24
    3d38:	30 e0       	ldi	r19, 0x00	; 0
    3d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d3c:	88 2f       	mov	r24, r24
    3d3e:	90 e0       	ldi	r25, 0x00	; 0
    3d40:	a9 01       	movw	r20, r18
    3d42:	02 c0       	rjmp	.+4      	; 0x3d48 <DIO_u8ReadPin+0x6a>
    3d44:	55 95       	asr	r21
    3d46:	47 95       	ror	r20
    3d48:	8a 95       	dec	r24
    3d4a:	e2 f7       	brpl	.-8      	; 0x3d44 <DIO_u8ReadPin+0x66>
    3d4c:	ca 01       	movw	r24, r20
    3d4e:	81 70       	andi	r24, 0x01	; 1
    3d50:	89 83       	std	Y+1, r24	; 0x01
    3d52:	35 c0       	rjmp	.+106    	; 0x3dbe <DIO_u8ReadPin+0xe0>
			break;
		case PORT_B:
			u8PinVal=GET_BIT(PINB,u8PinCpy);
    3d54:	e6 e3       	ldi	r30, 0x36	; 54
    3d56:	f0 e0       	ldi	r31, 0x00	; 0
    3d58:	80 81       	ld	r24, Z
    3d5a:	28 2f       	mov	r18, r24
    3d5c:	30 e0       	ldi	r19, 0x00	; 0
    3d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d60:	88 2f       	mov	r24, r24
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	a9 01       	movw	r20, r18
    3d66:	02 c0       	rjmp	.+4      	; 0x3d6c <DIO_u8ReadPin+0x8e>
    3d68:	55 95       	asr	r21
    3d6a:	47 95       	ror	r20
    3d6c:	8a 95       	dec	r24
    3d6e:	e2 f7       	brpl	.-8      	; 0x3d68 <DIO_u8ReadPin+0x8a>
    3d70:	ca 01       	movw	r24, r20
    3d72:	81 70       	andi	r24, 0x01	; 1
    3d74:	89 83       	std	Y+1, r24	; 0x01
    3d76:	23 c0       	rjmp	.+70     	; 0x3dbe <DIO_u8ReadPin+0xe0>
			break;
		case PORT_C:
			u8PinVal=GET_BIT(PINC,u8PinCpy);
    3d78:	e3 e3       	ldi	r30, 0x33	; 51
    3d7a:	f0 e0       	ldi	r31, 0x00	; 0
    3d7c:	80 81       	ld	r24, Z
    3d7e:	28 2f       	mov	r18, r24
    3d80:	30 e0       	ldi	r19, 0x00	; 0
    3d82:	8b 81       	ldd	r24, Y+3	; 0x03
    3d84:	88 2f       	mov	r24, r24
    3d86:	90 e0       	ldi	r25, 0x00	; 0
    3d88:	a9 01       	movw	r20, r18
    3d8a:	02 c0       	rjmp	.+4      	; 0x3d90 <DIO_u8ReadPin+0xb2>
    3d8c:	55 95       	asr	r21
    3d8e:	47 95       	ror	r20
    3d90:	8a 95       	dec	r24
    3d92:	e2 f7       	brpl	.-8      	; 0x3d8c <DIO_u8ReadPin+0xae>
    3d94:	ca 01       	movw	r24, r20
    3d96:	81 70       	andi	r24, 0x01	; 1
    3d98:	89 83       	std	Y+1, r24	; 0x01
    3d9a:	11 c0       	rjmp	.+34     	; 0x3dbe <DIO_u8ReadPin+0xe0>
			break;
		case PORT_D:
			u8PinVal=GET_BIT(PIND,u8PinCpy);
    3d9c:	e0 e3       	ldi	r30, 0x30	; 48
    3d9e:	f0 e0       	ldi	r31, 0x00	; 0
    3da0:	80 81       	ld	r24, Z
    3da2:	28 2f       	mov	r18, r24
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	8b 81       	ldd	r24, Y+3	; 0x03
    3da8:	88 2f       	mov	r24, r24
    3daa:	90 e0       	ldi	r25, 0x00	; 0
    3dac:	a9 01       	movw	r20, r18
    3dae:	02 c0       	rjmp	.+4      	; 0x3db4 <DIO_u8ReadPin+0xd6>
    3db0:	55 95       	asr	r21
    3db2:	47 95       	ror	r20
    3db4:	8a 95       	dec	r24
    3db6:	e2 f7       	brpl	.-8      	; 0x3db0 <DIO_u8ReadPin+0xd2>
    3db8:	ca 01       	movw	r24, r20
    3dba:	81 70       	andi	r24, 0x01	; 1
    3dbc:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return u8PinVal;
    3dbe:	89 81       	ldd	r24, Y+1	; 0x01
}
    3dc0:	0f 90       	pop	r0
    3dc2:	0f 90       	pop	r0
    3dc4:	0f 90       	pop	r0
    3dc6:	0f 90       	pop	r0
    3dc8:	0f 90       	pop	r0
    3dca:	cf 91       	pop	r28
    3dcc:	df 91       	pop	r29
    3dce:	08 95       	ret

00003dd0 <DIO_voidTogglePin>:

void DIO_voidTogglePin(uint8 u8PortCpy, uint8 u8PinCpy)
{
    3dd0:	df 93       	push	r29
    3dd2:	cf 93       	push	r28
    3dd4:	00 d0       	rcall	.+0      	; 0x3dd6 <DIO_voidTogglePin+0x6>
    3dd6:	00 d0       	rcall	.+0      	; 0x3dd8 <DIO_voidTogglePin+0x8>
    3dd8:	cd b7       	in	r28, 0x3d	; 61
    3dda:	de b7       	in	r29, 0x3e	; 62
    3ddc:	89 83       	std	Y+1, r24	; 0x01
    3dde:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortCpy)
    3de0:	89 81       	ldd	r24, Y+1	; 0x01
    3de2:	28 2f       	mov	r18, r24
    3de4:	30 e0       	ldi	r19, 0x00	; 0
    3de6:	3c 83       	std	Y+4, r19	; 0x04
    3de8:	2b 83       	std	Y+3, r18	; 0x03
    3dea:	8b 81       	ldd	r24, Y+3	; 0x03
    3dec:	9c 81       	ldd	r25, Y+4	; 0x04
    3dee:	82 30       	cpi	r24, 0x02	; 2
    3df0:	91 05       	cpc	r25, r1
    3df2:	51 f1       	breq	.+84     	; 0x3e48 <DIO_voidTogglePin+0x78>
    3df4:	2b 81       	ldd	r18, Y+3	; 0x03
    3df6:	3c 81       	ldd	r19, Y+4	; 0x04
    3df8:	23 30       	cpi	r18, 0x03	; 3
    3dfa:	31 05       	cpc	r19, r1
    3dfc:	34 f4       	brge	.+12     	; 0x3e0a <DIO_voidTogglePin+0x3a>
    3dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    3e00:	9c 81       	ldd	r25, Y+4	; 0x04
    3e02:	81 30       	cpi	r24, 0x01	; 1
    3e04:	91 05       	cpc	r25, r1
    3e06:	61 f0       	breq	.+24     	; 0x3e20 <DIO_voidTogglePin+0x50>
    3e08:	5a c0       	rjmp	.+180    	; 0x3ebe <DIO_voidTogglePin+0xee>
    3e0a:	2b 81       	ldd	r18, Y+3	; 0x03
    3e0c:	3c 81       	ldd	r19, Y+4	; 0x04
    3e0e:	23 30       	cpi	r18, 0x03	; 3
    3e10:	31 05       	cpc	r19, r1
    3e12:	71 f1       	breq	.+92     	; 0x3e70 <DIO_voidTogglePin+0xa0>
    3e14:	8b 81       	ldd	r24, Y+3	; 0x03
    3e16:	9c 81       	ldd	r25, Y+4	; 0x04
    3e18:	84 30       	cpi	r24, 0x04	; 4
    3e1a:	91 05       	cpc	r25, r1
    3e1c:	e9 f1       	breq	.+122    	; 0x3e98 <DIO_voidTogglePin+0xc8>
    3e1e:	4f c0       	rjmp	.+158    	; 0x3ebe <DIO_voidTogglePin+0xee>
	{
		case PORT_A:
			TOG_BIT(PORTA,u8PinCpy);
    3e20:	ab e3       	ldi	r26, 0x3B	; 59
    3e22:	b0 e0       	ldi	r27, 0x00	; 0
    3e24:	eb e3       	ldi	r30, 0x3B	; 59
    3e26:	f0 e0       	ldi	r31, 0x00	; 0
    3e28:	80 81       	ld	r24, Z
    3e2a:	48 2f       	mov	r20, r24
    3e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e2e:	28 2f       	mov	r18, r24
    3e30:	30 e0       	ldi	r19, 0x00	; 0
    3e32:	81 e0       	ldi	r24, 0x01	; 1
    3e34:	90 e0       	ldi	r25, 0x00	; 0
    3e36:	02 2e       	mov	r0, r18
    3e38:	02 c0       	rjmp	.+4      	; 0x3e3e <DIO_voidTogglePin+0x6e>
    3e3a:	88 0f       	add	r24, r24
    3e3c:	99 1f       	adc	r25, r25
    3e3e:	0a 94       	dec	r0
    3e40:	e2 f7       	brpl	.-8      	; 0x3e3a <DIO_voidTogglePin+0x6a>
    3e42:	84 27       	eor	r24, r20
    3e44:	8c 93       	st	X, r24
    3e46:	3b c0       	rjmp	.+118    	; 0x3ebe <DIO_voidTogglePin+0xee>
			break;
		case PORT_B:
			TOG_BIT(PORTB,u8PinCpy);
    3e48:	a8 e3       	ldi	r26, 0x38	; 56
    3e4a:	b0 e0       	ldi	r27, 0x00	; 0
    3e4c:	e8 e3       	ldi	r30, 0x38	; 56
    3e4e:	f0 e0       	ldi	r31, 0x00	; 0
    3e50:	80 81       	ld	r24, Z
    3e52:	48 2f       	mov	r20, r24
    3e54:	8a 81       	ldd	r24, Y+2	; 0x02
    3e56:	28 2f       	mov	r18, r24
    3e58:	30 e0       	ldi	r19, 0x00	; 0
    3e5a:	81 e0       	ldi	r24, 0x01	; 1
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	02 2e       	mov	r0, r18
    3e60:	02 c0       	rjmp	.+4      	; 0x3e66 <DIO_voidTogglePin+0x96>
    3e62:	88 0f       	add	r24, r24
    3e64:	99 1f       	adc	r25, r25
    3e66:	0a 94       	dec	r0
    3e68:	e2 f7       	brpl	.-8      	; 0x3e62 <DIO_voidTogglePin+0x92>
    3e6a:	84 27       	eor	r24, r20
    3e6c:	8c 93       	st	X, r24
    3e6e:	27 c0       	rjmp	.+78     	; 0x3ebe <DIO_voidTogglePin+0xee>
			break;
		case PORT_C:
			TOG_BIT(PORTC,u8PinCpy);
    3e70:	a5 e3       	ldi	r26, 0x35	; 53
    3e72:	b0 e0       	ldi	r27, 0x00	; 0
    3e74:	e5 e3       	ldi	r30, 0x35	; 53
    3e76:	f0 e0       	ldi	r31, 0x00	; 0
    3e78:	80 81       	ld	r24, Z
    3e7a:	48 2f       	mov	r20, r24
    3e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e7e:	28 2f       	mov	r18, r24
    3e80:	30 e0       	ldi	r19, 0x00	; 0
    3e82:	81 e0       	ldi	r24, 0x01	; 1
    3e84:	90 e0       	ldi	r25, 0x00	; 0
    3e86:	02 2e       	mov	r0, r18
    3e88:	02 c0       	rjmp	.+4      	; 0x3e8e <DIO_voidTogglePin+0xbe>
    3e8a:	88 0f       	add	r24, r24
    3e8c:	99 1f       	adc	r25, r25
    3e8e:	0a 94       	dec	r0
    3e90:	e2 f7       	brpl	.-8      	; 0x3e8a <DIO_voidTogglePin+0xba>
    3e92:	84 27       	eor	r24, r20
    3e94:	8c 93       	st	X, r24
    3e96:	13 c0       	rjmp	.+38     	; 0x3ebe <DIO_voidTogglePin+0xee>
			break;
		case PORT_D:
			TOG_BIT(PORTD,u8PinCpy);
    3e98:	a2 e3       	ldi	r26, 0x32	; 50
    3e9a:	b0 e0       	ldi	r27, 0x00	; 0
    3e9c:	e2 e3       	ldi	r30, 0x32	; 50
    3e9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ea0:	80 81       	ld	r24, Z
    3ea2:	48 2f       	mov	r20, r24
    3ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea6:	28 2f       	mov	r18, r24
    3ea8:	30 e0       	ldi	r19, 0x00	; 0
    3eaa:	81 e0       	ldi	r24, 0x01	; 1
    3eac:	90 e0       	ldi	r25, 0x00	; 0
    3eae:	02 2e       	mov	r0, r18
    3eb0:	02 c0       	rjmp	.+4      	; 0x3eb6 <DIO_voidTogglePin+0xe6>
    3eb2:	88 0f       	add	r24, r24
    3eb4:	99 1f       	adc	r25, r25
    3eb6:	0a 94       	dec	r0
    3eb8:	e2 f7       	brpl	.-8      	; 0x3eb2 <DIO_voidTogglePin+0xe2>
    3eba:	84 27       	eor	r24, r20
    3ebc:	8c 93       	st	X, r24
			break;
	}

}
    3ebe:	0f 90       	pop	r0
    3ec0:	0f 90       	pop	r0
    3ec2:	0f 90       	pop	r0
    3ec4:	0f 90       	pop	r0
    3ec6:	cf 91       	pop	r28
    3ec8:	df 91       	pop	r29
    3eca:	08 95       	ret

00003ecc <DIO_voidWritePort>:
/* DIO_voidWritePort(PORT_A, 0x20) -> ob0010 0000-----> this means bit 0 will be 0 and bit5 will be 1 */
void DIO_voidWritePort(uint8 u8PortCpy, uint8 u8ValueCpy)
{
    3ecc:	df 93       	push	r29
    3ece:	cf 93       	push	r28
    3ed0:	00 d0       	rcall	.+0      	; 0x3ed2 <DIO_voidWritePort+0x6>
    3ed2:	00 d0       	rcall	.+0      	; 0x3ed4 <DIO_voidWritePort+0x8>
    3ed4:	cd b7       	in	r28, 0x3d	; 61
    3ed6:	de b7       	in	r29, 0x3e	; 62
    3ed8:	89 83       	std	Y+1, r24	; 0x01
    3eda:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortCpy){
    3edc:	89 81       	ldd	r24, Y+1	; 0x01
    3ede:	28 2f       	mov	r18, r24
    3ee0:	30 e0       	ldi	r19, 0x00	; 0
    3ee2:	3c 83       	std	Y+4, r19	; 0x04
    3ee4:	2b 83       	std	Y+3, r18	; 0x03
    3ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ee8:	9c 81       	ldd	r25, Y+4	; 0x04
    3eea:	82 30       	cpi	r24, 0x02	; 2
    3eec:	91 05       	cpc	r25, r1
    3eee:	d9 f0       	breq	.+54     	; 0x3f26 <DIO_voidWritePort+0x5a>
    3ef0:	2b 81       	ldd	r18, Y+3	; 0x03
    3ef2:	3c 81       	ldd	r19, Y+4	; 0x04
    3ef4:	23 30       	cpi	r18, 0x03	; 3
    3ef6:	31 05       	cpc	r19, r1
    3ef8:	34 f4       	brge	.+12     	; 0x3f06 <DIO_voidWritePort+0x3a>
    3efa:	8b 81       	ldd	r24, Y+3	; 0x03
    3efc:	9c 81       	ldd	r25, Y+4	; 0x04
    3efe:	81 30       	cpi	r24, 0x01	; 1
    3f00:	91 05       	cpc	r25, r1
    3f02:	61 f0       	breq	.+24     	; 0x3f1c <DIO_voidWritePort+0x50>
    3f04:	1e c0       	rjmp	.+60     	; 0x3f42 <DIO_voidWritePort+0x76>
    3f06:	2b 81       	ldd	r18, Y+3	; 0x03
    3f08:	3c 81       	ldd	r19, Y+4	; 0x04
    3f0a:	23 30       	cpi	r18, 0x03	; 3
    3f0c:	31 05       	cpc	r19, r1
    3f0e:	81 f0       	breq	.+32     	; 0x3f30 <DIO_voidWritePort+0x64>
    3f10:	8b 81       	ldd	r24, Y+3	; 0x03
    3f12:	9c 81       	ldd	r25, Y+4	; 0x04
    3f14:	84 30       	cpi	r24, 0x04	; 4
    3f16:	91 05       	cpc	r25, r1
    3f18:	81 f0       	breq	.+32     	; 0x3f3a <DIO_voidWritePort+0x6e>
    3f1a:	13 c0       	rjmp	.+38     	; 0x3f42 <DIO_voidWritePort+0x76>
	case PORT_A:
		PORTA = u8ValueCpy;
    3f1c:	eb e3       	ldi	r30, 0x3B	; 59
    3f1e:	f0 e0       	ldi	r31, 0x00	; 0
    3f20:	8a 81       	ldd	r24, Y+2	; 0x02
    3f22:	80 83       	st	Z, r24
    3f24:	0e c0       	rjmp	.+28     	; 0x3f42 <DIO_voidWritePort+0x76>
		break;
	case PORT_B:
		PORTB = u8ValueCpy;
    3f26:	e8 e3       	ldi	r30, 0x38	; 56
    3f28:	f0 e0       	ldi	r31, 0x00	; 0
    3f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f2c:	80 83       	st	Z, r24
    3f2e:	09 c0       	rjmp	.+18     	; 0x3f42 <DIO_voidWritePort+0x76>
		break;
	case PORT_C:
		PORTC = u8ValueCpy;
    3f30:	e5 e3       	ldi	r30, 0x35	; 53
    3f32:	f0 e0       	ldi	r31, 0x00	; 0
    3f34:	8a 81       	ldd	r24, Y+2	; 0x02
    3f36:	80 83       	st	Z, r24
    3f38:	04 c0       	rjmp	.+8      	; 0x3f42 <DIO_voidWritePort+0x76>
		break;
	case PORT_D:
		PORTD = u8ValueCpy;
    3f3a:	e2 e3       	ldi	r30, 0x32	; 50
    3f3c:	f0 e0       	ldi	r31, 0x00	; 0
    3f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f40:	80 83       	st	Z, r24
		break;

	}
}
    3f42:	0f 90       	pop	r0
    3f44:	0f 90       	pop	r0
    3f46:	0f 90       	pop	r0
    3f48:	0f 90       	pop	r0
    3f4a:	cf 91       	pop	r28
    3f4c:	df 91       	pop	r29
    3f4e:	08 95       	ret

00003f50 <DIO_voidPullUpState>:
void DIO_voidPullUpState(uint8 u8PortCpy , uint8 u8PinCpy,uint8 u8State)
{
    3f50:	df 93       	push	r29
    3f52:	cf 93       	push	r28
    3f54:	00 d0       	rcall	.+0      	; 0x3f56 <DIO_voidPullUpState+0x6>
    3f56:	00 d0       	rcall	.+0      	; 0x3f58 <DIO_voidPullUpState+0x8>
    3f58:	00 d0       	rcall	.+0      	; 0x3f5a <DIO_voidPullUpState+0xa>
    3f5a:	cd b7       	in	r28, 0x3d	; 61
    3f5c:	de b7       	in	r29, 0x3e	; 62
    3f5e:	8a 83       	std	Y+2, r24	; 0x02
    3f60:	6b 83       	std	Y+3, r22	; 0x03
    3f62:	4c 83       	std	Y+4, r20	; 0x04
	uint8 u8Direction ;
	switch(u8PortCpy)
    3f64:	8a 81       	ldd	r24, Y+2	; 0x02
    3f66:	28 2f       	mov	r18, r24
    3f68:	30 e0       	ldi	r19, 0x00	; 0
    3f6a:	3e 83       	std	Y+6, r19	; 0x06
    3f6c:	2d 83       	std	Y+5, r18	; 0x05
    3f6e:	4d 81       	ldd	r20, Y+5	; 0x05
    3f70:	5e 81       	ldd	r21, Y+6	; 0x06
    3f72:	42 30       	cpi	r20, 0x02	; 2
    3f74:	51 05       	cpc	r21, r1
    3f76:	41 f1       	breq	.+80     	; 0x3fc8 <DIO_voidPullUpState+0x78>
    3f78:	8d 81       	ldd	r24, Y+5	; 0x05
    3f7a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f7c:	83 30       	cpi	r24, 0x03	; 3
    3f7e:	91 05       	cpc	r25, r1
    3f80:	34 f4       	brge	.+12     	; 0x3f8e <DIO_voidPullUpState+0x3e>
    3f82:	2d 81       	ldd	r18, Y+5	; 0x05
    3f84:	3e 81       	ldd	r19, Y+6	; 0x06
    3f86:	21 30       	cpi	r18, 0x01	; 1
    3f88:	31 05       	cpc	r19, r1
    3f8a:	61 f0       	breq	.+24     	; 0x3fa4 <DIO_voidPullUpState+0x54>
    3f8c:	52 c0       	rjmp	.+164    	; 0x4032 <DIO_voidPullUpState+0xe2>
    3f8e:	4d 81       	ldd	r20, Y+5	; 0x05
    3f90:	5e 81       	ldd	r21, Y+6	; 0x06
    3f92:	43 30       	cpi	r20, 0x03	; 3
    3f94:	51 05       	cpc	r21, r1
    3f96:	51 f1       	breq	.+84     	; 0x3fec <DIO_voidPullUpState+0x9c>
    3f98:	8d 81       	ldd	r24, Y+5	; 0x05
    3f9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f9c:	84 30       	cpi	r24, 0x04	; 4
    3f9e:	91 05       	cpc	r25, r1
    3fa0:	b9 f1       	breq	.+110    	; 0x4010 <DIO_voidPullUpState+0xc0>
    3fa2:	47 c0       	rjmp	.+142    	; 0x4032 <DIO_voidPullUpState+0xe2>
	{
	case PORT_A :
		u8Direction=GET_BIT(DDRA,u8PinCpy);
    3fa4:	ea e3       	ldi	r30, 0x3A	; 58
    3fa6:	f0 e0       	ldi	r31, 0x00	; 0
    3fa8:	80 81       	ld	r24, Z
    3faa:	28 2f       	mov	r18, r24
    3fac:	30 e0       	ldi	r19, 0x00	; 0
    3fae:	8b 81       	ldd	r24, Y+3	; 0x03
    3fb0:	88 2f       	mov	r24, r24
    3fb2:	90 e0       	ldi	r25, 0x00	; 0
    3fb4:	a9 01       	movw	r20, r18
    3fb6:	02 c0       	rjmp	.+4      	; 0x3fbc <DIO_voidPullUpState+0x6c>
    3fb8:	55 95       	asr	r21
    3fba:	47 95       	ror	r20
    3fbc:	8a 95       	dec	r24
    3fbe:	e2 f7       	brpl	.-8      	; 0x3fb8 <DIO_voidPullUpState+0x68>
    3fc0:	ca 01       	movw	r24, r20
    3fc2:	81 70       	andi	r24, 0x01	; 1
    3fc4:	89 83       	std	Y+1, r24	; 0x01
    3fc6:	35 c0       	rjmp	.+106    	; 0x4032 <DIO_voidPullUpState+0xe2>
		break;
	case PORT_B :
		u8Direction=GET_BIT(DDRB,u8PinCpy);
    3fc8:	e7 e3       	ldi	r30, 0x37	; 55
    3fca:	f0 e0       	ldi	r31, 0x00	; 0
    3fcc:	80 81       	ld	r24, Z
    3fce:	28 2f       	mov	r18, r24
    3fd0:	30 e0       	ldi	r19, 0x00	; 0
    3fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fd4:	88 2f       	mov	r24, r24
    3fd6:	90 e0       	ldi	r25, 0x00	; 0
    3fd8:	a9 01       	movw	r20, r18
    3fda:	02 c0       	rjmp	.+4      	; 0x3fe0 <DIO_voidPullUpState+0x90>
    3fdc:	55 95       	asr	r21
    3fde:	47 95       	ror	r20
    3fe0:	8a 95       	dec	r24
    3fe2:	e2 f7       	brpl	.-8      	; 0x3fdc <DIO_voidPullUpState+0x8c>
    3fe4:	ca 01       	movw	r24, r20
    3fe6:	81 70       	andi	r24, 0x01	; 1
    3fe8:	89 83       	std	Y+1, r24	; 0x01
    3fea:	23 c0       	rjmp	.+70     	; 0x4032 <DIO_voidPullUpState+0xe2>
		break;

	case PORT_C :
		u8Direction=GET_BIT(DDRC,u8PinCpy);
    3fec:	e4 e3       	ldi	r30, 0x34	; 52
    3fee:	f0 e0       	ldi	r31, 0x00	; 0
    3ff0:	80 81       	ld	r24, Z
    3ff2:	28 2f       	mov	r18, r24
    3ff4:	30 e0       	ldi	r19, 0x00	; 0
    3ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff8:	88 2f       	mov	r24, r24
    3ffa:	90 e0       	ldi	r25, 0x00	; 0
    3ffc:	a9 01       	movw	r20, r18
    3ffe:	02 c0       	rjmp	.+4      	; 0x4004 <DIO_voidPullUpState+0xb4>
    4000:	55 95       	asr	r21
    4002:	47 95       	ror	r20
    4004:	8a 95       	dec	r24
    4006:	e2 f7       	brpl	.-8      	; 0x4000 <DIO_voidPullUpState+0xb0>
    4008:	ca 01       	movw	r24, r20
    400a:	81 70       	andi	r24, 0x01	; 1
    400c:	89 83       	std	Y+1, r24	; 0x01
    400e:	11 c0       	rjmp	.+34     	; 0x4032 <DIO_voidPullUpState+0xe2>
		break;

	case PORT_D :
		u8Direction=GET_BIT(DDRD,u8PinCpy);
    4010:	e1 e3       	ldi	r30, 0x31	; 49
    4012:	f0 e0       	ldi	r31, 0x00	; 0
    4014:	80 81       	ld	r24, Z
    4016:	28 2f       	mov	r18, r24
    4018:	30 e0       	ldi	r19, 0x00	; 0
    401a:	8b 81       	ldd	r24, Y+3	; 0x03
    401c:	88 2f       	mov	r24, r24
    401e:	90 e0       	ldi	r25, 0x00	; 0
    4020:	a9 01       	movw	r20, r18
    4022:	02 c0       	rjmp	.+4      	; 0x4028 <DIO_voidPullUpState+0xd8>
    4024:	55 95       	asr	r21
    4026:	47 95       	ror	r20
    4028:	8a 95       	dec	r24
    402a:	e2 f7       	brpl	.-8      	; 0x4024 <DIO_voidPullUpState+0xd4>
    402c:	ca 01       	movw	r24, r20
    402e:	81 70       	andi	r24, 0x01	; 1
    4030:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	if (u8Direction==DIO_INPUT)			//if zero, write zero in pin
    4032:	89 81       	ldd	r24, Y+1	; 0x01
    4034:	88 23       	and	r24, r24
    4036:	29 f4       	brne	.+10     	; 0x4042 <DIO_voidPullUpState+0xf2>
	{
		DIO_voidWritePin(u8PortCpy,u8PinCpy,u8State);
    4038:	8a 81       	ldd	r24, Y+2	; 0x02
    403a:	6b 81       	ldd	r22, Y+3	; 0x03
    403c:	4c 81       	ldd	r20, Y+4	; 0x04
    403e:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
	}
	else
	{
		//do nothing
	}
}
    4042:	26 96       	adiw	r28, 0x06	; 6
    4044:	0f b6       	in	r0, 0x3f	; 63
    4046:	f8 94       	cli
    4048:	de bf       	out	0x3e, r29	; 62
    404a:	0f be       	out	0x3f, r0	; 63
    404c:	cd bf       	out	0x3d, r28	; 61
    404e:	cf 91       	pop	r28
    4050:	df 91       	pop	r29
    4052:	08 95       	ret

00004054 <main>:
uint8 u8EEPROMData [ARRAY_SIZE];
uint8 u8Error;
void ArrivalButton(void);
void EntranceButton(void);

int main(void){
    4054:	0f 93       	push	r16
    4056:	1f 93       	push	r17
    4058:	df 93       	push	r29
    405a:	cf 93       	push	r28
    405c:	cd b7       	in	r28, 0x3d	; 61
    405e:	de b7       	in	r29, 0x3e	; 62
    4060:	61 97       	sbiw	r28, 0x11	; 17
    4062:	0f b6       	in	r0, 0x3f	; 63
    4064:	f8 94       	cli
    4066:	de bf       	out	0x3e, r29	; 62
    4068:	0f be       	out	0x3f, r0	; 63
    406a:	cd bf       	out	0x3d, r28	; 61
	DIO_voidInit();
    406c:	0e 94 65 1d 	call	0x3aca	; 0x3aca <DIO_voidInit>
	KPD_voidInit();
    4070:	0e 94 02 18 	call	0x3004	; 0x3004 <KPD_voidInit>
	LCD_voidInit_4bitMode();
    4074:	0e 94 41 0a 	call	0x1482	; 0x1482 <LCD_voidInit_4bitMode>
	TWI_voidMasterInit();
    4078:	0e 94 c8 1b 	call	0x3790	; 0x3790 <TWI_voidMasterInit>
	EXT_INTERRUPT_VID_INIT();
    407c:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <EXT_INTERRUPT_VID_INIT>
	DIO_voidWritePin(PORT_B, DIO_PIN_NUM_B0, DIO_LOW);
    4080:	82 e0       	ldi	r24, 0x02	; 2
    4082:	60 e0       	ldi	r22, 0x00	; 0
    4084:	40 e0       	ldi	r20, 0x00	; 0
    4086:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
	DIO_voidWritePin(PORT_B, DIO_PIN_NUM_B3, DIO_LOW);
    408a:	82 e0       	ldi	r24, 0x02	; 2
    408c:	63 e0       	ldi	r22, 0x03	; 3
    408e:	40 e0       	ldi	r20, 0x00	; 0
    4090:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>


	DIO_voidWritePin(PORT_B, DIO_PIN_NUM_B2, ENABLE_PULLUP);
    4094:	82 e0       	ldi	r24, 0x02	; 2
    4096:	62 e0       	ldi	r22, 0x02	; 2
    4098:	41 e0       	ldi	r20, 0x01	; 1
    409a:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
	DIO_voidWritePin(PORT_D, DIO_PIN_NUM_D3, ENABLE_PULLUP);
    409e:	84 e0       	ldi	r24, 0x04	; 4
    40a0:	63 e0       	ldi	r22, 0x03	; 3
    40a2:	41 e0       	ldi	r20, 0x01	; 1
    40a4:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>



//	ask owner to set password
	LCD_voidWriteString_4bitMode("Set Password:", 13);
    40a8:	80 e6       	ldi	r24, 0x60	; 96
    40aa:	90 e0       	ldi	r25, 0x00	; 0
    40ac:	6d e0       	ldi	r22, 0x0D	; 13
    40ae:	0e 94 90 16 	call	0x2d20	; 0x2d20 <LCD_voidWriteString_4bitMode>

	//set password on keypad
	uint8 u8PasswordSize = sizeof(u8key)/sizeof(u8key[0]);
    40b2:	85 e0       	ldi	r24, 0x05	; 5
    40b4:	88 8b       	std	Y+16, r24	; 0x10
	for(uint8 i=0;i<u8PasswordSize; ){
    40b6:	19 8a       	std	Y+17, r1	; 0x11
    40b8:	87 c0       	rjmp	.+270    	; 0x41c8 <main+0x174>
		LCD_voidGotoxy_4bitMode(i, LineTwo);
    40ba:	89 89       	ldd	r24, Y+17	; 0x11
    40bc:	62 e0       	ldi	r22, 0x02	; 2
    40be:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <LCD_voidGotoxy_4bitMode>
		u8key[i] = KPD_u8GetKey();
    40c2:	89 89       	ldd	r24, Y+17	; 0x11
    40c4:	08 2f       	mov	r16, r24
    40c6:	10 e0       	ldi	r17, 0x00	; 0
    40c8:	0e 94 26 18 	call	0x304c	; 0x304c <KPD_u8GetKey>
    40cc:	f8 01       	movw	r30, r16
    40ce:	e6 53       	subi	r30, 0x36	; 54
    40d0:	ff 4f       	sbci	r31, 0xFF	; 255
    40d2:	80 83       	st	Z, r24
		//print password on LCD
		LCD_voidDisplayKeys(u8key, &i);
    40d4:	8a ec       	ldi	r24, 0xCA	; 202
    40d6:	90 e0       	ldi	r25, 0x00	; 0
    40d8:	9e 01       	movw	r18, r28
    40da:	2f 5e       	subi	r18, 0xEF	; 239
    40dc:	3f 4f       	sbci	r19, 0xFF	; 255
    40de:	b9 01       	movw	r22, r18
    40e0:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <LCD_voidDisplayKeys>
    40e4:	80 e0       	ldi	r24, 0x00	; 0
    40e6:	90 e0       	ldi	r25, 0x00	; 0
    40e8:	a8 e4       	ldi	r26, 0x48	; 72
    40ea:	b3 e4       	ldi	r27, 0x43	; 67
    40ec:	8b 87       	std	Y+11, r24	; 0x0b
    40ee:	9c 87       	std	Y+12, r25	; 0x0c
    40f0:	ad 87       	std	Y+13, r26	; 0x0d
    40f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    40f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    40f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    40fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    40fc:	20 e0       	ldi	r18, 0x00	; 0
    40fe:	30 e0       	ldi	r19, 0x00	; 0
    4100:	4a ef       	ldi	r20, 0xFA	; 250
    4102:	54 e4       	ldi	r21, 0x44	; 68
    4104:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4108:	dc 01       	movw	r26, r24
    410a:	cb 01       	movw	r24, r22
    410c:	8f 83       	std	Y+7, r24	; 0x07
    410e:	98 87       	std	Y+8, r25	; 0x08
    4110:	a9 87       	std	Y+9, r26	; 0x09
    4112:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4114:	6f 81       	ldd	r22, Y+7	; 0x07
    4116:	78 85       	ldd	r23, Y+8	; 0x08
    4118:	89 85       	ldd	r24, Y+9	; 0x09
    411a:	9a 85       	ldd	r25, Y+10	; 0x0a
    411c:	20 e0       	ldi	r18, 0x00	; 0
    411e:	30 e0       	ldi	r19, 0x00	; 0
    4120:	40 e8       	ldi	r20, 0x80	; 128
    4122:	5f e3       	ldi	r21, 0x3F	; 63
    4124:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4128:	88 23       	and	r24, r24
    412a:	2c f4       	brge	.+10     	; 0x4136 <main+0xe2>
		__ticks = 1;
    412c:	81 e0       	ldi	r24, 0x01	; 1
    412e:	90 e0       	ldi	r25, 0x00	; 0
    4130:	9e 83       	std	Y+6, r25	; 0x06
    4132:	8d 83       	std	Y+5, r24	; 0x05
    4134:	3f c0       	rjmp	.+126    	; 0x41b4 <main+0x160>
	else if (__tmp > 65535)
    4136:	6f 81       	ldd	r22, Y+7	; 0x07
    4138:	78 85       	ldd	r23, Y+8	; 0x08
    413a:	89 85       	ldd	r24, Y+9	; 0x09
    413c:	9a 85       	ldd	r25, Y+10	; 0x0a
    413e:	20 e0       	ldi	r18, 0x00	; 0
    4140:	3f ef       	ldi	r19, 0xFF	; 255
    4142:	4f e7       	ldi	r20, 0x7F	; 127
    4144:	57 e4       	ldi	r21, 0x47	; 71
    4146:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    414a:	18 16       	cp	r1, r24
    414c:	4c f5       	brge	.+82     	; 0x41a0 <main+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    414e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4150:	7c 85       	ldd	r23, Y+12	; 0x0c
    4152:	8d 85       	ldd	r24, Y+13	; 0x0d
    4154:	9e 85       	ldd	r25, Y+14	; 0x0e
    4156:	20 e0       	ldi	r18, 0x00	; 0
    4158:	30 e0       	ldi	r19, 0x00	; 0
    415a:	40 e2       	ldi	r20, 0x20	; 32
    415c:	51 e4       	ldi	r21, 0x41	; 65
    415e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4162:	dc 01       	movw	r26, r24
    4164:	cb 01       	movw	r24, r22
    4166:	bc 01       	movw	r22, r24
    4168:	cd 01       	movw	r24, r26
    416a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    416e:	dc 01       	movw	r26, r24
    4170:	cb 01       	movw	r24, r22
    4172:	9e 83       	std	Y+6, r25	; 0x06
    4174:	8d 83       	std	Y+5, r24	; 0x05
    4176:	0f c0       	rjmp	.+30     	; 0x4196 <main+0x142>
    4178:	88 ec       	ldi	r24, 0xC8	; 200
    417a:	90 e0       	ldi	r25, 0x00	; 0
    417c:	9c 83       	std	Y+4, r25	; 0x04
    417e:	8b 83       	std	Y+3, r24	; 0x03
    4180:	8b 81       	ldd	r24, Y+3	; 0x03
    4182:	9c 81       	ldd	r25, Y+4	; 0x04
    4184:	01 97       	sbiw	r24, 0x01	; 1
    4186:	f1 f7       	brne	.-4      	; 0x4184 <main+0x130>
    4188:	9c 83       	std	Y+4, r25	; 0x04
    418a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    418c:	8d 81       	ldd	r24, Y+5	; 0x05
    418e:	9e 81       	ldd	r25, Y+6	; 0x06
    4190:	01 97       	sbiw	r24, 0x01	; 1
    4192:	9e 83       	std	Y+6, r25	; 0x06
    4194:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4196:	8d 81       	ldd	r24, Y+5	; 0x05
    4198:	9e 81       	ldd	r25, Y+6	; 0x06
    419a:	00 97       	sbiw	r24, 0x00	; 0
    419c:	69 f7       	brne	.-38     	; 0x4178 <main+0x124>
    419e:	14 c0       	rjmp	.+40     	; 0x41c8 <main+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41a0:	6f 81       	ldd	r22, Y+7	; 0x07
    41a2:	78 85       	ldd	r23, Y+8	; 0x08
    41a4:	89 85       	ldd	r24, Y+9	; 0x09
    41a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    41a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ac:	dc 01       	movw	r26, r24
    41ae:	cb 01       	movw	r24, r22
    41b0:	9e 83       	std	Y+6, r25	; 0x06
    41b2:	8d 83       	std	Y+5, r24	; 0x05
    41b4:	8d 81       	ldd	r24, Y+5	; 0x05
    41b6:	9e 81       	ldd	r25, Y+6	; 0x06
    41b8:	9a 83       	std	Y+2, r25	; 0x02
    41ba:	89 83       	std	Y+1, r24	; 0x01
    41bc:	89 81       	ldd	r24, Y+1	; 0x01
    41be:	9a 81       	ldd	r25, Y+2	; 0x02
    41c0:	01 97       	sbiw	r24, 0x01	; 1
    41c2:	f1 f7       	brne	.-4      	; 0x41c0 <main+0x16c>
    41c4:	9a 83       	std	Y+2, r25	; 0x02
    41c6:	89 83       	std	Y+1, r24	; 0x01
//	ask owner to set password
	LCD_voidWriteString_4bitMode("Set Password:", 13);

	//set password on keypad
	uint8 u8PasswordSize = sizeof(u8key)/sizeof(u8key[0]);
	for(uint8 i=0;i<u8PasswordSize; ){
    41c8:	99 89       	ldd	r25, Y+17	; 0x11
    41ca:	88 89       	ldd	r24, Y+16	; 0x10
    41cc:	98 17       	cp	r25, r24
    41ce:	08 f4       	brcc	.+2      	; 0x41d2 <main+0x17e>
    41d0:	74 cf       	rjmp	.-280    	; 0x40ba <main+0x66>
		LCD_voidDisplayKeys(u8key, &i);
		_delay_ms(200);
	}

	//save the password in EEPROM
	for(uint8 i=0; i<u8PasswordSize; i++){
    41d2:	1f 86       	std	Y+15, r1	; 0x0f
    41d4:	0e c0       	rjmp	.+28     	; 0x41f2 <main+0x19e>
		EEPROM_voidWrite(i, u8key[i]);
    41d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    41d8:	88 2f       	mov	r24, r24
    41da:	90 e0       	ldi	r25, 0x00	; 0
    41dc:	fc 01       	movw	r30, r24
    41de:	e6 53       	subi	r30, 0x36	; 54
    41e0:	ff 4f       	sbci	r31, 0xFF	; 255
    41e2:	90 81       	ld	r25, Z
    41e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    41e6:	69 2f       	mov	r22, r25
    41e8:	0e 94 8c 1a 	call	0x3518	; 0x3518 <EEPROM_voidWrite>
		LCD_voidDisplayKeys(u8key, &i);
		_delay_ms(200);
	}

	//save the password in EEPROM
	for(uint8 i=0; i<u8PasswordSize; i++){
    41ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    41ee:	8f 5f       	subi	r24, 0xFF	; 255
    41f0:	8f 87       	std	Y+15, r24	; 0x0f
    41f2:	9f 85       	ldd	r25, Y+15	; 0x0f
    41f4:	88 89       	ldd	r24, Y+16	; 0x10
    41f6:	98 17       	cp	r25, r24
    41f8:	70 f3       	brcs	.-36     	; 0x41d6 <main+0x182>
		EEPROM_voidWrite(i, u8key[i]);
	}

	//House number
	LCD_voidSendCommand_4bitMode(lcd_Clear);
    41fa:	81 e0       	ldi	r24, 0x01	; 1
    41fc:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_voidSendCommand_4bitMode>
	LCD_voidGotoxy_4bitMode(6,LineOne);
    4200:	86 e0       	ldi	r24, 0x06	; 6
    4202:	61 e0       	ldi	r22, 0x01	; 1
    4204:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <LCD_voidGotoxy_4bitMode>
	LCD_voidWriteString_4bitMode("22B1", 4);
    4208:	8e e6       	ldi	r24, 0x6E	; 110
    420a:	90 e0       	ldi	r25, 0x00	; 0
    420c:	64 e0       	ldi	r22, 0x04	; 4
    420e:	0e 94 90 16 	call	0x2d20	; 0x2d20 <LCD_voidWriteString_4bitMode>
	LCD_voidGotoxy_4bitMode(5,LineTwo);
    4212:	85 e0       	ldi	r24, 0x05	; 5
    4214:	62 e0       	ldi	r22, 0x02	; 2
    4216:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <LCD_voidGotoxy_4bitMode>
	LCD_voidWriteString_4bitMode("------", 6);
    421a:	83 e7       	ldi	r24, 0x73	; 115
    421c:	90 e0       	ldi	r25, 0x00	; 0
    421e:	66 e0       	ldi	r22, 0x06	; 6
    4220:	0e 94 90 16 	call	0x2d20	; 0x2d20 <LCD_voidWriteString_4bitMode>

	//fire an interrupt if the renter pressed the arrival button
	EXT_INTERRUPT_VID_ENABLE(EXT0);
    4224:	80 e0       	ldi	r24, 0x00	; 0
    4226:	0e 94 23 19 	call	0x3246	; 0x3246 <EXT_INTERRUPT_VID_ENABLE>
	EXT2_VID_SET_CALL_BACK(ArrivalButton);
    422a:	8c e1       	ldi	r24, 0x1C	; 28
    422c:	91 e2       	ldi	r25, 0x21	; 33
    422e:	0e 94 b5 19 	call	0x336a	; 0x336a <EXT2_VID_SET_CALL_BACK>
	//fire an interrupt if the renter pressed the entrance button
//	EXT_INTERRUPT_VID_ENABLE(EXT1);
//	EXT2_VID_SET_CALL_BACK(EntranceButton);

	Global_Interrupt_Enable();
    4232:	0e 94 4e 1a 	call	0x349c	; 0x349c <Global_Interrupt_Enable>
    4236:	ff cf       	rjmp	.-2      	; 0x4236 <main+0x1e2>

00004238 <ArrivalButton>:


	}
}

void ArrivalButton(){
    4238:	0f 93       	push	r16
    423a:	1f 93       	push	r17
    423c:	df 93       	push	r29
    423e:	cf 93       	push	r28
    4240:	cd b7       	in	r28, 0x3d	; 61
    4242:	de b7       	in	r29, 0x3e	; 62
    4244:	ad 97       	sbiw	r28, 0x2d	; 45
    4246:	0f b6       	in	r0, 0x3f	; 63
    4248:	f8 94       	cli
    424a:	de bf       	out	0x3e, r29	; 62
    424c:	0f be       	out	0x3f, r0	; 63
    424e:	cd bf       	out	0x3d, r28	; 61
	//welcome message then ask him to enter password

	LCD_voidSendCommand_4bitMode(lcd_Clear);
    4250:	81 e0       	ldi	r24, 0x01	; 1
    4252:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_voidSendCommand_4bitMode>
	LCD_voidGotoxy_4bitMode(5, LineOne);
    4256:	85 e0       	ldi	r24, 0x05	; 5
    4258:	61 e0       	ldi	r22, 0x01	; 1
    425a:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <LCD_voidGotoxy_4bitMode>
	LCD_voidWriteString_4bitMode("WELCOME", 7);
    425e:	8a e7       	ldi	r24, 0x7A	; 122
    4260:	90 e0       	ldi	r25, 0x00	; 0
    4262:	67 e0       	ldi	r22, 0x07	; 7
    4264:	0e 94 90 16 	call	0x2d20	; 0x2d20 <LCD_voidWriteString_4bitMode>
    4268:	80 e0       	ldi	r24, 0x00	; 0
    426a:	90 e8       	ldi	r25, 0x80	; 128
    426c:	ab eb       	ldi	r26, 0xBB	; 187
    426e:	b4 e4       	ldi	r27, 0x44	; 68
    4270:	8f a3       	std	Y+39, r24	; 0x27
    4272:	98 a7       	std	Y+40, r25	; 0x28
    4274:	a9 a7       	std	Y+41, r26	; 0x29
    4276:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4278:	6f a1       	ldd	r22, Y+39	; 0x27
    427a:	78 a5       	ldd	r23, Y+40	; 0x28
    427c:	89 a5       	ldd	r24, Y+41	; 0x29
    427e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4280:	20 e0       	ldi	r18, 0x00	; 0
    4282:	30 e0       	ldi	r19, 0x00	; 0
    4284:	4a ef       	ldi	r20, 0xFA	; 250
    4286:	54 e4       	ldi	r21, 0x44	; 68
    4288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    428c:	dc 01       	movw	r26, r24
    428e:	cb 01       	movw	r24, r22
    4290:	8b a3       	std	Y+35, r24	; 0x23
    4292:	9c a3       	std	Y+36, r25	; 0x24
    4294:	ad a3       	std	Y+37, r26	; 0x25
    4296:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4298:	6b a1       	ldd	r22, Y+35	; 0x23
    429a:	7c a1       	ldd	r23, Y+36	; 0x24
    429c:	8d a1       	ldd	r24, Y+37	; 0x25
    429e:	9e a1       	ldd	r25, Y+38	; 0x26
    42a0:	20 e0       	ldi	r18, 0x00	; 0
    42a2:	30 e0       	ldi	r19, 0x00	; 0
    42a4:	40 e8       	ldi	r20, 0x80	; 128
    42a6:	5f e3       	ldi	r21, 0x3F	; 63
    42a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42ac:	88 23       	and	r24, r24
    42ae:	2c f4       	brge	.+10     	; 0x42ba <ArrivalButton+0x82>
		__ticks = 1;
    42b0:	81 e0       	ldi	r24, 0x01	; 1
    42b2:	90 e0       	ldi	r25, 0x00	; 0
    42b4:	9a a3       	std	Y+34, r25	; 0x22
    42b6:	89 a3       	std	Y+33, r24	; 0x21
    42b8:	3f c0       	rjmp	.+126    	; 0x4338 <ArrivalButton+0x100>
	else if (__tmp > 65535)
    42ba:	6b a1       	ldd	r22, Y+35	; 0x23
    42bc:	7c a1       	ldd	r23, Y+36	; 0x24
    42be:	8d a1       	ldd	r24, Y+37	; 0x25
    42c0:	9e a1       	ldd	r25, Y+38	; 0x26
    42c2:	20 e0       	ldi	r18, 0x00	; 0
    42c4:	3f ef       	ldi	r19, 0xFF	; 255
    42c6:	4f e7       	ldi	r20, 0x7F	; 127
    42c8:	57 e4       	ldi	r21, 0x47	; 71
    42ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42ce:	18 16       	cp	r1, r24
    42d0:	4c f5       	brge	.+82     	; 0x4324 <ArrivalButton+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42d2:	6f a1       	ldd	r22, Y+39	; 0x27
    42d4:	78 a5       	ldd	r23, Y+40	; 0x28
    42d6:	89 a5       	ldd	r24, Y+41	; 0x29
    42d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    42da:	20 e0       	ldi	r18, 0x00	; 0
    42dc:	30 e0       	ldi	r19, 0x00	; 0
    42de:	40 e2       	ldi	r20, 0x20	; 32
    42e0:	51 e4       	ldi	r21, 0x41	; 65
    42e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42e6:	dc 01       	movw	r26, r24
    42e8:	cb 01       	movw	r24, r22
    42ea:	bc 01       	movw	r22, r24
    42ec:	cd 01       	movw	r24, r26
    42ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42f2:	dc 01       	movw	r26, r24
    42f4:	cb 01       	movw	r24, r22
    42f6:	9a a3       	std	Y+34, r25	; 0x22
    42f8:	89 a3       	std	Y+33, r24	; 0x21
    42fa:	0f c0       	rjmp	.+30     	; 0x431a <ArrivalButton+0xe2>
    42fc:	88 ec       	ldi	r24, 0xC8	; 200
    42fe:	90 e0       	ldi	r25, 0x00	; 0
    4300:	98 a3       	std	Y+32, r25	; 0x20
    4302:	8f 8f       	std	Y+31, r24	; 0x1f
    4304:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4306:	98 a1       	ldd	r25, Y+32	; 0x20
    4308:	01 97       	sbiw	r24, 0x01	; 1
    430a:	f1 f7       	brne	.-4      	; 0x4308 <ArrivalButton+0xd0>
    430c:	98 a3       	std	Y+32, r25	; 0x20
    430e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4310:	89 a1       	ldd	r24, Y+33	; 0x21
    4312:	9a a1       	ldd	r25, Y+34	; 0x22
    4314:	01 97       	sbiw	r24, 0x01	; 1
    4316:	9a a3       	std	Y+34, r25	; 0x22
    4318:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    431a:	89 a1       	ldd	r24, Y+33	; 0x21
    431c:	9a a1       	ldd	r25, Y+34	; 0x22
    431e:	00 97       	sbiw	r24, 0x00	; 0
    4320:	69 f7       	brne	.-38     	; 0x42fc <ArrivalButton+0xc4>
    4322:	14 c0       	rjmp	.+40     	; 0x434c <ArrivalButton+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4324:	6b a1       	ldd	r22, Y+35	; 0x23
    4326:	7c a1       	ldd	r23, Y+36	; 0x24
    4328:	8d a1       	ldd	r24, Y+37	; 0x25
    432a:	9e a1       	ldd	r25, Y+38	; 0x26
    432c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4330:	dc 01       	movw	r26, r24
    4332:	cb 01       	movw	r24, r22
    4334:	9a a3       	std	Y+34, r25	; 0x22
    4336:	89 a3       	std	Y+33, r24	; 0x21
    4338:	89 a1       	ldd	r24, Y+33	; 0x21
    433a:	9a a1       	ldd	r25, Y+34	; 0x22
    433c:	9e 8f       	std	Y+30, r25	; 0x1e
    433e:	8d 8f       	std	Y+29, r24	; 0x1d
    4340:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4342:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4344:	01 97       	sbiw	r24, 0x01	; 1
    4346:	f1 f7       	brne	.-4      	; 0x4344 <ArrivalButton+0x10c>
    4348:	9e 8f       	std	Y+30, r25	; 0x1e
    434a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1500);
	LCD_voidSendCommand_4bitMode(lcd_Clear);
    434c:	81 e0       	ldi	r24, 0x01	; 1
    434e:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_voidSendCommand_4bitMode>
	LCD_voidWriteString_4bitMode("Enter Password:", 15);
    4352:	82 e8       	ldi	r24, 0x82	; 130
    4354:	90 e0       	ldi	r25, 0x00	; 0
    4356:	6f e0       	ldi	r22, 0x0F	; 15
    4358:	0e 94 90 16 	call	0x2d20	; 0x2d20 <LCD_voidWriteString_4bitMode>
	LCD_voidGotoxy_4bitMode(0,LineTwo);
    435c:	80 e0       	ldi	r24, 0x00	; 0
    435e:	62 e0       	ldi	r22, 0x02	; 2
    4360:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <LCD_voidGotoxy_4bitMode>

	//enter password on keypad
	uint8 u8PasswordSize = sizeof(u8InputPassword)/sizeof(u8InputPassword[0]);
    4364:	85 e0       	ldi	r24, 0x05	; 5
    4366:	8c a7       	std	Y+44, r24	; 0x2c
	for(uint8 i=0;i<u8PasswordSize;){
    4368:	1d a6       	std	Y+45, r1	; 0x2d
    436a:	87 c0       	rjmp	.+270    	; 0x447a <ArrivalButton+0x242>
		LCD_voidGotoxy_4bitMode(i, LineTwo);
    436c:	8d a5       	ldd	r24, Y+45	; 0x2d
    436e:	62 e0       	ldi	r22, 0x02	; 2
    4370:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <LCD_voidGotoxy_4bitMode>
		u8InputPassword[i] = KPD_u8GetKey();
    4374:	8d a5       	ldd	r24, Y+45	; 0x2d
    4376:	08 2f       	mov	r16, r24
    4378:	10 e0       	ldi	r17, 0x00	; 0
    437a:	0e 94 26 18 	call	0x304c	; 0x304c <KPD_u8GetKey>
    437e:	f8 01       	movw	r30, r16
    4380:	e7 52       	subi	r30, 0x27	; 39
    4382:	ff 4f       	sbci	r31, 0xFF	; 255
    4384:	80 83       	st	Z, r24
		//print password on LCD
		LCD_voidDisplayKeys(u8InputPassword, &i);
    4386:	89 ed       	ldi	r24, 0xD9	; 217
    4388:	90 e0       	ldi	r25, 0x00	; 0
    438a:	9e 01       	movw	r18, r28
    438c:	23 5d       	subi	r18, 0xD3	; 211
    438e:	3f 4f       	sbci	r19, 0xFF	; 255
    4390:	b9 01       	movw	r22, r18
    4392:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <LCD_voidDisplayKeys>
    4396:	80 e0       	ldi	r24, 0x00	; 0
    4398:	90 e0       	ldi	r25, 0x00	; 0
    439a:	a8 e4       	ldi	r26, 0x48	; 72
    439c:	b3 e4       	ldi	r27, 0x43	; 67
    439e:	89 8f       	std	Y+25, r24	; 0x19
    43a0:	9a 8f       	std	Y+26, r25	; 0x1a
    43a2:	ab 8f       	std	Y+27, r26	; 0x1b
    43a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43a6:	69 8d       	ldd	r22, Y+25	; 0x19
    43a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    43aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    43ae:	20 e0       	ldi	r18, 0x00	; 0
    43b0:	30 e0       	ldi	r19, 0x00	; 0
    43b2:	4a ef       	ldi	r20, 0xFA	; 250
    43b4:	54 e4       	ldi	r21, 0x44	; 68
    43b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43ba:	dc 01       	movw	r26, r24
    43bc:	cb 01       	movw	r24, r22
    43be:	8d 8b       	std	Y+21, r24	; 0x15
    43c0:	9e 8b       	std	Y+22, r25	; 0x16
    43c2:	af 8b       	std	Y+23, r26	; 0x17
    43c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    43c6:	6d 89       	ldd	r22, Y+21	; 0x15
    43c8:	7e 89       	ldd	r23, Y+22	; 0x16
    43ca:	8f 89       	ldd	r24, Y+23	; 0x17
    43cc:	98 8d       	ldd	r25, Y+24	; 0x18
    43ce:	20 e0       	ldi	r18, 0x00	; 0
    43d0:	30 e0       	ldi	r19, 0x00	; 0
    43d2:	40 e8       	ldi	r20, 0x80	; 128
    43d4:	5f e3       	ldi	r21, 0x3F	; 63
    43d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43da:	88 23       	and	r24, r24
    43dc:	2c f4       	brge	.+10     	; 0x43e8 <ArrivalButton+0x1b0>
		__ticks = 1;
    43de:	81 e0       	ldi	r24, 0x01	; 1
    43e0:	90 e0       	ldi	r25, 0x00	; 0
    43e2:	9c 8b       	std	Y+20, r25	; 0x14
    43e4:	8b 8b       	std	Y+19, r24	; 0x13
    43e6:	3f c0       	rjmp	.+126    	; 0x4466 <ArrivalButton+0x22e>
	else if (__tmp > 65535)
    43e8:	6d 89       	ldd	r22, Y+21	; 0x15
    43ea:	7e 89       	ldd	r23, Y+22	; 0x16
    43ec:	8f 89       	ldd	r24, Y+23	; 0x17
    43ee:	98 8d       	ldd	r25, Y+24	; 0x18
    43f0:	20 e0       	ldi	r18, 0x00	; 0
    43f2:	3f ef       	ldi	r19, 0xFF	; 255
    43f4:	4f e7       	ldi	r20, 0x7F	; 127
    43f6:	57 e4       	ldi	r21, 0x47	; 71
    43f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43fc:	18 16       	cp	r1, r24
    43fe:	4c f5       	brge	.+82     	; 0x4452 <ArrivalButton+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4400:	69 8d       	ldd	r22, Y+25	; 0x19
    4402:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4404:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4406:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4408:	20 e0       	ldi	r18, 0x00	; 0
    440a:	30 e0       	ldi	r19, 0x00	; 0
    440c:	40 e2       	ldi	r20, 0x20	; 32
    440e:	51 e4       	ldi	r21, 0x41	; 65
    4410:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4414:	dc 01       	movw	r26, r24
    4416:	cb 01       	movw	r24, r22
    4418:	bc 01       	movw	r22, r24
    441a:	cd 01       	movw	r24, r26
    441c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4420:	dc 01       	movw	r26, r24
    4422:	cb 01       	movw	r24, r22
    4424:	9c 8b       	std	Y+20, r25	; 0x14
    4426:	8b 8b       	std	Y+19, r24	; 0x13
    4428:	0f c0       	rjmp	.+30     	; 0x4448 <ArrivalButton+0x210>
    442a:	88 ec       	ldi	r24, 0xC8	; 200
    442c:	90 e0       	ldi	r25, 0x00	; 0
    442e:	9a 8b       	std	Y+18, r25	; 0x12
    4430:	89 8b       	std	Y+17, r24	; 0x11
    4432:	89 89       	ldd	r24, Y+17	; 0x11
    4434:	9a 89       	ldd	r25, Y+18	; 0x12
    4436:	01 97       	sbiw	r24, 0x01	; 1
    4438:	f1 f7       	brne	.-4      	; 0x4436 <ArrivalButton+0x1fe>
    443a:	9a 8b       	std	Y+18, r25	; 0x12
    443c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    443e:	8b 89       	ldd	r24, Y+19	; 0x13
    4440:	9c 89       	ldd	r25, Y+20	; 0x14
    4442:	01 97       	sbiw	r24, 0x01	; 1
    4444:	9c 8b       	std	Y+20, r25	; 0x14
    4446:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4448:	8b 89       	ldd	r24, Y+19	; 0x13
    444a:	9c 89       	ldd	r25, Y+20	; 0x14
    444c:	00 97       	sbiw	r24, 0x00	; 0
    444e:	69 f7       	brne	.-38     	; 0x442a <ArrivalButton+0x1f2>
    4450:	14 c0       	rjmp	.+40     	; 0x447a <ArrivalButton+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4452:	6d 89       	ldd	r22, Y+21	; 0x15
    4454:	7e 89       	ldd	r23, Y+22	; 0x16
    4456:	8f 89       	ldd	r24, Y+23	; 0x17
    4458:	98 8d       	ldd	r25, Y+24	; 0x18
    445a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    445e:	dc 01       	movw	r26, r24
    4460:	cb 01       	movw	r24, r22
    4462:	9c 8b       	std	Y+20, r25	; 0x14
    4464:	8b 8b       	std	Y+19, r24	; 0x13
    4466:	8b 89       	ldd	r24, Y+19	; 0x13
    4468:	9c 89       	ldd	r25, Y+20	; 0x14
    446a:	98 8b       	std	Y+16, r25	; 0x10
    446c:	8f 87       	std	Y+15, r24	; 0x0f
    446e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4470:	98 89       	ldd	r25, Y+16	; 0x10
    4472:	01 97       	sbiw	r24, 0x01	; 1
    4474:	f1 f7       	brne	.-4      	; 0x4472 <ArrivalButton+0x23a>
    4476:	98 8b       	std	Y+16, r25	; 0x10
    4478:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_voidWriteString_4bitMode("Enter Password:", 15);
	LCD_voidGotoxy_4bitMode(0,LineTwo);

	//enter password on keypad
	uint8 u8PasswordSize = sizeof(u8InputPassword)/sizeof(u8InputPassword[0]);
	for(uint8 i=0;i<u8PasswordSize;){
    447a:	9d a5       	ldd	r25, Y+45	; 0x2d
    447c:	8c a5       	ldd	r24, Y+44	; 0x2c
    447e:	98 17       	cp	r25, r24
    4480:	08 f4       	brcc	.+2      	; 0x4484 <ArrivalButton+0x24c>
    4482:	74 cf       	rjmp	.-280    	; 0x436c <ArrivalButton+0x134>
		//print password on LCD
		LCD_voidDisplayKeys(u8InputPassword, &i);
		_delay_ms(200);
	}

	for(uint8 i=0; i<u8PasswordSize; i++){
    4484:	1b a6       	std	Y+43, r1	; 0x2b
    4486:	bb c0       	rjmp	.+374    	; 0x45fe <ArrivalButton+0x3c6>
		EEPROM_voidRead(i, &u8EEPROMData[i]);
    4488:	8b a5       	ldd	r24, Y+43	; 0x2b
    448a:	88 2f       	mov	r24, r24
    448c:	90 e0       	ldi	r25, 0x00	; 0
    448e:	9c 01       	movw	r18, r24
    4490:	21 52       	subi	r18, 0x21	; 33
    4492:	3f 4f       	sbci	r19, 0xFF	; 255
    4494:	8b a5       	ldd	r24, Y+43	; 0x2b
    4496:	b9 01       	movw	r22, r18
    4498:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <EEPROM_voidRead>
		u8Error = PASS_u8ComparePassword(u8EEPROMData[i], u8InputPassword[i]);
    449c:	8b a5       	ldd	r24, Y+43	; 0x2b
    449e:	88 2f       	mov	r24, r24
    44a0:	90 e0       	ldi	r25, 0x00	; 0
    44a2:	fc 01       	movw	r30, r24
    44a4:	e1 52       	subi	r30, 0x21	; 33
    44a6:	ff 4f       	sbci	r31, 0xFF	; 255
    44a8:	20 81       	ld	r18, Z
    44aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    44ac:	88 2f       	mov	r24, r24
    44ae:	90 e0       	ldi	r25, 0x00	; 0
    44b0:	fc 01       	movw	r30, r24
    44b2:	e7 52       	subi	r30, 0x27	; 39
    44b4:	ff 4f       	sbci	r31, 0xFF	; 255
    44b6:	90 81       	ld	r25, Z
    44b8:	82 2f       	mov	r24, r18
    44ba:	69 2f       	mov	r22, r25
    44bc:	0e 94 ee 06 	call	0xddc	; 0xddc <PASS_u8ComparePassword>
    44c0:	80 93 de 00 	sts	0x00DE, r24

		//if password is correct
		if(u8Error == 0){
    44c4:	80 91 de 00 	lds	r24, 0x00DE
    44c8:	88 23       	and	r24, r24
    44ca:	a9 f4       	brne	.+42     	; 0x44f6 <ArrivalButton+0x2be>
			//90 degrees to servo (open the door) using PWM
			//light the 5 LEDs ON
			DIO_voidWritePin(PORT_B, DIO_PIN_NUM_B0, DIO_LOW);
    44cc:	82 e0       	ldi	r24, 0x02	; 2
    44ce:	60 e0       	ldi	r22, 0x00	; 0
    44d0:	40 e0       	ldi	r20, 0x00	; 0
    44d2:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
			LCD_voidSendCommand_4bitMode(lcd_Clear);
    44d6:	81 e0       	ldi	r24, 0x01	; 1
    44d8:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_voidSendCommand_4bitMode>
			LCD_voidGotoxy_4bitMode(0, LineOne);
    44dc:	80 e0       	ldi	r24, 0x00	; 0
    44de:	61 e0       	ldi	r22, 0x01	; 1
    44e0:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <LCD_voidGotoxy_4bitMode>
			LCD_voidWriteString_4bitMode("correct", 7);
    44e4:	82 e9       	ldi	r24, 0x92	; 146
    44e6:	90 e0       	ldi	r25, 0x00	; 0
    44e8:	67 e0       	ldi	r22, 0x07	; 7
    44ea:	0e 94 90 16 	call	0x2d20	; 0x2d20 <LCD_voidWriteString_4bitMode>
		//print password on LCD
		LCD_voidDisplayKeys(u8InputPassword, &i);
		_delay_ms(200);
	}

	for(uint8 i=0; i<u8PasswordSize; i++){
    44ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    44f0:	8f 5f       	subi	r24, 0xFF	; 255
    44f2:	8b a7       	std	Y+43, r24	; 0x2b
    44f4:	84 c0       	rjmp	.+264    	; 0x45fe <ArrivalButton+0x3c6>
			//enable master SPI
			//-------------Arduino stuff----------------
			// start counting no. of trials on the 7SEG
			//if no. of trials exceeded 3
			//turn the siren ON (buzzer)
			DIO_voidWritePin(PORT_B, DIO_PIN_NUM_B0, DIO_HIGH);
    44f6:	82 e0       	ldi	r24, 0x02	; 2
    44f8:	60 e0       	ldi	r22, 0x00	; 0
    44fa:	41 e0       	ldi	r20, 0x01	; 1
    44fc:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
			LCD_voidSendCommand_4bitMode(lcd_Clear);
    4500:	81 e0       	ldi	r24, 0x01	; 1
    4502:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_voidSendCommand_4bitMode>
			LCD_voidGotoxy_4bitMode(0, LineOne);
    4506:	80 e0       	ldi	r24, 0x00	; 0
    4508:	61 e0       	ldi	r22, 0x01	; 1
    450a:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <LCD_voidGotoxy_4bitMode>
			LCD_voidWriteString_4bitMode("Wrong! Try Again", 16);
    450e:	8a e9       	ldi	r24, 0x9A	; 154
    4510:	90 e0       	ldi	r25, 0x00	; 0
    4512:	60 e1       	ldi	r22, 0x10	; 16
    4514:	0e 94 90 16 	call	0x2d20	; 0x2d20 <LCD_voidWriteString_4bitMode>
    4518:	80 e0       	ldi	r24, 0x00	; 0
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	aa e7       	ldi	r26, 0x7A	; 122
    451e:	b4 e4       	ldi	r27, 0x44	; 68
    4520:	8b 87       	std	Y+11, r24	; 0x0b
    4522:	9c 87       	std	Y+12, r25	; 0x0c
    4524:	ad 87       	std	Y+13, r26	; 0x0d
    4526:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4528:	6b 85       	ldd	r22, Y+11	; 0x0b
    452a:	7c 85       	ldd	r23, Y+12	; 0x0c
    452c:	8d 85       	ldd	r24, Y+13	; 0x0d
    452e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4530:	20 e0       	ldi	r18, 0x00	; 0
    4532:	30 e0       	ldi	r19, 0x00	; 0
    4534:	4a ef       	ldi	r20, 0xFA	; 250
    4536:	54 e4       	ldi	r21, 0x44	; 68
    4538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    453c:	dc 01       	movw	r26, r24
    453e:	cb 01       	movw	r24, r22
    4540:	8f 83       	std	Y+7, r24	; 0x07
    4542:	98 87       	std	Y+8, r25	; 0x08
    4544:	a9 87       	std	Y+9, r26	; 0x09
    4546:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4548:	6f 81       	ldd	r22, Y+7	; 0x07
    454a:	78 85       	ldd	r23, Y+8	; 0x08
    454c:	89 85       	ldd	r24, Y+9	; 0x09
    454e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4550:	20 e0       	ldi	r18, 0x00	; 0
    4552:	30 e0       	ldi	r19, 0x00	; 0
    4554:	40 e8       	ldi	r20, 0x80	; 128
    4556:	5f e3       	ldi	r21, 0x3F	; 63
    4558:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    455c:	88 23       	and	r24, r24
    455e:	2c f4       	brge	.+10     	; 0x456a <ArrivalButton+0x332>
		__ticks = 1;
    4560:	81 e0       	ldi	r24, 0x01	; 1
    4562:	90 e0       	ldi	r25, 0x00	; 0
    4564:	9e 83       	std	Y+6, r25	; 0x06
    4566:	8d 83       	std	Y+5, r24	; 0x05
    4568:	3f c0       	rjmp	.+126    	; 0x45e8 <ArrivalButton+0x3b0>
	else if (__tmp > 65535)
    456a:	6f 81       	ldd	r22, Y+7	; 0x07
    456c:	78 85       	ldd	r23, Y+8	; 0x08
    456e:	89 85       	ldd	r24, Y+9	; 0x09
    4570:	9a 85       	ldd	r25, Y+10	; 0x0a
    4572:	20 e0       	ldi	r18, 0x00	; 0
    4574:	3f ef       	ldi	r19, 0xFF	; 255
    4576:	4f e7       	ldi	r20, 0x7F	; 127
    4578:	57 e4       	ldi	r21, 0x47	; 71
    457a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    457e:	18 16       	cp	r1, r24
    4580:	4c f5       	brge	.+82     	; 0x45d4 <ArrivalButton+0x39c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4582:	6b 85       	ldd	r22, Y+11	; 0x0b
    4584:	7c 85       	ldd	r23, Y+12	; 0x0c
    4586:	8d 85       	ldd	r24, Y+13	; 0x0d
    4588:	9e 85       	ldd	r25, Y+14	; 0x0e
    458a:	20 e0       	ldi	r18, 0x00	; 0
    458c:	30 e0       	ldi	r19, 0x00	; 0
    458e:	40 e2       	ldi	r20, 0x20	; 32
    4590:	51 e4       	ldi	r21, 0x41	; 65
    4592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4596:	dc 01       	movw	r26, r24
    4598:	cb 01       	movw	r24, r22
    459a:	bc 01       	movw	r22, r24
    459c:	cd 01       	movw	r24, r26
    459e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45a2:	dc 01       	movw	r26, r24
    45a4:	cb 01       	movw	r24, r22
    45a6:	9e 83       	std	Y+6, r25	; 0x06
    45a8:	8d 83       	std	Y+5, r24	; 0x05
    45aa:	0f c0       	rjmp	.+30     	; 0x45ca <ArrivalButton+0x392>
    45ac:	88 ec       	ldi	r24, 0xC8	; 200
    45ae:	90 e0       	ldi	r25, 0x00	; 0
    45b0:	9c 83       	std	Y+4, r25	; 0x04
    45b2:	8b 83       	std	Y+3, r24	; 0x03
    45b4:	8b 81       	ldd	r24, Y+3	; 0x03
    45b6:	9c 81       	ldd	r25, Y+4	; 0x04
    45b8:	01 97       	sbiw	r24, 0x01	; 1
    45ba:	f1 f7       	brne	.-4      	; 0x45b8 <ArrivalButton+0x380>
    45bc:	9c 83       	std	Y+4, r25	; 0x04
    45be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45c0:	8d 81       	ldd	r24, Y+5	; 0x05
    45c2:	9e 81       	ldd	r25, Y+6	; 0x06
    45c4:	01 97       	sbiw	r24, 0x01	; 1
    45c6:	9e 83       	std	Y+6, r25	; 0x06
    45c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45ca:	8d 81       	ldd	r24, Y+5	; 0x05
    45cc:	9e 81       	ldd	r25, Y+6	; 0x06
    45ce:	00 97       	sbiw	r24, 0x00	; 0
    45d0:	69 f7       	brne	.-38     	; 0x45ac <ArrivalButton+0x374>
    45d2:	1a c0       	rjmp	.+52     	; 0x4608 <ArrivalButton+0x3d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45d4:	6f 81       	ldd	r22, Y+7	; 0x07
    45d6:	78 85       	ldd	r23, Y+8	; 0x08
    45d8:	89 85       	ldd	r24, Y+9	; 0x09
    45da:	9a 85       	ldd	r25, Y+10	; 0x0a
    45dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45e0:	dc 01       	movw	r26, r24
    45e2:	cb 01       	movw	r24, r22
    45e4:	9e 83       	std	Y+6, r25	; 0x06
    45e6:	8d 83       	std	Y+5, r24	; 0x05
    45e8:	8d 81       	ldd	r24, Y+5	; 0x05
    45ea:	9e 81       	ldd	r25, Y+6	; 0x06
    45ec:	9a 83       	std	Y+2, r25	; 0x02
    45ee:	89 83       	std	Y+1, r24	; 0x01
    45f0:	89 81       	ldd	r24, Y+1	; 0x01
    45f2:	9a 81       	ldd	r25, Y+2	; 0x02
    45f4:	01 97       	sbiw	r24, 0x01	; 1
    45f6:	f1 f7       	brne	.-4      	; 0x45f4 <ArrivalButton+0x3bc>
    45f8:	9a 83       	std	Y+2, r25	; 0x02
    45fa:	89 83       	std	Y+1, r24	; 0x01
    45fc:	05 c0       	rjmp	.+10     	; 0x4608 <ArrivalButton+0x3d0>
		//print password on LCD
		LCD_voidDisplayKeys(u8InputPassword, &i);
		_delay_ms(200);
	}

	for(uint8 i=0; i<u8PasswordSize; i++){
    45fe:	9b a5       	ldd	r25, Y+43	; 0x2b
    4600:	8c a5       	ldd	r24, Y+44	; 0x2c
    4602:	98 17       	cp	r25, r24
    4604:	08 f4       	brcc	.+2      	; 0x4608 <ArrivalButton+0x3d0>
    4606:	40 cf       	rjmp	.-384    	; 0x4488 <ArrivalButton+0x250>
			LCD_voidWriteString_4bitMode("Wrong! Try Again", 16);
			_delay_ms(1000);
			break;
		}
	}
}
    4608:	ad 96       	adiw	r28, 0x2d	; 45
    460a:	0f b6       	in	r0, 0x3f	; 63
    460c:	f8 94       	cli
    460e:	de bf       	out	0x3e, r29	; 62
    4610:	0f be       	out	0x3f, r0	; 63
    4612:	cd bf       	out	0x3d, r28	; 61
    4614:	cf 91       	pop	r28
    4616:	df 91       	pop	r29
    4618:	1f 91       	pop	r17
    461a:	0f 91       	pop	r16
    461c:	08 95       	ret

0000461e <EntranceButton>:
void EntranceButton(void){
    461e:	df 93       	push	r29
    4620:	cf 93       	push	r28
    4622:	cd b7       	in	r28, 0x3d	; 61
    4624:	de b7       	in	r29, 0x3e	; 62
    4626:	2e 97       	sbiw	r28, 0x0e	; 14
    4628:	0f b6       	in	r0, 0x3f	; 63
    462a:	f8 94       	cli
    462c:	de bf       	out	0x3e, r29	; 62
    462e:	0f be       	out	0x3f, r0	; 63
    4630:	cd bf       	out	0x3d, r28	; 61
	DIO_voidWritePin(PORT_B, DIO_PIN_NUM_B3, DIO_HIGH);
    4632:	82 e0       	ldi	r24, 0x02	; 2
    4634:	63 e0       	ldi	r22, 0x03	; 3
    4636:	41 e0       	ldi	r20, 0x01	; 1
    4638:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <DIO_voidWritePin>
    463c:	80 e0       	ldi	r24, 0x00	; 0
    463e:	90 e0       	ldi	r25, 0x00	; 0
    4640:	aa ef       	ldi	r26, 0xFA	; 250
    4642:	b3 e4       	ldi	r27, 0x43	; 67
    4644:	8b 87       	std	Y+11, r24	; 0x0b
    4646:	9c 87       	std	Y+12, r25	; 0x0c
    4648:	ad 87       	std	Y+13, r26	; 0x0d
    464a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    464c:	6b 85       	ldd	r22, Y+11	; 0x0b
    464e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4650:	8d 85       	ldd	r24, Y+13	; 0x0d
    4652:	9e 85       	ldd	r25, Y+14	; 0x0e
    4654:	20 e0       	ldi	r18, 0x00	; 0
    4656:	30 e0       	ldi	r19, 0x00	; 0
    4658:	4a ef       	ldi	r20, 0xFA	; 250
    465a:	54 e4       	ldi	r21, 0x44	; 68
    465c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4660:	dc 01       	movw	r26, r24
    4662:	cb 01       	movw	r24, r22
    4664:	8f 83       	std	Y+7, r24	; 0x07
    4666:	98 87       	std	Y+8, r25	; 0x08
    4668:	a9 87       	std	Y+9, r26	; 0x09
    466a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    466c:	6f 81       	ldd	r22, Y+7	; 0x07
    466e:	78 85       	ldd	r23, Y+8	; 0x08
    4670:	89 85       	ldd	r24, Y+9	; 0x09
    4672:	9a 85       	ldd	r25, Y+10	; 0x0a
    4674:	20 e0       	ldi	r18, 0x00	; 0
    4676:	30 e0       	ldi	r19, 0x00	; 0
    4678:	40 e8       	ldi	r20, 0x80	; 128
    467a:	5f e3       	ldi	r21, 0x3F	; 63
    467c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4680:	88 23       	and	r24, r24
    4682:	2c f4       	brge	.+10     	; 0x468e <EntranceButton+0x70>
		__ticks = 1;
    4684:	81 e0       	ldi	r24, 0x01	; 1
    4686:	90 e0       	ldi	r25, 0x00	; 0
    4688:	9e 83       	std	Y+6, r25	; 0x06
    468a:	8d 83       	std	Y+5, r24	; 0x05
    468c:	3f c0       	rjmp	.+126    	; 0x470c <EntranceButton+0xee>
	else if (__tmp > 65535)
    468e:	6f 81       	ldd	r22, Y+7	; 0x07
    4690:	78 85       	ldd	r23, Y+8	; 0x08
    4692:	89 85       	ldd	r24, Y+9	; 0x09
    4694:	9a 85       	ldd	r25, Y+10	; 0x0a
    4696:	20 e0       	ldi	r18, 0x00	; 0
    4698:	3f ef       	ldi	r19, 0xFF	; 255
    469a:	4f e7       	ldi	r20, 0x7F	; 127
    469c:	57 e4       	ldi	r21, 0x47	; 71
    469e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46a2:	18 16       	cp	r1, r24
    46a4:	4c f5       	brge	.+82     	; 0x46f8 <EntranceButton+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    46a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    46aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    46ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    46ae:	20 e0       	ldi	r18, 0x00	; 0
    46b0:	30 e0       	ldi	r19, 0x00	; 0
    46b2:	40 e2       	ldi	r20, 0x20	; 32
    46b4:	51 e4       	ldi	r21, 0x41	; 65
    46b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46ba:	dc 01       	movw	r26, r24
    46bc:	cb 01       	movw	r24, r22
    46be:	bc 01       	movw	r22, r24
    46c0:	cd 01       	movw	r24, r26
    46c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46c6:	dc 01       	movw	r26, r24
    46c8:	cb 01       	movw	r24, r22
    46ca:	9e 83       	std	Y+6, r25	; 0x06
    46cc:	8d 83       	std	Y+5, r24	; 0x05
    46ce:	0f c0       	rjmp	.+30     	; 0x46ee <EntranceButton+0xd0>
    46d0:	88 ec       	ldi	r24, 0xC8	; 200
    46d2:	90 e0       	ldi	r25, 0x00	; 0
    46d4:	9c 83       	std	Y+4, r25	; 0x04
    46d6:	8b 83       	std	Y+3, r24	; 0x03
    46d8:	8b 81       	ldd	r24, Y+3	; 0x03
    46da:	9c 81       	ldd	r25, Y+4	; 0x04
    46dc:	01 97       	sbiw	r24, 0x01	; 1
    46de:	f1 f7       	brne	.-4      	; 0x46dc <EntranceButton+0xbe>
    46e0:	9c 83       	std	Y+4, r25	; 0x04
    46e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46e4:	8d 81       	ldd	r24, Y+5	; 0x05
    46e6:	9e 81       	ldd	r25, Y+6	; 0x06
    46e8:	01 97       	sbiw	r24, 0x01	; 1
    46ea:	9e 83       	std	Y+6, r25	; 0x06
    46ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46ee:	8d 81       	ldd	r24, Y+5	; 0x05
    46f0:	9e 81       	ldd	r25, Y+6	; 0x06
    46f2:	00 97       	sbiw	r24, 0x00	; 0
    46f4:	69 f7       	brne	.-38     	; 0x46d0 <EntranceButton+0xb2>
    46f6:	14 c0       	rjmp	.+40     	; 0x4720 <EntranceButton+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46f8:	6f 81       	ldd	r22, Y+7	; 0x07
    46fa:	78 85       	ldd	r23, Y+8	; 0x08
    46fc:	89 85       	ldd	r24, Y+9	; 0x09
    46fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4704:	dc 01       	movw	r26, r24
    4706:	cb 01       	movw	r24, r22
    4708:	9e 83       	std	Y+6, r25	; 0x06
    470a:	8d 83       	std	Y+5, r24	; 0x05
    470c:	8d 81       	ldd	r24, Y+5	; 0x05
    470e:	9e 81       	ldd	r25, Y+6	; 0x06
    4710:	9a 83       	std	Y+2, r25	; 0x02
    4712:	89 83       	std	Y+1, r24	; 0x01
    4714:	89 81       	ldd	r24, Y+1	; 0x01
    4716:	9a 81       	ldd	r25, Y+2	; 0x02
    4718:	01 97       	sbiw	r24, 0x01	; 1
    471a:	f1 f7       	brne	.-4      	; 0x4718 <EntranceButton+0xfa>
    471c:	9a 83       	std	Y+2, r25	; 0x02
    471e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    4720:	2e 96       	adiw	r28, 0x0e	; 14
    4722:	0f b6       	in	r0, 0x3f	; 63
    4724:	f8 94       	cli
    4726:	de bf       	out	0x3e, r29	; 62
    4728:	0f be       	out	0x3f, r0	; 63
    472a:	cd bf       	out	0x3d, r28	; 61
    472c:	cf 91       	pop	r28
    472e:	df 91       	pop	r29
    4730:	08 95       	ret

00004732 <__prologue_saves__>:
    4732:	2f 92       	push	r2
    4734:	3f 92       	push	r3
    4736:	4f 92       	push	r4
    4738:	5f 92       	push	r5
    473a:	6f 92       	push	r6
    473c:	7f 92       	push	r7
    473e:	8f 92       	push	r8
    4740:	9f 92       	push	r9
    4742:	af 92       	push	r10
    4744:	bf 92       	push	r11
    4746:	cf 92       	push	r12
    4748:	df 92       	push	r13
    474a:	ef 92       	push	r14
    474c:	ff 92       	push	r15
    474e:	0f 93       	push	r16
    4750:	1f 93       	push	r17
    4752:	cf 93       	push	r28
    4754:	df 93       	push	r29
    4756:	cd b7       	in	r28, 0x3d	; 61
    4758:	de b7       	in	r29, 0x3e	; 62
    475a:	ca 1b       	sub	r28, r26
    475c:	db 0b       	sbc	r29, r27
    475e:	0f b6       	in	r0, 0x3f	; 63
    4760:	f8 94       	cli
    4762:	de bf       	out	0x3e, r29	; 62
    4764:	0f be       	out	0x3f, r0	; 63
    4766:	cd bf       	out	0x3d, r28	; 61
    4768:	09 94       	ijmp

0000476a <__epilogue_restores__>:
    476a:	2a 88       	ldd	r2, Y+18	; 0x12
    476c:	39 88       	ldd	r3, Y+17	; 0x11
    476e:	48 88       	ldd	r4, Y+16	; 0x10
    4770:	5f 84       	ldd	r5, Y+15	; 0x0f
    4772:	6e 84       	ldd	r6, Y+14	; 0x0e
    4774:	7d 84       	ldd	r7, Y+13	; 0x0d
    4776:	8c 84       	ldd	r8, Y+12	; 0x0c
    4778:	9b 84       	ldd	r9, Y+11	; 0x0b
    477a:	aa 84       	ldd	r10, Y+10	; 0x0a
    477c:	b9 84       	ldd	r11, Y+9	; 0x09
    477e:	c8 84       	ldd	r12, Y+8	; 0x08
    4780:	df 80       	ldd	r13, Y+7	; 0x07
    4782:	ee 80       	ldd	r14, Y+6	; 0x06
    4784:	fd 80       	ldd	r15, Y+5	; 0x05
    4786:	0c 81       	ldd	r16, Y+4	; 0x04
    4788:	1b 81       	ldd	r17, Y+3	; 0x03
    478a:	aa 81       	ldd	r26, Y+2	; 0x02
    478c:	b9 81       	ldd	r27, Y+1	; 0x01
    478e:	ce 0f       	add	r28, r30
    4790:	d1 1d       	adc	r29, r1
    4792:	0f b6       	in	r0, 0x3f	; 63
    4794:	f8 94       	cli
    4796:	de bf       	out	0x3e, r29	; 62
    4798:	0f be       	out	0x3f, r0	; 63
    479a:	cd bf       	out	0x3d, r28	; 61
    479c:	ed 01       	movw	r28, r26
    479e:	08 95       	ret

000047a0 <_exit>:
    47a0:	f8 94       	cli

000047a2 <__stop_program>:
    47a2:	ff cf       	rjmp	.-2      	; 0x47a2 <__stop_program>
