
AVR_Final_Project_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00003d26  00003dba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080008c  0080008c  00003de6  2**0
                  ALLOC
  3 .stab         0000339c  00000000  00000000  00003de8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ff6  00000000  00000000  00007184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000817a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000082da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008469  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a4ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b5af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c534  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c6b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000c976  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8f 19 	jmp	0x331e	; 0x331e <__vector_1>
       8:	0c 94 bc 19 	jmp	0x3378	; 0x3378 <__vector_2>
       c:	0c 94 e9 19 	jmp	0x33d2	; 0x33d2 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <main>
      8a:	0c 94 91 1e 	jmp	0x3d22	; 0x3d22 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5a 1e 	jmp	0x3cb4	; 0x3cb4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 76 1e 	jmp	0x3cec	; 0x3cec <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 82 1e 	jmp	0x3d04	; 0x3d04 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 82 1e 	jmp	0x3d04	; 0x3d04 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5a 1e 	jmp	0x3cb4	; 0x3cb4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 76 1e 	jmp	0x3cec	; 0x3cec <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 62 1e 	jmp	0x3cc4	; 0x3cc4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 7e 1e 	jmp	0x3cfc	; 0x3cfc <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 82 1e 	jmp	0x3d04	; 0x3d04 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 82 1e 	jmp	0x3d04	; 0x3d04 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 82 1e 	jmp	0x3d04	; 0x3d04 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 6a 1e 	jmp	0x3cd4	; 0x3cd4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 86 1e 	jmp	0x3d0c	; 0x3d0c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <SPI_voidMasterInit>:
#include "SPI_interface.h"
#include "SPI_private.h"
#include "SPI_config.h"


void SPI_voidMasterInit(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	/******Select data order*******/						  // default
	CLR_BIT(SPCR, SPCR_DORD);
     ca6:	ad e2       	ldi	r26, 0x2D	; 45
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	ed e2       	ldi	r30, 0x2D	; 45
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8f 7d       	andi	r24, 0xDF	; 223
     cb2:	8c 93       	st	X, r24
	/******Select master******/
	SET_BIT(SPCR, SPCR_MSTR);
     cb4:	ad e2       	ldi	r26, 0x2D	; 45
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	ed e2       	ldi	r30, 0x2D	; 45
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 61       	ori	r24, 0x10	; 16
     cc0:	8c 93       	st	X, r24
	/******Clock Polarity -> leading edge -> rising ******/	  // default
	CLR_BIT(SPCR, SPCR_CPOL);
     cc2:	ad e2       	ldi	r26, 0x2D	; 45
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	ed e2       	ldi	r30, 0x2D	; 45
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	87 7f       	andi	r24, 0xF7	; 247
     cce:	8c 93       	st	X, r24
	/******Clock Phase    -> sample first ******/			  // default
	CLR_BIT(SPCR, SPCR_CPHA);
     cd0:	ad e2       	ldi	r26, 0x2D	; 45
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	ed e2       	ldi	r30, 0x2D	; 45
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8b 7f       	andi	r24, 0xFB	; 251
     cdc:	8c 93       	st	X, r24
	/******Select SPI clock rate******/
	SET_BIT(SPCR, SPCR_SPR0);
     cde:	ad e2       	ldi	r26, 0x2D	; 45
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	ed e2       	ldi	r30, 0x2D	; 45
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	81 60       	ori	r24, 0x01	; 1
     cea:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPCR_SPR1);
     cec:	ad e2       	ldi	r26, 0x2D	; 45
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	ed e2       	ldi	r30, 0x2D	; 45
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	8d 7f       	andi	r24, 0xFD	; 253
     cf8:	8c 93       	st	X, r24
	CLR_BIT(SPSR, SPSR_SPI2X);
     cfa:	ae e2       	ldi	r26, 0x2E	; 46
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	ee e2       	ldi	r30, 0x2E	; 46
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8e 7f       	andi	r24, 0xFE	; 254
     d06:	8c 93       	st	X, r24

	/******Enable SPI******/
	SET_BIT(SPCR, SPCR_SPE);
     d08:	ad e2       	ldi	r26, 0x2D	; 45
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	ed e2       	ldi	r30, 0x2D	; 45
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 64       	ori	r24, 0x40	; 64
     d14:	8c 93       	st	X, r24
}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <SPI_voidSlaveInit>:
void SPI_voidSlaveInit(void){
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
	/******Select data order******/
	CLR_BIT(SPCR, SPCR_DORD);								  // default
     d24:	ad e2       	ldi	r26, 0x2D	; 45
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	ed e2       	ldi	r30, 0x2D	; 45
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	8f 7d       	andi	r24, 0xDF	; 223
     d30:	8c 93       	st	X, r24
	/******Select slave******/
	CLR_BIT(SPCR, SPCR_MSTR);
     d32:	ad e2       	ldi	r26, 0x2D	; 45
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	ed e2       	ldi	r30, 0x2D	; 45
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	8f 7e       	andi	r24, 0xEF	; 239
     d3e:	8c 93       	st	X, r24
	/******Clock Polarity -> leading edge -> rising ******/   // default
	CLR_BIT(SPCR, SPCR_CPOL);
     d40:	ad e2       	ldi	r26, 0x2D	; 45
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	ed e2       	ldi	r30, 0x2D	; 45
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	87 7f       	andi	r24, 0xF7	; 247
     d4c:	8c 93       	st	X, r24
	/******Clock Phase    -> sample first ******/             // default
	CLR_BIT(SPCR, SPCR_CPHA);
     d4e:	ad e2       	ldi	r26, 0x2D	; 45
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	ed e2       	ldi	r30, 0x2D	; 45
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	8b 7f       	andi	r24, 0xFB	; 251
     d5a:	8c 93       	st	X, r24

	/******Enable SPI******/
	SET_BIT(SPCR, SPCR_SPE);
     d5c:	ad e2       	ldi	r26, 0x2D	; 45
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	ed e2       	ldi	r30, 0x2D	; 45
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	80 64       	ori	r24, 0x40	; 64
     d68:	8c 93       	st	X, r24
}
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <SPI_u8TransceiverDataSynch>:

uint8 SPI_u8TransceiverDataSynch(uint8 u8DataCpy){
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	0f 92       	push	r0
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	89 83       	std	Y+1, r24	; 0x01
	/*****Send Data****/
	SPDR = u8DataCpy;
     d7c:	ef e2       	ldi	r30, 0x2F	; 47
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	80 83       	st	Z, r24
	/*****wait until data received****/
	while(GET_BIT(SPSR, SPSR_SPIF)==0);
     d84:	ee e2       	ldi	r30, 0x2E	; 46
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	88 23       	and	r24, r24
     d8c:	dc f7       	brge	.-10     	; 0xd84 <SPI_u8TransceiverDataSynch+0x14>

	return SPDR;
     d8e:	ef e2       	ldi	r30, 0x2F	; 47
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
}
     d94:	0f 90       	pop	r0
     d96:	cf 91       	pop	r28
     d98:	df 91       	pop	r29
     d9a:	08 95       	ret

00000d9c <LCD_voidInit>:
#include "../DIO/DIO_interface.h"
#include "LCD_interface.h"
//#include "../Password/Password_interface.h"
#include "util/delay.h"

void LCD_voidInit(void){
     d9c:	0f 93       	push	r16
     d9e:	1f 93       	push	r17
     da0:	df 93       	push	r29
     da2:	cf 93       	push	r28
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
     da8:	c4 55       	subi	r28, 0x54	; 84
     daa:	d0 40       	sbci	r29, 0x00	; 0
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	cd bf       	out	0x3d, r28	; 61
	/* Pin Direction*/
	DIO_voidWritePort(lcd_DATAPORT   , DIO_OUTPUT);
     db6:	84 e0       	ldi	r24, 0x04	; 4
     db8:	61 e0       	ldi	r22, 0x01	; 1
     dba:	0e 94 33 1c 	call	0x3866	; 0x3866 <DIO_voidWritePort>
	DIO_voidWritePin (lcd_CONTROLPORT, lcd_RSPIN, DIO_OUTPUT);
     dbe:	83 e0       	ldi	r24, 0x03	; 3
     dc0:	62 e0       	ldi	r22, 0x02	; 2
     dc2:	41 e0       	ldi	r20, 0x01	; 1
     dc4:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>
	//DIO_voidWritePin (lcd_CONTROLPORT, lcd_RWPIN, DIO_OUTPUT);
	DIO_voidWritePin (lcd_CONTROLPORT, lcd_EPIN , DIO_OUTPUT);
     dc8:	83 e0       	ldi	r24, 0x03	; 3
     dca:	63 e0       	ldi	r22, 0x03	; 3
     dcc:	41 e0       	ldi	r20, 0x01	; 1
     dce:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>
	/* Make Enable Low*/
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
     dd2:	83 e0       	ldi	r24, 0x03	; 3
     dd4:	63 e0       	ldi	r22, 0x03	; 3
     dd6:	40 e0       	ldi	r20, 0x00	; 0
     dd8:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>
     ddc:	fe 01       	movw	r30, r28
     dde:	ef 5a       	subi	r30, 0xAF	; 175
     de0:	ff 4f       	sbci	r31, 0xFF	; 255
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	a0 ef       	ldi	r26, 0xF0	; 240
     de8:	b1 e4       	ldi	r27, 0x41	; 65
     dea:	80 83       	st	Z, r24
     dec:	91 83       	std	Z+1, r25	; 0x01
     dee:	a2 83       	std	Z+2, r26	; 0x02
     df0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     df2:	8e 01       	movw	r16, r28
     df4:	03 5b       	subi	r16, 0xB3	; 179
     df6:	1f 4f       	sbci	r17, 0xFF	; 255
     df8:	fe 01       	movw	r30, r28
     dfa:	ef 5a       	subi	r30, 0xAF	; 175
     dfc:	ff 4f       	sbci	r31, 0xFF	; 255
     dfe:	60 81       	ld	r22, Z
     e00:	71 81       	ldd	r23, Z+1	; 0x01
     e02:	82 81       	ldd	r24, Z+2	; 0x02
     e04:	93 81       	ldd	r25, Z+3	; 0x03
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	4a ef       	ldi	r20, 0xFA	; 250
     e0c:	54 e4       	ldi	r21, 0x44	; 68
     e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e12:	dc 01       	movw	r26, r24
     e14:	cb 01       	movw	r24, r22
     e16:	f8 01       	movw	r30, r16
     e18:	80 83       	st	Z, r24
     e1a:	91 83       	std	Z+1, r25	; 0x01
     e1c:	a2 83       	std	Z+2, r26	; 0x02
     e1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e20:	fe 01       	movw	r30, r28
     e22:	e3 5b       	subi	r30, 0xB3	; 179
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	60 81       	ld	r22, Z
     e28:	71 81       	ldd	r23, Z+1	; 0x01
     e2a:	82 81       	ldd	r24, Z+2	; 0x02
     e2c:	93 81       	ldd	r25, Z+3	; 0x03
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	40 e8       	ldi	r20, 0x80	; 128
     e34:	5f e3       	ldi	r21, 0x3F	; 63
     e36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e3a:	88 23       	and	r24, r24
     e3c:	44 f4       	brge	.+16     	; 0xe4e <LCD_voidInit+0xb2>
		__ticks = 1;
     e3e:	fe 01       	movw	r30, r28
     e40:	e5 5b       	subi	r30, 0xB5	; 181
     e42:	ff 4f       	sbci	r31, 0xFF	; 255
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	91 83       	std	Z+1, r25	; 0x01
     e4a:	80 83       	st	Z, r24
     e4c:	64 c0       	rjmp	.+200    	; 0xf16 <LCD_voidInit+0x17a>
	else if (__tmp > 65535)
     e4e:	fe 01       	movw	r30, r28
     e50:	e3 5b       	subi	r30, 0xB3	; 179
     e52:	ff 4f       	sbci	r31, 0xFF	; 255
     e54:	60 81       	ld	r22, Z
     e56:	71 81       	ldd	r23, Z+1	; 0x01
     e58:	82 81       	ldd	r24, Z+2	; 0x02
     e5a:	93 81       	ldd	r25, Z+3	; 0x03
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	3f ef       	ldi	r19, 0xFF	; 255
     e60:	4f e7       	ldi	r20, 0x7F	; 127
     e62:	57 e4       	ldi	r21, 0x47	; 71
     e64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e68:	18 16       	cp	r1, r24
     e6a:	0c f0       	brlt	.+2      	; 0xe6e <LCD_voidInit+0xd2>
     e6c:	43 c0       	rjmp	.+134    	; 0xef4 <LCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e6e:	fe 01       	movw	r30, r28
     e70:	ef 5a       	subi	r30, 0xAF	; 175
     e72:	ff 4f       	sbci	r31, 0xFF	; 255
     e74:	60 81       	ld	r22, Z
     e76:	71 81       	ldd	r23, Z+1	; 0x01
     e78:	82 81       	ldd	r24, Z+2	; 0x02
     e7a:	93 81       	ldd	r25, Z+3	; 0x03
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	40 e2       	ldi	r20, 0x20	; 32
     e82:	51 e4       	ldi	r21, 0x41	; 65
     e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e88:	dc 01       	movw	r26, r24
     e8a:	cb 01       	movw	r24, r22
     e8c:	8e 01       	movw	r16, r28
     e8e:	05 5b       	subi	r16, 0xB5	; 181
     e90:	1f 4f       	sbci	r17, 0xFF	; 255
     e92:	bc 01       	movw	r22, r24
     e94:	cd 01       	movw	r24, r26
     e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	f8 01       	movw	r30, r16
     ea0:	91 83       	std	Z+1, r25	; 0x01
     ea2:	80 83       	st	Z, r24
     ea4:	1f c0       	rjmp	.+62     	; 0xee4 <LCD_voidInit+0x148>
     ea6:	fe 01       	movw	r30, r28
     ea8:	e7 5b       	subi	r30, 0xB7	; 183
     eaa:	ff 4f       	sbci	r31, 0xFF	; 255
     eac:	88 ec       	ldi	r24, 0xC8	; 200
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	91 83       	std	Z+1, r25	; 0x01
     eb2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     eb4:	fe 01       	movw	r30, r28
     eb6:	e7 5b       	subi	r30, 0xB7	; 183
     eb8:	ff 4f       	sbci	r31, 0xFF	; 255
     eba:	80 81       	ld	r24, Z
     ebc:	91 81       	ldd	r25, Z+1	; 0x01
     ebe:	01 97       	sbiw	r24, 0x01	; 1
     ec0:	f1 f7       	brne	.-4      	; 0xebe <LCD_voidInit+0x122>
     ec2:	fe 01       	movw	r30, r28
     ec4:	e7 5b       	subi	r30, 0xB7	; 183
     ec6:	ff 4f       	sbci	r31, 0xFF	; 255
     ec8:	91 83       	std	Z+1, r25	; 0x01
     eca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ecc:	de 01       	movw	r26, r28
     ece:	a5 5b       	subi	r26, 0xB5	; 181
     ed0:	bf 4f       	sbci	r27, 0xFF	; 255
     ed2:	fe 01       	movw	r30, r28
     ed4:	e5 5b       	subi	r30, 0xB5	; 181
     ed6:	ff 4f       	sbci	r31, 0xFF	; 255
     ed8:	80 81       	ld	r24, Z
     eda:	91 81       	ldd	r25, Z+1	; 0x01
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	11 96       	adiw	r26, 0x01	; 1
     ee0:	9c 93       	st	X, r25
     ee2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee4:	fe 01       	movw	r30, r28
     ee6:	e5 5b       	subi	r30, 0xB5	; 181
     ee8:	ff 4f       	sbci	r31, 0xFF	; 255
     eea:	80 81       	ld	r24, Z
     eec:	91 81       	ldd	r25, Z+1	; 0x01
     eee:	00 97       	sbiw	r24, 0x00	; 0
     ef0:	d1 f6       	brne	.-76     	; 0xea6 <LCD_voidInit+0x10a>
     ef2:	27 c0       	rjmp	.+78     	; 0xf42 <LCD_voidInit+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef4:	8e 01       	movw	r16, r28
     ef6:	05 5b       	subi	r16, 0xB5	; 181
     ef8:	1f 4f       	sbci	r17, 0xFF	; 255
     efa:	fe 01       	movw	r30, r28
     efc:	e3 5b       	subi	r30, 0xB3	; 179
     efe:	ff 4f       	sbci	r31, 0xFF	; 255
     f00:	60 81       	ld	r22, Z
     f02:	71 81       	ldd	r23, Z+1	; 0x01
     f04:	82 81       	ldd	r24, Z+2	; 0x02
     f06:	93 81       	ldd	r25, Z+3	; 0x03
     f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	f8 01       	movw	r30, r16
     f12:	91 83       	std	Z+1, r25	; 0x01
     f14:	80 83       	st	Z, r24
     f16:	de 01       	movw	r26, r28
     f18:	a9 5b       	subi	r26, 0xB9	; 185
     f1a:	bf 4f       	sbci	r27, 0xFF	; 255
     f1c:	fe 01       	movw	r30, r28
     f1e:	e5 5b       	subi	r30, 0xB5	; 181
     f20:	ff 4f       	sbci	r31, 0xFF	; 255
     f22:	80 81       	ld	r24, Z
     f24:	91 81       	ldd	r25, Z+1	; 0x01
     f26:	8d 93       	st	X+, r24
     f28:	9c 93       	st	X, r25
     f2a:	fe 01       	movw	r30, r28
     f2c:	e9 5b       	subi	r30, 0xB9	; 185
     f2e:	ff 4f       	sbci	r31, 0xFF	; 255
     f30:	80 81       	ld	r24, Z
     f32:	91 81       	ldd	r25, Z+1	; 0x01
     f34:	01 97       	sbiw	r24, 0x01	; 1
     f36:	f1 f7       	brne	.-4      	; 0xf34 <LCD_voidInit+0x198>
     f38:	fe 01       	movw	r30, r28
     f3a:	e9 5b       	subi	r30, 0xB9	; 185
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	91 83       	std	Z+1, r25	; 0x01
     f40:	80 83       	st	Z, r24

	_delay_ms(30);
	LCD_voidSendCommand(lcd_Home);
     f42:	82 e0       	ldi	r24, 0x02	; 2
     f44:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <LCD_voidSendCommand>
     f48:	fe 01       	movw	r30, r28
     f4a:	ed 5b       	subi	r30, 0xBD	; 189
     f4c:	ff 4f       	sbci	r31, 0xFF	; 255
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	a0 ea       	ldi	r26, 0xA0	; 160
     f54:	b0 e4       	ldi	r27, 0x40	; 64
     f56:	80 83       	st	Z, r24
     f58:	91 83       	std	Z+1, r25	; 0x01
     f5a:	a2 83       	std	Z+2, r26	; 0x02
     f5c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f5e:	8e 01       	movw	r16, r28
     f60:	01 5c       	subi	r16, 0xC1	; 193
     f62:	1f 4f       	sbci	r17, 0xFF	; 255
     f64:	fe 01       	movw	r30, r28
     f66:	ed 5b       	subi	r30, 0xBD	; 189
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	60 81       	ld	r22, Z
     f6c:	71 81       	ldd	r23, Z+1	; 0x01
     f6e:	82 81       	ldd	r24, Z+2	; 0x02
     f70:	93 81       	ldd	r25, Z+3	; 0x03
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	4a ef       	ldi	r20, 0xFA	; 250
     f78:	54 e4       	ldi	r21, 0x44	; 68
     f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	f8 01       	movw	r30, r16
     f84:	80 83       	st	Z, r24
     f86:	91 83       	std	Z+1, r25	; 0x01
     f88:	a2 83       	std	Z+2, r26	; 0x02
     f8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f8c:	fe 01       	movw	r30, r28
     f8e:	ff 96       	adiw	r30, 0x3f	; 63
     f90:	60 81       	ld	r22, Z
     f92:	71 81       	ldd	r23, Z+1	; 0x01
     f94:	82 81       	ldd	r24, Z+2	; 0x02
     f96:	93 81       	ldd	r25, Z+3	; 0x03
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	40 e8       	ldi	r20, 0x80	; 128
     f9e:	5f e3       	ldi	r21, 0x3F	; 63
     fa0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fa4:	88 23       	and	r24, r24
     fa6:	2c f4       	brge	.+10     	; 0xfb2 <LCD_voidInit+0x216>
		__ticks = 1;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	9e af       	std	Y+62, r25	; 0x3e
     fae:	8d af       	std	Y+61, r24	; 0x3d
     fb0:	46 c0       	rjmp	.+140    	; 0x103e <LCD_voidInit+0x2a2>
	else if (__tmp > 65535)
     fb2:	fe 01       	movw	r30, r28
     fb4:	ff 96       	adiw	r30, 0x3f	; 63
     fb6:	60 81       	ld	r22, Z
     fb8:	71 81       	ldd	r23, Z+1	; 0x01
     fba:	82 81       	ldd	r24, Z+2	; 0x02
     fbc:	93 81       	ldd	r25, Z+3	; 0x03
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	3f ef       	ldi	r19, 0xFF	; 255
     fc2:	4f e7       	ldi	r20, 0x7F	; 127
     fc4:	57 e4       	ldi	r21, 0x47	; 71
     fc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fca:	18 16       	cp	r1, r24
     fcc:	64 f5       	brge	.+88     	; 0x1026 <LCD_voidInit+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fce:	fe 01       	movw	r30, r28
     fd0:	ed 5b       	subi	r30, 0xBD	; 189
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	60 81       	ld	r22, Z
     fd6:	71 81       	ldd	r23, Z+1	; 0x01
     fd8:	82 81       	ldd	r24, Z+2	; 0x02
     fda:	93 81       	ldd	r25, Z+3	; 0x03
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	40 e2       	ldi	r20, 0x20	; 32
     fe2:	51 e4       	ldi	r21, 0x41	; 65
     fe4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe8:	dc 01       	movw	r26, r24
     fea:	cb 01       	movw	r24, r22
     fec:	bc 01       	movw	r22, r24
     fee:	cd 01       	movw	r24, r26
     ff0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	9e af       	std	Y+62, r25	; 0x3e
     ffa:	8d af       	std	Y+61, r24	; 0x3d
     ffc:	0f c0       	rjmp	.+30     	; 0x101c <LCD_voidInit+0x280>
     ffe:	88 ec       	ldi	r24, 0xC8	; 200
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	9c af       	std	Y+60, r25	; 0x3c
    1004:	8b af       	std	Y+59, r24	; 0x3b
    1006:	8b ad       	ldd	r24, Y+59	; 0x3b
    1008:	9c ad       	ldd	r25, Y+60	; 0x3c
    100a:	01 97       	sbiw	r24, 0x01	; 1
    100c:	f1 f7       	brne	.-4      	; 0x100a <LCD_voidInit+0x26e>
    100e:	9c af       	std	Y+60, r25	; 0x3c
    1010:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1012:	8d ad       	ldd	r24, Y+61	; 0x3d
    1014:	9e ad       	ldd	r25, Y+62	; 0x3e
    1016:	01 97       	sbiw	r24, 0x01	; 1
    1018:	9e af       	std	Y+62, r25	; 0x3e
    101a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101c:	8d ad       	ldd	r24, Y+61	; 0x3d
    101e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1020:	00 97       	sbiw	r24, 0x00	; 0
    1022:	69 f7       	brne	.-38     	; 0xffe <LCD_voidInit+0x262>
    1024:	16 c0       	rjmp	.+44     	; 0x1052 <LCD_voidInit+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1026:	fe 01       	movw	r30, r28
    1028:	ff 96       	adiw	r30, 0x3f	; 63
    102a:	60 81       	ld	r22, Z
    102c:	71 81       	ldd	r23, Z+1	; 0x01
    102e:	82 81       	ldd	r24, Z+2	; 0x02
    1030:	93 81       	ldd	r25, Z+3	; 0x03
    1032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	9e af       	std	Y+62, r25	; 0x3e
    103c:	8d af       	std	Y+61, r24	; 0x3d
    103e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1040:	9e ad       	ldd	r25, Y+62	; 0x3e
    1042:	9a af       	std	Y+58, r25	; 0x3a
    1044:	89 af       	std	Y+57, r24	; 0x39
    1046:	89 ad       	ldd	r24, Y+57	; 0x39
    1048:	9a ad       	ldd	r25, Y+58	; 0x3a
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	f1 f7       	brne	.-4      	; 0x104a <LCD_voidInit+0x2ae>
    104e:	9a af       	std	Y+58, r25	; 0x3a
    1050:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);
	LCD_voidSendCommand(lcd_FunctionSet8bit);
    1052:	88 e3       	ldi	r24, 0x38	; 56
    1054:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <LCD_voidSendCommand>
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	a0 ea       	ldi	r26, 0xA0	; 160
    105e:	b0 e4       	ldi	r27, 0x40	; 64
    1060:	8d ab       	std	Y+53, r24	; 0x35
    1062:	9e ab       	std	Y+54, r25	; 0x36
    1064:	af ab       	std	Y+55, r26	; 0x37
    1066:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1068:	6d a9       	ldd	r22, Y+53	; 0x35
    106a:	7e a9       	ldd	r23, Y+54	; 0x36
    106c:	8f a9       	ldd	r24, Y+55	; 0x37
    106e:	98 ad       	ldd	r25, Y+56	; 0x38
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	4a ef       	ldi	r20, 0xFA	; 250
    1076:	54 e4       	ldi	r21, 0x44	; 68
    1078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	89 ab       	std	Y+49, r24	; 0x31
    1082:	9a ab       	std	Y+50, r25	; 0x32
    1084:	ab ab       	std	Y+51, r26	; 0x33
    1086:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1088:	69 a9       	ldd	r22, Y+49	; 0x31
    108a:	7a a9       	ldd	r23, Y+50	; 0x32
    108c:	8b a9       	ldd	r24, Y+51	; 0x33
    108e:	9c a9       	ldd	r25, Y+52	; 0x34
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	40 e8       	ldi	r20, 0x80	; 128
    1096:	5f e3       	ldi	r21, 0x3F	; 63
    1098:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    109c:	88 23       	and	r24, r24
    109e:	2c f4       	brge	.+10     	; 0x10aa <LCD_voidInit+0x30e>
		__ticks = 1;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	98 ab       	std	Y+48, r25	; 0x30
    10a6:	8f a7       	std	Y+47, r24	; 0x2f
    10a8:	3f c0       	rjmp	.+126    	; 0x1128 <LCD_voidInit+0x38c>
	else if (__tmp > 65535)
    10aa:	69 a9       	ldd	r22, Y+49	; 0x31
    10ac:	7a a9       	ldd	r23, Y+50	; 0x32
    10ae:	8b a9       	ldd	r24, Y+51	; 0x33
    10b0:	9c a9       	ldd	r25, Y+52	; 0x34
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	3f ef       	ldi	r19, 0xFF	; 255
    10b6:	4f e7       	ldi	r20, 0x7F	; 127
    10b8:	57 e4       	ldi	r21, 0x47	; 71
    10ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10be:	18 16       	cp	r1, r24
    10c0:	4c f5       	brge	.+82     	; 0x1114 <LCD_voidInit+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c2:	6d a9       	ldd	r22, Y+53	; 0x35
    10c4:	7e a9       	ldd	r23, Y+54	; 0x36
    10c6:	8f a9       	ldd	r24, Y+55	; 0x37
    10c8:	98 ad       	ldd	r25, Y+56	; 0x38
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 e2       	ldi	r20, 0x20	; 32
    10d0:	51 e4       	ldi	r21, 0x41	; 65
    10d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d6:	dc 01       	movw	r26, r24
    10d8:	cb 01       	movw	r24, r22
    10da:	bc 01       	movw	r22, r24
    10dc:	cd 01       	movw	r24, r26
    10de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e2:	dc 01       	movw	r26, r24
    10e4:	cb 01       	movw	r24, r22
    10e6:	98 ab       	std	Y+48, r25	; 0x30
    10e8:	8f a7       	std	Y+47, r24	; 0x2f
    10ea:	0f c0       	rjmp	.+30     	; 0x110a <LCD_voidInit+0x36e>
    10ec:	88 ec       	ldi	r24, 0xC8	; 200
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	9e a7       	std	Y+46, r25	; 0x2e
    10f2:	8d a7       	std	Y+45, r24	; 0x2d
    10f4:	8d a5       	ldd	r24, Y+45	; 0x2d
    10f6:	9e a5       	ldd	r25, Y+46	; 0x2e
    10f8:	01 97       	sbiw	r24, 0x01	; 1
    10fa:	f1 f7       	brne	.-4      	; 0x10f8 <LCD_voidInit+0x35c>
    10fc:	9e a7       	std	Y+46, r25	; 0x2e
    10fe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1100:	8f a5       	ldd	r24, Y+47	; 0x2f
    1102:	98 a9       	ldd	r25, Y+48	; 0x30
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	98 ab       	std	Y+48, r25	; 0x30
    1108:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    110a:	8f a5       	ldd	r24, Y+47	; 0x2f
    110c:	98 a9       	ldd	r25, Y+48	; 0x30
    110e:	00 97       	sbiw	r24, 0x00	; 0
    1110:	69 f7       	brne	.-38     	; 0x10ec <LCD_voidInit+0x350>
    1112:	14 c0       	rjmp	.+40     	; 0x113c <LCD_voidInit+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1114:	69 a9       	ldd	r22, Y+49	; 0x31
    1116:	7a a9       	ldd	r23, Y+50	; 0x32
    1118:	8b a9       	ldd	r24, Y+51	; 0x33
    111a:	9c a9       	ldd	r25, Y+52	; 0x34
    111c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	98 ab       	std	Y+48, r25	; 0x30
    1126:	8f a7       	std	Y+47, r24	; 0x2f
    1128:	8f a5       	ldd	r24, Y+47	; 0x2f
    112a:	98 a9       	ldd	r25, Y+48	; 0x30
    112c:	9c a7       	std	Y+44, r25	; 0x2c
    112e:	8b a7       	std	Y+43, r24	; 0x2b
    1130:	8b a5       	ldd	r24, Y+43	; 0x2b
    1132:	9c a5       	ldd	r25, Y+44	; 0x2c
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	f1 f7       	brne	.-4      	; 0x1134 <LCD_voidInit+0x398>
    1138:	9c a7       	std	Y+44, r25	; 0x2c
    113a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	LCD_voidSendCommand(lcd_DisplayOn);
    113c:	8c e0       	ldi	r24, 0x0C	; 12
    113e:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <LCD_voidSendCommand>
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	a0 ea       	ldi	r26, 0xA0	; 160
    1148:	b0 e4       	ldi	r27, 0x40	; 64
    114a:	8f a3       	std	Y+39, r24	; 0x27
    114c:	98 a7       	std	Y+40, r25	; 0x28
    114e:	a9 a7       	std	Y+41, r26	; 0x29
    1150:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1152:	6f a1       	ldd	r22, Y+39	; 0x27
    1154:	78 a5       	ldd	r23, Y+40	; 0x28
    1156:	89 a5       	ldd	r24, Y+41	; 0x29
    1158:	9a a5       	ldd	r25, Y+42	; 0x2a
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	4a ef       	ldi	r20, 0xFA	; 250
    1160:	54 e4       	ldi	r21, 0x44	; 68
    1162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	8b a3       	std	Y+35, r24	; 0x23
    116c:	9c a3       	std	Y+36, r25	; 0x24
    116e:	ad a3       	std	Y+37, r26	; 0x25
    1170:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1172:	6b a1       	ldd	r22, Y+35	; 0x23
    1174:	7c a1       	ldd	r23, Y+36	; 0x24
    1176:	8d a1       	ldd	r24, Y+37	; 0x25
    1178:	9e a1       	ldd	r25, Y+38	; 0x26
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	40 e8       	ldi	r20, 0x80	; 128
    1180:	5f e3       	ldi	r21, 0x3F	; 63
    1182:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1186:	88 23       	and	r24, r24
    1188:	2c f4       	brge	.+10     	; 0x1194 <LCD_voidInit+0x3f8>
		__ticks = 1;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	9a a3       	std	Y+34, r25	; 0x22
    1190:	89 a3       	std	Y+33, r24	; 0x21
    1192:	3f c0       	rjmp	.+126    	; 0x1212 <LCD_voidInit+0x476>
	else if (__tmp > 65535)
    1194:	6b a1       	ldd	r22, Y+35	; 0x23
    1196:	7c a1       	ldd	r23, Y+36	; 0x24
    1198:	8d a1       	ldd	r24, Y+37	; 0x25
    119a:	9e a1       	ldd	r25, Y+38	; 0x26
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	3f ef       	ldi	r19, 0xFF	; 255
    11a0:	4f e7       	ldi	r20, 0x7F	; 127
    11a2:	57 e4       	ldi	r21, 0x47	; 71
    11a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11a8:	18 16       	cp	r1, r24
    11aa:	4c f5       	brge	.+82     	; 0x11fe <LCD_voidInit+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ac:	6f a1       	ldd	r22, Y+39	; 0x27
    11ae:	78 a5       	ldd	r23, Y+40	; 0x28
    11b0:	89 a5       	ldd	r24, Y+41	; 0x29
    11b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	40 e2       	ldi	r20, 0x20	; 32
    11ba:	51 e4       	ldi	r21, 0x41	; 65
    11bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c0:	dc 01       	movw	r26, r24
    11c2:	cb 01       	movw	r24, r22
    11c4:	bc 01       	movw	r22, r24
    11c6:	cd 01       	movw	r24, r26
    11c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11cc:	dc 01       	movw	r26, r24
    11ce:	cb 01       	movw	r24, r22
    11d0:	9a a3       	std	Y+34, r25	; 0x22
    11d2:	89 a3       	std	Y+33, r24	; 0x21
    11d4:	0f c0       	rjmp	.+30     	; 0x11f4 <LCD_voidInit+0x458>
    11d6:	88 ec       	ldi	r24, 0xC8	; 200
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	98 a3       	std	Y+32, r25	; 0x20
    11dc:	8f 8f       	std	Y+31, r24	; 0x1f
    11de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11e0:	98 a1       	ldd	r25, Y+32	; 0x20
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	f1 f7       	brne	.-4      	; 0x11e2 <LCD_voidInit+0x446>
    11e6:	98 a3       	std	Y+32, r25	; 0x20
    11e8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ea:	89 a1       	ldd	r24, Y+33	; 0x21
    11ec:	9a a1       	ldd	r25, Y+34	; 0x22
    11ee:	01 97       	sbiw	r24, 0x01	; 1
    11f0:	9a a3       	std	Y+34, r25	; 0x22
    11f2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f4:	89 a1       	ldd	r24, Y+33	; 0x21
    11f6:	9a a1       	ldd	r25, Y+34	; 0x22
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	69 f7       	brne	.-38     	; 0x11d6 <LCD_voidInit+0x43a>
    11fc:	14 c0       	rjmp	.+40     	; 0x1226 <LCD_voidInit+0x48a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11fe:	6b a1       	ldd	r22, Y+35	; 0x23
    1200:	7c a1       	ldd	r23, Y+36	; 0x24
    1202:	8d a1       	ldd	r24, Y+37	; 0x25
    1204:	9e a1       	ldd	r25, Y+38	; 0x26
    1206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    120a:	dc 01       	movw	r26, r24
    120c:	cb 01       	movw	r24, r22
    120e:	9a a3       	std	Y+34, r25	; 0x22
    1210:	89 a3       	std	Y+33, r24	; 0x21
    1212:	89 a1       	ldd	r24, Y+33	; 0x21
    1214:	9a a1       	ldd	r25, Y+34	; 0x22
    1216:	9e 8f       	std	Y+30, r25	; 0x1e
    1218:	8d 8f       	std	Y+29, r24	; 0x1d
    121a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    121c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	f1 f7       	brne	.-4      	; 0x121e <LCD_voidInit+0x482>
    1222:	9e 8f       	std	Y+30, r25	; 0x1e
    1224:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand(lcd_Clear);
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <LCD_voidSendCommand>
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	a0 ea       	ldi	r26, 0xA0	; 160
    1232:	b0 e4       	ldi	r27, 0x40	; 64
    1234:	89 8f       	std	Y+25, r24	; 0x19
    1236:	9a 8f       	std	Y+26, r25	; 0x1a
    1238:	ab 8f       	std	Y+27, r26	; 0x1b
    123a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    123c:	69 8d       	ldd	r22, Y+25	; 0x19
    123e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1240:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1242:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	4a ef       	ldi	r20, 0xFA	; 250
    124a:	54 e4       	ldi	r21, 0x44	; 68
    124c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	8d 8b       	std	Y+21, r24	; 0x15
    1256:	9e 8b       	std	Y+22, r25	; 0x16
    1258:	af 8b       	std	Y+23, r26	; 0x17
    125a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    125c:	6d 89       	ldd	r22, Y+21	; 0x15
    125e:	7e 89       	ldd	r23, Y+22	; 0x16
    1260:	8f 89       	ldd	r24, Y+23	; 0x17
    1262:	98 8d       	ldd	r25, Y+24	; 0x18
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	40 e8       	ldi	r20, 0x80	; 128
    126a:	5f e3       	ldi	r21, 0x3F	; 63
    126c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1270:	88 23       	and	r24, r24
    1272:	2c f4       	brge	.+10     	; 0x127e <LCD_voidInit+0x4e2>
		__ticks = 1;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	9c 8b       	std	Y+20, r25	; 0x14
    127a:	8b 8b       	std	Y+19, r24	; 0x13
    127c:	3f c0       	rjmp	.+126    	; 0x12fc <LCD_voidInit+0x560>
	else if (__tmp > 65535)
    127e:	6d 89       	ldd	r22, Y+21	; 0x15
    1280:	7e 89       	ldd	r23, Y+22	; 0x16
    1282:	8f 89       	ldd	r24, Y+23	; 0x17
    1284:	98 8d       	ldd	r25, Y+24	; 0x18
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	3f ef       	ldi	r19, 0xFF	; 255
    128a:	4f e7       	ldi	r20, 0x7F	; 127
    128c:	57 e4       	ldi	r21, 0x47	; 71
    128e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1292:	18 16       	cp	r1, r24
    1294:	4c f5       	brge	.+82     	; 0x12e8 <LCD_voidInit+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1296:	69 8d       	ldd	r22, Y+25	; 0x19
    1298:	7a 8d       	ldd	r23, Y+26	; 0x1a
    129a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    129c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	40 e2       	ldi	r20, 0x20	; 32
    12a4:	51 e4       	ldi	r21, 0x41	; 65
    12a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	bc 01       	movw	r22, r24
    12b0:	cd 01       	movw	r24, r26
    12b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b6:	dc 01       	movw	r26, r24
    12b8:	cb 01       	movw	r24, r22
    12ba:	9c 8b       	std	Y+20, r25	; 0x14
    12bc:	8b 8b       	std	Y+19, r24	; 0x13
    12be:	0f c0       	rjmp	.+30     	; 0x12de <LCD_voidInit+0x542>
    12c0:	88 ec       	ldi	r24, 0xC8	; 200
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	9a 8b       	std	Y+18, r25	; 0x12
    12c6:	89 8b       	std	Y+17, r24	; 0x11
    12c8:	89 89       	ldd	r24, Y+17	; 0x11
    12ca:	9a 89       	ldd	r25, Y+18	; 0x12
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	f1 f7       	brne	.-4      	; 0x12cc <LCD_voidInit+0x530>
    12d0:	9a 8b       	std	Y+18, r25	; 0x12
    12d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12d4:	8b 89       	ldd	r24, Y+19	; 0x13
    12d6:	9c 89       	ldd	r25, Y+20	; 0x14
    12d8:	01 97       	sbiw	r24, 0x01	; 1
    12da:	9c 8b       	std	Y+20, r25	; 0x14
    12dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12de:	8b 89       	ldd	r24, Y+19	; 0x13
    12e0:	9c 89       	ldd	r25, Y+20	; 0x14
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	69 f7       	brne	.-38     	; 0x12c0 <LCD_voidInit+0x524>
    12e6:	14 c0       	rjmp	.+40     	; 0x1310 <LCD_voidInit+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e8:	6d 89       	ldd	r22, Y+21	; 0x15
    12ea:	7e 89       	ldd	r23, Y+22	; 0x16
    12ec:	8f 89       	ldd	r24, Y+23	; 0x17
    12ee:	98 8d       	ldd	r25, Y+24	; 0x18
    12f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	9c 8b       	std	Y+20, r25	; 0x14
    12fa:	8b 8b       	std	Y+19, r24	; 0x13
    12fc:	8b 89       	ldd	r24, Y+19	; 0x13
    12fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1300:	98 8b       	std	Y+16, r25	; 0x10
    1302:	8f 87       	std	Y+15, r24	; 0x0f
    1304:	8f 85       	ldd	r24, Y+15	; 0x0f
    1306:	98 89       	ldd	r25, Y+16	; 0x10
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	f1 f7       	brne	.-4      	; 0x1308 <LCD_voidInit+0x56c>
    130c:	98 8b       	std	Y+16, r25	; 0x10
    130e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	LCD_voidSendCommand(lcd_EntryMode);
    1310:	86 e0       	ldi	r24, 0x06	; 6
    1312:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <LCD_voidSendCommand>
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	a0 ea       	ldi	r26, 0xA0	; 160
    131c:	b0 e4       	ldi	r27, 0x40	; 64
    131e:	8b 87       	std	Y+11, r24	; 0x0b
    1320:	9c 87       	std	Y+12, r25	; 0x0c
    1322:	ad 87       	std	Y+13, r26	; 0x0d
    1324:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1326:	6b 85       	ldd	r22, Y+11	; 0x0b
    1328:	7c 85       	ldd	r23, Y+12	; 0x0c
    132a:	8d 85       	ldd	r24, Y+13	; 0x0d
    132c:	9e 85       	ldd	r25, Y+14	; 0x0e
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	4a ef       	ldi	r20, 0xFA	; 250
    1334:	54 e4       	ldi	r21, 0x44	; 68
    1336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    133a:	dc 01       	movw	r26, r24
    133c:	cb 01       	movw	r24, r22
    133e:	8f 83       	std	Y+7, r24	; 0x07
    1340:	98 87       	std	Y+8, r25	; 0x08
    1342:	a9 87       	std	Y+9, r26	; 0x09
    1344:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1346:	6f 81       	ldd	r22, Y+7	; 0x07
    1348:	78 85       	ldd	r23, Y+8	; 0x08
    134a:	89 85       	ldd	r24, Y+9	; 0x09
    134c:	9a 85       	ldd	r25, Y+10	; 0x0a
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	40 e8       	ldi	r20, 0x80	; 128
    1354:	5f e3       	ldi	r21, 0x3F	; 63
    1356:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    135a:	88 23       	and	r24, r24
    135c:	2c f4       	brge	.+10     	; 0x1368 <LCD_voidInit+0x5cc>
		__ticks = 1;
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	9e 83       	std	Y+6, r25	; 0x06
    1364:	8d 83       	std	Y+5, r24	; 0x05
    1366:	3f c0       	rjmp	.+126    	; 0x13e6 <LCD_voidInit+0x64a>
	else if (__tmp > 65535)
    1368:	6f 81       	ldd	r22, Y+7	; 0x07
    136a:	78 85       	ldd	r23, Y+8	; 0x08
    136c:	89 85       	ldd	r24, Y+9	; 0x09
    136e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	3f ef       	ldi	r19, 0xFF	; 255
    1374:	4f e7       	ldi	r20, 0x7F	; 127
    1376:	57 e4       	ldi	r21, 0x47	; 71
    1378:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    137c:	18 16       	cp	r1, r24
    137e:	4c f5       	brge	.+82     	; 0x13d2 <LCD_voidInit+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1380:	6b 85       	ldd	r22, Y+11	; 0x0b
    1382:	7c 85       	ldd	r23, Y+12	; 0x0c
    1384:	8d 85       	ldd	r24, Y+13	; 0x0d
    1386:	9e 85       	ldd	r25, Y+14	; 0x0e
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	40 e2       	ldi	r20, 0x20	; 32
    138e:	51 e4       	ldi	r21, 0x41	; 65
    1390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	bc 01       	movw	r22, r24
    139a:	cd 01       	movw	r24, r26
    139c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	9e 83       	std	Y+6, r25	; 0x06
    13a6:	8d 83       	std	Y+5, r24	; 0x05
    13a8:	0f c0       	rjmp	.+30     	; 0x13c8 <LCD_voidInit+0x62c>
    13aa:	88 ec       	ldi	r24, 0xC8	; 200
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	9c 83       	std	Y+4, r25	; 0x04
    13b0:	8b 83       	std	Y+3, r24	; 0x03
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	9c 81       	ldd	r25, Y+4	; 0x04
    13b6:	01 97       	sbiw	r24, 0x01	; 1
    13b8:	f1 f7       	brne	.-4      	; 0x13b6 <LCD_voidInit+0x61a>
    13ba:	9c 83       	std	Y+4, r25	; 0x04
    13bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13be:	8d 81       	ldd	r24, Y+5	; 0x05
    13c0:	9e 81       	ldd	r25, Y+6	; 0x06
    13c2:	01 97       	sbiw	r24, 0x01	; 1
    13c4:	9e 83       	std	Y+6, r25	; 0x06
    13c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ca:	9e 81       	ldd	r25, Y+6	; 0x06
    13cc:	00 97       	sbiw	r24, 0x00	; 0
    13ce:	69 f7       	brne	.-38     	; 0x13aa <LCD_voidInit+0x60e>
    13d0:	14 c0       	rjmp	.+40     	; 0x13fa <LCD_voidInit+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13d2:	6f 81       	ldd	r22, Y+7	; 0x07
    13d4:	78 85       	ldd	r23, Y+8	; 0x08
    13d6:	89 85       	ldd	r24, Y+9	; 0x09
    13d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	9e 83       	std	Y+6, r25	; 0x06
    13e4:	8d 83       	std	Y+5, r24	; 0x05
    13e6:	8d 81       	ldd	r24, Y+5	; 0x05
    13e8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ea:	9a 83       	std	Y+2, r25	; 0x02
    13ec:	89 83       	std	Y+1, r24	; 0x01
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	9a 81       	ldd	r25, Y+2	; 0x02
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	f1 f7       	brne	.-4      	; 0x13f2 <LCD_voidInit+0x656>
    13f6:	9a 83       	std	Y+2, r25	; 0x02
    13f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    13fa:	cc 5a       	subi	r28, 0xAC	; 172
    13fc:	df 4f       	sbci	r29, 0xFF	; 255
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	f8 94       	cli
    1402:	de bf       	out	0x3e, r29	; 62
    1404:	0f be       	out	0x3f, r0	; 63
    1406:	cd bf       	out	0x3d, r28	; 61
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	08 95       	ret

00001412 <LCD_voidInit_4bitMode>:
void LCD_voidInit_4bitMode(void){
    1412:	0f 93       	push	r16
    1414:	1f 93       	push	r17
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	c4 55       	subi	r28, 0x54	; 84
    1420:	d0 40       	sbci	r29, 0x00	; 0
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	f8 94       	cli
    1426:	de bf       	out	0x3e, r29	; 62
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	cd bf       	out	0x3d, r28	; 61
	/* Pin Direction*/
	DIO_voidWritePort(lcd_DATAPORT, DIO_LOW);
    142c:	84 e0       	ldi	r24, 0x04	; 4
    142e:	60 e0       	ldi	r22, 0x00	; 0
    1430:	0e 94 33 1c 	call	0x3866	; 0x3866 <DIO_voidWritePort>
	DIO_voidWritePin (lcd_DATAPORT, DIO_PIN_NUM_D4, DIO_OUTPUT);
    1434:	84 e0       	ldi	r24, 0x04	; 4
    1436:	64 e0       	ldi	r22, 0x04	; 4
    1438:	41 e0       	ldi	r20, 0x01	; 1
    143a:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>
	DIO_voidWritePin (lcd_DATAPORT, DIO_PIN_NUM_D5, DIO_OUTPUT);
    143e:	84 e0       	ldi	r24, 0x04	; 4
    1440:	65 e0       	ldi	r22, 0x05	; 5
    1442:	41 e0       	ldi	r20, 0x01	; 1
    1444:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>
	DIO_voidWritePin (lcd_DATAPORT, DIO_PIN_NUM_D6, DIO_OUTPUT);
    1448:	84 e0       	ldi	r24, 0x04	; 4
    144a:	66 e0       	ldi	r22, 0x06	; 6
    144c:	41 e0       	ldi	r20, 0x01	; 1
    144e:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>
	DIO_voidWritePin (lcd_DATAPORT, DIO_PIN_NUM_D7, DIO_OUTPUT);
    1452:	84 e0       	ldi	r24, 0x04	; 4
    1454:	67 e0       	ldi	r22, 0x07	; 7
    1456:	41 e0       	ldi	r20, 0x01	; 1
    1458:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>

	DIO_voidWritePin (lcd_CONTROLPORT, lcd_RSPIN, DIO_OUTPUT);
    145c:	83 e0       	ldi	r24, 0x03	; 3
    145e:	62 e0       	ldi	r22, 0x02	; 2
    1460:	41 e0       	ldi	r20, 0x01	; 1
    1462:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>
	//DIO_voidWritePin (lcd_CONTROLPORT, lcd_RWPIN, DIO_OUTPUT);
	DIO_voidWritePin (lcd_CONTROLPORT, lcd_EPIN , DIO_OUTPUT);
    1466:	83 e0       	ldi	r24, 0x03	; 3
    1468:	63 e0       	ldi	r22, 0x03	; 3
    146a:	41 e0       	ldi	r20, 0x01	; 1
    146c:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>
	/* Make Enable Low*/
	DIO_voidWritePin (lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    1470:	83 e0       	ldi	r24, 0x03	; 3
    1472:	63 e0       	ldi	r22, 0x03	; 3
    1474:	40 e0       	ldi	r20, 0x00	; 0
    1476:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>
    147a:	fe 01       	movw	r30, r28
    147c:	ef 5a       	subi	r30, 0xAF	; 175
    147e:	ff 4f       	sbci	r31, 0xFF	; 255
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	a8 e4       	ldi	r26, 0x48	; 72
    1486:	b2 e4       	ldi	r27, 0x42	; 66
    1488:	80 83       	st	Z, r24
    148a:	91 83       	std	Z+1, r25	; 0x01
    148c:	a2 83       	std	Z+2, r26	; 0x02
    148e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1490:	8e 01       	movw	r16, r28
    1492:	03 5b       	subi	r16, 0xB3	; 179
    1494:	1f 4f       	sbci	r17, 0xFF	; 255
    1496:	fe 01       	movw	r30, r28
    1498:	ef 5a       	subi	r30, 0xAF	; 175
    149a:	ff 4f       	sbci	r31, 0xFF	; 255
    149c:	60 81       	ld	r22, Z
    149e:	71 81       	ldd	r23, Z+1	; 0x01
    14a0:	82 81       	ldd	r24, Z+2	; 0x02
    14a2:	93 81       	ldd	r25, Z+3	; 0x03
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	4a ef       	ldi	r20, 0xFA	; 250
    14aa:	54 e4       	ldi	r21, 0x44	; 68
    14ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	f8 01       	movw	r30, r16
    14b6:	80 83       	st	Z, r24
    14b8:	91 83       	std	Z+1, r25	; 0x01
    14ba:	a2 83       	std	Z+2, r26	; 0x02
    14bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14be:	fe 01       	movw	r30, r28
    14c0:	e3 5b       	subi	r30, 0xB3	; 179
    14c2:	ff 4f       	sbci	r31, 0xFF	; 255
    14c4:	60 81       	ld	r22, Z
    14c6:	71 81       	ldd	r23, Z+1	; 0x01
    14c8:	82 81       	ldd	r24, Z+2	; 0x02
    14ca:	93 81       	ldd	r25, Z+3	; 0x03
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	40 e8       	ldi	r20, 0x80	; 128
    14d2:	5f e3       	ldi	r21, 0x3F	; 63
    14d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14d8:	88 23       	and	r24, r24
    14da:	44 f4       	brge	.+16     	; 0x14ec <LCD_voidInit_4bitMode+0xda>
		__ticks = 1;
    14dc:	fe 01       	movw	r30, r28
    14de:	e5 5b       	subi	r30, 0xB5	; 181
    14e0:	ff 4f       	sbci	r31, 0xFF	; 255
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	91 83       	std	Z+1, r25	; 0x01
    14e8:	80 83       	st	Z, r24
    14ea:	64 c0       	rjmp	.+200    	; 0x15b4 <LCD_voidInit_4bitMode+0x1a2>
	else if (__tmp > 65535)
    14ec:	fe 01       	movw	r30, r28
    14ee:	e3 5b       	subi	r30, 0xB3	; 179
    14f0:	ff 4f       	sbci	r31, 0xFF	; 255
    14f2:	60 81       	ld	r22, Z
    14f4:	71 81       	ldd	r23, Z+1	; 0x01
    14f6:	82 81       	ldd	r24, Z+2	; 0x02
    14f8:	93 81       	ldd	r25, Z+3	; 0x03
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	3f ef       	ldi	r19, 0xFF	; 255
    14fe:	4f e7       	ldi	r20, 0x7F	; 127
    1500:	57 e4       	ldi	r21, 0x47	; 71
    1502:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1506:	18 16       	cp	r1, r24
    1508:	0c f0       	brlt	.+2      	; 0x150c <LCD_voidInit_4bitMode+0xfa>
    150a:	43 c0       	rjmp	.+134    	; 0x1592 <LCD_voidInit_4bitMode+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150c:	fe 01       	movw	r30, r28
    150e:	ef 5a       	subi	r30, 0xAF	; 175
    1510:	ff 4f       	sbci	r31, 0xFF	; 255
    1512:	60 81       	ld	r22, Z
    1514:	71 81       	ldd	r23, Z+1	; 0x01
    1516:	82 81       	ldd	r24, Z+2	; 0x02
    1518:	93 81       	ldd	r25, Z+3	; 0x03
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	40 e2       	ldi	r20, 0x20	; 32
    1520:	51 e4       	ldi	r21, 0x41	; 65
    1522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	8e 01       	movw	r16, r28
    152c:	05 5b       	subi	r16, 0xB5	; 181
    152e:	1f 4f       	sbci	r17, 0xFF	; 255
    1530:	bc 01       	movw	r22, r24
    1532:	cd 01       	movw	r24, r26
    1534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	f8 01       	movw	r30, r16
    153e:	91 83       	std	Z+1, r25	; 0x01
    1540:	80 83       	st	Z, r24
    1542:	1f c0       	rjmp	.+62     	; 0x1582 <LCD_voidInit_4bitMode+0x170>
    1544:	fe 01       	movw	r30, r28
    1546:	e7 5b       	subi	r30, 0xB7	; 183
    1548:	ff 4f       	sbci	r31, 0xFF	; 255
    154a:	88 ec       	ldi	r24, 0xC8	; 200
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	91 83       	std	Z+1, r25	; 0x01
    1550:	80 83       	st	Z, r24
    1552:	fe 01       	movw	r30, r28
    1554:	e7 5b       	subi	r30, 0xB7	; 183
    1556:	ff 4f       	sbci	r31, 0xFF	; 255
    1558:	80 81       	ld	r24, Z
    155a:	91 81       	ldd	r25, Z+1	; 0x01
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	f1 f7       	brne	.-4      	; 0x155c <LCD_voidInit_4bitMode+0x14a>
    1560:	fe 01       	movw	r30, r28
    1562:	e7 5b       	subi	r30, 0xB7	; 183
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	91 83       	std	Z+1, r25	; 0x01
    1568:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    156a:	de 01       	movw	r26, r28
    156c:	a5 5b       	subi	r26, 0xB5	; 181
    156e:	bf 4f       	sbci	r27, 0xFF	; 255
    1570:	fe 01       	movw	r30, r28
    1572:	e5 5b       	subi	r30, 0xB5	; 181
    1574:	ff 4f       	sbci	r31, 0xFF	; 255
    1576:	80 81       	ld	r24, Z
    1578:	91 81       	ldd	r25, Z+1	; 0x01
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	11 96       	adiw	r26, 0x01	; 1
    157e:	9c 93       	st	X, r25
    1580:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1582:	fe 01       	movw	r30, r28
    1584:	e5 5b       	subi	r30, 0xB5	; 181
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	80 81       	ld	r24, Z
    158a:	91 81       	ldd	r25, Z+1	; 0x01
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	d1 f6       	brne	.-76     	; 0x1544 <LCD_voidInit_4bitMode+0x132>
    1590:	27 c0       	rjmp	.+78     	; 0x15e0 <LCD_voidInit_4bitMode+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1592:	8e 01       	movw	r16, r28
    1594:	05 5b       	subi	r16, 0xB5	; 181
    1596:	1f 4f       	sbci	r17, 0xFF	; 255
    1598:	fe 01       	movw	r30, r28
    159a:	e3 5b       	subi	r30, 0xB3	; 179
    159c:	ff 4f       	sbci	r31, 0xFF	; 255
    159e:	60 81       	ld	r22, Z
    15a0:	71 81       	ldd	r23, Z+1	; 0x01
    15a2:	82 81       	ldd	r24, Z+2	; 0x02
    15a4:	93 81       	ldd	r25, Z+3	; 0x03
    15a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	f8 01       	movw	r30, r16
    15b0:	91 83       	std	Z+1, r25	; 0x01
    15b2:	80 83       	st	Z, r24
    15b4:	de 01       	movw	r26, r28
    15b6:	a9 5b       	subi	r26, 0xB9	; 185
    15b8:	bf 4f       	sbci	r27, 0xFF	; 255
    15ba:	fe 01       	movw	r30, r28
    15bc:	e5 5b       	subi	r30, 0xB5	; 181
    15be:	ff 4f       	sbci	r31, 0xFF	; 255
    15c0:	80 81       	ld	r24, Z
    15c2:	91 81       	ldd	r25, Z+1	; 0x01
    15c4:	8d 93       	st	X+, r24
    15c6:	9c 93       	st	X, r25
    15c8:	fe 01       	movw	r30, r28
    15ca:	e9 5b       	subi	r30, 0xB9	; 185
    15cc:	ff 4f       	sbci	r31, 0xFF	; 255
    15ce:	80 81       	ld	r24, Z
    15d0:	91 81       	ldd	r25, Z+1	; 0x01
    15d2:	01 97       	sbiw	r24, 0x01	; 1
    15d4:	f1 f7       	brne	.-4      	; 0x15d2 <LCD_voidInit_4bitMode+0x1c0>
    15d6:	fe 01       	movw	r30, r28
    15d8:	e9 5b       	subi	r30, 0xB9	; 185
    15da:	ff 4f       	sbci	r31, 0xFF	; 255
    15dc:	91 83       	std	Z+1, r25	; 0x01
    15de:	80 83       	st	Z, r24

	_delay_ms(50);
	LCD_voidSendCommand_4bitMode(lcd_Home);
    15e0:	82 e0       	ldi	r24, 0x02	; 2
    15e2:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <LCD_voidSendCommand_4bitMode>
    15e6:	fe 01       	movw	r30, r28
    15e8:	ed 5b       	subi	r30, 0xBD	; 189
    15ea:	ff 4f       	sbci	r31, 0xFF	; 255
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	a0 ea       	ldi	r26, 0xA0	; 160
    15f2:	b0 e4       	ldi	r27, 0x40	; 64
    15f4:	80 83       	st	Z, r24
    15f6:	91 83       	std	Z+1, r25	; 0x01
    15f8:	a2 83       	std	Z+2, r26	; 0x02
    15fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15fc:	8e 01       	movw	r16, r28
    15fe:	01 5c       	subi	r16, 0xC1	; 193
    1600:	1f 4f       	sbci	r17, 0xFF	; 255
    1602:	fe 01       	movw	r30, r28
    1604:	ed 5b       	subi	r30, 0xBD	; 189
    1606:	ff 4f       	sbci	r31, 0xFF	; 255
    1608:	60 81       	ld	r22, Z
    160a:	71 81       	ldd	r23, Z+1	; 0x01
    160c:	82 81       	ldd	r24, Z+2	; 0x02
    160e:	93 81       	ldd	r25, Z+3	; 0x03
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	4a ef       	ldi	r20, 0xFA	; 250
    1616:	54 e4       	ldi	r21, 0x44	; 68
    1618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	f8 01       	movw	r30, r16
    1622:	80 83       	st	Z, r24
    1624:	91 83       	std	Z+1, r25	; 0x01
    1626:	a2 83       	std	Z+2, r26	; 0x02
    1628:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    162a:	fe 01       	movw	r30, r28
    162c:	ff 96       	adiw	r30, 0x3f	; 63
    162e:	60 81       	ld	r22, Z
    1630:	71 81       	ldd	r23, Z+1	; 0x01
    1632:	82 81       	ldd	r24, Z+2	; 0x02
    1634:	93 81       	ldd	r25, Z+3	; 0x03
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	40 e8       	ldi	r20, 0x80	; 128
    163c:	5f e3       	ldi	r21, 0x3F	; 63
    163e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1642:	88 23       	and	r24, r24
    1644:	2c f4       	brge	.+10     	; 0x1650 <LCD_voidInit_4bitMode+0x23e>
		__ticks = 1;
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	9e af       	std	Y+62, r25	; 0x3e
    164c:	8d af       	std	Y+61, r24	; 0x3d
    164e:	46 c0       	rjmp	.+140    	; 0x16dc <LCD_voidInit_4bitMode+0x2ca>
	else if (__tmp > 65535)
    1650:	fe 01       	movw	r30, r28
    1652:	ff 96       	adiw	r30, 0x3f	; 63
    1654:	60 81       	ld	r22, Z
    1656:	71 81       	ldd	r23, Z+1	; 0x01
    1658:	82 81       	ldd	r24, Z+2	; 0x02
    165a:	93 81       	ldd	r25, Z+3	; 0x03
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	3f ef       	ldi	r19, 0xFF	; 255
    1660:	4f e7       	ldi	r20, 0x7F	; 127
    1662:	57 e4       	ldi	r21, 0x47	; 71
    1664:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1668:	18 16       	cp	r1, r24
    166a:	64 f5       	brge	.+88     	; 0x16c4 <LCD_voidInit_4bitMode+0x2b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    166c:	fe 01       	movw	r30, r28
    166e:	ed 5b       	subi	r30, 0xBD	; 189
    1670:	ff 4f       	sbci	r31, 0xFF	; 255
    1672:	60 81       	ld	r22, Z
    1674:	71 81       	ldd	r23, Z+1	; 0x01
    1676:	82 81       	ldd	r24, Z+2	; 0x02
    1678:	93 81       	ldd	r25, Z+3	; 0x03
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	40 e2       	ldi	r20, 0x20	; 32
    1680:	51 e4       	ldi	r21, 0x41	; 65
    1682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	bc 01       	movw	r22, r24
    168c:	cd 01       	movw	r24, r26
    168e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	9e af       	std	Y+62, r25	; 0x3e
    1698:	8d af       	std	Y+61, r24	; 0x3d
    169a:	0f c0       	rjmp	.+30     	; 0x16ba <LCD_voidInit_4bitMode+0x2a8>
    169c:	88 ec       	ldi	r24, 0xC8	; 200
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	9c af       	std	Y+60, r25	; 0x3c
    16a2:	8b af       	std	Y+59, r24	; 0x3b
    16a4:	8b ad       	ldd	r24, Y+59	; 0x3b
    16a6:	9c ad       	ldd	r25, Y+60	; 0x3c
    16a8:	01 97       	sbiw	r24, 0x01	; 1
    16aa:	f1 f7       	brne	.-4      	; 0x16a8 <LCD_voidInit_4bitMode+0x296>
    16ac:	9c af       	std	Y+60, r25	; 0x3c
    16ae:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    16b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	9e af       	std	Y+62, r25	; 0x3e
    16b8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    16bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    16be:	00 97       	sbiw	r24, 0x00	; 0
    16c0:	69 f7       	brne	.-38     	; 0x169c <LCD_voidInit_4bitMode+0x28a>
    16c2:	16 c0       	rjmp	.+44     	; 0x16f0 <LCD_voidInit_4bitMode+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c4:	fe 01       	movw	r30, r28
    16c6:	ff 96       	adiw	r30, 0x3f	; 63
    16c8:	60 81       	ld	r22, Z
    16ca:	71 81       	ldd	r23, Z+1	; 0x01
    16cc:	82 81       	ldd	r24, Z+2	; 0x02
    16ce:	93 81       	ldd	r25, Z+3	; 0x03
    16d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	9e af       	std	Y+62, r25	; 0x3e
    16da:	8d af       	std	Y+61, r24	; 0x3d
    16dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    16de:	9e ad       	ldd	r25, Y+62	; 0x3e
    16e0:	9a af       	std	Y+58, r25	; 0x3a
    16e2:	89 af       	std	Y+57, r24	; 0x39
    16e4:	89 ad       	ldd	r24, Y+57	; 0x39
    16e6:	9a ad       	ldd	r25, Y+58	; 0x3a
    16e8:	01 97       	sbiw	r24, 0x01	; 1
    16ea:	f1 f7       	brne	.-4      	; 0x16e8 <LCD_voidInit_4bitMode+0x2d6>
    16ec:	9a af       	std	Y+58, r25	; 0x3a
    16ee:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);
	LCD_voidSendCommand_4bitMode(lcd_FunctionSet4bit);
    16f0:	88 e2       	ldi	r24, 0x28	; 40
    16f2:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <LCD_voidSendCommand_4bitMode>
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	a0 ea       	ldi	r26, 0xA0	; 160
    16fc:	b0 e4       	ldi	r27, 0x40	; 64
    16fe:	8d ab       	std	Y+53, r24	; 0x35
    1700:	9e ab       	std	Y+54, r25	; 0x36
    1702:	af ab       	std	Y+55, r26	; 0x37
    1704:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1706:	6d a9       	ldd	r22, Y+53	; 0x35
    1708:	7e a9       	ldd	r23, Y+54	; 0x36
    170a:	8f a9       	ldd	r24, Y+55	; 0x37
    170c:	98 ad       	ldd	r25, Y+56	; 0x38
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	4a ef       	ldi	r20, 0xFA	; 250
    1714:	54 e4       	ldi	r21, 0x44	; 68
    1716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	89 ab       	std	Y+49, r24	; 0x31
    1720:	9a ab       	std	Y+50, r25	; 0x32
    1722:	ab ab       	std	Y+51, r26	; 0x33
    1724:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1726:	69 a9       	ldd	r22, Y+49	; 0x31
    1728:	7a a9       	ldd	r23, Y+50	; 0x32
    172a:	8b a9       	ldd	r24, Y+51	; 0x33
    172c:	9c a9       	ldd	r25, Y+52	; 0x34
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	40 e8       	ldi	r20, 0x80	; 128
    1734:	5f e3       	ldi	r21, 0x3F	; 63
    1736:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    173a:	88 23       	and	r24, r24
    173c:	2c f4       	brge	.+10     	; 0x1748 <LCD_voidInit_4bitMode+0x336>
		__ticks = 1;
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	98 ab       	std	Y+48, r25	; 0x30
    1744:	8f a7       	std	Y+47, r24	; 0x2f
    1746:	3f c0       	rjmp	.+126    	; 0x17c6 <LCD_voidInit_4bitMode+0x3b4>
	else if (__tmp > 65535)
    1748:	69 a9       	ldd	r22, Y+49	; 0x31
    174a:	7a a9       	ldd	r23, Y+50	; 0x32
    174c:	8b a9       	ldd	r24, Y+51	; 0x33
    174e:	9c a9       	ldd	r25, Y+52	; 0x34
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	3f ef       	ldi	r19, 0xFF	; 255
    1754:	4f e7       	ldi	r20, 0x7F	; 127
    1756:	57 e4       	ldi	r21, 0x47	; 71
    1758:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    175c:	18 16       	cp	r1, r24
    175e:	4c f5       	brge	.+82     	; 0x17b2 <LCD_voidInit_4bitMode+0x3a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1760:	6d a9       	ldd	r22, Y+53	; 0x35
    1762:	7e a9       	ldd	r23, Y+54	; 0x36
    1764:	8f a9       	ldd	r24, Y+55	; 0x37
    1766:	98 ad       	ldd	r25, Y+56	; 0x38
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	40 e2       	ldi	r20, 0x20	; 32
    176e:	51 e4       	ldi	r21, 0x41	; 65
    1770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	bc 01       	movw	r22, r24
    177a:	cd 01       	movw	r24, r26
    177c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	98 ab       	std	Y+48, r25	; 0x30
    1786:	8f a7       	std	Y+47, r24	; 0x2f
    1788:	0f c0       	rjmp	.+30     	; 0x17a8 <LCD_voidInit_4bitMode+0x396>
    178a:	88 ec       	ldi	r24, 0xC8	; 200
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	9e a7       	std	Y+46, r25	; 0x2e
    1790:	8d a7       	std	Y+45, r24	; 0x2d
    1792:	8d a5       	ldd	r24, Y+45	; 0x2d
    1794:	9e a5       	ldd	r25, Y+46	; 0x2e
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	f1 f7       	brne	.-4      	; 0x1796 <LCD_voidInit_4bitMode+0x384>
    179a:	9e a7       	std	Y+46, r25	; 0x2e
    179c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    179e:	8f a5       	ldd	r24, Y+47	; 0x2f
    17a0:	98 a9       	ldd	r25, Y+48	; 0x30
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	98 ab       	std	Y+48, r25	; 0x30
    17a6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    17aa:	98 a9       	ldd	r25, Y+48	; 0x30
    17ac:	00 97       	sbiw	r24, 0x00	; 0
    17ae:	69 f7       	brne	.-38     	; 0x178a <LCD_voidInit_4bitMode+0x378>
    17b0:	14 c0       	rjmp	.+40     	; 0x17da <LCD_voidInit_4bitMode+0x3c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b2:	69 a9       	ldd	r22, Y+49	; 0x31
    17b4:	7a a9       	ldd	r23, Y+50	; 0x32
    17b6:	8b a9       	ldd	r24, Y+51	; 0x33
    17b8:	9c a9       	ldd	r25, Y+52	; 0x34
    17ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	98 ab       	std	Y+48, r25	; 0x30
    17c4:	8f a7       	std	Y+47, r24	; 0x2f
    17c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    17c8:	98 a9       	ldd	r25, Y+48	; 0x30
    17ca:	9c a7       	std	Y+44, r25	; 0x2c
    17cc:	8b a7       	std	Y+43, r24	; 0x2b
    17ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    17d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    17d2:	01 97       	sbiw	r24, 0x01	; 1
    17d4:	f1 f7       	brne	.-4      	; 0x17d2 <LCD_voidInit_4bitMode+0x3c0>
    17d6:	9c a7       	std	Y+44, r25	; 0x2c
    17d8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	LCD_voidSendCommand_4bitMode(lcd_DisplayOn);
    17da:	8c e0       	ldi	r24, 0x0C	; 12
    17dc:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <LCD_voidSendCommand_4bitMode>
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	a0 ea       	ldi	r26, 0xA0	; 160
    17e6:	b0 e4       	ldi	r27, 0x40	; 64
    17e8:	8f a3       	std	Y+39, r24	; 0x27
    17ea:	98 a7       	std	Y+40, r25	; 0x28
    17ec:	a9 a7       	std	Y+41, r26	; 0x29
    17ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17f0:	6f a1       	ldd	r22, Y+39	; 0x27
    17f2:	78 a5       	ldd	r23, Y+40	; 0x28
    17f4:	89 a5       	ldd	r24, Y+41	; 0x29
    17f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	4a ef       	ldi	r20, 0xFA	; 250
    17fe:	54 e4       	ldi	r21, 0x44	; 68
    1800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	8b a3       	std	Y+35, r24	; 0x23
    180a:	9c a3       	std	Y+36, r25	; 0x24
    180c:	ad a3       	std	Y+37, r26	; 0x25
    180e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1810:	6b a1       	ldd	r22, Y+35	; 0x23
    1812:	7c a1       	ldd	r23, Y+36	; 0x24
    1814:	8d a1       	ldd	r24, Y+37	; 0x25
    1816:	9e a1       	ldd	r25, Y+38	; 0x26
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e8       	ldi	r20, 0x80	; 128
    181e:	5f e3       	ldi	r21, 0x3F	; 63
    1820:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1824:	88 23       	and	r24, r24
    1826:	2c f4       	brge	.+10     	; 0x1832 <LCD_voidInit_4bitMode+0x420>
		__ticks = 1;
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	9a a3       	std	Y+34, r25	; 0x22
    182e:	89 a3       	std	Y+33, r24	; 0x21
    1830:	3f c0       	rjmp	.+126    	; 0x18b0 <LCD_voidInit_4bitMode+0x49e>
	else if (__tmp > 65535)
    1832:	6b a1       	ldd	r22, Y+35	; 0x23
    1834:	7c a1       	ldd	r23, Y+36	; 0x24
    1836:	8d a1       	ldd	r24, Y+37	; 0x25
    1838:	9e a1       	ldd	r25, Y+38	; 0x26
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	3f ef       	ldi	r19, 0xFF	; 255
    183e:	4f e7       	ldi	r20, 0x7F	; 127
    1840:	57 e4       	ldi	r21, 0x47	; 71
    1842:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1846:	18 16       	cp	r1, r24
    1848:	4c f5       	brge	.+82     	; 0x189c <LCD_voidInit_4bitMode+0x48a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    184a:	6f a1       	ldd	r22, Y+39	; 0x27
    184c:	78 a5       	ldd	r23, Y+40	; 0x28
    184e:	89 a5       	ldd	r24, Y+41	; 0x29
    1850:	9a a5       	ldd	r25, Y+42	; 0x2a
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	40 e2       	ldi	r20, 0x20	; 32
    1858:	51 e4       	ldi	r21, 0x41	; 65
    185a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	bc 01       	movw	r22, r24
    1864:	cd 01       	movw	r24, r26
    1866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	9a a3       	std	Y+34, r25	; 0x22
    1870:	89 a3       	std	Y+33, r24	; 0x21
    1872:	0f c0       	rjmp	.+30     	; 0x1892 <LCD_voidInit_4bitMode+0x480>
    1874:	88 ec       	ldi	r24, 0xC8	; 200
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	98 a3       	std	Y+32, r25	; 0x20
    187a:	8f 8f       	std	Y+31, r24	; 0x1f
    187c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    187e:	98 a1       	ldd	r25, Y+32	; 0x20
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	f1 f7       	brne	.-4      	; 0x1880 <LCD_voidInit_4bitMode+0x46e>
    1884:	98 a3       	std	Y+32, r25	; 0x20
    1886:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1888:	89 a1       	ldd	r24, Y+33	; 0x21
    188a:	9a a1       	ldd	r25, Y+34	; 0x22
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	9a a3       	std	Y+34, r25	; 0x22
    1890:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1892:	89 a1       	ldd	r24, Y+33	; 0x21
    1894:	9a a1       	ldd	r25, Y+34	; 0x22
    1896:	00 97       	sbiw	r24, 0x00	; 0
    1898:	69 f7       	brne	.-38     	; 0x1874 <LCD_voidInit_4bitMode+0x462>
    189a:	14 c0       	rjmp	.+40     	; 0x18c4 <LCD_voidInit_4bitMode+0x4b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    189c:	6b a1       	ldd	r22, Y+35	; 0x23
    189e:	7c a1       	ldd	r23, Y+36	; 0x24
    18a0:	8d a1       	ldd	r24, Y+37	; 0x25
    18a2:	9e a1       	ldd	r25, Y+38	; 0x26
    18a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	9a a3       	std	Y+34, r25	; 0x22
    18ae:	89 a3       	std	Y+33, r24	; 0x21
    18b0:	89 a1       	ldd	r24, Y+33	; 0x21
    18b2:	9a a1       	ldd	r25, Y+34	; 0x22
    18b4:	9e 8f       	std	Y+30, r25	; 0x1e
    18b6:	8d 8f       	std	Y+29, r24	; 0x1d
    18b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	f1 f7       	brne	.-4      	; 0x18bc <LCD_voidInit_4bitMode+0x4aa>
    18c0:	9e 8f       	std	Y+30, r25	; 0x1e
    18c2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand_4bitMode(lcd_Clear);
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <LCD_voidSendCommand_4bitMode>
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	a0 ea       	ldi	r26, 0xA0	; 160
    18d0:	b0 e4       	ldi	r27, 0x40	; 64
    18d2:	89 8f       	std	Y+25, r24	; 0x19
    18d4:	9a 8f       	std	Y+26, r25	; 0x1a
    18d6:	ab 8f       	std	Y+27, r26	; 0x1b
    18d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18da:	69 8d       	ldd	r22, Y+25	; 0x19
    18dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	4a ef       	ldi	r20, 0xFA	; 250
    18e8:	54 e4       	ldi	r21, 0x44	; 68
    18ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	8d 8b       	std	Y+21, r24	; 0x15
    18f4:	9e 8b       	std	Y+22, r25	; 0x16
    18f6:	af 8b       	std	Y+23, r26	; 0x17
    18f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18fa:	6d 89       	ldd	r22, Y+21	; 0x15
    18fc:	7e 89       	ldd	r23, Y+22	; 0x16
    18fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1900:	98 8d       	ldd	r25, Y+24	; 0x18
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	40 e8       	ldi	r20, 0x80	; 128
    1908:	5f e3       	ldi	r21, 0x3F	; 63
    190a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    190e:	88 23       	and	r24, r24
    1910:	2c f4       	brge	.+10     	; 0x191c <LCD_voidInit_4bitMode+0x50a>
		__ticks = 1;
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	9c 8b       	std	Y+20, r25	; 0x14
    1918:	8b 8b       	std	Y+19, r24	; 0x13
    191a:	3f c0       	rjmp	.+126    	; 0x199a <LCD_voidInit_4bitMode+0x588>
	else if (__tmp > 65535)
    191c:	6d 89       	ldd	r22, Y+21	; 0x15
    191e:	7e 89       	ldd	r23, Y+22	; 0x16
    1920:	8f 89       	ldd	r24, Y+23	; 0x17
    1922:	98 8d       	ldd	r25, Y+24	; 0x18
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	3f ef       	ldi	r19, 0xFF	; 255
    1928:	4f e7       	ldi	r20, 0x7F	; 127
    192a:	57 e4       	ldi	r21, 0x47	; 71
    192c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1930:	18 16       	cp	r1, r24
    1932:	4c f5       	brge	.+82     	; 0x1986 <LCD_voidInit_4bitMode+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1934:	69 8d       	ldd	r22, Y+25	; 0x19
    1936:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1938:	8b 8d       	ldd	r24, Y+27	; 0x1b
    193a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e2       	ldi	r20, 0x20	; 32
    1942:	51 e4       	ldi	r21, 0x41	; 65
    1944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	bc 01       	movw	r22, r24
    194e:	cd 01       	movw	r24, r26
    1950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	9c 8b       	std	Y+20, r25	; 0x14
    195a:	8b 8b       	std	Y+19, r24	; 0x13
    195c:	0f c0       	rjmp	.+30     	; 0x197c <LCD_voidInit_4bitMode+0x56a>
    195e:	88 ec       	ldi	r24, 0xC8	; 200
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	9a 8b       	std	Y+18, r25	; 0x12
    1964:	89 8b       	std	Y+17, r24	; 0x11
    1966:	89 89       	ldd	r24, Y+17	; 0x11
    1968:	9a 89       	ldd	r25, Y+18	; 0x12
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	f1 f7       	brne	.-4      	; 0x196a <LCD_voidInit_4bitMode+0x558>
    196e:	9a 8b       	std	Y+18, r25	; 0x12
    1970:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1972:	8b 89       	ldd	r24, Y+19	; 0x13
    1974:	9c 89       	ldd	r25, Y+20	; 0x14
    1976:	01 97       	sbiw	r24, 0x01	; 1
    1978:	9c 8b       	std	Y+20, r25	; 0x14
    197a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    197c:	8b 89       	ldd	r24, Y+19	; 0x13
    197e:	9c 89       	ldd	r25, Y+20	; 0x14
    1980:	00 97       	sbiw	r24, 0x00	; 0
    1982:	69 f7       	brne	.-38     	; 0x195e <LCD_voidInit_4bitMode+0x54c>
    1984:	14 c0       	rjmp	.+40     	; 0x19ae <LCD_voidInit_4bitMode+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1986:	6d 89       	ldd	r22, Y+21	; 0x15
    1988:	7e 89       	ldd	r23, Y+22	; 0x16
    198a:	8f 89       	ldd	r24, Y+23	; 0x17
    198c:	98 8d       	ldd	r25, Y+24	; 0x18
    198e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	9c 8b       	std	Y+20, r25	; 0x14
    1998:	8b 8b       	std	Y+19, r24	; 0x13
    199a:	8b 89       	ldd	r24, Y+19	; 0x13
    199c:	9c 89       	ldd	r25, Y+20	; 0x14
    199e:	98 8b       	std	Y+16, r25	; 0x10
    19a0:	8f 87       	std	Y+15, r24	; 0x0f
    19a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    19a4:	98 89       	ldd	r25, Y+16	; 0x10
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	f1 f7       	brne	.-4      	; 0x19a6 <LCD_voidInit_4bitMode+0x594>
    19aa:	98 8b       	std	Y+16, r25	; 0x10
    19ac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	LCD_voidSendCommand_4bitMode(lcd_EntryMode);
    19ae:	86 e0       	ldi	r24, 0x06	; 6
    19b0:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <LCD_voidSendCommand_4bitMode>
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	a0 ea       	ldi	r26, 0xA0	; 160
    19ba:	b0 e4       	ldi	r27, 0x40	; 64
    19bc:	8b 87       	std	Y+11, r24	; 0x0b
    19be:	9c 87       	std	Y+12, r25	; 0x0c
    19c0:	ad 87       	std	Y+13, r26	; 0x0d
    19c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	4a ef       	ldi	r20, 0xFA	; 250
    19d2:	54 e4       	ldi	r21, 0x44	; 68
    19d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	8f 83       	std	Y+7, r24	; 0x07
    19de:	98 87       	std	Y+8, r25	; 0x08
    19e0:	a9 87       	std	Y+9, r26	; 0x09
    19e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19e4:	6f 81       	ldd	r22, Y+7	; 0x07
    19e6:	78 85       	ldd	r23, Y+8	; 0x08
    19e8:	89 85       	ldd	r24, Y+9	; 0x09
    19ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	40 e8       	ldi	r20, 0x80	; 128
    19f2:	5f e3       	ldi	r21, 0x3F	; 63
    19f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19f8:	88 23       	and	r24, r24
    19fa:	2c f4       	brge	.+10     	; 0x1a06 <LCD_voidInit_4bitMode+0x5f4>
		__ticks = 1;
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	9e 83       	std	Y+6, r25	; 0x06
    1a02:	8d 83       	std	Y+5, r24	; 0x05
    1a04:	3f c0       	rjmp	.+126    	; 0x1a84 <LCD_voidInit_4bitMode+0x672>
	else if (__tmp > 65535)
    1a06:	6f 81       	ldd	r22, Y+7	; 0x07
    1a08:	78 85       	ldd	r23, Y+8	; 0x08
    1a0a:	89 85       	ldd	r24, Y+9	; 0x09
    1a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	3f ef       	ldi	r19, 0xFF	; 255
    1a12:	4f e7       	ldi	r20, 0x7F	; 127
    1a14:	57 e4       	ldi	r21, 0x47	; 71
    1a16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a1a:	18 16       	cp	r1, r24
    1a1c:	4c f5       	brge	.+82     	; 0x1a70 <LCD_voidInit_4bitMode+0x65e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e2       	ldi	r20, 0x20	; 32
    1a2c:	51 e4       	ldi	r21, 0x41	; 65
    1a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	bc 01       	movw	r22, r24
    1a38:	cd 01       	movw	r24, r26
    1a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	9e 83       	std	Y+6, r25	; 0x06
    1a44:	8d 83       	std	Y+5, r24	; 0x05
    1a46:	0f c0       	rjmp	.+30     	; 0x1a66 <LCD_voidInit_4bitMode+0x654>
    1a48:	88 ec       	ldi	r24, 0xC8	; 200
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	9c 83       	std	Y+4, r25	; 0x04
    1a4e:	8b 83       	std	Y+3, r24	; 0x03
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	9c 81       	ldd	r25, Y+4	; 0x04
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	f1 f7       	brne	.-4      	; 0x1a54 <LCD_voidInit_4bitMode+0x642>
    1a58:	9c 83       	std	Y+4, r25	; 0x04
    1a5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	9e 83       	std	Y+6, r25	; 0x06
    1a64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a66:	8d 81       	ldd	r24, Y+5	; 0x05
    1a68:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	69 f7       	brne	.-38     	; 0x1a48 <LCD_voidInit_4bitMode+0x636>
    1a6e:	14 c0       	rjmp	.+40     	; 0x1a98 <LCD_voidInit_4bitMode+0x686>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a70:	6f 81       	ldd	r22, Y+7	; 0x07
    1a72:	78 85       	ldd	r23, Y+8	; 0x08
    1a74:	89 85       	ldd	r24, Y+9	; 0x09
    1a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	9e 83       	std	Y+6, r25	; 0x06
    1a82:	8d 83       	std	Y+5, r24	; 0x05
    1a84:	8d 81       	ldd	r24, Y+5	; 0x05
    1a86:	9e 81       	ldd	r25, Y+6	; 0x06
    1a88:	9a 83       	std	Y+2, r25	; 0x02
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	f1 f7       	brne	.-4      	; 0x1a90 <LCD_voidInit_4bitMode+0x67e>
    1a94:	9a 83       	std	Y+2, r25	; 0x02
    1a96:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    1a98:	cc 5a       	subi	r28, 0xAC	; 172
    1a9a:	df 4f       	sbci	r29, 0xFF	; 255
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	f8 94       	cli
    1aa0:	de bf       	out	0x3e, r29	; 62
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	cd bf       	out	0x3d, r28	; 61
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	1f 91       	pop	r17
    1aac:	0f 91       	pop	r16
    1aae:	08 95       	ret

00001ab0 <LCD_voidSendCommand>:
void LCD_voidSendCommand(uint8 u8CmdCpy){
    1ab0:	df 93       	push	r29
    1ab2:	cf 93       	push	r28
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	2f 97       	sbiw	r28, 0x0f	; 15
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	8f 87       	std	Y+15, r24	; 0x0f
	/* Command(0) or Data(1) */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_RSPIN, DIO_LOW);
    1ac6:	83 e0       	ldi	r24, 0x03	; 3
    1ac8:	62 e0       	ldi	r22, 0x02	; 2
    1aca:	40 e0       	ldi	r20, 0x00	; 0
    1acc:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>
	/* Read(1) or Write(0) */
	//DIO_voidWritePin(lcd_CONTROLPORT, lcd_RWPIN, DIO_LOW);
	/* Write Commands on Data Pins*/
	DIO_voidWritePort(lcd_DATAPORT, u8CmdCpy);
    1ad0:	84 e0       	ldi	r24, 0x04	; 4
    1ad2:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ad4:	0e 94 33 1c 	call	0x3866	; 0x3866 <DIO_voidWritePort>
	/* Enable Sequence */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    1ad8:	83 e0       	ldi	r24, 0x03	; 3
    1ada:	63 e0       	ldi	r22, 0x03	; 3
    1adc:	41 e0       	ldi	r20, 0x01	; 1
    1ade:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	a0 ea       	ldi	r26, 0xA0	; 160
    1ae8:	b0 e4       	ldi	r27, 0x40	; 64
    1aea:	8b 87       	std	Y+11, r24	; 0x0b
    1aec:	9c 87       	std	Y+12, r25	; 0x0c
    1aee:	ad 87       	std	Y+13, r26	; 0x0d
    1af0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1af4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1af6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1af8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	4a ef       	ldi	r20, 0xFA	; 250
    1b00:	54 e4       	ldi	r21, 0x44	; 68
    1b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	8f 83       	std	Y+7, r24	; 0x07
    1b0c:	98 87       	std	Y+8, r25	; 0x08
    1b0e:	a9 87       	std	Y+9, r26	; 0x09
    1b10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b12:	6f 81       	ldd	r22, Y+7	; 0x07
    1b14:	78 85       	ldd	r23, Y+8	; 0x08
    1b16:	89 85       	ldd	r24, Y+9	; 0x09
    1b18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	40 e8       	ldi	r20, 0x80	; 128
    1b20:	5f e3       	ldi	r21, 0x3F	; 63
    1b22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b26:	88 23       	and	r24, r24
    1b28:	2c f4       	brge	.+10     	; 0x1b34 <LCD_voidSendCommand+0x84>
		__ticks = 1;
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	9e 83       	std	Y+6, r25	; 0x06
    1b30:	8d 83       	std	Y+5, r24	; 0x05
    1b32:	3f c0       	rjmp	.+126    	; 0x1bb2 <LCD_voidSendCommand+0x102>
	else if (__tmp > 65535)
    1b34:	6f 81       	ldd	r22, Y+7	; 0x07
    1b36:	78 85       	ldd	r23, Y+8	; 0x08
    1b38:	89 85       	ldd	r24, Y+9	; 0x09
    1b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	3f ef       	ldi	r19, 0xFF	; 255
    1b40:	4f e7       	ldi	r20, 0x7F	; 127
    1b42:	57 e4       	ldi	r21, 0x47	; 71
    1b44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b48:	18 16       	cp	r1, r24
    1b4a:	4c f5       	brge	.+82     	; 0x1b9e <LCD_voidSendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	40 e2       	ldi	r20, 0x20	; 32
    1b5a:	51 e4       	ldi	r21, 0x41	; 65
    1b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	bc 01       	movw	r22, r24
    1b66:	cd 01       	movw	r24, r26
    1b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	9e 83       	std	Y+6, r25	; 0x06
    1b72:	8d 83       	std	Y+5, r24	; 0x05
    1b74:	0f c0       	rjmp	.+30     	; 0x1b94 <LCD_voidSendCommand+0xe4>
    1b76:	88 ec       	ldi	r24, 0xC8	; 200
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	9c 83       	std	Y+4, r25	; 0x04
    1b7c:	8b 83       	std	Y+3, r24	; 0x03
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	9c 81       	ldd	r25, Y+4	; 0x04
    1b82:	01 97       	sbiw	r24, 0x01	; 1
    1b84:	f1 f7       	brne	.-4      	; 0x1b82 <LCD_voidSendCommand+0xd2>
    1b86:	9c 83       	std	Y+4, r25	; 0x04
    1b88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	9e 83       	std	Y+6, r25	; 0x06
    1b92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b94:	8d 81       	ldd	r24, Y+5	; 0x05
    1b96:	9e 81       	ldd	r25, Y+6	; 0x06
    1b98:	00 97       	sbiw	r24, 0x00	; 0
    1b9a:	69 f7       	brne	.-38     	; 0x1b76 <LCD_voidSendCommand+0xc6>
    1b9c:	14 c0       	rjmp	.+40     	; 0x1bc6 <LCD_voidSendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba0:	78 85       	ldd	r23, Y+8	; 0x08
    1ba2:	89 85       	ldd	r24, Y+9	; 0x09
    1ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	9e 83       	std	Y+6, r25	; 0x06
    1bb0:	8d 83       	std	Y+5, r24	; 0x05
    1bb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb6:	9a 83       	std	Y+2, r25	; 0x02
    1bb8:	89 83       	std	Y+1, r24	; 0x01
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	f1 f7       	brne	.-4      	; 0x1bbe <LCD_voidSendCommand+0x10e>
    1bc2:	9a 83       	std	Y+2, r25	; 0x02
    1bc4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    1bc6:	83 e0       	ldi	r24, 0x03	; 3
    1bc8:	63 e0       	ldi	r22, 0x03	; 3
    1bca:	40 e0       	ldi	r20, 0x00	; 0
    1bcc:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>
}
    1bd0:	2f 96       	adiw	r28, 0x0f	; 15
    1bd2:	0f b6       	in	r0, 0x3f	; 63
    1bd4:	f8 94       	cli
    1bd6:	de bf       	out	0x3e, r29	; 62
    1bd8:	0f be       	out	0x3f, r0	; 63
    1bda:	cd bf       	out	0x3d, r28	; 61
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	08 95       	ret

00001be2 <LCD_voidSendCommand_4bitMode>:

void LCD_voidSendCommand_4bitMode(uint8 u8CmdCpy){
    1be2:	0f 93       	push	r16
    1be4:	1f 93       	push	r17
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
    1bee:	c1 56       	subi	r28, 0x61	; 97
    1bf0:	d0 40       	sbci	r29, 0x00	; 0
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	fe 01       	movw	r30, r28
    1bfe:	ef 59       	subi	r30, 0x9F	; 159
    1c00:	ff 4f       	sbci	r31, 0xFF	; 255
    1c02:	80 83       	st	Z, r24
    /* Send Higher nibble of command */
    DIO_voidWritePort(lcd_DATAPORT, (lcd_DATAPORT & 0x0F) | (u8CmdCpy & 0xF0));
    1c04:	fe 01       	movw	r30, r28
    1c06:	ef 59       	subi	r30, 0x9F	; 159
    1c08:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0a:	80 81       	ld	r24, Z
    1c0c:	80 7f       	andi	r24, 0xF0	; 240
    1c0e:	84 60       	ori	r24, 0x04	; 4
    1c10:	98 2f       	mov	r25, r24
    1c12:	84 e0       	ldi	r24, 0x04	; 4
    1c14:	69 2f       	mov	r22, r25
    1c16:	0e 94 33 1c 	call	0x3866	; 0x3866 <DIO_voidWritePort>
    /* Command(0) or Data(1) */
    DIO_voidWritePin(lcd_CONTROLPORT, lcd_RSPIN, DIO_LOW);
    1c1a:	83 e0       	ldi	r24, 0x03	; 3
    1c1c:	62 e0       	ldi	r22, 0x02	; 2
    1c1e:	40 e0       	ldi	r20, 0x00	; 0
    1c20:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>
    /* Read(1) or Write(0) */
    //DIO_voidWritePin(lcd_CONTROLPORT, lcd_RWPIN, DIO_LOW);

    /* Enable Sequence */
    DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    1c24:	83 e0       	ldi	r24, 0x03	; 3
    1c26:	63 e0       	ldi	r22, 0x03	; 3
    1c28:	41 e0       	ldi	r20, 0x01	; 1
    1c2a:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>
    1c2e:	fe 01       	movw	r30, r28
    1c30:	e3 5a       	subi	r30, 0xA3	; 163
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	a0 ea       	ldi	r26, 0xA0	; 160
    1c3a:	b0 e4       	ldi	r27, 0x40	; 64
    1c3c:	80 83       	st	Z, r24
    1c3e:	91 83       	std	Z+1, r25	; 0x01
    1c40:	a2 83       	std	Z+2, r26	; 0x02
    1c42:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c44:	8e 01       	movw	r16, r28
    1c46:	07 5a       	subi	r16, 0xA7	; 167
    1c48:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	e3 5a       	subi	r30, 0xA3	; 163
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	60 81       	ld	r22, Z
    1c52:	71 81       	ldd	r23, Z+1	; 0x01
    1c54:	82 81       	ldd	r24, Z+2	; 0x02
    1c56:	93 81       	ldd	r25, Z+3	; 0x03
    1c58:	2b ea       	ldi	r18, 0xAB	; 171
    1c5a:	3a ea       	ldi	r19, 0xAA	; 170
    1c5c:	4a e2       	ldi	r20, 0x2A	; 42
    1c5e:	50 e4       	ldi	r21, 0x40	; 64
    1c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	f8 01       	movw	r30, r16
    1c6a:	80 83       	st	Z, r24
    1c6c:	91 83       	std	Z+1, r25	; 0x01
    1c6e:	a2 83       	std	Z+2, r26	; 0x02
    1c70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c72:	fe 01       	movw	r30, r28
    1c74:	e7 5a       	subi	r30, 0xA7	; 167
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	60 81       	ld	r22, Z
    1c7a:	71 81       	ldd	r23, Z+1	; 0x01
    1c7c:	82 81       	ldd	r24, Z+2	; 0x02
    1c7e:	93 81       	ldd	r25, Z+3	; 0x03
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	40 e8       	ldi	r20, 0x80	; 128
    1c86:	5f e3       	ldi	r21, 0x3F	; 63
    1c88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c8c:	88 23       	and	r24, r24
    1c8e:	34 f4       	brge	.+12     	; 0x1c9c <LCD_voidSendCommand_4bitMode+0xba>
		__ticks = 1;
    1c90:	fe 01       	movw	r30, r28
    1c92:	e8 5a       	subi	r30, 0xA8	; 168
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	80 83       	st	Z, r24
    1c9a:	e0 c0       	rjmp	.+448    	; 0x1e5c <LCD_voidSendCommand_4bitMode+0x27a>
	else if (__tmp > 255)
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	e7 5a       	subi	r30, 0xA7	; 167
    1ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca2:	60 81       	ld	r22, Z
    1ca4:	71 81       	ldd	r23, Z+1	; 0x01
    1ca6:	82 81       	ldd	r24, Z+2	; 0x02
    1ca8:	93 81       	ldd	r25, Z+3	; 0x03
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	4f e7       	ldi	r20, 0x7F	; 127
    1cb0:	53 e4       	ldi	r21, 0x43	; 67
    1cb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cb6:	18 16       	cp	r1, r24
    1cb8:	0c f0       	brlt	.+2      	; 0x1cbc <LCD_voidSendCommand_4bitMode+0xda>
    1cba:	c0 c0       	rjmp	.+384    	; 0x1e3c <LCD_voidSendCommand_4bitMode+0x25a>
	{
		_delay_ms(__us / 1000.0);
    1cbc:	fe 01       	movw	r30, r28
    1cbe:	e3 5a       	subi	r30, 0xA3	; 163
    1cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc2:	60 81       	ld	r22, Z
    1cc4:	71 81       	ldd	r23, Z+1	; 0x01
    1cc6:	82 81       	ldd	r24, Z+2	; 0x02
    1cc8:	93 81       	ldd	r25, Z+3	; 0x03
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	4a e7       	ldi	r20, 0x7A	; 122
    1cd0:	54 e4       	ldi	r21, 0x44	; 68
    1cd2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	fe 01       	movw	r30, r28
    1cdc:	ec 5a       	subi	r30, 0xAC	; 172
    1cde:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce0:	80 83       	st	Z, r24
    1ce2:	91 83       	std	Z+1, r25	; 0x01
    1ce4:	a2 83       	std	Z+2, r26	; 0x02
    1ce6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce8:	8e 01       	movw	r16, r28
    1cea:	00 5b       	subi	r16, 0xB0	; 176
    1cec:	1f 4f       	sbci	r17, 0xFF	; 255
    1cee:	fe 01       	movw	r30, r28
    1cf0:	ec 5a       	subi	r30, 0xAC	; 172
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	60 81       	ld	r22, Z
    1cf6:	71 81       	ldd	r23, Z+1	; 0x01
    1cf8:	82 81       	ldd	r24, Z+2	; 0x02
    1cfa:	93 81       	ldd	r25, Z+3	; 0x03
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	4a ef       	ldi	r20, 0xFA	; 250
    1d02:	54 e4       	ldi	r21, 0x44	; 68
    1d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	f8 01       	movw	r30, r16
    1d0e:	80 83       	st	Z, r24
    1d10:	91 83       	std	Z+1, r25	; 0x01
    1d12:	a2 83       	std	Z+2, r26	; 0x02
    1d14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d16:	fe 01       	movw	r30, r28
    1d18:	e0 5b       	subi	r30, 0xB0	; 176
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	60 81       	ld	r22, Z
    1d1e:	71 81       	ldd	r23, Z+1	; 0x01
    1d20:	82 81       	ldd	r24, Z+2	; 0x02
    1d22:	93 81       	ldd	r25, Z+3	; 0x03
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	40 e8       	ldi	r20, 0x80	; 128
    1d2a:	5f e3       	ldi	r21, 0x3F	; 63
    1d2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d30:	88 23       	and	r24, r24
    1d32:	44 f4       	brge	.+16     	; 0x1d44 <LCD_voidSendCommand_4bitMode+0x162>
		__ticks = 1;
    1d34:	fe 01       	movw	r30, r28
    1d36:	e2 5b       	subi	r30, 0xB2	; 178
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	91 83       	std	Z+1, r25	; 0x01
    1d40:	80 83       	st	Z, r24
    1d42:	64 c0       	rjmp	.+200    	; 0x1e0c <LCD_voidSendCommand_4bitMode+0x22a>
	else if (__tmp > 65535)
    1d44:	fe 01       	movw	r30, r28
    1d46:	e0 5b       	subi	r30, 0xB0	; 176
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	60 81       	ld	r22, Z
    1d4c:	71 81       	ldd	r23, Z+1	; 0x01
    1d4e:	82 81       	ldd	r24, Z+2	; 0x02
    1d50:	93 81       	ldd	r25, Z+3	; 0x03
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	3f ef       	ldi	r19, 0xFF	; 255
    1d56:	4f e7       	ldi	r20, 0x7F	; 127
    1d58:	57 e4       	ldi	r21, 0x47	; 71
    1d5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d5e:	18 16       	cp	r1, r24
    1d60:	0c f0       	brlt	.+2      	; 0x1d64 <LCD_voidSendCommand_4bitMode+0x182>
    1d62:	43 c0       	rjmp	.+134    	; 0x1dea <LCD_voidSendCommand_4bitMode+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d64:	fe 01       	movw	r30, r28
    1d66:	ec 5a       	subi	r30, 0xAC	; 172
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	60 81       	ld	r22, Z
    1d6c:	71 81       	ldd	r23, Z+1	; 0x01
    1d6e:	82 81       	ldd	r24, Z+2	; 0x02
    1d70:	93 81       	ldd	r25, Z+3	; 0x03
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e2       	ldi	r20, 0x20	; 32
    1d78:	51 e4       	ldi	r21, 0x41	; 65
    1d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	8e 01       	movw	r16, r28
    1d84:	02 5b       	subi	r16, 0xB2	; 178
    1d86:	1f 4f       	sbci	r17, 0xFF	; 255
    1d88:	bc 01       	movw	r22, r24
    1d8a:	cd 01       	movw	r24, r26
    1d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	f8 01       	movw	r30, r16
    1d96:	91 83       	std	Z+1, r25	; 0x01
    1d98:	80 83       	st	Z, r24
    1d9a:	1f c0       	rjmp	.+62     	; 0x1dda <LCD_voidSendCommand_4bitMode+0x1f8>
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	e4 5b       	subi	r30, 0xB4	; 180
    1da0:	ff 4f       	sbci	r31, 0xFF	; 255
    1da2:	88 ec       	ldi	r24, 0xC8	; 200
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	91 83       	std	Z+1, r25	; 0x01
    1da8:	80 83       	st	Z, r24
    1daa:	fe 01       	movw	r30, r28
    1dac:	e4 5b       	subi	r30, 0xB4	; 180
    1dae:	ff 4f       	sbci	r31, 0xFF	; 255
    1db0:	80 81       	ld	r24, Z
    1db2:	91 81       	ldd	r25, Z+1	; 0x01
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	f1 f7       	brne	.-4      	; 0x1db4 <LCD_voidSendCommand_4bitMode+0x1d2>
    1db8:	fe 01       	movw	r30, r28
    1dba:	e4 5b       	subi	r30, 0xB4	; 180
    1dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbe:	91 83       	std	Z+1, r25	; 0x01
    1dc0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc2:	de 01       	movw	r26, r28
    1dc4:	a2 5b       	subi	r26, 0xB2	; 178
    1dc6:	bf 4f       	sbci	r27, 0xFF	; 255
    1dc8:	fe 01       	movw	r30, r28
    1dca:	e2 5b       	subi	r30, 0xB2	; 178
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	80 81       	ld	r24, Z
    1dd0:	91 81       	ldd	r25, Z+1	; 0x01
    1dd2:	01 97       	sbiw	r24, 0x01	; 1
    1dd4:	11 96       	adiw	r26, 0x01	; 1
    1dd6:	9c 93       	st	X, r25
    1dd8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dda:	fe 01       	movw	r30, r28
    1ddc:	e2 5b       	subi	r30, 0xB2	; 178
    1dde:	ff 4f       	sbci	r31, 0xFF	; 255
    1de0:	80 81       	ld	r24, Z
    1de2:	91 81       	ldd	r25, Z+1	; 0x01
    1de4:	00 97       	sbiw	r24, 0x00	; 0
    1de6:	d1 f6       	brne	.-76     	; 0x1d9c <LCD_voidSendCommand_4bitMode+0x1ba>
    1de8:	4b c0       	rjmp	.+150    	; 0x1e80 <LCD_voidSendCommand_4bitMode+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dea:	8e 01       	movw	r16, r28
    1dec:	02 5b       	subi	r16, 0xB2	; 178
    1dee:	1f 4f       	sbci	r17, 0xFF	; 255
    1df0:	fe 01       	movw	r30, r28
    1df2:	e0 5b       	subi	r30, 0xB0	; 176
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	60 81       	ld	r22, Z
    1df8:	71 81       	ldd	r23, Z+1	; 0x01
    1dfa:	82 81       	ldd	r24, Z+2	; 0x02
    1dfc:	93 81       	ldd	r25, Z+3	; 0x03
    1dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	f8 01       	movw	r30, r16
    1e08:	91 83       	std	Z+1, r25	; 0x01
    1e0a:	80 83       	st	Z, r24
    1e0c:	de 01       	movw	r26, r28
    1e0e:	a6 5b       	subi	r26, 0xB6	; 182
    1e10:	bf 4f       	sbci	r27, 0xFF	; 255
    1e12:	fe 01       	movw	r30, r28
    1e14:	e2 5b       	subi	r30, 0xB2	; 178
    1e16:	ff 4f       	sbci	r31, 0xFF	; 255
    1e18:	80 81       	ld	r24, Z
    1e1a:	91 81       	ldd	r25, Z+1	; 0x01
    1e1c:	11 96       	adiw	r26, 0x01	; 1
    1e1e:	9c 93       	st	X, r25
    1e20:	8e 93       	st	-X, r24
    1e22:	fe 01       	movw	r30, r28
    1e24:	e6 5b       	subi	r30, 0xB6	; 182
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	80 81       	ld	r24, Z
    1e2a:	91 81       	ldd	r25, Z+1	; 0x01
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	f1 f7       	brne	.-4      	; 0x1e2c <LCD_voidSendCommand_4bitMode+0x24a>
    1e30:	fe 01       	movw	r30, r28
    1e32:	e6 5b       	subi	r30, 0xB6	; 182
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	91 83       	std	Z+1, r25	; 0x01
    1e38:	80 83       	st	Z, r24
    1e3a:	22 c0       	rjmp	.+68     	; 0x1e80 <LCD_voidSendCommand_4bitMode+0x29e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e3c:	8e 01       	movw	r16, r28
    1e3e:	08 5a       	subi	r16, 0xA8	; 168
    1e40:	1f 4f       	sbci	r17, 0xFF	; 255
    1e42:	fe 01       	movw	r30, r28
    1e44:	e7 5a       	subi	r30, 0xA7	; 167
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	60 81       	ld	r22, Z
    1e4a:	71 81       	ldd	r23, Z+1	; 0x01
    1e4c:	82 81       	ldd	r24, Z+2	; 0x02
    1e4e:	93 81       	ldd	r25, Z+3	; 0x03
    1e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	f8 01       	movw	r30, r16
    1e5a:	80 83       	st	Z, r24
    1e5c:	de 01       	movw	r26, r28
    1e5e:	a7 5b       	subi	r26, 0xB7	; 183
    1e60:	bf 4f       	sbci	r27, 0xFF	; 255
    1e62:	fe 01       	movw	r30, r28
    1e64:	e8 5a       	subi	r30, 0xA8	; 168
    1e66:	ff 4f       	sbci	r31, 0xFF	; 255
    1e68:	80 81       	ld	r24, Z
    1e6a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	e7 5b       	subi	r30, 0xB7	; 183
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	80 81       	ld	r24, Z
    1e74:	8a 95       	dec	r24
    1e76:	f1 f7       	brne	.-4      	; 0x1e74 <LCD_voidSendCommand_4bitMode+0x292>
    1e78:	fe 01       	movw	r30, r28
    1e7a:	e7 5b       	subi	r30, 0xB7	; 183
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	80 83       	st	Z, r24
    _delay_us(5);
    DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    1e80:	83 e0       	ldi	r24, 0x03	; 3
    1e82:	63 e0       	ldi	r22, 0x03	; 3
    1e84:	40 e0       	ldi	r20, 0x00	; 0
    1e86:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	eb 5b       	subi	r30, 0xBB	; 187
    1e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	a8 e4       	ldi	r26, 0x48	; 72
    1e96:	b3 e4       	ldi	r27, 0x43	; 67
    1e98:	80 83       	st	Z, r24
    1e9a:	91 83       	std	Z+1, r25	; 0x01
    1e9c:	a2 83       	std	Z+2, r26	; 0x02
    1e9e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ea0:	8e 01       	movw	r16, r28
    1ea2:	0f 5b       	subi	r16, 0xBF	; 191
    1ea4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea6:	fe 01       	movw	r30, r28
    1ea8:	eb 5b       	subi	r30, 0xBB	; 187
    1eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1eac:	60 81       	ld	r22, Z
    1eae:	71 81       	ldd	r23, Z+1	; 0x01
    1eb0:	82 81       	ldd	r24, Z+2	; 0x02
    1eb2:	93 81       	ldd	r25, Z+3	; 0x03
    1eb4:	2b ea       	ldi	r18, 0xAB	; 171
    1eb6:	3a ea       	ldi	r19, 0xAA	; 170
    1eb8:	4a e2       	ldi	r20, 0x2A	; 42
    1eba:	50 e4       	ldi	r21, 0x40	; 64
    1ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	f8 01       	movw	r30, r16
    1ec6:	80 83       	st	Z, r24
    1ec8:	91 83       	std	Z+1, r25	; 0x01
    1eca:	a2 83       	std	Z+2, r26	; 0x02
    1ecc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ece:	fe 01       	movw	r30, r28
    1ed0:	ef 5b       	subi	r30, 0xBF	; 191
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	60 81       	ld	r22, Z
    1ed6:	71 81       	ldd	r23, Z+1	; 0x01
    1ed8:	82 81       	ldd	r24, Z+2	; 0x02
    1eda:	93 81       	ldd	r25, Z+3	; 0x03
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	40 e8       	ldi	r20, 0x80	; 128
    1ee2:	5f e3       	ldi	r21, 0x3F	; 63
    1ee4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ee8:	88 23       	and	r24, r24
    1eea:	34 f4       	brge	.+12     	; 0x1ef8 <LCD_voidSendCommand_4bitMode+0x316>
		__ticks = 1;
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	fe 01       	movw	r30, r28
    1ef0:	e0 5c       	subi	r30, 0xC0	; 192
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	80 83       	st	Z, r24
    1ef6:	9d c0       	rjmp	.+314    	; 0x2032 <LCD_voidSendCommand_4bitMode+0x450>
	else if (__tmp > 255)
    1ef8:	fe 01       	movw	r30, r28
    1efa:	ef 5b       	subi	r30, 0xBF	; 191
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	60 81       	ld	r22, Z
    1f00:	71 81       	ldd	r23, Z+1	; 0x01
    1f02:	82 81       	ldd	r24, Z+2	; 0x02
    1f04:	93 81       	ldd	r25, Z+3	; 0x03
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	4f e7       	ldi	r20, 0x7F	; 127
    1f0c:	53 e4       	ldi	r21, 0x43	; 67
    1f0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f12:	18 16       	cp	r1, r24
    1f14:	0c f0       	brlt	.+2      	; 0x1f18 <LCD_voidSendCommand_4bitMode+0x336>
    1f16:	7e c0       	rjmp	.+252    	; 0x2014 <LCD_voidSendCommand_4bitMode+0x432>
	{
		_delay_ms(__us / 1000.0);
    1f18:	fe 01       	movw	r30, r28
    1f1a:	eb 5b       	subi	r30, 0xBB	; 187
    1f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1e:	60 81       	ld	r22, Z
    1f20:	71 81       	ldd	r23, Z+1	; 0x01
    1f22:	82 81       	ldd	r24, Z+2	; 0x02
    1f24:	93 81       	ldd	r25, Z+3	; 0x03
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	4a e7       	ldi	r20, 0x7A	; 122
    1f2c:	54 e4       	ldi	r21, 0x44	; 68
    1f2e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	8c af       	std	Y+60, r24	; 0x3c
    1f38:	9d af       	std	Y+61, r25	; 0x3d
    1f3a:	ae af       	std	Y+62, r26	; 0x3e
    1f3c:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f3e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f40:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f42:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f44:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	4a ef       	ldi	r20, 0xFA	; 250
    1f4c:	54 e4       	ldi	r21, 0x44	; 68
    1f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	88 af       	std	Y+56, r24	; 0x38
    1f58:	99 af       	std	Y+57, r25	; 0x39
    1f5a:	aa af       	std	Y+58, r26	; 0x3a
    1f5c:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1f5e:	68 ad       	ldd	r22, Y+56	; 0x38
    1f60:	79 ad       	ldd	r23, Y+57	; 0x39
    1f62:	8a ad       	ldd	r24, Y+58	; 0x3a
    1f64:	9b ad       	ldd	r25, Y+59	; 0x3b
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	40 e8       	ldi	r20, 0x80	; 128
    1f6c:	5f e3       	ldi	r21, 0x3F	; 63
    1f6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f72:	88 23       	and	r24, r24
    1f74:	2c f4       	brge	.+10     	; 0x1f80 <LCD_voidSendCommand_4bitMode+0x39e>
		__ticks = 1;
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	9f ab       	std	Y+55, r25	; 0x37
    1f7c:	8e ab       	std	Y+54, r24	; 0x36
    1f7e:	3f c0       	rjmp	.+126    	; 0x1ffe <LCD_voidSendCommand_4bitMode+0x41c>
	else if (__tmp > 65535)
    1f80:	68 ad       	ldd	r22, Y+56	; 0x38
    1f82:	79 ad       	ldd	r23, Y+57	; 0x39
    1f84:	8a ad       	ldd	r24, Y+58	; 0x3a
    1f86:	9b ad       	ldd	r25, Y+59	; 0x3b
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	3f ef       	ldi	r19, 0xFF	; 255
    1f8c:	4f e7       	ldi	r20, 0x7F	; 127
    1f8e:	57 e4       	ldi	r21, 0x47	; 71
    1f90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f94:	18 16       	cp	r1, r24
    1f96:	4c f5       	brge	.+82     	; 0x1fea <LCD_voidSendCommand_4bitMode+0x408>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f98:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f9a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f9c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f9e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e2       	ldi	r20, 0x20	; 32
    1fa6:	51 e4       	ldi	r21, 0x41	; 65
    1fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	bc 01       	movw	r22, r24
    1fb2:	cd 01       	movw	r24, r26
    1fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	9f ab       	std	Y+55, r25	; 0x37
    1fbe:	8e ab       	std	Y+54, r24	; 0x36
    1fc0:	0f c0       	rjmp	.+30     	; 0x1fe0 <LCD_voidSendCommand_4bitMode+0x3fe>
    1fc2:	88 ec       	ldi	r24, 0xC8	; 200
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	9d ab       	std	Y+53, r25	; 0x35
    1fc8:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fca:	8c a9       	ldd	r24, Y+52	; 0x34
    1fcc:	9d a9       	ldd	r25, Y+53	; 0x35
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	f1 f7       	brne	.-4      	; 0x1fce <LCD_voidSendCommand_4bitMode+0x3ec>
    1fd2:	9d ab       	std	Y+53, r25	; 0x35
    1fd4:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd6:	8e a9       	ldd	r24, Y+54	; 0x36
    1fd8:	9f a9       	ldd	r25, Y+55	; 0x37
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	9f ab       	std	Y+55, r25	; 0x37
    1fde:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe0:	8e a9       	ldd	r24, Y+54	; 0x36
    1fe2:	9f a9       	ldd	r25, Y+55	; 0x37
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	69 f7       	brne	.-38     	; 0x1fc2 <LCD_voidSendCommand_4bitMode+0x3e0>
    1fe8:	2d c0       	rjmp	.+90     	; 0x2044 <LCD_voidSendCommand_4bitMode+0x462>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fea:	68 ad       	ldd	r22, Y+56	; 0x38
    1fec:	79 ad       	ldd	r23, Y+57	; 0x39
    1fee:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ff0:	9b ad       	ldd	r25, Y+59	; 0x3b
    1ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	9f ab       	std	Y+55, r25	; 0x37
    1ffc:	8e ab       	std	Y+54, r24	; 0x36
    1ffe:	8e a9       	ldd	r24, Y+54	; 0x36
    2000:	9f a9       	ldd	r25, Y+55	; 0x37
    2002:	9b ab       	std	Y+51, r25	; 0x33
    2004:	8a ab       	std	Y+50, r24	; 0x32
    2006:	8a a9       	ldd	r24, Y+50	; 0x32
    2008:	9b a9       	ldd	r25, Y+51	; 0x33
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <LCD_voidSendCommand_4bitMode+0x428>
    200e:	9b ab       	std	Y+51, r25	; 0x33
    2010:	8a ab       	std	Y+50, r24	; 0x32
    2012:	18 c0       	rjmp	.+48     	; 0x2044 <LCD_voidSendCommand_4bitMode+0x462>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2014:	fe 01       	movw	r30, r28
    2016:	ef 5b       	subi	r30, 0xBF	; 191
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	60 81       	ld	r22, Z
    201c:	71 81       	ldd	r23, Z+1	; 0x01
    201e:	82 81       	ldd	r24, Z+2	; 0x02
    2020:	93 81       	ldd	r25, Z+3	; 0x03
    2022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	fe 01       	movw	r30, r28
    202c:	e0 5c       	subi	r30, 0xC0	; 192
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	80 83       	st	Z, r24
    2032:	fe 01       	movw	r30, r28
    2034:	e0 5c       	subi	r30, 0xC0	; 192
    2036:	ff 4f       	sbci	r31, 0xFF	; 255
    2038:	80 81       	ld	r24, Z
    203a:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    203c:	89 a9       	ldd	r24, Y+49	; 0x31
    203e:	8a 95       	dec	r24
    2040:	f1 f7       	brne	.-4      	; 0x203e <LCD_voidSendCommand_4bitMode+0x45c>
    2042:	89 ab       	std	Y+49, r24	; 0x31
    _delay_us(200);

    /* Send Lower nibble of command */
    DIO_voidWritePort(lcd_DATAPORT, (lcd_DATAPORT & 0x0F) | (u8CmdCpy <<4));
    2044:	fe 01       	movw	r30, r28
    2046:	ef 59       	subi	r30, 0x9F	; 159
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	80 81       	ld	r24, Z
    204c:	88 2f       	mov	r24, r24
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	82 95       	swap	r24
    2052:	92 95       	swap	r25
    2054:	90 7f       	andi	r25, 0xF0	; 240
    2056:	98 27       	eor	r25, r24
    2058:	80 7f       	andi	r24, 0xF0	; 240
    205a:	98 27       	eor	r25, r24
    205c:	84 60       	ori	r24, 0x04	; 4
    205e:	98 2f       	mov	r25, r24
    2060:	84 e0       	ldi	r24, 0x04	; 4
    2062:	69 2f       	mov	r22, r25
    2064:	0e 94 33 1c 	call	0x3866	; 0x3866 <DIO_voidWritePort>
    /* Enable Sequence */
    DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    2068:	83 e0       	ldi	r24, 0x03	; 3
    206a:	63 e0       	ldi	r22, 0x03	; 3
    206c:	41 e0       	ldi	r20, 0x01	; 1
    206e:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	a0 ea       	ldi	r26, 0xA0	; 160
    2078:	b0 e4       	ldi	r27, 0x40	; 64
    207a:	8d a7       	std	Y+45, r24	; 0x2d
    207c:	9e a7       	std	Y+46, r25	; 0x2e
    207e:	af a7       	std	Y+47, r26	; 0x2f
    2080:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2082:	6d a5       	ldd	r22, Y+45	; 0x2d
    2084:	7e a5       	ldd	r23, Y+46	; 0x2e
    2086:	8f a5       	ldd	r24, Y+47	; 0x2f
    2088:	98 a9       	ldd	r25, Y+48	; 0x30
    208a:	2b ea       	ldi	r18, 0xAB	; 171
    208c:	3a ea       	ldi	r19, 0xAA	; 170
    208e:	4a e2       	ldi	r20, 0x2A	; 42
    2090:	50 e4       	ldi	r21, 0x40	; 64
    2092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	89 a7       	std	Y+41, r24	; 0x29
    209c:	9a a7       	std	Y+42, r25	; 0x2a
    209e:	ab a7       	std	Y+43, r26	; 0x2b
    20a0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    20a2:	69 a5       	ldd	r22, Y+41	; 0x29
    20a4:	7a a5       	ldd	r23, Y+42	; 0x2a
    20a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    20a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	40 e8       	ldi	r20, 0x80	; 128
    20b0:	5f e3       	ldi	r21, 0x3F	; 63
    20b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20b6:	88 23       	and	r24, r24
    20b8:	1c f4       	brge	.+6      	; 0x20c0 <LCD_voidSendCommand_4bitMode+0x4de>
		__ticks = 1;
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	88 a7       	std	Y+40, r24	; 0x28
    20be:	91 c0       	rjmp	.+290    	; 0x21e2 <LCD_voidSendCommand_4bitMode+0x600>
	else if (__tmp > 255)
    20c0:	69 a5       	ldd	r22, Y+41	; 0x29
    20c2:	7a a5       	ldd	r23, Y+42	; 0x2a
    20c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    20c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	4f e7       	ldi	r20, 0x7F	; 127
    20ce:	53 e4       	ldi	r21, 0x43	; 67
    20d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20d4:	18 16       	cp	r1, r24
    20d6:	0c f0       	brlt	.+2      	; 0x20da <LCD_voidSendCommand_4bitMode+0x4f8>
    20d8:	7b c0       	rjmp	.+246    	; 0x21d0 <LCD_voidSendCommand_4bitMode+0x5ee>
	{
		_delay_ms(__us / 1000.0);
    20da:	6d a5       	ldd	r22, Y+45	; 0x2d
    20dc:	7e a5       	ldd	r23, Y+46	; 0x2e
    20de:	8f a5       	ldd	r24, Y+47	; 0x2f
    20e0:	98 a9       	ldd	r25, Y+48	; 0x30
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	4a e7       	ldi	r20, 0x7A	; 122
    20e8:	54 e4       	ldi	r21, 0x44	; 68
    20ea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	8c a3       	std	Y+36, r24	; 0x24
    20f4:	9d a3       	std	Y+37, r25	; 0x25
    20f6:	ae a3       	std	Y+38, r26	; 0x26
    20f8:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fa:	6c a1       	ldd	r22, Y+36	; 0x24
    20fc:	7d a1       	ldd	r23, Y+37	; 0x25
    20fe:	8e a1       	ldd	r24, Y+38	; 0x26
    2100:	9f a1       	ldd	r25, Y+39	; 0x27
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	4a ef       	ldi	r20, 0xFA	; 250
    2108:	54 e4       	ldi	r21, 0x44	; 68
    210a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	88 a3       	std	Y+32, r24	; 0x20
    2114:	99 a3       	std	Y+33, r25	; 0x21
    2116:	aa a3       	std	Y+34, r26	; 0x22
    2118:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    211a:	68 a1       	ldd	r22, Y+32	; 0x20
    211c:	79 a1       	ldd	r23, Y+33	; 0x21
    211e:	8a a1       	ldd	r24, Y+34	; 0x22
    2120:	9b a1       	ldd	r25, Y+35	; 0x23
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	40 e8       	ldi	r20, 0x80	; 128
    2128:	5f e3       	ldi	r21, 0x3F	; 63
    212a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    212e:	88 23       	and	r24, r24
    2130:	2c f4       	brge	.+10     	; 0x213c <LCD_voidSendCommand_4bitMode+0x55a>
		__ticks = 1;
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	9f 8f       	std	Y+31, r25	; 0x1f
    2138:	8e 8f       	std	Y+30, r24	; 0x1e
    213a:	3f c0       	rjmp	.+126    	; 0x21ba <LCD_voidSendCommand_4bitMode+0x5d8>
	else if (__tmp > 65535)
    213c:	68 a1       	ldd	r22, Y+32	; 0x20
    213e:	79 a1       	ldd	r23, Y+33	; 0x21
    2140:	8a a1       	ldd	r24, Y+34	; 0x22
    2142:	9b a1       	ldd	r25, Y+35	; 0x23
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	3f ef       	ldi	r19, 0xFF	; 255
    2148:	4f e7       	ldi	r20, 0x7F	; 127
    214a:	57 e4       	ldi	r21, 0x47	; 71
    214c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2150:	18 16       	cp	r1, r24
    2152:	4c f5       	brge	.+82     	; 0x21a6 <LCD_voidSendCommand_4bitMode+0x5c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2154:	6c a1       	ldd	r22, Y+36	; 0x24
    2156:	7d a1       	ldd	r23, Y+37	; 0x25
    2158:	8e a1       	ldd	r24, Y+38	; 0x26
    215a:	9f a1       	ldd	r25, Y+39	; 0x27
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	40 e2       	ldi	r20, 0x20	; 32
    2162:	51 e4       	ldi	r21, 0x41	; 65
    2164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	bc 01       	movw	r22, r24
    216e:	cd 01       	movw	r24, r26
    2170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	9f 8f       	std	Y+31, r25	; 0x1f
    217a:	8e 8f       	std	Y+30, r24	; 0x1e
    217c:	0f c0       	rjmp	.+30     	; 0x219c <LCD_voidSendCommand_4bitMode+0x5ba>
    217e:	88 ec       	ldi	r24, 0xC8	; 200
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	9d 8f       	std	Y+29, r25	; 0x1d
    2184:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2186:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2188:	9d 8d       	ldd	r25, Y+29	; 0x1d
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	f1 f7       	brne	.-4      	; 0x218a <LCD_voidSendCommand_4bitMode+0x5a8>
    218e:	9d 8f       	std	Y+29, r25	; 0x1d
    2190:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2192:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2194:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	9f 8f       	std	Y+31, r25	; 0x1f
    219a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    219c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    219e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21a0:	00 97       	sbiw	r24, 0x00	; 0
    21a2:	69 f7       	brne	.-38     	; 0x217e <LCD_voidSendCommand_4bitMode+0x59c>
    21a4:	24 c0       	rjmp	.+72     	; 0x21ee <LCD_voidSendCommand_4bitMode+0x60c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a6:	68 a1       	ldd	r22, Y+32	; 0x20
    21a8:	79 a1       	ldd	r23, Y+33	; 0x21
    21aa:	8a a1       	ldd	r24, Y+34	; 0x22
    21ac:	9b a1       	ldd	r25, Y+35	; 0x23
    21ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	9f 8f       	std	Y+31, r25	; 0x1f
    21b8:	8e 8f       	std	Y+30, r24	; 0x1e
    21ba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21bc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21be:	9b 8f       	std	Y+27, r25	; 0x1b
    21c0:	8a 8f       	std	Y+26, r24	; 0x1a
    21c2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21c4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	f1 f7       	brne	.-4      	; 0x21c6 <LCD_voidSendCommand_4bitMode+0x5e4>
    21ca:	9b 8f       	std	Y+27, r25	; 0x1b
    21cc:	8a 8f       	std	Y+26, r24	; 0x1a
    21ce:	0f c0       	rjmp	.+30     	; 0x21ee <LCD_voidSendCommand_4bitMode+0x60c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21d0:	69 a5       	ldd	r22, Y+41	; 0x29
    21d2:	7a a5       	ldd	r23, Y+42	; 0x2a
    21d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    21d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    21d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	88 a7       	std	Y+40, r24	; 0x28
    21e2:	88 a5       	ldd	r24, Y+40	; 0x28
    21e4:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21e6:	89 8d       	ldd	r24, Y+25	; 0x19
    21e8:	8a 95       	dec	r24
    21ea:	f1 f7       	brne	.-4      	; 0x21e8 <LCD_voidSendCommand_4bitMode+0x606>
    21ec:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(5);
    DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    21ee:	83 e0       	ldi	r24, 0x03	; 3
    21f0:	63 e0       	ldi	r22, 0x03	; 3
    21f2:	40 e0       	ldi	r20, 0x00	; 0
    21f4:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>
    21f8:	80 e0       	ldi	r24, 0x00	; 0
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	a0 ea       	ldi	r26, 0xA0	; 160
    21fe:	b0 e4       	ldi	r27, 0x40	; 64
    2200:	8d 8b       	std	Y+21, r24	; 0x15
    2202:	9e 8b       	std	Y+22, r25	; 0x16
    2204:	af 8b       	std	Y+23, r26	; 0x17
    2206:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2208:	6d 89       	ldd	r22, Y+21	; 0x15
    220a:	7e 89       	ldd	r23, Y+22	; 0x16
    220c:	8f 89       	ldd	r24, Y+23	; 0x17
    220e:	98 8d       	ldd	r25, Y+24	; 0x18
    2210:	2b ea       	ldi	r18, 0xAB	; 171
    2212:	3a ea       	ldi	r19, 0xAA	; 170
    2214:	4a e2       	ldi	r20, 0x2A	; 42
    2216:	50 e4       	ldi	r21, 0x40	; 64
    2218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	89 8b       	std	Y+17, r24	; 0x11
    2222:	9a 8b       	std	Y+18, r25	; 0x12
    2224:	ab 8b       	std	Y+19, r26	; 0x13
    2226:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2228:	69 89       	ldd	r22, Y+17	; 0x11
    222a:	7a 89       	ldd	r23, Y+18	; 0x12
    222c:	8b 89       	ldd	r24, Y+19	; 0x13
    222e:	9c 89       	ldd	r25, Y+20	; 0x14
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	40 e8       	ldi	r20, 0x80	; 128
    2236:	5f e3       	ldi	r21, 0x3F	; 63
    2238:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    223c:	88 23       	and	r24, r24
    223e:	1c f4       	brge	.+6      	; 0x2246 <LCD_voidSendCommand_4bitMode+0x664>
		__ticks = 1;
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	88 8b       	std	Y+16, r24	; 0x10
    2244:	91 c0       	rjmp	.+290    	; 0x2368 <LCD_voidSendCommand_4bitMode+0x786>
	else if (__tmp > 255)
    2246:	69 89       	ldd	r22, Y+17	; 0x11
    2248:	7a 89       	ldd	r23, Y+18	; 0x12
    224a:	8b 89       	ldd	r24, Y+19	; 0x13
    224c:	9c 89       	ldd	r25, Y+20	; 0x14
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	4f e7       	ldi	r20, 0x7F	; 127
    2254:	53 e4       	ldi	r21, 0x43	; 67
    2256:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    225a:	18 16       	cp	r1, r24
    225c:	0c f0       	brlt	.+2      	; 0x2260 <LCD_voidSendCommand_4bitMode+0x67e>
    225e:	7b c0       	rjmp	.+246    	; 0x2356 <LCD_voidSendCommand_4bitMode+0x774>
	{
		_delay_ms(__us / 1000.0);
    2260:	6d 89       	ldd	r22, Y+21	; 0x15
    2262:	7e 89       	ldd	r23, Y+22	; 0x16
    2264:	8f 89       	ldd	r24, Y+23	; 0x17
    2266:	98 8d       	ldd	r25, Y+24	; 0x18
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	4a e7       	ldi	r20, 0x7A	; 122
    226e:	54 e4       	ldi	r21, 0x44	; 68
    2270:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	8c 87       	std	Y+12, r24	; 0x0c
    227a:	9d 87       	std	Y+13, r25	; 0x0d
    227c:	ae 87       	std	Y+14, r26	; 0x0e
    227e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2280:	6c 85       	ldd	r22, Y+12	; 0x0c
    2282:	7d 85       	ldd	r23, Y+13	; 0x0d
    2284:	8e 85       	ldd	r24, Y+14	; 0x0e
    2286:	9f 85       	ldd	r25, Y+15	; 0x0f
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	4a ef       	ldi	r20, 0xFA	; 250
    228e:	54 e4       	ldi	r21, 0x44	; 68
    2290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	88 87       	std	Y+8, r24	; 0x08
    229a:	99 87       	std	Y+9, r25	; 0x09
    229c:	aa 87       	std	Y+10, r26	; 0x0a
    229e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    22a0:	68 85       	ldd	r22, Y+8	; 0x08
    22a2:	79 85       	ldd	r23, Y+9	; 0x09
    22a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    22a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	40 e8       	ldi	r20, 0x80	; 128
    22ae:	5f e3       	ldi	r21, 0x3F	; 63
    22b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22b4:	88 23       	and	r24, r24
    22b6:	2c f4       	brge	.+10     	; 0x22c2 <LCD_voidSendCommand_4bitMode+0x6e0>
		__ticks = 1;
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	9f 83       	std	Y+7, r25	; 0x07
    22be:	8e 83       	std	Y+6, r24	; 0x06
    22c0:	3f c0       	rjmp	.+126    	; 0x2340 <LCD_voidSendCommand_4bitMode+0x75e>
	else if (__tmp > 65535)
    22c2:	68 85       	ldd	r22, Y+8	; 0x08
    22c4:	79 85       	ldd	r23, Y+9	; 0x09
    22c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    22c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	3f ef       	ldi	r19, 0xFF	; 255
    22ce:	4f e7       	ldi	r20, 0x7F	; 127
    22d0:	57 e4       	ldi	r21, 0x47	; 71
    22d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22d6:	18 16       	cp	r1, r24
    22d8:	4c f5       	brge	.+82     	; 0x232c <LCD_voidSendCommand_4bitMode+0x74a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22da:	6c 85       	ldd	r22, Y+12	; 0x0c
    22dc:	7d 85       	ldd	r23, Y+13	; 0x0d
    22de:	8e 85       	ldd	r24, Y+14	; 0x0e
    22e0:	9f 85       	ldd	r25, Y+15	; 0x0f
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	40 e2       	ldi	r20, 0x20	; 32
    22e8:	51 e4       	ldi	r21, 0x41	; 65
    22ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	bc 01       	movw	r22, r24
    22f4:	cd 01       	movw	r24, r26
    22f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	9f 83       	std	Y+7, r25	; 0x07
    2300:	8e 83       	std	Y+6, r24	; 0x06
    2302:	0f c0       	rjmp	.+30     	; 0x2322 <LCD_voidSendCommand_4bitMode+0x740>
    2304:	88 ec       	ldi	r24, 0xC8	; 200
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	9d 83       	std	Y+5, r25	; 0x05
    230a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    230c:	8c 81       	ldd	r24, Y+4	; 0x04
    230e:	9d 81       	ldd	r25, Y+5	; 0x05
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	f1 f7       	brne	.-4      	; 0x2310 <LCD_voidSendCommand_4bitMode+0x72e>
    2314:	9d 83       	std	Y+5, r25	; 0x05
    2316:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2318:	8e 81       	ldd	r24, Y+6	; 0x06
    231a:	9f 81       	ldd	r25, Y+7	; 0x07
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	9f 83       	std	Y+7, r25	; 0x07
    2320:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2322:	8e 81       	ldd	r24, Y+6	; 0x06
    2324:	9f 81       	ldd	r25, Y+7	; 0x07
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	69 f7       	brne	.-38     	; 0x2304 <LCD_voidSendCommand_4bitMode+0x722>
    232a:	24 c0       	rjmp	.+72     	; 0x2374 <LCD_voidSendCommand_4bitMode+0x792>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232c:	68 85       	ldd	r22, Y+8	; 0x08
    232e:	79 85       	ldd	r23, Y+9	; 0x09
    2330:	8a 85       	ldd	r24, Y+10	; 0x0a
    2332:	9b 85       	ldd	r25, Y+11	; 0x0b
    2334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	9f 83       	std	Y+7, r25	; 0x07
    233e:	8e 83       	std	Y+6, r24	; 0x06
    2340:	8e 81       	ldd	r24, Y+6	; 0x06
    2342:	9f 81       	ldd	r25, Y+7	; 0x07
    2344:	9b 83       	std	Y+3, r25	; 0x03
    2346:	8a 83       	std	Y+2, r24	; 0x02
    2348:	8a 81       	ldd	r24, Y+2	; 0x02
    234a:	9b 81       	ldd	r25, Y+3	; 0x03
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	f1 f7       	brne	.-4      	; 0x234c <LCD_voidSendCommand_4bitMode+0x76a>
    2350:	9b 83       	std	Y+3, r25	; 0x03
    2352:	8a 83       	std	Y+2, r24	; 0x02
    2354:	0f c0       	rjmp	.+30     	; 0x2374 <LCD_voidSendCommand_4bitMode+0x792>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2356:	69 89       	ldd	r22, Y+17	; 0x11
    2358:	7a 89       	ldd	r23, Y+18	; 0x12
    235a:	8b 89       	ldd	r24, Y+19	; 0x13
    235c:	9c 89       	ldd	r25, Y+20	; 0x14
    235e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	88 8b       	std	Y+16, r24	; 0x10
    2368:	88 89       	ldd	r24, Y+16	; 0x10
    236a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	8a 95       	dec	r24
    2370:	f1 f7       	brne	.-4      	; 0x236e <LCD_voidSendCommand_4bitMode+0x78c>
    2372:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(5);
}
    2374:	cf 59       	subi	r28, 0x9F	; 159
    2376:	df 4f       	sbci	r29, 0xFF	; 255
    2378:	0f b6       	in	r0, 0x3f	; 63
    237a:	f8 94       	cli
    237c:	de bf       	out	0x3e, r29	; 62
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	cd bf       	out	0x3d, r28	; 61
    2382:	cf 91       	pop	r28
    2384:	df 91       	pop	r29
    2386:	1f 91       	pop	r17
    2388:	0f 91       	pop	r16
    238a:	08 95       	ret

0000238c <LCD_voidWriteCharctr>:


void LCD_voidWriteCharctr(uint8 u8DataCpy){		//LCD_voidWriteCharctr('A')
    238c:	df 93       	push	r29
    238e:	cf 93       	push	r28
    2390:	cd b7       	in	r28, 0x3d	; 61
    2392:	de b7       	in	r29, 0x3e	; 62
    2394:	2f 97       	sbiw	r28, 0x0f	; 15
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	f8 94       	cli
    239a:	de bf       	out	0x3e, r29	; 62
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	cd bf       	out	0x3d, r28	; 61
    23a0:	8f 87       	std	Y+15, r24	; 0x0f
	/* Command(0) or Data(1) */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_RSPIN, DIO_HIGH);
    23a2:	83 e0       	ldi	r24, 0x03	; 3
    23a4:	62 e0       	ldi	r22, 0x02	; 2
    23a6:	41 e0       	ldi	r20, 0x01	; 1
    23a8:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>
	/* Read(1) or Write(0) */
	//DIO_voidWritePin(lcd_CONTROLPORT, lcd_RWPIN, DIO_LOW);
	/* Write Data on Data Pins*/
	DIO_voidWritePort(lcd_DATAPORT, u8DataCpy);
    23ac:	84 e0       	ldi	r24, 0x04	; 4
    23ae:	6f 85       	ldd	r22, Y+15	; 0x0f
    23b0:	0e 94 33 1c 	call	0x3866	; 0x3866 <DIO_voidWritePort>
	/* Enable Sequence */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    23b4:	83 e0       	ldi	r24, 0x03	; 3
    23b6:	63 e0       	ldi	r22, 0x03	; 3
    23b8:	41 e0       	ldi	r20, 0x01	; 1
    23ba:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	a0 ea       	ldi	r26, 0xA0	; 160
    23c4:	b0 e4       	ldi	r27, 0x40	; 64
    23c6:	8b 87       	std	Y+11, r24	; 0x0b
    23c8:	9c 87       	std	Y+12, r25	; 0x0c
    23ca:	ad 87       	std	Y+13, r26	; 0x0d
    23cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    23d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	4a ef       	ldi	r20, 0xFA	; 250
    23dc:	54 e4       	ldi	r21, 0x44	; 68
    23de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	8f 83       	std	Y+7, r24	; 0x07
    23e8:	98 87       	std	Y+8, r25	; 0x08
    23ea:	a9 87       	std	Y+9, r26	; 0x09
    23ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23ee:	6f 81       	ldd	r22, Y+7	; 0x07
    23f0:	78 85       	ldd	r23, Y+8	; 0x08
    23f2:	89 85       	ldd	r24, Y+9	; 0x09
    23f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	40 e8       	ldi	r20, 0x80	; 128
    23fc:	5f e3       	ldi	r21, 0x3F	; 63
    23fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2402:	88 23       	and	r24, r24
    2404:	2c f4       	brge	.+10     	; 0x2410 <LCD_voidWriteCharctr+0x84>
		__ticks = 1;
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	9e 83       	std	Y+6, r25	; 0x06
    240c:	8d 83       	std	Y+5, r24	; 0x05
    240e:	3f c0       	rjmp	.+126    	; 0x248e <LCD_voidWriteCharctr+0x102>
	else if (__tmp > 65535)
    2410:	6f 81       	ldd	r22, Y+7	; 0x07
    2412:	78 85       	ldd	r23, Y+8	; 0x08
    2414:	89 85       	ldd	r24, Y+9	; 0x09
    2416:	9a 85       	ldd	r25, Y+10	; 0x0a
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	3f ef       	ldi	r19, 0xFF	; 255
    241c:	4f e7       	ldi	r20, 0x7F	; 127
    241e:	57 e4       	ldi	r21, 0x47	; 71
    2420:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2424:	18 16       	cp	r1, r24
    2426:	4c f5       	brge	.+82     	; 0x247a <LCD_voidWriteCharctr+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2428:	6b 85       	ldd	r22, Y+11	; 0x0b
    242a:	7c 85       	ldd	r23, Y+12	; 0x0c
    242c:	8d 85       	ldd	r24, Y+13	; 0x0d
    242e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	40 e2       	ldi	r20, 0x20	; 32
    2436:	51 e4       	ldi	r21, 0x41	; 65
    2438:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	bc 01       	movw	r22, r24
    2442:	cd 01       	movw	r24, r26
    2444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	9e 83       	std	Y+6, r25	; 0x06
    244e:	8d 83       	std	Y+5, r24	; 0x05
    2450:	0f c0       	rjmp	.+30     	; 0x2470 <LCD_voidWriteCharctr+0xe4>
    2452:	88 ec       	ldi	r24, 0xC8	; 200
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	9c 83       	std	Y+4, r25	; 0x04
    2458:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    245a:	8b 81       	ldd	r24, Y+3	; 0x03
    245c:	9c 81       	ldd	r25, Y+4	; 0x04
    245e:	01 97       	sbiw	r24, 0x01	; 1
    2460:	f1 f7       	brne	.-4      	; 0x245e <LCD_voidWriteCharctr+0xd2>
    2462:	9c 83       	std	Y+4, r25	; 0x04
    2464:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2466:	8d 81       	ldd	r24, Y+5	; 0x05
    2468:	9e 81       	ldd	r25, Y+6	; 0x06
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	9e 83       	std	Y+6, r25	; 0x06
    246e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2470:	8d 81       	ldd	r24, Y+5	; 0x05
    2472:	9e 81       	ldd	r25, Y+6	; 0x06
    2474:	00 97       	sbiw	r24, 0x00	; 0
    2476:	69 f7       	brne	.-38     	; 0x2452 <LCD_voidWriteCharctr+0xc6>
    2478:	14 c0       	rjmp	.+40     	; 0x24a2 <LCD_voidWriteCharctr+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    247a:	6f 81       	ldd	r22, Y+7	; 0x07
    247c:	78 85       	ldd	r23, Y+8	; 0x08
    247e:	89 85       	ldd	r24, Y+9	; 0x09
    2480:	9a 85       	ldd	r25, Y+10	; 0x0a
    2482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	9e 83       	std	Y+6, r25	; 0x06
    248c:	8d 83       	std	Y+5, r24	; 0x05
    248e:	8d 81       	ldd	r24, Y+5	; 0x05
    2490:	9e 81       	ldd	r25, Y+6	; 0x06
    2492:	9a 83       	std	Y+2, r25	; 0x02
    2494:	89 83       	std	Y+1, r24	; 0x01
    2496:	89 81       	ldd	r24, Y+1	; 0x01
    2498:	9a 81       	ldd	r25, Y+2	; 0x02
    249a:	01 97       	sbiw	r24, 0x01	; 1
    249c:	f1 f7       	brne	.-4      	; 0x249a <LCD_voidWriteCharctr+0x10e>
    249e:	9a 83       	std	Y+2, r25	; 0x02
    24a0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    24a2:	83 e0       	ldi	r24, 0x03	; 3
    24a4:	63 e0       	ldi	r22, 0x03	; 3
    24a6:	40 e0       	ldi	r20, 0x00	; 0
    24a8:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>

}
    24ac:	2f 96       	adiw	r28, 0x0f	; 15
    24ae:	0f b6       	in	r0, 0x3f	; 63
    24b0:	f8 94       	cli
    24b2:	de bf       	out	0x3e, r29	; 62
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	cd bf       	out	0x3d, r28	; 61
    24b8:	cf 91       	pop	r28
    24ba:	df 91       	pop	r29
    24bc:	08 95       	ret

000024be <LCD_voidWriteCharctr_4bitMode>:
void LCD_voidWriteCharctr_4bitMode(uint8 u8DataCpy){		//LCD_voidWriteCharctr('A')
    24be:	0f 93       	push	r16
    24c0:	1f 93       	push	r17
    24c2:	df 93       	push	r29
    24c4:	cf 93       	push	r28
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	c1 56       	subi	r28, 0x61	; 97
    24cc:	d0 40       	sbci	r29, 0x00	; 0
    24ce:	0f b6       	in	r0, 0x3f	; 63
    24d0:	f8 94       	cli
    24d2:	de bf       	out	0x3e, r29	; 62
    24d4:	0f be       	out	0x3f, r0	; 63
    24d6:	cd bf       	out	0x3d, r28	; 61
    24d8:	fe 01       	movw	r30, r28
    24da:	ef 59       	subi	r30, 0x9F	; 159
    24dc:	ff 4f       	sbci	r31, 0xFF	; 255
    24de:	80 83       	st	Z, r24
	/* Command(0) or Data(1) */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_RSPIN, DIO_HIGH);
    24e0:	83 e0       	ldi	r24, 0x03	; 3
    24e2:	62 e0       	ldi	r22, 0x02	; 2
    24e4:	41 e0       	ldi	r20, 0x01	; 1
    24e6:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>
	/* Read(1) or Write(0) */
	//DIO_voidWritePin(lcd_CONTROLPORT, lcd_RWPIN, DIO_LOW);
	/* Write Data on Data Pins, sending upper nibble*/
	DIO_voidWritePort(lcd_DATAPORT, (lcd_DATAPORT & 0x0F) | (u8DataCpy & 0xF0));
    24ea:	fe 01       	movw	r30, r28
    24ec:	ef 59       	subi	r30, 0x9F	; 159
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	80 81       	ld	r24, Z
    24f2:	80 7f       	andi	r24, 0xF0	; 240
    24f4:	84 60       	ori	r24, 0x04	; 4
    24f6:	98 2f       	mov	r25, r24
    24f8:	84 e0       	ldi	r24, 0x04	; 4
    24fa:	69 2f       	mov	r22, r25
    24fc:	0e 94 33 1c 	call	0x3866	; 0x3866 <DIO_voidWritePort>
	/* Enable Sequence */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    2500:	83 e0       	ldi	r24, 0x03	; 3
    2502:	63 e0       	ldi	r22, 0x03	; 3
    2504:	41 e0       	ldi	r20, 0x01	; 1
    2506:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>
    250a:	fe 01       	movw	r30, r28
    250c:	e3 5a       	subi	r30, 0xA3	; 163
    250e:	ff 4f       	sbci	r31, 0xFF	; 255
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	a0 ea       	ldi	r26, 0xA0	; 160
    2516:	b0 e4       	ldi	r27, 0x40	; 64
    2518:	80 83       	st	Z, r24
    251a:	91 83       	std	Z+1, r25	; 0x01
    251c:	a2 83       	std	Z+2, r26	; 0x02
    251e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2520:	8e 01       	movw	r16, r28
    2522:	07 5a       	subi	r16, 0xA7	; 167
    2524:	1f 4f       	sbci	r17, 0xFF	; 255
    2526:	fe 01       	movw	r30, r28
    2528:	e3 5a       	subi	r30, 0xA3	; 163
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	60 81       	ld	r22, Z
    252e:	71 81       	ldd	r23, Z+1	; 0x01
    2530:	82 81       	ldd	r24, Z+2	; 0x02
    2532:	93 81       	ldd	r25, Z+3	; 0x03
    2534:	2b ea       	ldi	r18, 0xAB	; 171
    2536:	3a ea       	ldi	r19, 0xAA	; 170
    2538:	4a e2       	ldi	r20, 0x2A	; 42
    253a:	50 e4       	ldi	r21, 0x40	; 64
    253c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	f8 01       	movw	r30, r16
    2546:	80 83       	st	Z, r24
    2548:	91 83       	std	Z+1, r25	; 0x01
    254a:	a2 83       	std	Z+2, r26	; 0x02
    254c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    254e:	fe 01       	movw	r30, r28
    2550:	e7 5a       	subi	r30, 0xA7	; 167
    2552:	ff 4f       	sbci	r31, 0xFF	; 255
    2554:	60 81       	ld	r22, Z
    2556:	71 81       	ldd	r23, Z+1	; 0x01
    2558:	82 81       	ldd	r24, Z+2	; 0x02
    255a:	93 81       	ldd	r25, Z+3	; 0x03
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e8       	ldi	r20, 0x80	; 128
    2562:	5f e3       	ldi	r21, 0x3F	; 63
    2564:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2568:	88 23       	and	r24, r24
    256a:	34 f4       	brge	.+12     	; 0x2578 <LCD_voidWriteCharctr_4bitMode+0xba>
		__ticks = 1;
    256c:	fe 01       	movw	r30, r28
    256e:	e8 5a       	subi	r30, 0xA8	; 168
    2570:	ff 4f       	sbci	r31, 0xFF	; 255
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	80 83       	st	Z, r24
    2576:	e0 c0       	rjmp	.+448    	; 0x2738 <LCD_voidWriteCharctr_4bitMode+0x27a>
	else if (__tmp > 255)
    2578:	fe 01       	movw	r30, r28
    257a:	e7 5a       	subi	r30, 0xA7	; 167
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	60 81       	ld	r22, Z
    2580:	71 81       	ldd	r23, Z+1	; 0x01
    2582:	82 81       	ldd	r24, Z+2	; 0x02
    2584:	93 81       	ldd	r25, Z+3	; 0x03
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	4f e7       	ldi	r20, 0x7F	; 127
    258c:	53 e4       	ldi	r21, 0x43	; 67
    258e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2592:	18 16       	cp	r1, r24
    2594:	0c f0       	brlt	.+2      	; 0x2598 <LCD_voidWriteCharctr_4bitMode+0xda>
    2596:	c0 c0       	rjmp	.+384    	; 0x2718 <LCD_voidWriteCharctr_4bitMode+0x25a>
	{
		_delay_ms(__us / 1000.0);
    2598:	fe 01       	movw	r30, r28
    259a:	e3 5a       	subi	r30, 0xA3	; 163
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	60 81       	ld	r22, Z
    25a0:	71 81       	ldd	r23, Z+1	; 0x01
    25a2:	82 81       	ldd	r24, Z+2	; 0x02
    25a4:	93 81       	ldd	r25, Z+3	; 0x03
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	4a e7       	ldi	r20, 0x7A	; 122
    25ac:	54 e4       	ldi	r21, 0x44	; 68
    25ae:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	fe 01       	movw	r30, r28
    25b8:	ec 5a       	subi	r30, 0xAC	; 172
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	80 83       	st	Z, r24
    25be:	91 83       	std	Z+1, r25	; 0x01
    25c0:	a2 83       	std	Z+2, r26	; 0x02
    25c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c4:	8e 01       	movw	r16, r28
    25c6:	00 5b       	subi	r16, 0xB0	; 176
    25c8:	1f 4f       	sbci	r17, 0xFF	; 255
    25ca:	fe 01       	movw	r30, r28
    25cc:	ec 5a       	subi	r30, 0xAC	; 172
    25ce:	ff 4f       	sbci	r31, 0xFF	; 255
    25d0:	60 81       	ld	r22, Z
    25d2:	71 81       	ldd	r23, Z+1	; 0x01
    25d4:	82 81       	ldd	r24, Z+2	; 0x02
    25d6:	93 81       	ldd	r25, Z+3	; 0x03
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	4a ef       	ldi	r20, 0xFA	; 250
    25de:	54 e4       	ldi	r21, 0x44	; 68
    25e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	f8 01       	movw	r30, r16
    25ea:	80 83       	st	Z, r24
    25ec:	91 83       	std	Z+1, r25	; 0x01
    25ee:	a2 83       	std	Z+2, r26	; 0x02
    25f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25f2:	fe 01       	movw	r30, r28
    25f4:	e0 5b       	subi	r30, 0xB0	; 176
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	60 81       	ld	r22, Z
    25fa:	71 81       	ldd	r23, Z+1	; 0x01
    25fc:	82 81       	ldd	r24, Z+2	; 0x02
    25fe:	93 81       	ldd	r25, Z+3	; 0x03
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	40 e8       	ldi	r20, 0x80	; 128
    2606:	5f e3       	ldi	r21, 0x3F	; 63
    2608:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    260c:	88 23       	and	r24, r24
    260e:	44 f4       	brge	.+16     	; 0x2620 <LCD_voidWriteCharctr_4bitMode+0x162>
		__ticks = 1;
    2610:	fe 01       	movw	r30, r28
    2612:	e2 5b       	subi	r30, 0xB2	; 178
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	91 83       	std	Z+1, r25	; 0x01
    261c:	80 83       	st	Z, r24
    261e:	64 c0       	rjmp	.+200    	; 0x26e8 <LCD_voidWriteCharctr_4bitMode+0x22a>
	else if (__tmp > 65535)
    2620:	fe 01       	movw	r30, r28
    2622:	e0 5b       	subi	r30, 0xB0	; 176
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	60 81       	ld	r22, Z
    2628:	71 81       	ldd	r23, Z+1	; 0x01
    262a:	82 81       	ldd	r24, Z+2	; 0x02
    262c:	93 81       	ldd	r25, Z+3	; 0x03
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	3f ef       	ldi	r19, 0xFF	; 255
    2632:	4f e7       	ldi	r20, 0x7F	; 127
    2634:	57 e4       	ldi	r21, 0x47	; 71
    2636:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    263a:	18 16       	cp	r1, r24
    263c:	0c f0       	brlt	.+2      	; 0x2640 <LCD_voidWriteCharctr_4bitMode+0x182>
    263e:	43 c0       	rjmp	.+134    	; 0x26c6 <LCD_voidWriteCharctr_4bitMode+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2640:	fe 01       	movw	r30, r28
    2642:	ec 5a       	subi	r30, 0xAC	; 172
    2644:	ff 4f       	sbci	r31, 0xFF	; 255
    2646:	60 81       	ld	r22, Z
    2648:	71 81       	ldd	r23, Z+1	; 0x01
    264a:	82 81       	ldd	r24, Z+2	; 0x02
    264c:	93 81       	ldd	r25, Z+3	; 0x03
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	40 e2       	ldi	r20, 0x20	; 32
    2654:	51 e4       	ldi	r21, 0x41	; 65
    2656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	8e 01       	movw	r16, r28
    2660:	02 5b       	subi	r16, 0xB2	; 178
    2662:	1f 4f       	sbci	r17, 0xFF	; 255
    2664:	bc 01       	movw	r22, r24
    2666:	cd 01       	movw	r24, r26
    2668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	f8 01       	movw	r30, r16
    2672:	91 83       	std	Z+1, r25	; 0x01
    2674:	80 83       	st	Z, r24
    2676:	1f c0       	rjmp	.+62     	; 0x26b6 <LCD_voidWriteCharctr_4bitMode+0x1f8>
    2678:	fe 01       	movw	r30, r28
    267a:	e4 5b       	subi	r30, 0xB4	; 180
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	88 ec       	ldi	r24, 0xC8	; 200
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	91 83       	std	Z+1, r25	; 0x01
    2684:	80 83       	st	Z, r24
    2686:	fe 01       	movw	r30, r28
    2688:	e4 5b       	subi	r30, 0xB4	; 180
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	80 81       	ld	r24, Z
    268e:	91 81       	ldd	r25, Z+1	; 0x01
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	f1 f7       	brne	.-4      	; 0x2690 <LCD_voidWriteCharctr_4bitMode+0x1d2>
    2694:	fe 01       	movw	r30, r28
    2696:	e4 5b       	subi	r30, 0xB4	; 180
    2698:	ff 4f       	sbci	r31, 0xFF	; 255
    269a:	91 83       	std	Z+1, r25	; 0x01
    269c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269e:	de 01       	movw	r26, r28
    26a0:	a2 5b       	subi	r26, 0xB2	; 178
    26a2:	bf 4f       	sbci	r27, 0xFF	; 255
    26a4:	fe 01       	movw	r30, r28
    26a6:	e2 5b       	subi	r30, 0xB2	; 178
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	80 81       	ld	r24, Z
    26ac:	91 81       	ldd	r25, Z+1	; 0x01
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	11 96       	adiw	r26, 0x01	; 1
    26b2:	9c 93       	st	X, r25
    26b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b6:	fe 01       	movw	r30, r28
    26b8:	e2 5b       	subi	r30, 0xB2	; 178
    26ba:	ff 4f       	sbci	r31, 0xFF	; 255
    26bc:	80 81       	ld	r24, Z
    26be:	91 81       	ldd	r25, Z+1	; 0x01
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	d1 f6       	brne	.-76     	; 0x2678 <LCD_voidWriteCharctr_4bitMode+0x1ba>
    26c4:	4b c0       	rjmp	.+150    	; 0x275c <LCD_voidWriteCharctr_4bitMode+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c6:	8e 01       	movw	r16, r28
    26c8:	02 5b       	subi	r16, 0xB2	; 178
    26ca:	1f 4f       	sbci	r17, 0xFF	; 255
    26cc:	fe 01       	movw	r30, r28
    26ce:	e0 5b       	subi	r30, 0xB0	; 176
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	60 81       	ld	r22, Z
    26d4:	71 81       	ldd	r23, Z+1	; 0x01
    26d6:	82 81       	ldd	r24, Z+2	; 0x02
    26d8:	93 81       	ldd	r25, Z+3	; 0x03
    26da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	f8 01       	movw	r30, r16
    26e4:	91 83       	std	Z+1, r25	; 0x01
    26e6:	80 83       	st	Z, r24
    26e8:	de 01       	movw	r26, r28
    26ea:	a6 5b       	subi	r26, 0xB6	; 182
    26ec:	bf 4f       	sbci	r27, 0xFF	; 255
    26ee:	fe 01       	movw	r30, r28
    26f0:	e2 5b       	subi	r30, 0xB2	; 178
    26f2:	ff 4f       	sbci	r31, 0xFF	; 255
    26f4:	80 81       	ld	r24, Z
    26f6:	91 81       	ldd	r25, Z+1	; 0x01
    26f8:	11 96       	adiw	r26, 0x01	; 1
    26fa:	9c 93       	st	X, r25
    26fc:	8e 93       	st	-X, r24
    26fe:	fe 01       	movw	r30, r28
    2700:	e6 5b       	subi	r30, 0xB6	; 182
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	80 81       	ld	r24, Z
    2706:	91 81       	ldd	r25, Z+1	; 0x01
    2708:	01 97       	sbiw	r24, 0x01	; 1
    270a:	f1 f7       	brne	.-4      	; 0x2708 <LCD_voidWriteCharctr_4bitMode+0x24a>
    270c:	fe 01       	movw	r30, r28
    270e:	e6 5b       	subi	r30, 0xB6	; 182
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	91 83       	std	Z+1, r25	; 0x01
    2714:	80 83       	st	Z, r24
    2716:	22 c0       	rjmp	.+68     	; 0x275c <LCD_voidWriteCharctr_4bitMode+0x29e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2718:	8e 01       	movw	r16, r28
    271a:	08 5a       	subi	r16, 0xA8	; 168
    271c:	1f 4f       	sbci	r17, 0xFF	; 255
    271e:	fe 01       	movw	r30, r28
    2720:	e7 5a       	subi	r30, 0xA7	; 167
    2722:	ff 4f       	sbci	r31, 0xFF	; 255
    2724:	60 81       	ld	r22, Z
    2726:	71 81       	ldd	r23, Z+1	; 0x01
    2728:	82 81       	ldd	r24, Z+2	; 0x02
    272a:	93 81       	ldd	r25, Z+3	; 0x03
    272c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	f8 01       	movw	r30, r16
    2736:	80 83       	st	Z, r24
    2738:	de 01       	movw	r26, r28
    273a:	a7 5b       	subi	r26, 0xB7	; 183
    273c:	bf 4f       	sbci	r27, 0xFF	; 255
    273e:	fe 01       	movw	r30, r28
    2740:	e8 5a       	subi	r30, 0xA8	; 168
    2742:	ff 4f       	sbci	r31, 0xFF	; 255
    2744:	80 81       	ld	r24, Z
    2746:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2748:	fe 01       	movw	r30, r28
    274a:	e7 5b       	subi	r30, 0xB7	; 183
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	80 81       	ld	r24, Z
    2750:	8a 95       	dec	r24
    2752:	f1 f7       	brne	.-4      	; 0x2750 <LCD_voidWriteCharctr_4bitMode+0x292>
    2754:	fe 01       	movw	r30, r28
    2756:	e7 5b       	subi	r30, 0xB7	; 183
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	80 83       	st	Z, r24
	_delay_us(5);
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    275c:	83 e0       	ldi	r24, 0x03	; 3
    275e:	63 e0       	ldi	r22, 0x03	; 3
    2760:	40 e0       	ldi	r20, 0x00	; 0
    2762:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>
    2766:	fe 01       	movw	r30, r28
    2768:	eb 5b       	subi	r30, 0xBB	; 187
    276a:	ff 4f       	sbci	r31, 0xFF	; 255
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	a8 e4       	ldi	r26, 0x48	; 72
    2772:	b3 e4       	ldi	r27, 0x43	; 67
    2774:	80 83       	st	Z, r24
    2776:	91 83       	std	Z+1, r25	; 0x01
    2778:	a2 83       	std	Z+2, r26	; 0x02
    277a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    277c:	8e 01       	movw	r16, r28
    277e:	0f 5b       	subi	r16, 0xBF	; 191
    2780:	1f 4f       	sbci	r17, 0xFF	; 255
    2782:	fe 01       	movw	r30, r28
    2784:	eb 5b       	subi	r30, 0xBB	; 187
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	60 81       	ld	r22, Z
    278a:	71 81       	ldd	r23, Z+1	; 0x01
    278c:	82 81       	ldd	r24, Z+2	; 0x02
    278e:	93 81       	ldd	r25, Z+3	; 0x03
    2790:	2b ea       	ldi	r18, 0xAB	; 171
    2792:	3a ea       	ldi	r19, 0xAA	; 170
    2794:	4a e2       	ldi	r20, 0x2A	; 42
    2796:	50 e4       	ldi	r21, 0x40	; 64
    2798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	f8 01       	movw	r30, r16
    27a2:	80 83       	st	Z, r24
    27a4:	91 83       	std	Z+1, r25	; 0x01
    27a6:	a2 83       	std	Z+2, r26	; 0x02
    27a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27aa:	fe 01       	movw	r30, r28
    27ac:	ef 5b       	subi	r30, 0xBF	; 191
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	60 81       	ld	r22, Z
    27b2:	71 81       	ldd	r23, Z+1	; 0x01
    27b4:	82 81       	ldd	r24, Z+2	; 0x02
    27b6:	93 81       	ldd	r25, Z+3	; 0x03
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	40 e8       	ldi	r20, 0x80	; 128
    27be:	5f e3       	ldi	r21, 0x3F	; 63
    27c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27c4:	88 23       	and	r24, r24
    27c6:	34 f4       	brge	.+12     	; 0x27d4 <LCD_voidWriteCharctr_4bitMode+0x316>
		__ticks = 1;
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	fe 01       	movw	r30, r28
    27cc:	e0 5c       	subi	r30, 0xC0	; 192
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	80 83       	st	Z, r24
    27d2:	9d c0       	rjmp	.+314    	; 0x290e <LCD_voidWriteCharctr_4bitMode+0x450>
	else if (__tmp > 255)
    27d4:	fe 01       	movw	r30, r28
    27d6:	ef 5b       	subi	r30, 0xBF	; 191
    27d8:	ff 4f       	sbci	r31, 0xFF	; 255
    27da:	60 81       	ld	r22, Z
    27dc:	71 81       	ldd	r23, Z+1	; 0x01
    27de:	82 81       	ldd	r24, Z+2	; 0x02
    27e0:	93 81       	ldd	r25, Z+3	; 0x03
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	4f e7       	ldi	r20, 0x7F	; 127
    27e8:	53 e4       	ldi	r21, 0x43	; 67
    27ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27ee:	18 16       	cp	r1, r24
    27f0:	0c f0       	brlt	.+2      	; 0x27f4 <LCD_voidWriteCharctr_4bitMode+0x336>
    27f2:	7e c0       	rjmp	.+252    	; 0x28f0 <LCD_voidWriteCharctr_4bitMode+0x432>
	{
		_delay_ms(__us / 1000.0);
    27f4:	fe 01       	movw	r30, r28
    27f6:	eb 5b       	subi	r30, 0xBB	; 187
    27f8:	ff 4f       	sbci	r31, 0xFF	; 255
    27fa:	60 81       	ld	r22, Z
    27fc:	71 81       	ldd	r23, Z+1	; 0x01
    27fe:	82 81       	ldd	r24, Z+2	; 0x02
    2800:	93 81       	ldd	r25, Z+3	; 0x03
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	4a e7       	ldi	r20, 0x7A	; 122
    2808:	54 e4       	ldi	r21, 0x44	; 68
    280a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	8c af       	std	Y+60, r24	; 0x3c
    2814:	9d af       	std	Y+61, r25	; 0x3d
    2816:	ae af       	std	Y+62, r26	; 0x3e
    2818:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    281a:	6c ad       	ldd	r22, Y+60	; 0x3c
    281c:	7d ad       	ldd	r23, Y+61	; 0x3d
    281e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2820:	9f ad       	ldd	r25, Y+63	; 0x3f
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	4a ef       	ldi	r20, 0xFA	; 250
    2828:	54 e4       	ldi	r21, 0x44	; 68
    282a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	88 af       	std	Y+56, r24	; 0x38
    2834:	99 af       	std	Y+57, r25	; 0x39
    2836:	aa af       	std	Y+58, r26	; 0x3a
    2838:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    283a:	68 ad       	ldd	r22, Y+56	; 0x38
    283c:	79 ad       	ldd	r23, Y+57	; 0x39
    283e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2840:	9b ad       	ldd	r25, Y+59	; 0x3b
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	40 e8       	ldi	r20, 0x80	; 128
    2848:	5f e3       	ldi	r21, 0x3F	; 63
    284a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    284e:	88 23       	and	r24, r24
    2850:	2c f4       	brge	.+10     	; 0x285c <LCD_voidWriteCharctr_4bitMode+0x39e>
		__ticks = 1;
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	9f ab       	std	Y+55, r25	; 0x37
    2858:	8e ab       	std	Y+54, r24	; 0x36
    285a:	3f c0       	rjmp	.+126    	; 0x28da <LCD_voidWriteCharctr_4bitMode+0x41c>
	else if (__tmp > 65535)
    285c:	68 ad       	ldd	r22, Y+56	; 0x38
    285e:	79 ad       	ldd	r23, Y+57	; 0x39
    2860:	8a ad       	ldd	r24, Y+58	; 0x3a
    2862:	9b ad       	ldd	r25, Y+59	; 0x3b
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	3f ef       	ldi	r19, 0xFF	; 255
    2868:	4f e7       	ldi	r20, 0x7F	; 127
    286a:	57 e4       	ldi	r21, 0x47	; 71
    286c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2870:	18 16       	cp	r1, r24
    2872:	4c f5       	brge	.+82     	; 0x28c6 <LCD_voidWriteCharctr_4bitMode+0x408>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2874:	6c ad       	ldd	r22, Y+60	; 0x3c
    2876:	7d ad       	ldd	r23, Y+61	; 0x3d
    2878:	8e ad       	ldd	r24, Y+62	; 0x3e
    287a:	9f ad       	ldd	r25, Y+63	; 0x3f
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	40 e2       	ldi	r20, 0x20	; 32
    2882:	51 e4       	ldi	r21, 0x41	; 65
    2884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	bc 01       	movw	r22, r24
    288e:	cd 01       	movw	r24, r26
    2890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	9f ab       	std	Y+55, r25	; 0x37
    289a:	8e ab       	std	Y+54, r24	; 0x36
    289c:	0f c0       	rjmp	.+30     	; 0x28bc <LCD_voidWriteCharctr_4bitMode+0x3fe>
    289e:	88 ec       	ldi	r24, 0xC8	; 200
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	9d ab       	std	Y+53, r25	; 0x35
    28a4:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28a6:	8c a9       	ldd	r24, Y+52	; 0x34
    28a8:	9d a9       	ldd	r25, Y+53	; 0x35
    28aa:	01 97       	sbiw	r24, 0x01	; 1
    28ac:	f1 f7       	brne	.-4      	; 0x28aa <LCD_voidWriteCharctr_4bitMode+0x3ec>
    28ae:	9d ab       	std	Y+53, r25	; 0x35
    28b0:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b2:	8e a9       	ldd	r24, Y+54	; 0x36
    28b4:	9f a9       	ldd	r25, Y+55	; 0x37
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	9f ab       	std	Y+55, r25	; 0x37
    28ba:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28bc:	8e a9       	ldd	r24, Y+54	; 0x36
    28be:	9f a9       	ldd	r25, Y+55	; 0x37
    28c0:	00 97       	sbiw	r24, 0x00	; 0
    28c2:	69 f7       	brne	.-38     	; 0x289e <LCD_voidWriteCharctr_4bitMode+0x3e0>
    28c4:	2d c0       	rjmp	.+90     	; 0x2920 <LCD_voidWriteCharctr_4bitMode+0x462>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c6:	68 ad       	ldd	r22, Y+56	; 0x38
    28c8:	79 ad       	ldd	r23, Y+57	; 0x39
    28ca:	8a ad       	ldd	r24, Y+58	; 0x3a
    28cc:	9b ad       	ldd	r25, Y+59	; 0x3b
    28ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	9f ab       	std	Y+55, r25	; 0x37
    28d8:	8e ab       	std	Y+54, r24	; 0x36
    28da:	8e a9       	ldd	r24, Y+54	; 0x36
    28dc:	9f a9       	ldd	r25, Y+55	; 0x37
    28de:	9b ab       	std	Y+51, r25	; 0x33
    28e0:	8a ab       	std	Y+50, r24	; 0x32
    28e2:	8a a9       	ldd	r24, Y+50	; 0x32
    28e4:	9b a9       	ldd	r25, Y+51	; 0x33
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	f1 f7       	brne	.-4      	; 0x28e6 <LCD_voidWriteCharctr_4bitMode+0x428>
    28ea:	9b ab       	std	Y+51, r25	; 0x33
    28ec:	8a ab       	std	Y+50, r24	; 0x32
    28ee:	18 c0       	rjmp	.+48     	; 0x2920 <LCD_voidWriteCharctr_4bitMode+0x462>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28f0:	fe 01       	movw	r30, r28
    28f2:	ef 5b       	subi	r30, 0xBF	; 191
    28f4:	ff 4f       	sbci	r31, 0xFF	; 255
    28f6:	60 81       	ld	r22, Z
    28f8:	71 81       	ldd	r23, Z+1	; 0x01
    28fa:	82 81       	ldd	r24, Z+2	; 0x02
    28fc:	93 81       	ldd	r25, Z+3	; 0x03
    28fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	fe 01       	movw	r30, r28
    2908:	e0 5c       	subi	r30, 0xC0	; 192
    290a:	ff 4f       	sbci	r31, 0xFF	; 255
    290c:	80 83       	st	Z, r24
    290e:	fe 01       	movw	r30, r28
    2910:	e0 5c       	subi	r30, 0xC0	; 192
    2912:	ff 4f       	sbci	r31, 0xFF	; 255
    2914:	80 81       	ld	r24, Z
    2916:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2918:	89 a9       	ldd	r24, Y+49	; 0x31
    291a:	8a 95       	dec	r24
    291c:	f1 f7       	brne	.-4      	; 0x291a <LCD_voidWriteCharctr_4bitMode+0x45c>
    291e:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);

	/* Write Data on Data Pins, sending lower nibble*/
	DIO_voidWritePort(lcd_DATAPORT, (lcd_DATAPORT & 0x0F) | (u8DataCpy <<4));
    2920:	fe 01       	movw	r30, r28
    2922:	ef 59       	subi	r30, 0x9F	; 159
    2924:	ff 4f       	sbci	r31, 0xFF	; 255
    2926:	80 81       	ld	r24, Z
    2928:	88 2f       	mov	r24, r24
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	82 95       	swap	r24
    292e:	92 95       	swap	r25
    2930:	90 7f       	andi	r25, 0xF0	; 240
    2932:	98 27       	eor	r25, r24
    2934:	80 7f       	andi	r24, 0xF0	; 240
    2936:	98 27       	eor	r25, r24
    2938:	84 60       	ori	r24, 0x04	; 4
    293a:	98 2f       	mov	r25, r24
    293c:	84 e0       	ldi	r24, 0x04	; 4
    293e:	69 2f       	mov	r22, r25
    2940:	0e 94 33 1c 	call	0x3866	; 0x3866 <DIO_voidWritePort>
	/* Enable Sequence */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    2944:	83 e0       	ldi	r24, 0x03	; 3
    2946:	63 e0       	ldi	r22, 0x03	; 3
    2948:	41 e0       	ldi	r20, 0x01	; 1
    294a:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	a0 ea       	ldi	r26, 0xA0	; 160
    2954:	b0 e4       	ldi	r27, 0x40	; 64
    2956:	8d a7       	std	Y+45, r24	; 0x2d
    2958:	9e a7       	std	Y+46, r25	; 0x2e
    295a:	af a7       	std	Y+47, r26	; 0x2f
    295c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    295e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2960:	7e a5       	ldd	r23, Y+46	; 0x2e
    2962:	8f a5       	ldd	r24, Y+47	; 0x2f
    2964:	98 a9       	ldd	r25, Y+48	; 0x30
    2966:	2b ea       	ldi	r18, 0xAB	; 171
    2968:	3a ea       	ldi	r19, 0xAA	; 170
    296a:	4a e2       	ldi	r20, 0x2A	; 42
    296c:	50 e4       	ldi	r21, 0x40	; 64
    296e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	89 a7       	std	Y+41, r24	; 0x29
    2978:	9a a7       	std	Y+42, r25	; 0x2a
    297a:	ab a7       	std	Y+43, r26	; 0x2b
    297c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    297e:	69 a5       	ldd	r22, Y+41	; 0x29
    2980:	7a a5       	ldd	r23, Y+42	; 0x2a
    2982:	8b a5       	ldd	r24, Y+43	; 0x2b
    2984:	9c a5       	ldd	r25, Y+44	; 0x2c
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	40 e8       	ldi	r20, 0x80	; 128
    298c:	5f e3       	ldi	r21, 0x3F	; 63
    298e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2992:	88 23       	and	r24, r24
    2994:	1c f4       	brge	.+6      	; 0x299c <LCD_voidWriteCharctr_4bitMode+0x4de>
		__ticks = 1;
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	88 a7       	std	Y+40, r24	; 0x28
    299a:	91 c0       	rjmp	.+290    	; 0x2abe <LCD_voidWriteCharctr_4bitMode+0x600>
	else if (__tmp > 255)
    299c:	69 a5       	ldd	r22, Y+41	; 0x29
    299e:	7a a5       	ldd	r23, Y+42	; 0x2a
    29a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    29a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	4f e7       	ldi	r20, 0x7F	; 127
    29aa:	53 e4       	ldi	r21, 0x43	; 67
    29ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29b0:	18 16       	cp	r1, r24
    29b2:	0c f0       	brlt	.+2      	; 0x29b6 <LCD_voidWriteCharctr_4bitMode+0x4f8>
    29b4:	7b c0       	rjmp	.+246    	; 0x2aac <LCD_voidWriteCharctr_4bitMode+0x5ee>
	{
		_delay_ms(__us / 1000.0);
    29b6:	6d a5       	ldd	r22, Y+45	; 0x2d
    29b8:	7e a5       	ldd	r23, Y+46	; 0x2e
    29ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    29bc:	98 a9       	ldd	r25, Y+48	; 0x30
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	4a e7       	ldi	r20, 0x7A	; 122
    29c4:	54 e4       	ldi	r21, 0x44	; 68
    29c6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	8c a3       	std	Y+36, r24	; 0x24
    29d0:	9d a3       	std	Y+37, r25	; 0x25
    29d2:	ae a3       	std	Y+38, r26	; 0x26
    29d4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29d6:	6c a1       	ldd	r22, Y+36	; 0x24
    29d8:	7d a1       	ldd	r23, Y+37	; 0x25
    29da:	8e a1       	ldd	r24, Y+38	; 0x26
    29dc:	9f a1       	ldd	r25, Y+39	; 0x27
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	4a ef       	ldi	r20, 0xFA	; 250
    29e4:	54 e4       	ldi	r21, 0x44	; 68
    29e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	88 a3       	std	Y+32, r24	; 0x20
    29f0:	99 a3       	std	Y+33, r25	; 0x21
    29f2:	aa a3       	std	Y+34, r26	; 0x22
    29f4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    29f6:	68 a1       	ldd	r22, Y+32	; 0x20
    29f8:	79 a1       	ldd	r23, Y+33	; 0x21
    29fa:	8a a1       	ldd	r24, Y+34	; 0x22
    29fc:	9b a1       	ldd	r25, Y+35	; 0x23
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	40 e8       	ldi	r20, 0x80	; 128
    2a04:	5f e3       	ldi	r21, 0x3F	; 63
    2a06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a0a:	88 23       	and	r24, r24
    2a0c:	2c f4       	brge	.+10     	; 0x2a18 <LCD_voidWriteCharctr_4bitMode+0x55a>
		__ticks = 1;
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	9f 8f       	std	Y+31, r25	; 0x1f
    2a14:	8e 8f       	std	Y+30, r24	; 0x1e
    2a16:	3f c0       	rjmp	.+126    	; 0x2a96 <LCD_voidWriteCharctr_4bitMode+0x5d8>
	else if (__tmp > 65535)
    2a18:	68 a1       	ldd	r22, Y+32	; 0x20
    2a1a:	79 a1       	ldd	r23, Y+33	; 0x21
    2a1c:	8a a1       	ldd	r24, Y+34	; 0x22
    2a1e:	9b a1       	ldd	r25, Y+35	; 0x23
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	3f ef       	ldi	r19, 0xFF	; 255
    2a24:	4f e7       	ldi	r20, 0x7F	; 127
    2a26:	57 e4       	ldi	r21, 0x47	; 71
    2a28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a2c:	18 16       	cp	r1, r24
    2a2e:	4c f5       	brge	.+82     	; 0x2a82 <LCD_voidWriteCharctr_4bitMode+0x5c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a30:	6c a1       	ldd	r22, Y+36	; 0x24
    2a32:	7d a1       	ldd	r23, Y+37	; 0x25
    2a34:	8e a1       	ldd	r24, Y+38	; 0x26
    2a36:	9f a1       	ldd	r25, Y+39	; 0x27
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	40 e2       	ldi	r20, 0x20	; 32
    2a3e:	51 e4       	ldi	r21, 0x41	; 65
    2a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	bc 01       	movw	r22, r24
    2a4a:	cd 01       	movw	r24, r26
    2a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	9f 8f       	std	Y+31, r25	; 0x1f
    2a56:	8e 8f       	std	Y+30, r24	; 0x1e
    2a58:	0f c0       	rjmp	.+30     	; 0x2a78 <LCD_voidWriteCharctr_4bitMode+0x5ba>
    2a5a:	88 ec       	ldi	r24, 0xC8	; 200
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	9d 8f       	std	Y+29, r25	; 0x1d
    2a60:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a62:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a64:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	f1 f7       	brne	.-4      	; 0x2a66 <LCD_voidWriteCharctr_4bitMode+0x5a8>
    2a6a:	9d 8f       	std	Y+29, r25	; 0x1d
    2a6c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a6e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a70:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a72:	01 97       	sbiw	r24, 0x01	; 1
    2a74:	9f 8f       	std	Y+31, r25	; 0x1f
    2a76:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a78:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a7a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a7c:	00 97       	sbiw	r24, 0x00	; 0
    2a7e:	69 f7       	brne	.-38     	; 0x2a5a <LCD_voidWriteCharctr_4bitMode+0x59c>
    2a80:	24 c0       	rjmp	.+72     	; 0x2aca <LCD_voidWriteCharctr_4bitMode+0x60c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a82:	68 a1       	ldd	r22, Y+32	; 0x20
    2a84:	79 a1       	ldd	r23, Y+33	; 0x21
    2a86:	8a a1       	ldd	r24, Y+34	; 0x22
    2a88:	9b a1       	ldd	r25, Y+35	; 0x23
    2a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	9f 8f       	std	Y+31, r25	; 0x1f
    2a94:	8e 8f       	std	Y+30, r24	; 0x1e
    2a96:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a98:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a9a:	9b 8f       	std	Y+27, r25	; 0x1b
    2a9c:	8a 8f       	std	Y+26, r24	; 0x1a
    2a9e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2aa0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2aa2:	01 97       	sbiw	r24, 0x01	; 1
    2aa4:	f1 f7       	brne	.-4      	; 0x2aa2 <LCD_voidWriteCharctr_4bitMode+0x5e4>
    2aa6:	9b 8f       	std	Y+27, r25	; 0x1b
    2aa8:	8a 8f       	std	Y+26, r24	; 0x1a
    2aaa:	0f c0       	rjmp	.+30     	; 0x2aca <LCD_voidWriteCharctr_4bitMode+0x60c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2aac:	69 a5       	ldd	r22, Y+41	; 0x29
    2aae:	7a a5       	ldd	r23, Y+42	; 0x2a
    2ab0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ab2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	88 a7       	std	Y+40, r24	; 0x28
    2abe:	88 a5       	ldd	r24, Y+40	; 0x28
    2ac0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ac2:	89 8d       	ldd	r24, Y+25	; 0x19
    2ac4:	8a 95       	dec	r24
    2ac6:	f1 f7       	brne	.-4      	; 0x2ac4 <LCD_voidWriteCharctr_4bitMode+0x606>
    2ac8:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(5);
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    2aca:	83 e0       	ldi	r24, 0x03	; 3
    2acc:	63 e0       	ldi	r22, 0x03	; 3
    2ace:	40 e0       	ldi	r20, 0x00	; 0
    2ad0:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	a8 e4       	ldi	r26, 0x48	; 72
    2ada:	b3 e4       	ldi	r27, 0x43	; 67
    2adc:	8d 8b       	std	Y+21, r24	; 0x15
    2ade:	9e 8b       	std	Y+22, r25	; 0x16
    2ae0:	af 8b       	std	Y+23, r26	; 0x17
    2ae2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ae4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ae6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ae8:	8f 89       	ldd	r24, Y+23	; 0x17
    2aea:	98 8d       	ldd	r25, Y+24	; 0x18
    2aec:	2b ea       	ldi	r18, 0xAB	; 171
    2aee:	3a ea       	ldi	r19, 0xAA	; 170
    2af0:	4a e2       	ldi	r20, 0x2A	; 42
    2af2:	50 e4       	ldi	r21, 0x40	; 64
    2af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	89 8b       	std	Y+17, r24	; 0x11
    2afe:	9a 8b       	std	Y+18, r25	; 0x12
    2b00:	ab 8b       	std	Y+19, r26	; 0x13
    2b02:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2b04:	69 89       	ldd	r22, Y+17	; 0x11
    2b06:	7a 89       	ldd	r23, Y+18	; 0x12
    2b08:	8b 89       	ldd	r24, Y+19	; 0x13
    2b0a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	40 e8       	ldi	r20, 0x80	; 128
    2b12:	5f e3       	ldi	r21, 0x3F	; 63
    2b14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b18:	88 23       	and	r24, r24
    2b1a:	1c f4       	brge	.+6      	; 0x2b22 <LCD_voidWriteCharctr_4bitMode+0x664>
		__ticks = 1;
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	88 8b       	std	Y+16, r24	; 0x10
    2b20:	91 c0       	rjmp	.+290    	; 0x2c44 <LCD_voidWriteCharctr_4bitMode+0x786>
	else if (__tmp > 255)
    2b22:	69 89       	ldd	r22, Y+17	; 0x11
    2b24:	7a 89       	ldd	r23, Y+18	; 0x12
    2b26:	8b 89       	ldd	r24, Y+19	; 0x13
    2b28:	9c 89       	ldd	r25, Y+20	; 0x14
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	4f e7       	ldi	r20, 0x7F	; 127
    2b30:	53 e4       	ldi	r21, 0x43	; 67
    2b32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b36:	18 16       	cp	r1, r24
    2b38:	0c f0       	brlt	.+2      	; 0x2b3c <LCD_voidWriteCharctr_4bitMode+0x67e>
    2b3a:	7b c0       	rjmp	.+246    	; 0x2c32 <LCD_voidWriteCharctr_4bitMode+0x774>
	{
		_delay_ms(__us / 1000.0);
    2b3c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b3e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b40:	8f 89       	ldd	r24, Y+23	; 0x17
    2b42:	98 8d       	ldd	r25, Y+24	; 0x18
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	4a e7       	ldi	r20, 0x7A	; 122
    2b4a:	54 e4       	ldi	r21, 0x44	; 68
    2b4c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	8c 87       	std	Y+12, r24	; 0x0c
    2b56:	9d 87       	std	Y+13, r25	; 0x0d
    2b58:	ae 87       	std	Y+14, r26	; 0x0e
    2b5a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b5c:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b5e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b60:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b62:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	4a ef       	ldi	r20, 0xFA	; 250
    2b6a:	54 e4       	ldi	r21, 0x44	; 68
    2b6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	88 87       	std	Y+8, r24	; 0x08
    2b76:	99 87       	std	Y+9, r25	; 0x09
    2b78:	aa 87       	std	Y+10, r26	; 0x0a
    2b7a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2b7c:	68 85       	ldd	r22, Y+8	; 0x08
    2b7e:	79 85       	ldd	r23, Y+9	; 0x09
    2b80:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b82:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	40 e8       	ldi	r20, 0x80	; 128
    2b8a:	5f e3       	ldi	r21, 0x3F	; 63
    2b8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b90:	88 23       	and	r24, r24
    2b92:	2c f4       	brge	.+10     	; 0x2b9e <LCD_voidWriteCharctr_4bitMode+0x6e0>
		__ticks = 1;
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	9f 83       	std	Y+7, r25	; 0x07
    2b9a:	8e 83       	std	Y+6, r24	; 0x06
    2b9c:	3f c0       	rjmp	.+126    	; 0x2c1c <LCD_voidWriteCharctr_4bitMode+0x75e>
	else if (__tmp > 65535)
    2b9e:	68 85       	ldd	r22, Y+8	; 0x08
    2ba0:	79 85       	ldd	r23, Y+9	; 0x09
    2ba2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ba4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	3f ef       	ldi	r19, 0xFF	; 255
    2baa:	4f e7       	ldi	r20, 0x7F	; 127
    2bac:	57 e4       	ldi	r21, 0x47	; 71
    2bae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bb2:	18 16       	cp	r1, r24
    2bb4:	4c f5       	brge	.+82     	; 0x2c08 <LCD_voidWriteCharctr_4bitMode+0x74a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb6:	6c 85       	ldd	r22, Y+12	; 0x0c
    2bb8:	7d 85       	ldd	r23, Y+13	; 0x0d
    2bba:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bbc:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bbe:	20 e0       	ldi	r18, 0x00	; 0
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	40 e2       	ldi	r20, 0x20	; 32
    2bc4:	51 e4       	ldi	r21, 0x41	; 65
    2bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	bc 01       	movw	r22, r24
    2bd0:	cd 01       	movw	r24, r26
    2bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	9f 83       	std	Y+7, r25	; 0x07
    2bdc:	8e 83       	std	Y+6, r24	; 0x06
    2bde:	0f c0       	rjmp	.+30     	; 0x2bfe <LCD_voidWriteCharctr_4bitMode+0x740>
    2be0:	88 ec       	ldi	r24, 0xC8	; 200
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	9d 83       	std	Y+5, r25	; 0x05
    2be6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2be8:	8c 81       	ldd	r24, Y+4	; 0x04
    2bea:	9d 81       	ldd	r25, Y+5	; 0x05
    2bec:	01 97       	sbiw	r24, 0x01	; 1
    2bee:	f1 f7       	brne	.-4      	; 0x2bec <LCD_voidWriteCharctr_4bitMode+0x72e>
    2bf0:	9d 83       	std	Y+5, r25	; 0x05
    2bf2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf4:	8e 81       	ldd	r24, Y+6	; 0x06
    2bf6:	9f 81       	ldd	r25, Y+7	; 0x07
    2bf8:	01 97       	sbiw	r24, 0x01	; 1
    2bfa:	9f 83       	std	Y+7, r25	; 0x07
    2bfc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bfe:	8e 81       	ldd	r24, Y+6	; 0x06
    2c00:	9f 81       	ldd	r25, Y+7	; 0x07
    2c02:	00 97       	sbiw	r24, 0x00	; 0
    2c04:	69 f7       	brne	.-38     	; 0x2be0 <LCD_voidWriteCharctr_4bitMode+0x722>
    2c06:	24 c0       	rjmp	.+72     	; 0x2c50 <LCD_voidWriteCharctr_4bitMode+0x792>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c08:	68 85       	ldd	r22, Y+8	; 0x08
    2c0a:	79 85       	ldd	r23, Y+9	; 0x09
    2c0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c0e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	9f 83       	std	Y+7, r25	; 0x07
    2c1a:	8e 83       	std	Y+6, r24	; 0x06
    2c1c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c1e:	9f 81       	ldd	r25, Y+7	; 0x07
    2c20:	9b 83       	std	Y+3, r25	; 0x03
    2c22:	8a 83       	std	Y+2, r24	; 0x02
    2c24:	8a 81       	ldd	r24, Y+2	; 0x02
    2c26:	9b 81       	ldd	r25, Y+3	; 0x03
    2c28:	01 97       	sbiw	r24, 0x01	; 1
    2c2a:	f1 f7       	brne	.-4      	; 0x2c28 <LCD_voidWriteCharctr_4bitMode+0x76a>
    2c2c:	9b 83       	std	Y+3, r25	; 0x03
    2c2e:	8a 83       	std	Y+2, r24	; 0x02
    2c30:	0f c0       	rjmp	.+30     	; 0x2c50 <LCD_voidWriteCharctr_4bitMode+0x792>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c32:	69 89       	ldd	r22, Y+17	; 0x11
    2c34:	7a 89       	ldd	r23, Y+18	; 0x12
    2c36:	8b 89       	ldd	r24, Y+19	; 0x13
    2c38:	9c 89       	ldd	r25, Y+20	; 0x14
    2c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	88 8b       	std	Y+16, r24	; 0x10
    2c44:	88 89       	ldd	r24, Y+16	; 0x10
    2c46:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c48:	89 81       	ldd	r24, Y+1	; 0x01
    2c4a:	8a 95       	dec	r24
    2c4c:	f1 f7       	brne	.-4      	; 0x2c4a <LCD_voidWriteCharctr_4bitMode+0x78c>
    2c4e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);

}
    2c50:	cf 59       	subi	r28, 0x9F	; 159
    2c52:	df 4f       	sbci	r29, 0xFF	; 255
    2c54:	0f b6       	in	r0, 0x3f	; 63
    2c56:	f8 94       	cli
    2c58:	de bf       	out	0x3e, r29	; 62
    2c5a:	0f be       	out	0x3f, r0	; 63
    2c5c:	cd bf       	out	0x3d, r28	; 61
    2c5e:	cf 91       	pop	r28
    2c60:	df 91       	pop	r29
    2c62:	1f 91       	pop	r17
    2c64:	0f 91       	pop	r16
    2c66:	08 95       	ret

00002c68 <LCD_voidWriteString>:
void LCD_voidWriteString(uint8 *pu8StringCpy, uint8 u8Index){	//LCD_voidWriteString('Tasneem')
    2c68:	df 93       	push	r29
    2c6a:	cf 93       	push	r28
    2c6c:	00 d0       	rcall	.+0      	; 0x2c6e <LCD_voidWriteString+0x6>
    2c6e:	00 d0       	rcall	.+0      	; 0x2c70 <LCD_voidWriteString+0x8>
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
    2c74:	9b 83       	std	Y+3, r25	; 0x03
    2c76:	8a 83       	std	Y+2, r24	; 0x02
    2c78:	6c 83       	std	Y+4, r22	; 0x04
	/*uint8 i=0;
	 *while(pu8StringCpy[i] != '\0'){
	 *		LCD_voidWriteCharctr(pu8StringCpy[i]);
	 *		i++;
	 *}*/
	for(uint8 i=0; i<u8Index; i++){
    2c7a:	19 82       	std	Y+1, r1	; 0x01
    2c7c:	0e c0       	rjmp	.+28     	; 0x2c9a <LCD_voidWriteString+0x32>
		LCD_voidWriteCharctr(pu8StringCpy[i]);
    2c7e:	89 81       	ldd	r24, Y+1	; 0x01
    2c80:	28 2f       	mov	r18, r24
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	8a 81       	ldd	r24, Y+2	; 0x02
    2c86:	9b 81       	ldd	r25, Y+3	; 0x03
    2c88:	fc 01       	movw	r30, r24
    2c8a:	e2 0f       	add	r30, r18
    2c8c:	f3 1f       	adc	r31, r19
    2c8e:	80 81       	ld	r24, Z
    2c90:	0e 94 c6 11 	call	0x238c	; 0x238c <LCD_voidWriteCharctr>
	/*uint8 i=0;
	 *while(pu8StringCpy[i] != '\0'){
	 *		LCD_voidWriteCharctr(pu8StringCpy[i]);
	 *		i++;
	 *}*/
	for(uint8 i=0; i<u8Index; i++){
    2c94:	89 81       	ldd	r24, Y+1	; 0x01
    2c96:	8f 5f       	subi	r24, 0xFF	; 255
    2c98:	89 83       	std	Y+1, r24	; 0x01
    2c9a:	99 81       	ldd	r25, Y+1	; 0x01
    2c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c9e:	98 17       	cp	r25, r24
    2ca0:	70 f3       	brcs	.-36     	; 0x2c7e <LCD_voidWriteString+0x16>
		LCD_voidWriteCharctr(pu8StringCpy[i]);
	}
}
    2ca2:	0f 90       	pop	r0
    2ca4:	0f 90       	pop	r0
    2ca6:	0f 90       	pop	r0
    2ca8:	0f 90       	pop	r0
    2caa:	cf 91       	pop	r28
    2cac:	df 91       	pop	r29
    2cae:	08 95       	ret

00002cb0 <LCD_voidWriteString_4bitMode>:
void LCD_voidWriteString_4bitMode(uint8 *pu8StringCpy, uint8 u8Index){	//LCD_voidWriteString('Tasneem')
    2cb0:	df 93       	push	r29
    2cb2:	cf 93       	push	r28
    2cb4:	00 d0       	rcall	.+0      	; 0x2cb6 <LCD_voidWriteString_4bitMode+0x6>
    2cb6:	00 d0       	rcall	.+0      	; 0x2cb8 <LCD_voidWriteString_4bitMode+0x8>
    2cb8:	cd b7       	in	r28, 0x3d	; 61
    2cba:	de b7       	in	r29, 0x3e	; 62
    2cbc:	9b 83       	std	Y+3, r25	; 0x03
    2cbe:	8a 83       	std	Y+2, r24	; 0x02
    2cc0:	6c 83       	std	Y+4, r22	; 0x04
	for(uint8 i=0; i<u8Index; i++){
    2cc2:	19 82       	std	Y+1, r1	; 0x01
    2cc4:	0e c0       	rjmp	.+28     	; 0x2ce2 <LCD_voidWriteString_4bitMode+0x32>
		LCD_voidWriteCharctr_4bitMode(pu8StringCpy[i]);
    2cc6:	89 81       	ldd	r24, Y+1	; 0x01
    2cc8:	28 2f       	mov	r18, r24
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cce:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd0:	fc 01       	movw	r30, r24
    2cd2:	e2 0f       	add	r30, r18
    2cd4:	f3 1f       	adc	r31, r19
    2cd6:	80 81       	ld	r24, Z
    2cd8:	0e 94 5f 12 	call	0x24be	; 0x24be <LCD_voidWriteCharctr_4bitMode>
	for(uint8 i=0; i<u8Index; i++){
		LCD_voidWriteCharctr(pu8StringCpy[i]);
	}
}
void LCD_voidWriteString_4bitMode(uint8 *pu8StringCpy, uint8 u8Index){	//LCD_voidWriteString('Tasneem')
	for(uint8 i=0; i<u8Index; i++){
    2cdc:	89 81       	ldd	r24, Y+1	; 0x01
    2cde:	8f 5f       	subi	r24, 0xFF	; 255
    2ce0:	89 83       	std	Y+1, r24	; 0x01
    2ce2:	99 81       	ldd	r25, Y+1	; 0x01
    2ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce6:	98 17       	cp	r25, r24
    2ce8:	70 f3       	brcs	.-36     	; 0x2cc6 <LCD_voidWriteString_4bitMode+0x16>
		LCD_voidWriteCharctr_4bitMode(pu8StringCpy[i]);
	}
}
    2cea:	0f 90       	pop	r0
    2cec:	0f 90       	pop	r0
    2cee:	0f 90       	pop	r0
    2cf0:	0f 90       	pop	r0
    2cf2:	cf 91       	pop	r28
    2cf4:	df 91       	pop	r29
    2cf6:	08 95       	ret

00002cf8 <Gotoxy>:
void Gotoxy(uint8 x, uint8 y){
    2cf8:	df 93       	push	r29
    2cfa:	cf 93       	push	r28
    2cfc:	00 d0       	rcall	.+0      	; 0x2cfe <Gotoxy+0x6>
    2cfe:	00 d0       	rcall	.+0      	; 0x2d00 <Gotoxy+0x8>
    2d00:	cd b7       	in	r28, 0x3d	; 61
    2d02:	de b7       	in	r29, 0x3e	; 62
    2d04:	89 83       	std	Y+1, r24	; 0x01
    2d06:	6a 83       	std	Y+2, r22	; 0x02
	if(x>=0 && x<16)
    2d08:	89 81       	ldd	r24, Y+1	; 0x01
    2d0a:	80 31       	cpi	r24, 0x10	; 16
    2d0c:	c8 f4       	brcc	.+50     	; 0x2d40 <Gotoxy+0x48>
	{
		switch(y){
    2d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d10:	28 2f       	mov	r18, r24
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	3c 83       	std	Y+4, r19	; 0x04
    2d16:	2b 83       	std	Y+3, r18	; 0x03
    2d18:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d1c:	81 30       	cpi	r24, 0x01	; 1
    2d1e:	91 05       	cpc	r25, r1
    2d20:	31 f0       	breq	.+12     	; 0x2d2e <Gotoxy+0x36>
    2d22:	2b 81       	ldd	r18, Y+3	; 0x03
    2d24:	3c 81       	ldd	r19, Y+4	; 0x04
    2d26:	22 30       	cpi	r18, 0x02	; 2
    2d28:	31 05       	cpc	r19, r1
    2d2a:	31 f0       	breq	.+12     	; 0x2d38 <Gotoxy+0x40>
    2d2c:	09 c0       	rjmp	.+18     	; 0x2d40 <Gotoxy+0x48>
		case LineOne:
			LCD_voidSendCommand(LineOneStart+x);	//set DDRAM address
    2d2e:	89 81       	ldd	r24, Y+1	; 0x01
    2d30:	80 58       	subi	r24, 0x80	; 128
    2d32:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <LCD_voidSendCommand>
    2d36:	04 c0       	rjmp	.+8      	; 0x2d40 <Gotoxy+0x48>
			break;
		case LineTwo:
			LCD_voidSendCommand(LineTwoStart+x);	//set DDRAM address
    2d38:	89 81       	ldd	r24, Y+1	; 0x01
    2d3a:	80 54       	subi	r24, 0x40	; 64
    2d3c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <LCD_voidSendCommand>
	}
	else
	{
		//do nothing
	}
}
    2d40:	0f 90       	pop	r0
    2d42:	0f 90       	pop	r0
    2d44:	0f 90       	pop	r0
    2d46:	0f 90       	pop	r0
    2d48:	cf 91       	pop	r28
    2d4a:	df 91       	pop	r29
    2d4c:	08 95       	ret

00002d4e <LCD_voidGotoxy_4bitMode>:

void LCD_voidGotoxy_4bitMode(uint8 x, uint8 y){
    2d4e:	df 93       	push	r29
    2d50:	cf 93       	push	r28
    2d52:	00 d0       	rcall	.+0      	; 0x2d54 <LCD_voidGotoxy_4bitMode+0x6>
    2d54:	00 d0       	rcall	.+0      	; 0x2d56 <LCD_voidGotoxy_4bitMode+0x8>
    2d56:	cd b7       	in	r28, 0x3d	; 61
    2d58:	de b7       	in	r29, 0x3e	; 62
    2d5a:	89 83       	std	Y+1, r24	; 0x01
    2d5c:	6a 83       	std	Y+2, r22	; 0x02
	if(x>=0 && x<16)
    2d5e:	89 81       	ldd	r24, Y+1	; 0x01
    2d60:	80 31       	cpi	r24, 0x10	; 16
    2d62:	c8 f4       	brcc	.+50     	; 0x2d96 <LCD_voidGotoxy_4bitMode+0x48>
	{
		switch(y){
    2d64:	8a 81       	ldd	r24, Y+2	; 0x02
    2d66:	28 2f       	mov	r18, r24
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	3c 83       	std	Y+4, r19	; 0x04
    2d6c:	2b 83       	std	Y+3, r18	; 0x03
    2d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d70:	9c 81       	ldd	r25, Y+4	; 0x04
    2d72:	81 30       	cpi	r24, 0x01	; 1
    2d74:	91 05       	cpc	r25, r1
    2d76:	31 f0       	breq	.+12     	; 0x2d84 <LCD_voidGotoxy_4bitMode+0x36>
    2d78:	2b 81       	ldd	r18, Y+3	; 0x03
    2d7a:	3c 81       	ldd	r19, Y+4	; 0x04
    2d7c:	22 30       	cpi	r18, 0x02	; 2
    2d7e:	31 05       	cpc	r19, r1
    2d80:	31 f0       	breq	.+12     	; 0x2d8e <LCD_voidGotoxy_4bitMode+0x40>
    2d82:	09 c0       	rjmp	.+18     	; 0x2d96 <LCD_voidGotoxy_4bitMode+0x48>
		case LineOne:
			LCD_voidSendCommand_4bitMode(LineOneStart+x);	//set DDRAM address
    2d84:	89 81       	ldd	r24, Y+1	; 0x01
    2d86:	80 58       	subi	r24, 0x80	; 128
    2d88:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <LCD_voidSendCommand_4bitMode>
    2d8c:	04 c0       	rjmp	.+8      	; 0x2d96 <LCD_voidGotoxy_4bitMode+0x48>
			break;
		case LineTwo:
			LCD_voidSendCommand_4bitMode(LineTwoStart+x);	//set DDRAM address
    2d8e:	89 81       	ldd	r24, Y+1	; 0x01
    2d90:	80 54       	subi	r24, 0x40	; 64
    2d92:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <LCD_voidSendCommand_4bitMode>
	}
	else
	{
		//do nothing
	}
}
    2d96:	0f 90       	pop	r0
    2d98:	0f 90       	pop	r0
    2d9a:	0f 90       	pop	r0
    2d9c:	0f 90       	pop	r0
    2d9e:	cf 91       	pop	r28
    2da0:	df 91       	pop	r29
    2da2:	08 95       	ret

00002da4 <LCD_voidWriteExtraChar>:
void LCD_voidWriteExtraChar(uint8 Y, uint8 X){
    2da4:	df 93       	push	r29
    2da6:	cf 93       	push	r28
    2da8:	00 d0       	rcall	.+0      	; 0x2daa <LCD_voidWriteExtraChar+0x6>
    2daa:	cd b7       	in	r28, 0x3d	; 61
    2dac:	de b7       	in	r29, 0x3e	; 62
    2dae:	89 83       	std	Y+1, r24	; 0x01
    2db0:	6a 83       	std	Y+2, r22	; 0x02

}
    2db2:	0f 90       	pop	r0
    2db4:	0f 90       	pop	r0
    2db6:	cf 91       	pop	r28
    2db8:	df 91       	pop	r29
    2dba:	08 95       	ret

00002dbc <LCD_voidDisplayKeys>:


void LCD_voidDisplayKeys(uint8 *u8key, uint8 *index){
    2dbc:	df 93       	push	r29
    2dbe:	cf 93       	push	r28
    2dc0:	cd b7       	in	r28, 0x3d	; 61
    2dc2:	de b7       	in	r29, 0x3e	; 62
    2dc4:	62 97       	sbiw	r28, 0x12	; 18
    2dc6:	0f b6       	in	r0, 0x3f	; 63
    2dc8:	f8 94       	cli
    2dca:	de bf       	out	0x3e, r29	; 62
    2dcc:	0f be       	out	0x3f, r0	; 63
    2dce:	cd bf       	out	0x3d, r28	; 61
    2dd0:	98 8b       	std	Y+16, r25	; 0x10
    2dd2:	8f 87       	std	Y+15, r24	; 0x0f
    2dd4:	7a 8b       	std	Y+18, r23	; 0x12
    2dd6:	69 8b       	std	Y+17, r22	; 0x11
	if ((u8key[*index] >= '0' && u8key[*index] <= '9') || (u8key[*index] >= 'A' && u8key[*index] <= 'D') || (u8key[*index] =='*')||(u8key[*index] =='#')) {
    2dd8:	e9 89       	ldd	r30, Y+17	; 0x11
    2dda:	fa 89       	ldd	r31, Y+18	; 0x12
    2ddc:	80 81       	ld	r24, Z
    2dde:	28 2f       	mov	r18, r24
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2de4:	98 89       	ldd	r25, Y+16	; 0x10
    2de6:	fc 01       	movw	r30, r24
    2de8:	e2 0f       	add	r30, r18
    2dea:	f3 1f       	adc	r31, r19
    2dec:	80 81       	ld	r24, Z
    2dee:	80 33       	cpi	r24, 0x30	; 48
    2df0:	68 f0       	brcs	.+26     	; 0x2e0c <LCD_voidDisplayKeys+0x50>
    2df2:	e9 89       	ldd	r30, Y+17	; 0x11
    2df4:	fa 89       	ldd	r31, Y+18	; 0x12
    2df6:	80 81       	ld	r24, Z
    2df8:	28 2f       	mov	r18, r24
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dfe:	98 89       	ldd	r25, Y+16	; 0x10
    2e00:	fc 01       	movw	r30, r24
    2e02:	e2 0f       	add	r30, r18
    2e04:	f3 1f       	adc	r31, r19
    2e06:	80 81       	ld	r24, Z
    2e08:	8a 33       	cpi	r24, 0x3A	; 58
    2e0a:	a8 f1       	brcs	.+106    	; 0x2e76 <LCD_voidDisplayKeys+0xba>
    2e0c:	e9 89       	ldd	r30, Y+17	; 0x11
    2e0e:	fa 89       	ldd	r31, Y+18	; 0x12
    2e10:	80 81       	ld	r24, Z
    2e12:	28 2f       	mov	r18, r24
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e18:	98 89       	ldd	r25, Y+16	; 0x10
    2e1a:	fc 01       	movw	r30, r24
    2e1c:	e2 0f       	add	r30, r18
    2e1e:	f3 1f       	adc	r31, r19
    2e20:	80 81       	ld	r24, Z
    2e22:	81 34       	cpi	r24, 0x41	; 65
    2e24:	68 f0       	brcs	.+26     	; 0x2e40 <LCD_voidDisplayKeys+0x84>
    2e26:	e9 89       	ldd	r30, Y+17	; 0x11
    2e28:	fa 89       	ldd	r31, Y+18	; 0x12
    2e2a:	80 81       	ld	r24, Z
    2e2c:	28 2f       	mov	r18, r24
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e32:	98 89       	ldd	r25, Y+16	; 0x10
    2e34:	fc 01       	movw	r30, r24
    2e36:	e2 0f       	add	r30, r18
    2e38:	f3 1f       	adc	r31, r19
    2e3a:	80 81       	ld	r24, Z
    2e3c:	85 34       	cpi	r24, 0x45	; 69
    2e3e:	d8 f0       	brcs	.+54     	; 0x2e76 <LCD_voidDisplayKeys+0xba>
    2e40:	e9 89       	ldd	r30, Y+17	; 0x11
    2e42:	fa 89       	ldd	r31, Y+18	; 0x12
    2e44:	80 81       	ld	r24, Z
    2e46:	28 2f       	mov	r18, r24
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e4c:	98 89       	ldd	r25, Y+16	; 0x10
    2e4e:	fc 01       	movw	r30, r24
    2e50:	e2 0f       	add	r30, r18
    2e52:	f3 1f       	adc	r31, r19
    2e54:	80 81       	ld	r24, Z
    2e56:	8a 32       	cpi	r24, 0x2A	; 42
    2e58:	71 f0       	breq	.+28     	; 0x2e76 <LCD_voidDisplayKeys+0xba>
    2e5a:	e9 89       	ldd	r30, Y+17	; 0x11
    2e5c:	fa 89       	ldd	r31, Y+18	; 0x12
    2e5e:	80 81       	ld	r24, Z
    2e60:	28 2f       	mov	r18, r24
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e66:	98 89       	ldd	r25, Y+16	; 0x10
    2e68:	fc 01       	movw	r30, r24
    2e6a:	e2 0f       	add	r30, r18
    2e6c:	f3 1f       	adc	r31, r19
    2e6e:	80 81       	ld	r24, Z
    2e70:	83 32       	cpi	r24, 0x23	; 35
    2e72:	09 f0       	breq	.+2      	; 0x2e76 <LCD_voidDisplayKeys+0xba>
    2e74:	86 c0       	rjmp	.+268    	; 0x2f82 <LCD_voidDisplayKeys+0x1c6>
		LCD_voidWriteCharctr_4bitMode(u8key[*index]);
    2e76:	e9 89       	ldd	r30, Y+17	; 0x11
    2e78:	fa 89       	ldd	r31, Y+18	; 0x12
    2e7a:	80 81       	ld	r24, Z
    2e7c:	28 2f       	mov	r18, r24
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e82:	98 89       	ldd	r25, Y+16	; 0x10
    2e84:	fc 01       	movw	r30, r24
    2e86:	e2 0f       	add	r30, r18
    2e88:	f3 1f       	adc	r31, r19
    2e8a:	80 81       	ld	r24, Z
    2e8c:	0e 94 5f 12 	call	0x24be	; 0x24be <LCD_voidWriteCharctr_4bitMode>
    2e90:	80 e0       	ldi	r24, 0x00	; 0
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	aa ef       	ldi	r26, 0xFA	; 250
    2e96:	b3 e4       	ldi	r27, 0x43	; 67
    2e98:	8b 87       	std	Y+11, r24	; 0x0b
    2e9a:	9c 87       	std	Y+12, r25	; 0x0c
    2e9c:	ad 87       	std	Y+13, r26	; 0x0d
    2e9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ea2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ea4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	4a ef       	ldi	r20, 0xFA	; 250
    2eae:	54 e4       	ldi	r21, 0x44	; 68
    2eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	8f 83       	std	Y+7, r24	; 0x07
    2eba:	98 87       	std	Y+8, r25	; 0x08
    2ebc:	a9 87       	std	Y+9, r26	; 0x09
    2ebe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ec0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec2:	78 85       	ldd	r23, Y+8	; 0x08
    2ec4:	89 85       	ldd	r24, Y+9	; 0x09
    2ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	40 e8       	ldi	r20, 0x80	; 128
    2ece:	5f e3       	ldi	r21, 0x3F	; 63
    2ed0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ed4:	88 23       	and	r24, r24
    2ed6:	2c f4       	brge	.+10     	; 0x2ee2 <LCD_voidDisplayKeys+0x126>
		__ticks = 1;
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	9e 83       	std	Y+6, r25	; 0x06
    2ede:	8d 83       	std	Y+5, r24	; 0x05
    2ee0:	3f c0       	rjmp	.+126    	; 0x2f60 <LCD_voidDisplayKeys+0x1a4>
	else if (__tmp > 65535)
    2ee2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ee4:	78 85       	ldd	r23, Y+8	; 0x08
    2ee6:	89 85       	ldd	r24, Y+9	; 0x09
    2ee8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eea:	20 e0       	ldi	r18, 0x00	; 0
    2eec:	3f ef       	ldi	r19, 0xFF	; 255
    2eee:	4f e7       	ldi	r20, 0x7F	; 127
    2ef0:	57 e4       	ldi	r21, 0x47	; 71
    2ef2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ef6:	18 16       	cp	r1, r24
    2ef8:	4c f5       	brge	.+82     	; 0x2f4c <LCD_voidDisplayKeys+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2efa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2efc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2efe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f00:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f02:	20 e0       	ldi	r18, 0x00	; 0
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	40 e2       	ldi	r20, 0x20	; 32
    2f08:	51 e4       	ldi	r21, 0x41	; 65
    2f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	bc 01       	movw	r22, r24
    2f14:	cd 01       	movw	r24, r26
    2f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	9e 83       	std	Y+6, r25	; 0x06
    2f20:	8d 83       	std	Y+5, r24	; 0x05
    2f22:	0f c0       	rjmp	.+30     	; 0x2f42 <LCD_voidDisplayKeys+0x186>
    2f24:	88 ec       	ldi	r24, 0xC8	; 200
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	9c 83       	std	Y+4, r25	; 0x04
    2f2a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f30:	01 97       	sbiw	r24, 0x01	; 1
    2f32:	f1 f7       	brne	.-4      	; 0x2f30 <LCD_voidDisplayKeys+0x174>
    2f34:	9c 83       	std	Y+4, r25	; 0x04
    2f36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f38:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f3c:	01 97       	sbiw	r24, 0x01	; 1
    2f3e:	9e 83       	std	Y+6, r25	; 0x06
    2f40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f42:	8d 81       	ldd	r24, Y+5	; 0x05
    2f44:	9e 81       	ldd	r25, Y+6	; 0x06
    2f46:	00 97       	sbiw	r24, 0x00	; 0
    2f48:	69 f7       	brne	.-38     	; 0x2f24 <LCD_voidDisplayKeys+0x168>
    2f4a:	14 c0       	rjmp	.+40     	; 0x2f74 <LCD_voidDisplayKeys+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f4e:	78 85       	ldd	r23, Y+8	; 0x08
    2f50:	89 85       	ldd	r24, Y+9	; 0x09
    2f52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	9e 83       	std	Y+6, r25	; 0x06
    2f5e:	8d 83       	std	Y+5, r24	; 0x05
    2f60:	8d 81       	ldd	r24, Y+5	; 0x05
    2f62:	9e 81       	ldd	r25, Y+6	; 0x06
    2f64:	9a 83       	std	Y+2, r25	; 0x02
    2f66:	89 83       	std	Y+1, r24	; 0x01
    2f68:	89 81       	ldd	r24, Y+1	; 0x01
    2f6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f6c:	01 97       	sbiw	r24, 0x01	; 1
    2f6e:	f1 f7       	brne	.-4      	; 0x2f6c <LCD_voidDisplayKeys+0x1b0>
    2f70:	9a 83       	std	Y+2, r25	; 0x02
    2f72:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		(*index)++;
    2f74:	e9 89       	ldd	r30, Y+17	; 0x11
    2f76:	fa 89       	ldd	r31, Y+18	; 0x12
    2f78:	80 81       	ld	r24, Z
    2f7a:	8f 5f       	subi	r24, 0xFF	; 255
    2f7c:	e9 89       	ldd	r30, Y+17	; 0x11
    2f7e:	fa 89       	ldd	r31, Y+18	; 0x12
    2f80:	80 83       	st	Z, r24
//
//	case '*': LCD_voidWriteCharctr_4bitMode(u8key[*index]); break;
//	case '#': LCD_voidWriteCharctr_4bitMode(u8key[*index]); break;
//	}
//	(*index)++;
}
    2f82:	62 96       	adiw	r28, 0x12	; 18
    2f84:	0f b6       	in	r0, 0x3f	; 63
    2f86:	f8 94       	cli
    2f88:	de bf       	out	0x3e, r29	; 62
    2f8a:	0f be       	out	0x3f, r0	; 63
    2f8c:	cd bf       	out	0x3d, r28	; 61
    2f8e:	cf 91       	pop	r28
    2f90:	df 91       	pop	r29
    2f92:	08 95       	ret

00002f94 <KPD_voidInit>:
					 { '4', '5', '6', 'B'},
					 { '7', '8', '9', 'C'},
					 { '*', '0', '#', 'D'}};


void KPD_voidInit(void){
    2f94:	df 93       	push	r29
    2f96:	cf 93       	push	r28
    2f98:	0f 92       	push	r0
    2f9a:	cd b7       	in	r28, 0x3d	; 61
    2f9c:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	for(i=ROW_START; i<=ROW_END; i++){
    2f9e:	19 82       	std	Y+1, r1	; 0x01
    2fa0:	08 c0       	rjmp	.+16     	; 0x2fb2 <KPD_voidInit+0x1e>
		//make all rows input pull up
		DIO_voidPullUpState(KPD_PORT,i, ENABLE_PULLUP);
    2fa2:	83 e0       	ldi	r24, 0x03	; 3
    2fa4:	69 81       	ldd	r22, Y+1	; 0x01
    2fa6:	41 e0       	ldi	r20, 0x01	; 1
    2fa8:	0e 94 75 1c 	call	0x38ea	; 0x38ea <DIO_voidPullUpState>
					 { '*', '0', '#', 'D'}};


void KPD_voidInit(void){
	uint8 i;
	for(i=ROW_START; i<=ROW_END; i++){
    2fac:	89 81       	ldd	r24, Y+1	; 0x01
    2fae:	8f 5f       	subi	r24, 0xFF	; 255
    2fb0:	89 83       	std	Y+1, r24	; 0x01
    2fb2:	89 81       	ldd	r24, Y+1	; 0x01
    2fb4:	84 30       	cpi	r24, 0x04	; 4
    2fb6:	a8 f3       	brcs	.-22     	; 0x2fa2 <KPD_voidInit+0xe>
		//make all rows input pull up
		DIO_voidPullUpState(KPD_PORT,i, ENABLE_PULLUP);
	}
	for(i=COLUMN_START; i<=COLUMN_END; i++){
    2fb8:	84 e0       	ldi	r24, 0x04	; 4
    2fba:	89 83       	std	Y+1, r24	; 0x01
    2fbc:	08 c0       	rjmp	.+16     	; 0x2fce <KPD_voidInit+0x3a>
		//make all column pins high
		//DIO_voidWritePin(KPD_PORT,i, DIO_INPUT);
		DIO_voidWritePin(KPD_PORT,i, DIO_HIGH);
    2fbe:	83 e0       	ldi	r24, 0x03	; 3
    2fc0:	69 81       	ldd	r22, Y+1	; 0x01
    2fc2:	41 e0       	ldi	r20, 0x01	; 1
    2fc4:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>
	uint8 i;
	for(i=ROW_START; i<=ROW_END; i++){
		//make all rows input pull up
		DIO_voidPullUpState(KPD_PORT,i, ENABLE_PULLUP);
	}
	for(i=COLUMN_START; i<=COLUMN_END; i++){
    2fc8:	89 81       	ldd	r24, Y+1	; 0x01
    2fca:	8f 5f       	subi	r24, 0xFF	; 255
    2fcc:	89 83       	std	Y+1, r24	; 0x01
    2fce:	89 81       	ldd	r24, Y+1	; 0x01
    2fd0:	88 30       	cpi	r24, 0x08	; 8
    2fd2:	a8 f3       	brcs	.-22     	; 0x2fbe <KPD_voidInit+0x2a>
		//make all column pins high
		//DIO_voidWritePin(KPD_PORT,i, DIO_INPUT);
		DIO_voidWritePin(KPD_PORT,i, DIO_HIGH);
		}
}
    2fd4:	0f 90       	pop	r0
    2fd6:	cf 91       	pop	r28
    2fd8:	df 91       	pop	r29
    2fda:	08 95       	ret

00002fdc <KPD_u8GetKey>:

uint8 KPD_u8GetKey(void){
    2fdc:	df 93       	push	r29
    2fde:	cf 93       	push	r28
    2fe0:	cd b7       	in	r28, 0x3d	; 61
    2fe2:	de b7       	in	r29, 0x3e	; 62
    2fe4:	64 97       	sbiw	r28, 0x14	; 20
    2fe6:	0f b6       	in	r0, 0x3f	; 63
    2fe8:	f8 94       	cli
    2fea:	de bf       	out	0x3e, r29	; 62
    2fec:	0f be       	out	0x3f, r0	; 63
    2fee:	cd bf       	out	0x3d, r28	; 61
	uint8 key = NoPressedKey;
    2ff0:	8f ef       	ldi	r24, 0xFF	; 255
    2ff2:	8c 8b       	std	Y+20, r24	; 0x14
	uint8 i, j, k;
	uint8 result, exitflag = DIO_LOW;
    2ff4:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;i<4;i++){			//loop over columns
    2ff6:	1b 8a       	std	Y+19, r1	; 0x13
    2ff8:	b6 c0       	rjmp	.+364    	; 0x3166 <KPD_u8GetKey+0x18a>
		//set all columns high
		for(k=COLUMN_START; k<=COLUMN_END;k++){
    2ffa:	84 e0       	ldi	r24, 0x04	; 4
    2ffc:	89 8b       	std	Y+17, r24	; 0x11
    2ffe:	08 c0       	rjmp	.+16     	; 0x3010 <KPD_u8GetKey+0x34>
			DIO_voidWritePin(KPD_PORT,k, DIO_HIGH);
    3000:	83 e0       	ldi	r24, 0x03	; 3
    3002:	69 89       	ldd	r22, Y+17	; 0x11
    3004:	41 e0       	ldi	r20, 0x01	; 1
    3006:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>
	uint8 key = NoPressedKey;
	uint8 i, j, k;
	uint8 result, exitflag = DIO_LOW;
	for(i=0;i<4;i++){			//loop over columns
		//set all columns high
		for(k=COLUMN_START; k<=COLUMN_END;k++){
    300a:	89 89       	ldd	r24, Y+17	; 0x11
    300c:	8f 5f       	subi	r24, 0xFF	; 255
    300e:	89 8b       	std	Y+17, r24	; 0x11
    3010:	89 89       	ldd	r24, Y+17	; 0x11
    3012:	88 30       	cpi	r24, 0x08	; 8
    3014:	a8 f3       	brcs	.-22     	; 0x3000 <KPD_u8GetKey+0x24>
			DIO_voidWritePin(KPD_PORT,k, DIO_HIGH);
		}
		//set column low
		DIO_voidWritePin(KPD_PORT,(COLUMN_START+i), DIO_LOW);
    3016:	8b 89       	ldd	r24, Y+19	; 0x13
    3018:	98 2f       	mov	r25, r24
    301a:	9c 5f       	subi	r25, 0xFC	; 252
    301c:	83 e0       	ldi	r24, 0x03	; 3
    301e:	69 2f       	mov	r22, r25
    3020:	40 e0       	ldi	r20, 0x00	; 0
    3022:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>

		for(j=0;j<4;j++){		//loop over rows
    3026:	1a 8a       	std	Y+18, r1	; 0x12
    3028:	94 c0       	rjmp	.+296    	; 0x3152 <KPD_u8GetKey+0x176>
			result = DIO_u8ReadPin(KPD_PORT, (ROW_START+j));
    302a:	83 e0       	ldi	r24, 0x03	; 3
    302c:	6a 89       	ldd	r22, Y+18	; 0x12
    302e:	0e 94 3c 1b 	call	0x3678	; 0x3678 <DIO_u8ReadPin>
    3032:	88 8b       	std	Y+16, r24	; 0x10
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	a0 ea       	ldi	r26, 0xA0	; 160
    303a:	b1 e4       	ldi	r27, 0x41	; 65
    303c:	8b 87       	std	Y+11, r24	; 0x0b
    303e:	9c 87       	std	Y+12, r25	; 0x0c
    3040:	ad 87       	std	Y+13, r26	; 0x0d
    3042:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3044:	6b 85       	ldd	r22, Y+11	; 0x0b
    3046:	7c 85       	ldd	r23, Y+12	; 0x0c
    3048:	8d 85       	ldd	r24, Y+13	; 0x0d
    304a:	9e 85       	ldd	r25, Y+14	; 0x0e
    304c:	20 e0       	ldi	r18, 0x00	; 0
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	4a ef       	ldi	r20, 0xFA	; 250
    3052:	54 e4       	ldi	r21, 0x44	; 68
    3054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3058:	dc 01       	movw	r26, r24
    305a:	cb 01       	movw	r24, r22
    305c:	8f 83       	std	Y+7, r24	; 0x07
    305e:	98 87       	std	Y+8, r25	; 0x08
    3060:	a9 87       	std	Y+9, r26	; 0x09
    3062:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3064:	6f 81       	ldd	r22, Y+7	; 0x07
    3066:	78 85       	ldd	r23, Y+8	; 0x08
    3068:	89 85       	ldd	r24, Y+9	; 0x09
    306a:	9a 85       	ldd	r25, Y+10	; 0x0a
    306c:	20 e0       	ldi	r18, 0x00	; 0
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	40 e8       	ldi	r20, 0x80	; 128
    3072:	5f e3       	ldi	r21, 0x3F	; 63
    3074:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3078:	88 23       	and	r24, r24
    307a:	2c f4       	brge	.+10     	; 0x3086 <KPD_u8GetKey+0xaa>
		__ticks = 1;
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	9e 83       	std	Y+6, r25	; 0x06
    3082:	8d 83       	std	Y+5, r24	; 0x05
    3084:	3f c0       	rjmp	.+126    	; 0x3104 <KPD_u8GetKey+0x128>
	else if (__tmp > 65535)
    3086:	6f 81       	ldd	r22, Y+7	; 0x07
    3088:	78 85       	ldd	r23, Y+8	; 0x08
    308a:	89 85       	ldd	r24, Y+9	; 0x09
    308c:	9a 85       	ldd	r25, Y+10	; 0x0a
    308e:	20 e0       	ldi	r18, 0x00	; 0
    3090:	3f ef       	ldi	r19, 0xFF	; 255
    3092:	4f e7       	ldi	r20, 0x7F	; 127
    3094:	57 e4       	ldi	r21, 0x47	; 71
    3096:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    309a:	18 16       	cp	r1, r24
    309c:	4c f5       	brge	.+82     	; 0x30f0 <KPD_u8GetKey+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    309e:	6b 85       	ldd	r22, Y+11	; 0x0b
    30a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    30a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    30a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    30a6:	20 e0       	ldi	r18, 0x00	; 0
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	40 e2       	ldi	r20, 0x20	; 32
    30ac:	51 e4       	ldi	r21, 0x41	; 65
    30ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b2:	dc 01       	movw	r26, r24
    30b4:	cb 01       	movw	r24, r22
    30b6:	bc 01       	movw	r22, r24
    30b8:	cd 01       	movw	r24, r26
    30ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	9e 83       	std	Y+6, r25	; 0x06
    30c4:	8d 83       	std	Y+5, r24	; 0x05
    30c6:	0f c0       	rjmp	.+30     	; 0x30e6 <KPD_u8GetKey+0x10a>
    30c8:	88 ec       	ldi	r24, 0xC8	; 200
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	9c 83       	std	Y+4, r25	; 0x04
    30ce:	8b 83       	std	Y+3, r24	; 0x03
    30d0:	8b 81       	ldd	r24, Y+3	; 0x03
    30d2:	9c 81       	ldd	r25, Y+4	; 0x04
    30d4:	01 97       	sbiw	r24, 0x01	; 1
    30d6:	f1 f7       	brne	.-4      	; 0x30d4 <KPD_u8GetKey+0xf8>
    30d8:	9c 83       	std	Y+4, r25	; 0x04
    30da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30dc:	8d 81       	ldd	r24, Y+5	; 0x05
    30de:	9e 81       	ldd	r25, Y+6	; 0x06
    30e0:	01 97       	sbiw	r24, 0x01	; 1
    30e2:	9e 83       	std	Y+6, r25	; 0x06
    30e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30e6:	8d 81       	ldd	r24, Y+5	; 0x05
    30e8:	9e 81       	ldd	r25, Y+6	; 0x06
    30ea:	00 97       	sbiw	r24, 0x00	; 0
    30ec:	69 f7       	brne	.-38     	; 0x30c8 <KPD_u8GetKey+0xec>
    30ee:	14 c0       	rjmp	.+40     	; 0x3118 <KPD_u8GetKey+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f0:	6f 81       	ldd	r22, Y+7	; 0x07
    30f2:	78 85       	ldd	r23, Y+8	; 0x08
    30f4:	89 85       	ldd	r24, Y+9	; 0x09
    30f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30fc:	dc 01       	movw	r26, r24
    30fe:	cb 01       	movw	r24, r22
    3100:	9e 83       	std	Y+6, r25	; 0x06
    3102:	8d 83       	std	Y+5, r24	; 0x05
    3104:	8d 81       	ldd	r24, Y+5	; 0x05
    3106:	9e 81       	ldd	r25, Y+6	; 0x06
    3108:	9a 83       	std	Y+2, r25	; 0x02
    310a:	89 83       	std	Y+1, r24	; 0x01
    310c:	89 81       	ldd	r24, Y+1	; 0x01
    310e:	9a 81       	ldd	r25, Y+2	; 0x02
    3110:	01 97       	sbiw	r24, 0x01	; 1
    3112:	f1 f7       	brne	.-4      	; 0x3110 <KPD_u8GetKey+0x134>
    3114:	9a 83       	std	Y+2, r25	; 0x02
    3116:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(20);
			if(result == DIO_LOW){
    3118:	88 89       	ldd	r24, Y+16	; 0x10
    311a:	88 23       	and	r24, r24
    311c:	b9 f4       	brne	.+46     	; 0x314c <KPD_u8GetKey+0x170>
				key = KPD_arr[j][i];
    311e:	8a 89       	ldd	r24, Y+18	; 0x12
    3120:	48 2f       	mov	r20, r24
    3122:	50 e0       	ldi	r21, 0x00	; 0
    3124:	8b 89       	ldd	r24, Y+19	; 0x13
    3126:	28 2f       	mov	r18, r24
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	ca 01       	movw	r24, r20
    312c:	88 0f       	add	r24, r24
    312e:	99 1f       	adc	r25, r25
    3130:	88 0f       	add	r24, r24
    3132:	99 1f       	adc	r25, r25
    3134:	82 0f       	add	r24, r18
    3136:	93 1f       	adc	r25, r19
    3138:	fc 01       	movw	r30, r24
    313a:	e8 59       	subi	r30, 0x98	; 152
    313c:	ff 4f       	sbci	r31, 0xFF	; 255
    313e:	80 81       	ld	r24, Z
    3140:	8c 8b       	std	Y+20, r24	; 0x14
				exitflag = DIO_HIGH;
    3142:	81 e0       	ldi	r24, 0x01	; 1
    3144:	8f 87       	std	Y+15, r24	; 0x0f
				if(exitflag ==DIO_HIGH){
    3146:	8f 85       	ldd	r24, Y+15	; 0x0f
    3148:	81 30       	cpi	r24, 0x01	; 1
    314a:	39 f0       	breq	.+14     	; 0x315a <KPD_u8GetKey+0x17e>
			DIO_voidWritePin(KPD_PORT,k, DIO_HIGH);
		}
		//set column low
		DIO_voidWritePin(KPD_PORT,(COLUMN_START+i), DIO_LOW);

		for(j=0;j<4;j++){		//loop over rows
    314c:	8a 89       	ldd	r24, Y+18	; 0x12
    314e:	8f 5f       	subi	r24, 0xFF	; 255
    3150:	8a 8b       	std	Y+18, r24	; 0x12
    3152:	8a 89       	ldd	r24, Y+18	; 0x12
    3154:	84 30       	cpi	r24, 0x04	; 4
    3156:	08 f4       	brcc	.+2      	; 0x315a <KPD_u8GetKey+0x17e>
    3158:	68 cf       	rjmp	.-304    	; 0x302a <KPD_u8GetKey+0x4e>
				if(exitflag ==DIO_HIGH){
					break;
				}
			}
		}
		if(exitflag == DIO_HIGH){
    315a:	8f 85       	ldd	r24, Y+15	; 0x0f
    315c:	81 30       	cpi	r24, 0x01	; 1
    315e:	39 f0       	breq	.+14     	; 0x316e <KPD_u8GetKey+0x192>

uint8 KPD_u8GetKey(void){
	uint8 key = NoPressedKey;
	uint8 i, j, k;
	uint8 result, exitflag = DIO_LOW;
	for(i=0;i<4;i++){			//loop over columns
    3160:	8b 89       	ldd	r24, Y+19	; 0x13
    3162:	8f 5f       	subi	r24, 0xFF	; 255
    3164:	8b 8b       	std	Y+19, r24	; 0x13
    3166:	8b 89       	ldd	r24, Y+19	; 0x13
    3168:	84 30       	cpi	r24, 0x04	; 4
    316a:	08 f4       	brcc	.+2      	; 0x316e <KPD_u8GetKey+0x192>
    316c:	46 cf       	rjmp	.-372    	; 0x2ffa <KPD_u8GetKey+0x1e>
		}
		if(exitflag == DIO_HIGH){
			break;
		}
	}
	return key;
    316e:	8c 89       	ldd	r24, Y+20	; 0x14
}
    3170:	64 96       	adiw	r28, 0x14	; 20
    3172:	0f b6       	in	r0, 0x3f	; 63
    3174:	f8 94       	cli
    3176:	de bf       	out	0x3e, r29	; 62
    3178:	0f be       	out	0x3f, r0	; 63
    317a:	cd bf       	out	0x3d, r28	; 61
    317c:	cf 91       	pop	r28
    317e:	df 91       	pop	r29
    3180:	08 95       	ret

00003182 <EXT_INTERRUPT_VID_INIT>:
void (*EXTI0_CALLBACK_PTR)(void)=NULL;
void (*EXTI1_CALLBACK_PTR)(void)=NULL;
void (*EXTI2_CALLBACK_PTR)(void)=NULL;


void EXT_INTERRUPT_VID_INIT(void){
    3182:	df 93       	push	r29
    3184:	cf 93       	push	r28
    3186:	cd b7       	in	r28, 0x3d	; 61
    3188:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,ISC01);
#elif EXT0_MODE==   IOC
	SET_BIT(MCUCR,ISC00);
	CLR_BIT(MCUCR,ISC01);
#elif EXT0_MODE==   FALLING_EDGE
	CLR_BIT(MCUCR,ISC00);
    318a:	a5 e5       	ldi	r26, 0x55	; 85
    318c:	b0 e0       	ldi	r27, 0x00	; 0
    318e:	e5 e5       	ldi	r30, 0x55	; 85
    3190:	f0 e0       	ldi	r31, 0x00	; 0
    3192:	80 81       	ld	r24, Z
    3194:	8e 7f       	andi	r24, 0xFE	; 254
    3196:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC01);
    3198:	a5 e5       	ldi	r26, 0x55	; 85
    319a:	b0 e0       	ldi	r27, 0x00	; 0
    319c:	e5 e5       	ldi	r30, 0x55	; 85
    319e:	f0 e0       	ldi	r31, 0x00	; 0
    31a0:	80 81       	ld	r24, Z
    31a2:	82 60       	ori	r24, 0x02	; 2
    31a4:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,ISC11);
#elif EXT1_MODE==   IOC
	SET_BIT(MCUCR,ISC10);
	CLR_BIT(MCUCR,ISC11);
#elif EXT1_MODE==   FALLING_EDGE
	CLR_BIT(MCUCR,ISC10);
    31a6:	a5 e5       	ldi	r26, 0x55	; 85
    31a8:	b0 e0       	ldi	r27, 0x00	; 0
    31aa:	e5 e5       	ldi	r30, 0x55	; 85
    31ac:	f0 e0       	ldi	r31, 0x00	; 0
    31ae:	80 81       	ld	r24, Z
    31b0:	8b 7f       	andi	r24, 0xFB	; 251
    31b2:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC11);
    31b4:	a5 e5       	ldi	r26, 0x55	; 85
    31b6:	b0 e0       	ldi	r27, 0x00	; 0
    31b8:	e5 e5       	ldi	r30, 0x55	; 85
    31ba:	f0 e0       	ldi	r31, 0x00	; 0
    31bc:	80 81       	ld	r24, Z
    31be:	88 60       	ori	r24, 0x08	; 8
    31c0:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC11);
#else
#endif

#if EXT2_MODE== FALLING_EDGE
	CLR_BIT(MCUCSR,ISC2);
    31c2:	a4 e5       	ldi	r26, 0x54	; 84
    31c4:	b0 e0       	ldi	r27, 0x00	; 0
    31c6:	e4 e5       	ldi	r30, 0x54	; 84
    31c8:	f0 e0       	ldi	r31, 0x00	; 0
    31ca:	80 81       	ld	r24, Z
    31cc:	8f 7b       	andi	r24, 0xBF	; 191
    31ce:	8c 93       	st	X, r24
	SET_BIT(MCUCSR,ISC2);


#else
#endif
}
    31d0:	cf 91       	pop	r28
    31d2:	df 91       	pop	r29
    31d4:	08 95       	ret

000031d6 <EXT_INTERRUPT_VID_ENABLE>:

void EXT_INTERRUPT_VID_ENABLE(uint8 interrupt_number){
    31d6:	df 93       	push	r29
    31d8:	cf 93       	push	r28
    31da:	00 d0       	rcall	.+0      	; 0x31dc <EXT_INTERRUPT_VID_ENABLE+0x6>
    31dc:	0f 92       	push	r0
    31de:	cd b7       	in	r28, 0x3d	; 61
    31e0:	de b7       	in	r29, 0x3e	; 62
    31e2:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt_number){
    31e4:	89 81       	ldd	r24, Y+1	; 0x01
    31e6:	28 2f       	mov	r18, r24
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	3b 83       	std	Y+3, r19	; 0x03
    31ec:	2a 83       	std	Y+2, r18	; 0x02
    31ee:	8a 81       	ldd	r24, Y+2	; 0x02
    31f0:	9b 81       	ldd	r25, Y+3	; 0x03
    31f2:	81 30       	cpi	r24, 0x01	; 1
    31f4:	91 05       	cpc	r25, r1
    31f6:	89 f0       	breq	.+34     	; 0x321a <EXT_INTERRUPT_VID_ENABLE+0x44>
    31f8:	2a 81       	ldd	r18, Y+2	; 0x02
    31fa:	3b 81       	ldd	r19, Y+3	; 0x03
    31fc:	22 30       	cpi	r18, 0x02	; 2
    31fe:	31 05       	cpc	r19, r1
    3200:	a1 f0       	breq	.+40     	; 0x322a <EXT_INTERRUPT_VID_ENABLE+0x54>
    3202:	8a 81       	ldd	r24, Y+2	; 0x02
    3204:	9b 81       	ldd	r25, Y+3	; 0x03
    3206:	00 97       	sbiw	r24, 0x00	; 0
    3208:	b9 f4       	brne	.+46     	; 0x3238 <EXT_INTERRUPT_VID_ENABLE+0x62>
	case EXT0:
		SET_BIT(GICR, INT0);
    320a:	ab e5       	ldi	r26, 0x5B	; 91
    320c:	b0 e0       	ldi	r27, 0x00	; 0
    320e:	eb e5       	ldi	r30, 0x5B	; 91
    3210:	f0 e0       	ldi	r31, 0x00	; 0
    3212:	80 81       	ld	r24, Z
    3214:	80 64       	ori	r24, 0x40	; 64
    3216:	8c 93       	st	X, r24
    3218:	0f c0       	rjmp	.+30     	; 0x3238 <EXT_INTERRUPT_VID_ENABLE+0x62>
		break;
	case EXT1:
		SET_BIT(GICR, INT1);
    321a:	ab e5       	ldi	r26, 0x5B	; 91
    321c:	b0 e0       	ldi	r27, 0x00	; 0
    321e:	eb e5       	ldi	r30, 0x5B	; 91
    3220:	f0 e0       	ldi	r31, 0x00	; 0
    3222:	80 81       	ld	r24, Z
    3224:	80 68       	ori	r24, 0x80	; 128
    3226:	8c 93       	st	X, r24
    3228:	07 c0       	rjmp	.+14     	; 0x3238 <EXT_INTERRUPT_VID_ENABLE+0x62>
		break;
	case EXT2:
		SET_BIT(GICR, INT2);
    322a:	ab e5       	ldi	r26, 0x5B	; 91
    322c:	b0 e0       	ldi	r27, 0x00	; 0
    322e:	eb e5       	ldi	r30, 0x5B	; 91
    3230:	f0 e0       	ldi	r31, 0x00	; 0
    3232:	80 81       	ld	r24, Z
    3234:	80 62       	ori	r24, 0x20	; 32
    3236:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    3238:	0f 90       	pop	r0
    323a:	0f 90       	pop	r0
    323c:	0f 90       	pop	r0
    323e:	cf 91       	pop	r28
    3240:	df 91       	pop	r29
    3242:	08 95       	ret

00003244 <EXT_INTERRUPT_VID_DISABLE>:

void EXT_INTERRUPT_VID_DISABLE(uint8 interrupt_number){
    3244:	df 93       	push	r29
    3246:	cf 93       	push	r28
    3248:	00 d0       	rcall	.+0      	; 0x324a <EXT_INTERRUPT_VID_DISABLE+0x6>
    324a:	0f 92       	push	r0
    324c:	cd b7       	in	r28, 0x3d	; 61
    324e:	de b7       	in	r29, 0x3e	; 62
    3250:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt_number){
    3252:	89 81       	ldd	r24, Y+1	; 0x01
    3254:	28 2f       	mov	r18, r24
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	3b 83       	std	Y+3, r19	; 0x03
    325a:	2a 83       	std	Y+2, r18	; 0x02
    325c:	8a 81       	ldd	r24, Y+2	; 0x02
    325e:	9b 81       	ldd	r25, Y+3	; 0x03
    3260:	81 30       	cpi	r24, 0x01	; 1
    3262:	91 05       	cpc	r25, r1
    3264:	89 f0       	breq	.+34     	; 0x3288 <EXT_INTERRUPT_VID_DISABLE+0x44>
    3266:	2a 81       	ldd	r18, Y+2	; 0x02
    3268:	3b 81       	ldd	r19, Y+3	; 0x03
    326a:	22 30       	cpi	r18, 0x02	; 2
    326c:	31 05       	cpc	r19, r1
    326e:	a1 f0       	breq	.+40     	; 0x3298 <EXT_INTERRUPT_VID_DISABLE+0x54>
    3270:	8a 81       	ldd	r24, Y+2	; 0x02
    3272:	9b 81       	ldd	r25, Y+3	; 0x03
    3274:	00 97       	sbiw	r24, 0x00	; 0
    3276:	b9 f4       	brne	.+46     	; 0x32a6 <EXT_INTERRUPT_VID_DISABLE+0x62>
		case EXT0:
			CLR_BIT(GICR, INT0);
    3278:	ab e5       	ldi	r26, 0x5B	; 91
    327a:	b0 e0       	ldi	r27, 0x00	; 0
    327c:	eb e5       	ldi	r30, 0x5B	; 91
    327e:	f0 e0       	ldi	r31, 0x00	; 0
    3280:	80 81       	ld	r24, Z
    3282:	8f 7b       	andi	r24, 0xBF	; 191
    3284:	8c 93       	st	X, r24
    3286:	0f c0       	rjmp	.+30     	; 0x32a6 <EXT_INTERRUPT_VID_DISABLE+0x62>
			break;
		case EXT1:
			CLR_BIT(GICR, INT1);
    3288:	ab e5       	ldi	r26, 0x5B	; 91
    328a:	b0 e0       	ldi	r27, 0x00	; 0
    328c:	eb e5       	ldi	r30, 0x5B	; 91
    328e:	f0 e0       	ldi	r31, 0x00	; 0
    3290:	80 81       	ld	r24, Z
    3292:	8f 77       	andi	r24, 0x7F	; 127
    3294:	8c 93       	st	X, r24
    3296:	07 c0       	rjmp	.+14     	; 0x32a6 <EXT_INTERRUPT_VID_DISABLE+0x62>
			break;
		case EXT2:
			CLR_BIT(GICR, INT2);
    3298:	ab e5       	ldi	r26, 0x5B	; 91
    329a:	b0 e0       	ldi	r27, 0x00	; 0
    329c:	eb e5       	ldi	r30, 0x5B	; 91
    329e:	f0 e0       	ldi	r31, 0x00	; 0
    32a0:	80 81       	ld	r24, Z
    32a2:	8f 7d       	andi	r24, 0xDF	; 223
    32a4:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
}
    32a6:	0f 90       	pop	r0
    32a8:	0f 90       	pop	r0
    32aa:	0f 90       	pop	r0
    32ac:	cf 91       	pop	r28
    32ae:	df 91       	pop	r29
    32b0:	08 95       	ret

000032b2 <EXT0_VID_SET_CALL_BACK>:

	void EXT0_VID_SET_CALL_BACK(void (*PTR)(void)){
    32b2:	df 93       	push	r29
    32b4:	cf 93       	push	r28
    32b6:	00 d0       	rcall	.+0      	; 0x32b8 <EXT0_VID_SET_CALL_BACK+0x6>
    32b8:	cd b7       	in	r28, 0x3d	; 61
    32ba:	de b7       	in	r29, 0x3e	; 62
    32bc:	9a 83       	std	Y+2, r25	; 0x02
    32be:	89 83       	std	Y+1, r24	; 0x01
		EXTI0_CALLBACK_PTR=PTR;
    32c0:	89 81       	ldd	r24, Y+1	; 0x01
    32c2:	9a 81       	ldd	r25, Y+2	; 0x02
    32c4:	90 93 8d 00 	sts	0x008D, r25
    32c8:	80 93 8c 00 	sts	0x008C, r24
	}
    32cc:	0f 90       	pop	r0
    32ce:	0f 90       	pop	r0
    32d0:	cf 91       	pop	r28
    32d2:	df 91       	pop	r29
    32d4:	08 95       	ret

000032d6 <EXT1_VID_SET_CALL_BACK>:

	void EXT1_VID_SET_CALL_BACK(void (*PTR)(void)){
    32d6:	df 93       	push	r29
    32d8:	cf 93       	push	r28
    32da:	00 d0       	rcall	.+0      	; 0x32dc <EXT1_VID_SET_CALL_BACK+0x6>
    32dc:	cd b7       	in	r28, 0x3d	; 61
    32de:	de b7       	in	r29, 0x3e	; 62
    32e0:	9a 83       	std	Y+2, r25	; 0x02
    32e2:	89 83       	std	Y+1, r24	; 0x01
		EXTI1_CALLBACK_PTR=PTR;
    32e4:	89 81       	ldd	r24, Y+1	; 0x01
    32e6:	9a 81       	ldd	r25, Y+2	; 0x02
    32e8:	90 93 8f 00 	sts	0x008F, r25
    32ec:	80 93 8e 00 	sts	0x008E, r24
	}
    32f0:	0f 90       	pop	r0
    32f2:	0f 90       	pop	r0
    32f4:	cf 91       	pop	r28
    32f6:	df 91       	pop	r29
    32f8:	08 95       	ret

000032fa <EXT2_VID_SET_CALL_BACK>:

	void EXT2_VID_SET_CALL_BACK(void (*PTR)(void)){
    32fa:	df 93       	push	r29
    32fc:	cf 93       	push	r28
    32fe:	00 d0       	rcall	.+0      	; 0x3300 <EXT2_VID_SET_CALL_BACK+0x6>
    3300:	cd b7       	in	r28, 0x3d	; 61
    3302:	de b7       	in	r29, 0x3e	; 62
    3304:	9a 83       	std	Y+2, r25	; 0x02
    3306:	89 83       	std	Y+1, r24	; 0x01
		EXTI2_CALLBACK_PTR=PTR;
    3308:	89 81       	ldd	r24, Y+1	; 0x01
    330a:	9a 81       	ldd	r25, Y+2	; 0x02
    330c:	90 93 91 00 	sts	0x0091, r25
    3310:	80 93 90 00 	sts	0x0090, r24
	}
    3314:	0f 90       	pop	r0
    3316:	0f 90       	pop	r0
    3318:	cf 91       	pop	r28
    331a:	df 91       	pop	r29
    331c:	08 95       	ret

0000331e <__vector_1>:


	void __vector_1 (void) __attribute__ ((signal,used, externally_visible)) ; \
	void __vector_1 (void){
    331e:	1f 92       	push	r1
    3320:	0f 92       	push	r0
    3322:	0f b6       	in	r0, 0x3f	; 63
    3324:	0f 92       	push	r0
    3326:	11 24       	eor	r1, r1
    3328:	2f 93       	push	r18
    332a:	3f 93       	push	r19
    332c:	4f 93       	push	r20
    332e:	5f 93       	push	r21
    3330:	6f 93       	push	r22
    3332:	7f 93       	push	r23
    3334:	8f 93       	push	r24
    3336:	9f 93       	push	r25
    3338:	af 93       	push	r26
    333a:	bf 93       	push	r27
    333c:	ef 93       	push	r30
    333e:	ff 93       	push	r31
    3340:	df 93       	push	r29
    3342:	cf 93       	push	r28
    3344:	cd b7       	in	r28, 0x3d	; 61
    3346:	de b7       	in	r29, 0x3e	; 62
		EXTI0_CALLBACK_PTR();
    3348:	e0 91 8c 00 	lds	r30, 0x008C
    334c:	f0 91 8d 00 	lds	r31, 0x008D
    3350:	09 95       	icall
	}
    3352:	cf 91       	pop	r28
    3354:	df 91       	pop	r29
    3356:	ff 91       	pop	r31
    3358:	ef 91       	pop	r30
    335a:	bf 91       	pop	r27
    335c:	af 91       	pop	r26
    335e:	9f 91       	pop	r25
    3360:	8f 91       	pop	r24
    3362:	7f 91       	pop	r23
    3364:	6f 91       	pop	r22
    3366:	5f 91       	pop	r21
    3368:	4f 91       	pop	r20
    336a:	3f 91       	pop	r19
    336c:	2f 91       	pop	r18
    336e:	0f 90       	pop	r0
    3370:	0f be       	out	0x3f, r0	; 63
    3372:	0f 90       	pop	r0
    3374:	1f 90       	pop	r1
    3376:	18 95       	reti

00003378 <__vector_2>:

	void __vector_2 (void) __attribute__ ((signal,used, externally_visible)) ; \
	void __vector_2 (void){
    3378:	1f 92       	push	r1
    337a:	0f 92       	push	r0
    337c:	0f b6       	in	r0, 0x3f	; 63
    337e:	0f 92       	push	r0
    3380:	11 24       	eor	r1, r1
    3382:	2f 93       	push	r18
    3384:	3f 93       	push	r19
    3386:	4f 93       	push	r20
    3388:	5f 93       	push	r21
    338a:	6f 93       	push	r22
    338c:	7f 93       	push	r23
    338e:	8f 93       	push	r24
    3390:	9f 93       	push	r25
    3392:	af 93       	push	r26
    3394:	bf 93       	push	r27
    3396:	ef 93       	push	r30
    3398:	ff 93       	push	r31
    339a:	df 93       	push	r29
    339c:	cf 93       	push	r28
    339e:	cd b7       	in	r28, 0x3d	; 61
    33a0:	de b7       	in	r29, 0x3e	; 62
		EXTI1_CALLBACK_PTR();
    33a2:	e0 91 8e 00 	lds	r30, 0x008E
    33a6:	f0 91 8f 00 	lds	r31, 0x008F
    33aa:	09 95       	icall
	}
    33ac:	cf 91       	pop	r28
    33ae:	df 91       	pop	r29
    33b0:	ff 91       	pop	r31
    33b2:	ef 91       	pop	r30
    33b4:	bf 91       	pop	r27
    33b6:	af 91       	pop	r26
    33b8:	9f 91       	pop	r25
    33ba:	8f 91       	pop	r24
    33bc:	7f 91       	pop	r23
    33be:	6f 91       	pop	r22
    33c0:	5f 91       	pop	r21
    33c2:	4f 91       	pop	r20
    33c4:	3f 91       	pop	r19
    33c6:	2f 91       	pop	r18
    33c8:	0f 90       	pop	r0
    33ca:	0f be       	out	0x3f, r0	; 63
    33cc:	0f 90       	pop	r0
    33ce:	1f 90       	pop	r1
    33d0:	18 95       	reti

000033d2 <__vector_3>:


	void __vector_3 (void) __attribute__ ((signal,used, externally_visible)) ; \
	void __vector_3 (void){
    33d2:	1f 92       	push	r1
    33d4:	0f 92       	push	r0
    33d6:	0f b6       	in	r0, 0x3f	; 63
    33d8:	0f 92       	push	r0
    33da:	11 24       	eor	r1, r1
    33dc:	2f 93       	push	r18
    33de:	3f 93       	push	r19
    33e0:	4f 93       	push	r20
    33e2:	5f 93       	push	r21
    33e4:	6f 93       	push	r22
    33e6:	7f 93       	push	r23
    33e8:	8f 93       	push	r24
    33ea:	9f 93       	push	r25
    33ec:	af 93       	push	r26
    33ee:	bf 93       	push	r27
    33f0:	ef 93       	push	r30
    33f2:	ff 93       	push	r31
    33f4:	df 93       	push	r29
    33f6:	cf 93       	push	r28
    33f8:	cd b7       	in	r28, 0x3d	; 61
    33fa:	de b7       	in	r29, 0x3e	; 62
		EXTI2_CALLBACK_PTR();
    33fc:	e0 91 90 00 	lds	r30, 0x0090
    3400:	f0 91 91 00 	lds	r31, 0x0091
    3404:	09 95       	icall
	}
    3406:	cf 91       	pop	r28
    3408:	df 91       	pop	r29
    340a:	ff 91       	pop	r31
    340c:	ef 91       	pop	r30
    340e:	bf 91       	pop	r27
    3410:	af 91       	pop	r26
    3412:	9f 91       	pop	r25
    3414:	8f 91       	pop	r24
    3416:	7f 91       	pop	r23
    3418:	6f 91       	pop	r22
    341a:	5f 91       	pop	r21
    341c:	4f 91       	pop	r20
    341e:	3f 91       	pop	r19
    3420:	2f 91       	pop	r18
    3422:	0f 90       	pop	r0
    3424:	0f be       	out	0x3f, r0	; 63
    3426:	0f 90       	pop	r0
    3428:	1f 90       	pop	r1
    342a:	18 95       	reti

0000342c <Global_Interrupt_Enable>:
#include "../BIT_Math.h"
#include "Global_Interrupt_register.h"
#include "Global_Interrupt_interface.h"

void Global_Interrupt_Enable(void)
{
    342c:	df 93       	push	r29
    342e:	cf 93       	push	r28
    3430:	cd b7       	in	r28, 0x3d	; 61
    3432:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I);
    3434:	af e5       	ldi	r26, 0x5F	; 95
    3436:	b0 e0       	ldi	r27, 0x00	; 0
    3438:	ef e5       	ldi	r30, 0x5F	; 95
    343a:	f0 e0       	ldi	r31, 0x00	; 0
    343c:	80 81       	ld	r24, Z
    343e:	80 68       	ori	r24, 0x80	; 128
    3440:	8c 93       	st	X, r24
}
    3442:	cf 91       	pop	r28
    3444:	df 91       	pop	r29
    3446:	08 95       	ret

00003448 <Global_Interrupt_Disable>:
void Global_Interrupt_Disable(void)
{
    3448:	df 93       	push	r29
    344a:	cf 93       	push	r28
    344c:	cd b7       	in	r28, 0x3d	; 61
    344e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
    3450:	af e5       	ldi	r26, 0x5F	; 95
    3452:	b0 e0       	ldi	r27, 0x00	; 0
    3454:	ef e5       	ldi	r30, 0x5F	; 95
    3456:	f0 e0       	ldi	r31, 0x00	; 0
    3458:	80 81       	ld	r24, Z
    345a:	8f 77       	andi	r24, 0x7F	; 127
    345c:	8c 93       	st	X, r24
}
    345e:	cf 91       	pop	r28
    3460:	df 91       	pop	r29
    3462:	08 95       	ret

00003464 <DIO_voidInit>:
#include "DIO_private.h"
#include "DIO_config.h"


void DIO_voidInit(void)
{
    3464:	df 93       	push	r29
    3466:	cf 93       	push	r28
    3468:	cd b7       	in	r28, 0x3d	; 61
    346a:	de b7       	in	r29, 0x3e	; 62
	DDRA=CONCAT(DIO_PIN_NUM_A7_DIR,DIO_PIN_NUM_A6_DIR,DIO_PIN_NUM_A5_DIR,DIO_PIN_NUM_A4_DIR,DIO_PIN_NUM_A3_DIR,DIO_PIN_NUM_A2_DIR,DIO_PIN_NUM_A1_DIR,DIO_PIN_NUM_A0_DIR);
    346c:	ea e3       	ldi	r30, 0x3A	; 58
    346e:	f0 e0       	ldi	r31, 0x00	; 0
    3470:	8f ef       	ldi	r24, 0xFF	; 255
    3472:	80 83       	st	Z, r24
	DDRB=CONCAT(DIO_PIN_NUM_B7_DIR,DIO_PIN_NUM_B6_DIR,DIO_PIN_NUM_B5_DIR,DIO_PIN_NUM_B4_DIR,DIO_PIN_NUM_B3_DIR,DIO_PIN_NUM_B2_DIR,DIO_PIN_NUM_B1_DIR,DIO_PIN_NUM_B0_DIR);
    3474:	e7 e3       	ldi	r30, 0x37	; 55
    3476:	f0 e0       	ldi	r31, 0x00	; 0
    3478:	8f e4       	ldi	r24, 0x4F	; 79
    347a:	80 83       	st	Z, r24
	DDRC=CONCAT(DIO_PIN_NUM_C7_DIR,DIO_PIN_NUM_C6_DIR,DIO_PIN_NUM_C5_DIR,DIO_PIN_NUM_C4_DIR,DIO_PIN_NUM_C3_DIR,DIO_PIN_NUM_C2_DIR,DIO_PIN_NUM_C1_DIR,DIO_PIN_NUM_C0_DIR);
    347c:	e4 e3       	ldi	r30, 0x34	; 52
    347e:	f0 e0       	ldi	r31, 0x00	; 0
    3480:	80 ef       	ldi	r24, 0xF0	; 240
    3482:	80 83       	st	Z, r24
	DDRD=CONCAT(DIO_PIN_NUM_D7_DIR,DIO_PIN_NUM_D6_DIR,DIO_PIN_NUM_D5_DIR,DIO_PIN_NUM_D4_DIR,DIO_PIN_NUM_D3_DIR,DIO_PIN_NUM_D2_DIR,DIO_PIN_NUM_D1_DIR,DIO_PIN_NUM_D0_DIR);
    3484:	e1 e3       	ldi	r30, 0x31	; 49
    3486:	f0 e0       	ldi	r31, 0x00	; 0
    3488:	8f ef       	ldi	r24, 0xFF	; 255
    348a:	80 83       	st	Z, r24
}
    348c:	cf 91       	pop	r28
    348e:	df 91       	pop	r29
    3490:	08 95       	ret

00003492 <DIO_voidWritePin>:
void DIO_voidWritePin(uint8 u8PortCpy, uint8 u8PinCpy, uint8 u8ValueCpy)
{
    3492:	df 93       	push	r29
    3494:	cf 93       	push	r28
    3496:	00 d0       	rcall	.+0      	; 0x3498 <DIO_voidWritePin+0x6>
    3498:	00 d0       	rcall	.+0      	; 0x349a <DIO_voidWritePin+0x8>
    349a:	0f 92       	push	r0
    349c:	cd b7       	in	r28, 0x3d	; 61
    349e:	de b7       	in	r29, 0x3e	; 62
    34a0:	89 83       	std	Y+1, r24	; 0x01
    34a2:	6a 83       	std	Y+2, r22	; 0x02
    34a4:	4b 83       	std	Y+3, r20	; 0x03
	switch(u8PortCpy){
    34a6:	89 81       	ldd	r24, Y+1	; 0x01
    34a8:	28 2f       	mov	r18, r24
    34aa:	30 e0       	ldi	r19, 0x00	; 0
    34ac:	3d 83       	std	Y+5, r19	; 0x05
    34ae:	2c 83       	std	Y+4, r18	; 0x04
    34b0:	8c 81       	ldd	r24, Y+4	; 0x04
    34b2:	9d 81       	ldd	r25, Y+5	; 0x05
    34b4:	82 30       	cpi	r24, 0x02	; 2
    34b6:	91 05       	cpc	r25, r1
    34b8:	09 f4       	brne	.+2      	; 0x34bc <DIO_voidWritePin+0x2a>
    34ba:	48 c0       	rjmp	.+144    	; 0x354c <DIO_voidWritePin+0xba>
    34bc:	2c 81       	ldd	r18, Y+4	; 0x04
    34be:	3d 81       	ldd	r19, Y+5	; 0x05
    34c0:	23 30       	cpi	r18, 0x03	; 3
    34c2:	31 05       	cpc	r19, r1
    34c4:	34 f4       	brge	.+12     	; 0x34d2 <DIO_voidWritePin+0x40>
    34c6:	8c 81       	ldd	r24, Y+4	; 0x04
    34c8:	9d 81       	ldd	r25, Y+5	; 0x05
    34ca:	81 30       	cpi	r24, 0x01	; 1
    34cc:	91 05       	cpc	r25, r1
    34ce:	71 f0       	breq	.+28     	; 0x34ec <DIO_voidWritePin+0x5a>
    34d0:	cb c0       	rjmp	.+406    	; 0x3668 <DIO_voidWritePin+0x1d6>
    34d2:	2c 81       	ldd	r18, Y+4	; 0x04
    34d4:	3d 81       	ldd	r19, Y+5	; 0x05
    34d6:	23 30       	cpi	r18, 0x03	; 3
    34d8:	31 05       	cpc	r19, r1
    34da:	09 f4       	brne	.+2      	; 0x34de <DIO_voidWritePin+0x4c>
    34dc:	67 c0       	rjmp	.+206    	; 0x35ac <DIO_voidWritePin+0x11a>
    34de:	8c 81       	ldd	r24, Y+4	; 0x04
    34e0:	9d 81       	ldd	r25, Y+5	; 0x05
    34e2:	84 30       	cpi	r24, 0x04	; 4
    34e4:	91 05       	cpc	r25, r1
    34e6:	09 f4       	brne	.+2      	; 0x34ea <DIO_voidWritePin+0x58>
    34e8:	91 c0       	rjmp	.+290    	; 0x360c <DIO_voidWritePin+0x17a>
    34ea:	be c0       	rjmp	.+380    	; 0x3668 <DIO_voidWritePin+0x1d6>
	case PORT_A:
		if (u8ValueCpy == DIO_HIGH)
    34ec:	8b 81       	ldd	r24, Y+3	; 0x03
    34ee:	81 30       	cpi	r24, 0x01	; 1
    34f0:	a1 f4       	brne	.+40     	; 0x351a <DIO_voidWritePin+0x88>
		{
			SET_BIT(PORTA, u8PinCpy);
    34f2:	ab e3       	ldi	r26, 0x3B	; 59
    34f4:	b0 e0       	ldi	r27, 0x00	; 0
    34f6:	eb e3       	ldi	r30, 0x3B	; 59
    34f8:	f0 e0       	ldi	r31, 0x00	; 0
    34fa:	80 81       	ld	r24, Z
    34fc:	48 2f       	mov	r20, r24
    34fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3500:	28 2f       	mov	r18, r24
    3502:	30 e0       	ldi	r19, 0x00	; 0
    3504:	81 e0       	ldi	r24, 0x01	; 1
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	02 2e       	mov	r0, r18
    350a:	02 c0       	rjmp	.+4      	; 0x3510 <DIO_voidWritePin+0x7e>
    350c:	88 0f       	add	r24, r24
    350e:	99 1f       	adc	r25, r25
    3510:	0a 94       	dec	r0
    3512:	e2 f7       	brpl	.-8      	; 0x350c <DIO_voidWritePin+0x7a>
    3514:	84 2b       	or	r24, r20
    3516:	8c 93       	st	X, r24
    3518:	a7 c0       	rjmp	.+334    	; 0x3668 <DIO_voidWritePin+0x1d6>
		}
		else if(u8ValueCpy == DIO_LOW)
    351a:	8b 81       	ldd	r24, Y+3	; 0x03
    351c:	88 23       	and	r24, r24
    351e:	09 f0       	breq	.+2      	; 0x3522 <DIO_voidWritePin+0x90>
    3520:	a3 c0       	rjmp	.+326    	; 0x3668 <DIO_voidWritePin+0x1d6>
		{
			CLR_BIT(PORTA, u8PinCpy);
    3522:	ab e3       	ldi	r26, 0x3B	; 59
    3524:	b0 e0       	ldi	r27, 0x00	; 0
    3526:	eb e3       	ldi	r30, 0x3B	; 59
    3528:	f0 e0       	ldi	r31, 0x00	; 0
    352a:	80 81       	ld	r24, Z
    352c:	48 2f       	mov	r20, r24
    352e:	8a 81       	ldd	r24, Y+2	; 0x02
    3530:	28 2f       	mov	r18, r24
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	81 e0       	ldi	r24, 0x01	; 1
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	02 2e       	mov	r0, r18
    353a:	02 c0       	rjmp	.+4      	; 0x3540 <DIO_voidWritePin+0xae>
    353c:	88 0f       	add	r24, r24
    353e:	99 1f       	adc	r25, r25
    3540:	0a 94       	dec	r0
    3542:	e2 f7       	brpl	.-8      	; 0x353c <DIO_voidWritePin+0xaa>
    3544:	80 95       	com	r24
    3546:	84 23       	and	r24, r20
    3548:	8c 93       	st	X, r24
    354a:	8e c0       	rjmp	.+284    	; 0x3668 <DIO_voidWritePin+0x1d6>
		}
		break;
	case PORT_B:
		if (u8ValueCpy == DIO_HIGH)
    354c:	8b 81       	ldd	r24, Y+3	; 0x03
    354e:	81 30       	cpi	r24, 0x01	; 1
    3550:	a1 f4       	brne	.+40     	; 0x357a <DIO_voidWritePin+0xe8>
		{
			SET_BIT(PORTB, u8PinCpy);
    3552:	a8 e3       	ldi	r26, 0x38	; 56
    3554:	b0 e0       	ldi	r27, 0x00	; 0
    3556:	e8 e3       	ldi	r30, 0x38	; 56
    3558:	f0 e0       	ldi	r31, 0x00	; 0
    355a:	80 81       	ld	r24, Z
    355c:	48 2f       	mov	r20, r24
    355e:	8a 81       	ldd	r24, Y+2	; 0x02
    3560:	28 2f       	mov	r18, r24
    3562:	30 e0       	ldi	r19, 0x00	; 0
    3564:	81 e0       	ldi	r24, 0x01	; 1
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	02 2e       	mov	r0, r18
    356a:	02 c0       	rjmp	.+4      	; 0x3570 <DIO_voidWritePin+0xde>
    356c:	88 0f       	add	r24, r24
    356e:	99 1f       	adc	r25, r25
    3570:	0a 94       	dec	r0
    3572:	e2 f7       	brpl	.-8      	; 0x356c <DIO_voidWritePin+0xda>
    3574:	84 2b       	or	r24, r20
    3576:	8c 93       	st	X, r24
    3578:	77 c0       	rjmp	.+238    	; 0x3668 <DIO_voidWritePin+0x1d6>
		}
		else if(u8ValueCpy == DIO_LOW)
    357a:	8b 81       	ldd	r24, Y+3	; 0x03
    357c:	88 23       	and	r24, r24
    357e:	09 f0       	breq	.+2      	; 0x3582 <DIO_voidWritePin+0xf0>
    3580:	73 c0       	rjmp	.+230    	; 0x3668 <DIO_voidWritePin+0x1d6>
		{
			CLR_BIT(PORTB, u8PinCpy);
    3582:	a8 e3       	ldi	r26, 0x38	; 56
    3584:	b0 e0       	ldi	r27, 0x00	; 0
    3586:	e8 e3       	ldi	r30, 0x38	; 56
    3588:	f0 e0       	ldi	r31, 0x00	; 0
    358a:	80 81       	ld	r24, Z
    358c:	48 2f       	mov	r20, r24
    358e:	8a 81       	ldd	r24, Y+2	; 0x02
    3590:	28 2f       	mov	r18, r24
    3592:	30 e0       	ldi	r19, 0x00	; 0
    3594:	81 e0       	ldi	r24, 0x01	; 1
    3596:	90 e0       	ldi	r25, 0x00	; 0
    3598:	02 2e       	mov	r0, r18
    359a:	02 c0       	rjmp	.+4      	; 0x35a0 <DIO_voidWritePin+0x10e>
    359c:	88 0f       	add	r24, r24
    359e:	99 1f       	adc	r25, r25
    35a0:	0a 94       	dec	r0
    35a2:	e2 f7       	brpl	.-8      	; 0x359c <DIO_voidWritePin+0x10a>
    35a4:	80 95       	com	r24
    35a6:	84 23       	and	r24, r20
    35a8:	8c 93       	st	X, r24
    35aa:	5e c0       	rjmp	.+188    	; 0x3668 <DIO_voidWritePin+0x1d6>
		}
		break;
	case PORT_C:
		if (u8ValueCpy == DIO_HIGH)
    35ac:	8b 81       	ldd	r24, Y+3	; 0x03
    35ae:	81 30       	cpi	r24, 0x01	; 1
    35b0:	a1 f4       	brne	.+40     	; 0x35da <DIO_voidWritePin+0x148>
		{
			SET_BIT(PORTC, u8PinCpy);
    35b2:	a5 e3       	ldi	r26, 0x35	; 53
    35b4:	b0 e0       	ldi	r27, 0x00	; 0
    35b6:	e5 e3       	ldi	r30, 0x35	; 53
    35b8:	f0 e0       	ldi	r31, 0x00	; 0
    35ba:	80 81       	ld	r24, Z
    35bc:	48 2f       	mov	r20, r24
    35be:	8a 81       	ldd	r24, Y+2	; 0x02
    35c0:	28 2f       	mov	r18, r24
    35c2:	30 e0       	ldi	r19, 0x00	; 0
    35c4:	81 e0       	ldi	r24, 0x01	; 1
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	02 2e       	mov	r0, r18
    35ca:	02 c0       	rjmp	.+4      	; 0x35d0 <DIO_voidWritePin+0x13e>
    35cc:	88 0f       	add	r24, r24
    35ce:	99 1f       	adc	r25, r25
    35d0:	0a 94       	dec	r0
    35d2:	e2 f7       	brpl	.-8      	; 0x35cc <DIO_voidWritePin+0x13a>
    35d4:	84 2b       	or	r24, r20
    35d6:	8c 93       	st	X, r24
    35d8:	47 c0       	rjmp	.+142    	; 0x3668 <DIO_voidWritePin+0x1d6>
		}
		else if(u8ValueCpy == DIO_LOW){
    35da:	8b 81       	ldd	r24, Y+3	; 0x03
    35dc:	88 23       	and	r24, r24
    35de:	09 f0       	breq	.+2      	; 0x35e2 <DIO_voidWritePin+0x150>
    35e0:	43 c0       	rjmp	.+134    	; 0x3668 <DIO_voidWritePin+0x1d6>
			CLR_BIT(PORTC, u8PinCpy);
    35e2:	a5 e3       	ldi	r26, 0x35	; 53
    35e4:	b0 e0       	ldi	r27, 0x00	; 0
    35e6:	e5 e3       	ldi	r30, 0x35	; 53
    35e8:	f0 e0       	ldi	r31, 0x00	; 0
    35ea:	80 81       	ld	r24, Z
    35ec:	48 2f       	mov	r20, r24
    35ee:	8a 81       	ldd	r24, Y+2	; 0x02
    35f0:	28 2f       	mov	r18, r24
    35f2:	30 e0       	ldi	r19, 0x00	; 0
    35f4:	81 e0       	ldi	r24, 0x01	; 1
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	02 2e       	mov	r0, r18
    35fa:	02 c0       	rjmp	.+4      	; 0x3600 <DIO_voidWritePin+0x16e>
    35fc:	88 0f       	add	r24, r24
    35fe:	99 1f       	adc	r25, r25
    3600:	0a 94       	dec	r0
    3602:	e2 f7       	brpl	.-8      	; 0x35fc <DIO_voidWritePin+0x16a>
    3604:	80 95       	com	r24
    3606:	84 23       	and	r24, r20
    3608:	8c 93       	st	X, r24
    360a:	2e c0       	rjmp	.+92     	; 0x3668 <DIO_voidWritePin+0x1d6>
		}
		break;
	case PORT_D:
		if (u8ValueCpy == DIO_HIGH){
    360c:	8b 81       	ldd	r24, Y+3	; 0x03
    360e:	81 30       	cpi	r24, 0x01	; 1
    3610:	a1 f4       	brne	.+40     	; 0x363a <DIO_voidWritePin+0x1a8>
			SET_BIT(PORTD, u8PinCpy);
    3612:	a2 e3       	ldi	r26, 0x32	; 50
    3614:	b0 e0       	ldi	r27, 0x00	; 0
    3616:	e2 e3       	ldi	r30, 0x32	; 50
    3618:	f0 e0       	ldi	r31, 0x00	; 0
    361a:	80 81       	ld	r24, Z
    361c:	48 2f       	mov	r20, r24
    361e:	8a 81       	ldd	r24, Y+2	; 0x02
    3620:	28 2f       	mov	r18, r24
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	81 e0       	ldi	r24, 0x01	; 1
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	02 2e       	mov	r0, r18
    362a:	02 c0       	rjmp	.+4      	; 0x3630 <DIO_voidWritePin+0x19e>
    362c:	88 0f       	add	r24, r24
    362e:	99 1f       	adc	r25, r25
    3630:	0a 94       	dec	r0
    3632:	e2 f7       	brpl	.-8      	; 0x362c <DIO_voidWritePin+0x19a>
    3634:	84 2b       	or	r24, r20
    3636:	8c 93       	st	X, r24
    3638:	17 c0       	rjmp	.+46     	; 0x3668 <DIO_voidWritePin+0x1d6>
		}
		else if(u8ValueCpy == DIO_LOW){
    363a:	8b 81       	ldd	r24, Y+3	; 0x03
    363c:	88 23       	and	r24, r24
    363e:	a1 f4       	brne	.+40     	; 0x3668 <DIO_voidWritePin+0x1d6>
			CLR_BIT(PORTD, u8PinCpy);
    3640:	a2 e3       	ldi	r26, 0x32	; 50
    3642:	b0 e0       	ldi	r27, 0x00	; 0
    3644:	e2 e3       	ldi	r30, 0x32	; 50
    3646:	f0 e0       	ldi	r31, 0x00	; 0
    3648:	80 81       	ld	r24, Z
    364a:	48 2f       	mov	r20, r24
    364c:	8a 81       	ldd	r24, Y+2	; 0x02
    364e:	28 2f       	mov	r18, r24
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	81 e0       	ldi	r24, 0x01	; 1
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	02 2e       	mov	r0, r18
    3658:	02 c0       	rjmp	.+4      	; 0x365e <DIO_voidWritePin+0x1cc>
    365a:	88 0f       	add	r24, r24
    365c:	99 1f       	adc	r25, r25
    365e:	0a 94       	dec	r0
    3660:	e2 f7       	brpl	.-8      	; 0x365a <DIO_voidWritePin+0x1c8>
    3662:	80 95       	com	r24
    3664:	84 23       	and	r24, r20
    3666:	8c 93       	st	X, r24
		}
		break;
		}
}
    3668:	0f 90       	pop	r0
    366a:	0f 90       	pop	r0
    366c:	0f 90       	pop	r0
    366e:	0f 90       	pop	r0
    3670:	0f 90       	pop	r0
    3672:	cf 91       	pop	r28
    3674:	df 91       	pop	r29
    3676:	08 95       	ret

00003678 <DIO_u8ReadPin>:
uint8 DIO_u8ReadPin(uint8 u8PortCpy, uint8 u8PinCpy)
{
    3678:	df 93       	push	r29
    367a:	cf 93       	push	r28
    367c:	00 d0       	rcall	.+0      	; 0x367e <DIO_u8ReadPin+0x6>
    367e:	00 d0       	rcall	.+0      	; 0x3680 <DIO_u8ReadPin+0x8>
    3680:	0f 92       	push	r0
    3682:	cd b7       	in	r28, 0x3d	; 61
    3684:	de b7       	in	r29, 0x3e	; 62
    3686:	8a 83       	std	Y+2, r24	; 0x02
    3688:	6b 83       	std	Y+3, r22	; 0x03
	uint8 u8PinVal;
	switch(u8PortCpy)
    368a:	8a 81       	ldd	r24, Y+2	; 0x02
    368c:	28 2f       	mov	r18, r24
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	3d 83       	std	Y+5, r19	; 0x05
    3692:	2c 83       	std	Y+4, r18	; 0x04
    3694:	4c 81       	ldd	r20, Y+4	; 0x04
    3696:	5d 81       	ldd	r21, Y+5	; 0x05
    3698:	42 30       	cpi	r20, 0x02	; 2
    369a:	51 05       	cpc	r21, r1
    369c:	41 f1       	breq	.+80     	; 0x36ee <DIO_u8ReadPin+0x76>
    369e:	8c 81       	ldd	r24, Y+4	; 0x04
    36a0:	9d 81       	ldd	r25, Y+5	; 0x05
    36a2:	83 30       	cpi	r24, 0x03	; 3
    36a4:	91 05       	cpc	r25, r1
    36a6:	34 f4       	brge	.+12     	; 0x36b4 <DIO_u8ReadPin+0x3c>
    36a8:	2c 81       	ldd	r18, Y+4	; 0x04
    36aa:	3d 81       	ldd	r19, Y+5	; 0x05
    36ac:	21 30       	cpi	r18, 0x01	; 1
    36ae:	31 05       	cpc	r19, r1
    36b0:	61 f0       	breq	.+24     	; 0x36ca <DIO_u8ReadPin+0x52>
    36b2:	52 c0       	rjmp	.+164    	; 0x3758 <DIO_u8ReadPin+0xe0>
    36b4:	4c 81       	ldd	r20, Y+4	; 0x04
    36b6:	5d 81       	ldd	r21, Y+5	; 0x05
    36b8:	43 30       	cpi	r20, 0x03	; 3
    36ba:	51 05       	cpc	r21, r1
    36bc:	51 f1       	breq	.+84     	; 0x3712 <DIO_u8ReadPin+0x9a>
    36be:	8c 81       	ldd	r24, Y+4	; 0x04
    36c0:	9d 81       	ldd	r25, Y+5	; 0x05
    36c2:	84 30       	cpi	r24, 0x04	; 4
    36c4:	91 05       	cpc	r25, r1
    36c6:	b9 f1       	breq	.+110    	; 0x3736 <DIO_u8ReadPin+0xbe>
    36c8:	47 c0       	rjmp	.+142    	; 0x3758 <DIO_u8ReadPin+0xe0>
	{
		case PORT_A:
			u8PinVal=GET_BIT(PINA,u8PinCpy);
    36ca:	e9 e3       	ldi	r30, 0x39	; 57
    36cc:	f0 e0       	ldi	r31, 0x00	; 0
    36ce:	80 81       	ld	r24, Z
    36d0:	28 2f       	mov	r18, r24
    36d2:	30 e0       	ldi	r19, 0x00	; 0
    36d4:	8b 81       	ldd	r24, Y+3	; 0x03
    36d6:	88 2f       	mov	r24, r24
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	a9 01       	movw	r20, r18
    36dc:	02 c0       	rjmp	.+4      	; 0x36e2 <DIO_u8ReadPin+0x6a>
    36de:	55 95       	asr	r21
    36e0:	47 95       	ror	r20
    36e2:	8a 95       	dec	r24
    36e4:	e2 f7       	brpl	.-8      	; 0x36de <DIO_u8ReadPin+0x66>
    36e6:	ca 01       	movw	r24, r20
    36e8:	81 70       	andi	r24, 0x01	; 1
    36ea:	89 83       	std	Y+1, r24	; 0x01
    36ec:	35 c0       	rjmp	.+106    	; 0x3758 <DIO_u8ReadPin+0xe0>
			break;
		case PORT_B:
			u8PinVal=GET_BIT(PINB,u8PinCpy);
    36ee:	e6 e3       	ldi	r30, 0x36	; 54
    36f0:	f0 e0       	ldi	r31, 0x00	; 0
    36f2:	80 81       	ld	r24, Z
    36f4:	28 2f       	mov	r18, r24
    36f6:	30 e0       	ldi	r19, 0x00	; 0
    36f8:	8b 81       	ldd	r24, Y+3	; 0x03
    36fa:	88 2f       	mov	r24, r24
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	a9 01       	movw	r20, r18
    3700:	02 c0       	rjmp	.+4      	; 0x3706 <DIO_u8ReadPin+0x8e>
    3702:	55 95       	asr	r21
    3704:	47 95       	ror	r20
    3706:	8a 95       	dec	r24
    3708:	e2 f7       	brpl	.-8      	; 0x3702 <DIO_u8ReadPin+0x8a>
    370a:	ca 01       	movw	r24, r20
    370c:	81 70       	andi	r24, 0x01	; 1
    370e:	89 83       	std	Y+1, r24	; 0x01
    3710:	23 c0       	rjmp	.+70     	; 0x3758 <DIO_u8ReadPin+0xe0>
			break;
		case PORT_C:
			u8PinVal=GET_BIT(PINC,u8PinCpy);
    3712:	e3 e3       	ldi	r30, 0x33	; 51
    3714:	f0 e0       	ldi	r31, 0x00	; 0
    3716:	80 81       	ld	r24, Z
    3718:	28 2f       	mov	r18, r24
    371a:	30 e0       	ldi	r19, 0x00	; 0
    371c:	8b 81       	ldd	r24, Y+3	; 0x03
    371e:	88 2f       	mov	r24, r24
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	a9 01       	movw	r20, r18
    3724:	02 c0       	rjmp	.+4      	; 0x372a <DIO_u8ReadPin+0xb2>
    3726:	55 95       	asr	r21
    3728:	47 95       	ror	r20
    372a:	8a 95       	dec	r24
    372c:	e2 f7       	brpl	.-8      	; 0x3726 <DIO_u8ReadPin+0xae>
    372e:	ca 01       	movw	r24, r20
    3730:	81 70       	andi	r24, 0x01	; 1
    3732:	89 83       	std	Y+1, r24	; 0x01
    3734:	11 c0       	rjmp	.+34     	; 0x3758 <DIO_u8ReadPin+0xe0>
			break;
		case PORT_D:
			u8PinVal=GET_BIT(PIND,u8PinCpy);
    3736:	e0 e3       	ldi	r30, 0x30	; 48
    3738:	f0 e0       	ldi	r31, 0x00	; 0
    373a:	80 81       	ld	r24, Z
    373c:	28 2f       	mov	r18, r24
    373e:	30 e0       	ldi	r19, 0x00	; 0
    3740:	8b 81       	ldd	r24, Y+3	; 0x03
    3742:	88 2f       	mov	r24, r24
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	a9 01       	movw	r20, r18
    3748:	02 c0       	rjmp	.+4      	; 0x374e <DIO_u8ReadPin+0xd6>
    374a:	55 95       	asr	r21
    374c:	47 95       	ror	r20
    374e:	8a 95       	dec	r24
    3750:	e2 f7       	brpl	.-8      	; 0x374a <DIO_u8ReadPin+0xd2>
    3752:	ca 01       	movw	r24, r20
    3754:	81 70       	andi	r24, 0x01	; 1
    3756:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return u8PinVal;
    3758:	89 81       	ldd	r24, Y+1	; 0x01
}
    375a:	0f 90       	pop	r0
    375c:	0f 90       	pop	r0
    375e:	0f 90       	pop	r0
    3760:	0f 90       	pop	r0
    3762:	0f 90       	pop	r0
    3764:	cf 91       	pop	r28
    3766:	df 91       	pop	r29
    3768:	08 95       	ret

0000376a <DIO_voidTogglePin>:

void DIO_voidTogglePin(uint8 u8PortCpy, uint8 u8PinCpy)
{
    376a:	df 93       	push	r29
    376c:	cf 93       	push	r28
    376e:	00 d0       	rcall	.+0      	; 0x3770 <DIO_voidTogglePin+0x6>
    3770:	00 d0       	rcall	.+0      	; 0x3772 <DIO_voidTogglePin+0x8>
    3772:	cd b7       	in	r28, 0x3d	; 61
    3774:	de b7       	in	r29, 0x3e	; 62
    3776:	89 83       	std	Y+1, r24	; 0x01
    3778:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortCpy)
    377a:	89 81       	ldd	r24, Y+1	; 0x01
    377c:	28 2f       	mov	r18, r24
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	3c 83       	std	Y+4, r19	; 0x04
    3782:	2b 83       	std	Y+3, r18	; 0x03
    3784:	8b 81       	ldd	r24, Y+3	; 0x03
    3786:	9c 81       	ldd	r25, Y+4	; 0x04
    3788:	82 30       	cpi	r24, 0x02	; 2
    378a:	91 05       	cpc	r25, r1
    378c:	51 f1       	breq	.+84     	; 0x37e2 <DIO_voidTogglePin+0x78>
    378e:	2b 81       	ldd	r18, Y+3	; 0x03
    3790:	3c 81       	ldd	r19, Y+4	; 0x04
    3792:	23 30       	cpi	r18, 0x03	; 3
    3794:	31 05       	cpc	r19, r1
    3796:	34 f4       	brge	.+12     	; 0x37a4 <DIO_voidTogglePin+0x3a>
    3798:	8b 81       	ldd	r24, Y+3	; 0x03
    379a:	9c 81       	ldd	r25, Y+4	; 0x04
    379c:	81 30       	cpi	r24, 0x01	; 1
    379e:	91 05       	cpc	r25, r1
    37a0:	61 f0       	breq	.+24     	; 0x37ba <DIO_voidTogglePin+0x50>
    37a2:	5a c0       	rjmp	.+180    	; 0x3858 <DIO_voidTogglePin+0xee>
    37a4:	2b 81       	ldd	r18, Y+3	; 0x03
    37a6:	3c 81       	ldd	r19, Y+4	; 0x04
    37a8:	23 30       	cpi	r18, 0x03	; 3
    37aa:	31 05       	cpc	r19, r1
    37ac:	71 f1       	breq	.+92     	; 0x380a <DIO_voidTogglePin+0xa0>
    37ae:	8b 81       	ldd	r24, Y+3	; 0x03
    37b0:	9c 81       	ldd	r25, Y+4	; 0x04
    37b2:	84 30       	cpi	r24, 0x04	; 4
    37b4:	91 05       	cpc	r25, r1
    37b6:	e9 f1       	breq	.+122    	; 0x3832 <DIO_voidTogglePin+0xc8>
    37b8:	4f c0       	rjmp	.+158    	; 0x3858 <DIO_voidTogglePin+0xee>
	{
		case PORT_A:
			TOG_BIT(PORTA,u8PinCpy);
    37ba:	ab e3       	ldi	r26, 0x3B	; 59
    37bc:	b0 e0       	ldi	r27, 0x00	; 0
    37be:	eb e3       	ldi	r30, 0x3B	; 59
    37c0:	f0 e0       	ldi	r31, 0x00	; 0
    37c2:	80 81       	ld	r24, Z
    37c4:	48 2f       	mov	r20, r24
    37c6:	8a 81       	ldd	r24, Y+2	; 0x02
    37c8:	28 2f       	mov	r18, r24
    37ca:	30 e0       	ldi	r19, 0x00	; 0
    37cc:	81 e0       	ldi	r24, 0x01	; 1
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	02 2e       	mov	r0, r18
    37d2:	02 c0       	rjmp	.+4      	; 0x37d8 <DIO_voidTogglePin+0x6e>
    37d4:	88 0f       	add	r24, r24
    37d6:	99 1f       	adc	r25, r25
    37d8:	0a 94       	dec	r0
    37da:	e2 f7       	brpl	.-8      	; 0x37d4 <DIO_voidTogglePin+0x6a>
    37dc:	84 27       	eor	r24, r20
    37de:	8c 93       	st	X, r24
    37e0:	3b c0       	rjmp	.+118    	; 0x3858 <DIO_voidTogglePin+0xee>
			break;
		case PORT_B:
			TOG_BIT(PORTB,u8PinCpy);
    37e2:	a8 e3       	ldi	r26, 0x38	; 56
    37e4:	b0 e0       	ldi	r27, 0x00	; 0
    37e6:	e8 e3       	ldi	r30, 0x38	; 56
    37e8:	f0 e0       	ldi	r31, 0x00	; 0
    37ea:	80 81       	ld	r24, Z
    37ec:	48 2f       	mov	r20, r24
    37ee:	8a 81       	ldd	r24, Y+2	; 0x02
    37f0:	28 2f       	mov	r18, r24
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	81 e0       	ldi	r24, 0x01	; 1
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	02 2e       	mov	r0, r18
    37fa:	02 c0       	rjmp	.+4      	; 0x3800 <DIO_voidTogglePin+0x96>
    37fc:	88 0f       	add	r24, r24
    37fe:	99 1f       	adc	r25, r25
    3800:	0a 94       	dec	r0
    3802:	e2 f7       	brpl	.-8      	; 0x37fc <DIO_voidTogglePin+0x92>
    3804:	84 27       	eor	r24, r20
    3806:	8c 93       	st	X, r24
    3808:	27 c0       	rjmp	.+78     	; 0x3858 <DIO_voidTogglePin+0xee>
			break;
		case PORT_C:
			TOG_BIT(PORTC,u8PinCpy);
    380a:	a5 e3       	ldi	r26, 0x35	; 53
    380c:	b0 e0       	ldi	r27, 0x00	; 0
    380e:	e5 e3       	ldi	r30, 0x35	; 53
    3810:	f0 e0       	ldi	r31, 0x00	; 0
    3812:	80 81       	ld	r24, Z
    3814:	48 2f       	mov	r20, r24
    3816:	8a 81       	ldd	r24, Y+2	; 0x02
    3818:	28 2f       	mov	r18, r24
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	81 e0       	ldi	r24, 0x01	; 1
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	02 2e       	mov	r0, r18
    3822:	02 c0       	rjmp	.+4      	; 0x3828 <DIO_voidTogglePin+0xbe>
    3824:	88 0f       	add	r24, r24
    3826:	99 1f       	adc	r25, r25
    3828:	0a 94       	dec	r0
    382a:	e2 f7       	brpl	.-8      	; 0x3824 <DIO_voidTogglePin+0xba>
    382c:	84 27       	eor	r24, r20
    382e:	8c 93       	st	X, r24
    3830:	13 c0       	rjmp	.+38     	; 0x3858 <DIO_voidTogglePin+0xee>
			break;
		case PORT_D:
			TOG_BIT(PORTD,u8PinCpy);
    3832:	a2 e3       	ldi	r26, 0x32	; 50
    3834:	b0 e0       	ldi	r27, 0x00	; 0
    3836:	e2 e3       	ldi	r30, 0x32	; 50
    3838:	f0 e0       	ldi	r31, 0x00	; 0
    383a:	80 81       	ld	r24, Z
    383c:	48 2f       	mov	r20, r24
    383e:	8a 81       	ldd	r24, Y+2	; 0x02
    3840:	28 2f       	mov	r18, r24
    3842:	30 e0       	ldi	r19, 0x00	; 0
    3844:	81 e0       	ldi	r24, 0x01	; 1
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	02 2e       	mov	r0, r18
    384a:	02 c0       	rjmp	.+4      	; 0x3850 <DIO_voidTogglePin+0xe6>
    384c:	88 0f       	add	r24, r24
    384e:	99 1f       	adc	r25, r25
    3850:	0a 94       	dec	r0
    3852:	e2 f7       	brpl	.-8      	; 0x384c <DIO_voidTogglePin+0xe2>
    3854:	84 27       	eor	r24, r20
    3856:	8c 93       	st	X, r24
			break;
	}

}
    3858:	0f 90       	pop	r0
    385a:	0f 90       	pop	r0
    385c:	0f 90       	pop	r0
    385e:	0f 90       	pop	r0
    3860:	cf 91       	pop	r28
    3862:	df 91       	pop	r29
    3864:	08 95       	ret

00003866 <DIO_voidWritePort>:
/* DIO_voidWritePort(PORT_A, 0x20) -> ob0010 0000-----> this means bit 0 will be 0 and bit5 will be 1 */
void DIO_voidWritePort(uint8 u8PortCpy, uint8 u8ValueCpy)
{
    3866:	df 93       	push	r29
    3868:	cf 93       	push	r28
    386a:	00 d0       	rcall	.+0      	; 0x386c <DIO_voidWritePort+0x6>
    386c:	00 d0       	rcall	.+0      	; 0x386e <DIO_voidWritePort+0x8>
    386e:	cd b7       	in	r28, 0x3d	; 61
    3870:	de b7       	in	r29, 0x3e	; 62
    3872:	89 83       	std	Y+1, r24	; 0x01
    3874:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortCpy){
    3876:	89 81       	ldd	r24, Y+1	; 0x01
    3878:	28 2f       	mov	r18, r24
    387a:	30 e0       	ldi	r19, 0x00	; 0
    387c:	3c 83       	std	Y+4, r19	; 0x04
    387e:	2b 83       	std	Y+3, r18	; 0x03
    3880:	8b 81       	ldd	r24, Y+3	; 0x03
    3882:	9c 81       	ldd	r25, Y+4	; 0x04
    3884:	82 30       	cpi	r24, 0x02	; 2
    3886:	91 05       	cpc	r25, r1
    3888:	d9 f0       	breq	.+54     	; 0x38c0 <DIO_voidWritePort+0x5a>
    388a:	2b 81       	ldd	r18, Y+3	; 0x03
    388c:	3c 81       	ldd	r19, Y+4	; 0x04
    388e:	23 30       	cpi	r18, 0x03	; 3
    3890:	31 05       	cpc	r19, r1
    3892:	34 f4       	brge	.+12     	; 0x38a0 <DIO_voidWritePort+0x3a>
    3894:	8b 81       	ldd	r24, Y+3	; 0x03
    3896:	9c 81       	ldd	r25, Y+4	; 0x04
    3898:	81 30       	cpi	r24, 0x01	; 1
    389a:	91 05       	cpc	r25, r1
    389c:	61 f0       	breq	.+24     	; 0x38b6 <DIO_voidWritePort+0x50>
    389e:	1e c0       	rjmp	.+60     	; 0x38dc <DIO_voidWritePort+0x76>
    38a0:	2b 81       	ldd	r18, Y+3	; 0x03
    38a2:	3c 81       	ldd	r19, Y+4	; 0x04
    38a4:	23 30       	cpi	r18, 0x03	; 3
    38a6:	31 05       	cpc	r19, r1
    38a8:	81 f0       	breq	.+32     	; 0x38ca <DIO_voidWritePort+0x64>
    38aa:	8b 81       	ldd	r24, Y+3	; 0x03
    38ac:	9c 81       	ldd	r25, Y+4	; 0x04
    38ae:	84 30       	cpi	r24, 0x04	; 4
    38b0:	91 05       	cpc	r25, r1
    38b2:	81 f0       	breq	.+32     	; 0x38d4 <DIO_voidWritePort+0x6e>
    38b4:	13 c0       	rjmp	.+38     	; 0x38dc <DIO_voidWritePort+0x76>
	case PORT_A:
		PORTA = u8ValueCpy;
    38b6:	eb e3       	ldi	r30, 0x3B	; 59
    38b8:	f0 e0       	ldi	r31, 0x00	; 0
    38ba:	8a 81       	ldd	r24, Y+2	; 0x02
    38bc:	80 83       	st	Z, r24
    38be:	0e c0       	rjmp	.+28     	; 0x38dc <DIO_voidWritePort+0x76>
		break;
	case PORT_B:
		PORTB = u8ValueCpy;
    38c0:	e8 e3       	ldi	r30, 0x38	; 56
    38c2:	f0 e0       	ldi	r31, 0x00	; 0
    38c4:	8a 81       	ldd	r24, Y+2	; 0x02
    38c6:	80 83       	st	Z, r24
    38c8:	09 c0       	rjmp	.+18     	; 0x38dc <DIO_voidWritePort+0x76>
		break;
	case PORT_C:
		PORTC = u8ValueCpy;
    38ca:	e5 e3       	ldi	r30, 0x35	; 53
    38cc:	f0 e0       	ldi	r31, 0x00	; 0
    38ce:	8a 81       	ldd	r24, Y+2	; 0x02
    38d0:	80 83       	st	Z, r24
    38d2:	04 c0       	rjmp	.+8      	; 0x38dc <DIO_voidWritePort+0x76>
		break;
	case PORT_D:
		PORTD = u8ValueCpy;
    38d4:	e2 e3       	ldi	r30, 0x32	; 50
    38d6:	f0 e0       	ldi	r31, 0x00	; 0
    38d8:	8a 81       	ldd	r24, Y+2	; 0x02
    38da:	80 83       	st	Z, r24
		break;

	}
}
    38dc:	0f 90       	pop	r0
    38de:	0f 90       	pop	r0
    38e0:	0f 90       	pop	r0
    38e2:	0f 90       	pop	r0
    38e4:	cf 91       	pop	r28
    38e6:	df 91       	pop	r29
    38e8:	08 95       	ret

000038ea <DIO_voidPullUpState>:
void DIO_voidPullUpState(uint8 u8PortCpy , uint8 u8PinCpy,uint8 u8State)
{
    38ea:	df 93       	push	r29
    38ec:	cf 93       	push	r28
    38ee:	00 d0       	rcall	.+0      	; 0x38f0 <DIO_voidPullUpState+0x6>
    38f0:	00 d0       	rcall	.+0      	; 0x38f2 <DIO_voidPullUpState+0x8>
    38f2:	00 d0       	rcall	.+0      	; 0x38f4 <DIO_voidPullUpState+0xa>
    38f4:	cd b7       	in	r28, 0x3d	; 61
    38f6:	de b7       	in	r29, 0x3e	; 62
    38f8:	8a 83       	std	Y+2, r24	; 0x02
    38fa:	6b 83       	std	Y+3, r22	; 0x03
    38fc:	4c 83       	std	Y+4, r20	; 0x04
	uint8 u8Direction ;
	switch(u8PortCpy)
    38fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3900:	28 2f       	mov	r18, r24
    3902:	30 e0       	ldi	r19, 0x00	; 0
    3904:	3e 83       	std	Y+6, r19	; 0x06
    3906:	2d 83       	std	Y+5, r18	; 0x05
    3908:	4d 81       	ldd	r20, Y+5	; 0x05
    390a:	5e 81       	ldd	r21, Y+6	; 0x06
    390c:	42 30       	cpi	r20, 0x02	; 2
    390e:	51 05       	cpc	r21, r1
    3910:	41 f1       	breq	.+80     	; 0x3962 <DIO_voidPullUpState+0x78>
    3912:	8d 81       	ldd	r24, Y+5	; 0x05
    3914:	9e 81       	ldd	r25, Y+6	; 0x06
    3916:	83 30       	cpi	r24, 0x03	; 3
    3918:	91 05       	cpc	r25, r1
    391a:	34 f4       	brge	.+12     	; 0x3928 <DIO_voidPullUpState+0x3e>
    391c:	2d 81       	ldd	r18, Y+5	; 0x05
    391e:	3e 81       	ldd	r19, Y+6	; 0x06
    3920:	21 30       	cpi	r18, 0x01	; 1
    3922:	31 05       	cpc	r19, r1
    3924:	61 f0       	breq	.+24     	; 0x393e <DIO_voidPullUpState+0x54>
    3926:	52 c0       	rjmp	.+164    	; 0x39cc <DIO_voidPullUpState+0xe2>
    3928:	4d 81       	ldd	r20, Y+5	; 0x05
    392a:	5e 81       	ldd	r21, Y+6	; 0x06
    392c:	43 30       	cpi	r20, 0x03	; 3
    392e:	51 05       	cpc	r21, r1
    3930:	51 f1       	breq	.+84     	; 0x3986 <DIO_voidPullUpState+0x9c>
    3932:	8d 81       	ldd	r24, Y+5	; 0x05
    3934:	9e 81       	ldd	r25, Y+6	; 0x06
    3936:	84 30       	cpi	r24, 0x04	; 4
    3938:	91 05       	cpc	r25, r1
    393a:	b9 f1       	breq	.+110    	; 0x39aa <DIO_voidPullUpState+0xc0>
    393c:	47 c0       	rjmp	.+142    	; 0x39cc <DIO_voidPullUpState+0xe2>
	{
	case PORT_A :
		u8Direction=GET_BIT(DDRA,u8PinCpy);
    393e:	ea e3       	ldi	r30, 0x3A	; 58
    3940:	f0 e0       	ldi	r31, 0x00	; 0
    3942:	80 81       	ld	r24, Z
    3944:	28 2f       	mov	r18, r24
    3946:	30 e0       	ldi	r19, 0x00	; 0
    3948:	8b 81       	ldd	r24, Y+3	; 0x03
    394a:	88 2f       	mov	r24, r24
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	a9 01       	movw	r20, r18
    3950:	02 c0       	rjmp	.+4      	; 0x3956 <DIO_voidPullUpState+0x6c>
    3952:	55 95       	asr	r21
    3954:	47 95       	ror	r20
    3956:	8a 95       	dec	r24
    3958:	e2 f7       	brpl	.-8      	; 0x3952 <DIO_voidPullUpState+0x68>
    395a:	ca 01       	movw	r24, r20
    395c:	81 70       	andi	r24, 0x01	; 1
    395e:	89 83       	std	Y+1, r24	; 0x01
    3960:	35 c0       	rjmp	.+106    	; 0x39cc <DIO_voidPullUpState+0xe2>
		break;
	case PORT_B :
		u8Direction=GET_BIT(DDRB,u8PinCpy);
    3962:	e7 e3       	ldi	r30, 0x37	; 55
    3964:	f0 e0       	ldi	r31, 0x00	; 0
    3966:	80 81       	ld	r24, Z
    3968:	28 2f       	mov	r18, r24
    396a:	30 e0       	ldi	r19, 0x00	; 0
    396c:	8b 81       	ldd	r24, Y+3	; 0x03
    396e:	88 2f       	mov	r24, r24
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	a9 01       	movw	r20, r18
    3974:	02 c0       	rjmp	.+4      	; 0x397a <DIO_voidPullUpState+0x90>
    3976:	55 95       	asr	r21
    3978:	47 95       	ror	r20
    397a:	8a 95       	dec	r24
    397c:	e2 f7       	brpl	.-8      	; 0x3976 <DIO_voidPullUpState+0x8c>
    397e:	ca 01       	movw	r24, r20
    3980:	81 70       	andi	r24, 0x01	; 1
    3982:	89 83       	std	Y+1, r24	; 0x01
    3984:	23 c0       	rjmp	.+70     	; 0x39cc <DIO_voidPullUpState+0xe2>
		break;

	case PORT_C :
		u8Direction=GET_BIT(DDRC,u8PinCpy);
    3986:	e4 e3       	ldi	r30, 0x34	; 52
    3988:	f0 e0       	ldi	r31, 0x00	; 0
    398a:	80 81       	ld	r24, Z
    398c:	28 2f       	mov	r18, r24
    398e:	30 e0       	ldi	r19, 0x00	; 0
    3990:	8b 81       	ldd	r24, Y+3	; 0x03
    3992:	88 2f       	mov	r24, r24
    3994:	90 e0       	ldi	r25, 0x00	; 0
    3996:	a9 01       	movw	r20, r18
    3998:	02 c0       	rjmp	.+4      	; 0x399e <DIO_voidPullUpState+0xb4>
    399a:	55 95       	asr	r21
    399c:	47 95       	ror	r20
    399e:	8a 95       	dec	r24
    39a0:	e2 f7       	brpl	.-8      	; 0x399a <DIO_voidPullUpState+0xb0>
    39a2:	ca 01       	movw	r24, r20
    39a4:	81 70       	andi	r24, 0x01	; 1
    39a6:	89 83       	std	Y+1, r24	; 0x01
    39a8:	11 c0       	rjmp	.+34     	; 0x39cc <DIO_voidPullUpState+0xe2>
		break;

	case PORT_D :
		u8Direction=GET_BIT(DDRD,u8PinCpy);
    39aa:	e1 e3       	ldi	r30, 0x31	; 49
    39ac:	f0 e0       	ldi	r31, 0x00	; 0
    39ae:	80 81       	ld	r24, Z
    39b0:	28 2f       	mov	r18, r24
    39b2:	30 e0       	ldi	r19, 0x00	; 0
    39b4:	8b 81       	ldd	r24, Y+3	; 0x03
    39b6:	88 2f       	mov	r24, r24
    39b8:	90 e0       	ldi	r25, 0x00	; 0
    39ba:	a9 01       	movw	r20, r18
    39bc:	02 c0       	rjmp	.+4      	; 0x39c2 <DIO_voidPullUpState+0xd8>
    39be:	55 95       	asr	r21
    39c0:	47 95       	ror	r20
    39c2:	8a 95       	dec	r24
    39c4:	e2 f7       	brpl	.-8      	; 0x39be <DIO_voidPullUpState+0xd4>
    39c6:	ca 01       	movw	r24, r20
    39c8:	81 70       	andi	r24, 0x01	; 1
    39ca:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	if (u8Direction==DIO_INPUT)			//if zero, write zero in pin
    39cc:	89 81       	ldd	r24, Y+1	; 0x01
    39ce:	88 23       	and	r24, r24
    39d0:	29 f4       	brne	.+10     	; 0x39dc <DIO_voidPullUpState+0xf2>
	{
		DIO_voidWritePin(u8PortCpy,u8PinCpy,u8State);
    39d2:	8a 81       	ldd	r24, Y+2	; 0x02
    39d4:	6b 81       	ldd	r22, Y+3	; 0x03
    39d6:	4c 81       	ldd	r20, Y+4	; 0x04
    39d8:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>
	}
	else
	{
		//do nothing
	}
}
    39dc:	26 96       	adiw	r28, 0x06	; 6
    39de:	0f b6       	in	r0, 0x3f	; 63
    39e0:	f8 94       	cli
    39e2:	de bf       	out	0x3e, r29	; 62
    39e4:	0f be       	out	0x3f, r0	; 63
    39e6:	cd bf       	out	0x3d, r28	; 61
    39e8:	cf 91       	pop	r28
    39ea:	df 91       	pop	r29
    39ec:	08 95       	ret

000039ee <SevSeg_voidDisplay>:
/*0x3F = ob01111111  -> represents number 0 on seven-segment*/

uint8 Seven_SegmentPattern_2[10]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};

void SevSeg_voidDisplay(uint8 u8NumberCpy)
{	if(u8NumberCpy<10){
    39ee:	df 93       	push	r29
    39f0:	cf 93       	push	r28
    39f2:	0f 92       	push	r0
    39f4:	cd b7       	in	r28, 0x3d	; 61
    39f6:	de b7       	in	r29, 0x3e	; 62
    39f8:	89 83       	std	Y+1, r24	; 0x01
    39fa:	89 81       	ldd	r24, Y+1	; 0x01
    39fc:	8a 30       	cpi	r24, 0x0A	; 10
    39fe:	60 f4       	brcc	.+24     	; 0x3a18 <SevSeg_voidDisplay+0x2a>
		#if COMMON_TYPE == COMMON_CATHODE
			DIO_voidWritePort(SEVEN_PORT_NAME_1,Seven_SegmentPattern_1[u8NumberCpy]);
    3a00:	89 81       	ldd	r24, Y+1	; 0x01
    3a02:	88 2f       	mov	r24, r24
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	fc 01       	movw	r30, r24
    3a08:	e8 58       	subi	r30, 0x88	; 136
    3a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0c:	90 81       	ld	r25, Z
    3a0e:	81 e0       	ldi	r24, 0x01	; 1
    3a10:	69 2f       	mov	r22, r25
    3a12:	0e 94 33 1c 	call	0x3866	; 0x3866 <DIO_voidWritePort>
    3a16:	25 c0       	rjmp	.+74     	; 0x3a62 <SevSeg_voidDisplay+0x74>
			DIO_voidWritePort(SEVEN_PORT_NAME_1,~Seven_SegmentPattern_1[u8NumberCpy]);

		#endif
	}

	else if	(u8NumberCpy>=10 && u8NumberCpy<99){
    3a18:	89 81       	ldd	r24, Y+1	; 0x01
    3a1a:	8a 30       	cpi	r24, 0x0A	; 10
    3a1c:	10 f1       	brcs	.+68     	; 0x3a62 <SevSeg_voidDisplay+0x74>
    3a1e:	89 81       	ldd	r24, Y+1	; 0x01
    3a20:	83 36       	cpi	r24, 0x63	; 99
    3a22:	f8 f4       	brcc	.+62     	; 0x3a62 <SevSeg_voidDisplay+0x74>
		#if COMMON_TYPE == COMMON_CATHODE
			DIO_voidWritePort(SEVEN_PORT_NAME_1,Seven_SegmentPattern_1[u8NumberCpy%10]);
    3a24:	89 81       	ldd	r24, Y+1	; 0x01
    3a26:	9a e0       	ldi	r25, 0x0A	; 10
    3a28:	69 2f       	mov	r22, r25
    3a2a:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <__udivmodqi4>
    3a2e:	89 2f       	mov	r24, r25
    3a30:	88 2f       	mov	r24, r24
    3a32:	90 e0       	ldi	r25, 0x00	; 0
    3a34:	fc 01       	movw	r30, r24
    3a36:	e8 58       	subi	r30, 0x88	; 136
    3a38:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3a:	90 81       	ld	r25, Z
    3a3c:	81 e0       	ldi	r24, 0x01	; 1
    3a3e:	69 2f       	mov	r22, r25
    3a40:	0e 94 33 1c 	call	0x3866	; 0x3866 <DIO_voidWritePort>
			DIO_voidWritePort(SEVEN_PORT_NAME_2,Seven_SegmentPattern_2[u8NumberCpy/10]);
    3a44:	89 81       	ldd	r24, Y+1	; 0x01
    3a46:	9a e0       	ldi	r25, 0x0A	; 10
    3a48:	69 2f       	mov	r22, r25
    3a4a:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <__udivmodqi4>
    3a4e:	88 2f       	mov	r24, r24
    3a50:	90 e0       	ldi	r25, 0x00	; 0
    3a52:	fc 01       	movw	r30, r24
    3a54:	ee 57       	subi	r30, 0x7E	; 126
    3a56:	ff 4f       	sbci	r31, 0xFF	; 255
    3a58:	90 81       	ld	r25, Z
    3a5a:	82 e0       	ldi	r24, 0x02	; 2
    3a5c:	69 2f       	mov	r22, r25
    3a5e:	0e 94 33 1c 	call	0x3866	; 0x3866 <DIO_voidWritePort>

	}



}
    3a62:	0f 90       	pop	r0
    3a64:	cf 91       	pop	r28
    3a66:	df 91       	pop	r29
    3a68:	08 95       	ret

00003a6a <main>:
#include "util/delay.h"
#include "DIO/DIO_interface.h"
#include "SPI_Protocol/SPI_interface.h"
#include "7SEG/seven_segment_interface.h"

int main(void){
    3a6a:	df 93       	push	r29
    3a6c:	cf 93       	push	r28
    3a6e:	cd b7       	in	r28, 0x3d	; 61
    3a70:	de b7       	in	r29, 0x3e	; 62
    3a72:	6e 97       	sbiw	r28, 0x1e	; 30
    3a74:	0f b6       	in	r0, 0x3f	; 63
    3a76:	f8 94       	cli
    3a78:	de bf       	out	0x3e, r29	; 62
    3a7a:	0f be       	out	0x3f, r0	; 63
    3a7c:	cd bf       	out	0x3d, r28	; 61
	DIO_voidInit();
    3a7e:	0e 94 32 1a 	call	0x3464	; 0x3464 <DIO_voidInit>
	SPI_voidSlaveInit();
    3a82:	0e 94 8e 06 	call	0xd1c	; 0xd1c <SPI_voidSlaveInit>
	DIO_voidWritePin(PORT_B, DIO_PIN_NUM_B0, DIO_LOW);
    3a86:	82 e0       	ldi	r24, 0x02	; 2
    3a88:	60 e0       	ldi	r22, 0x00	; 0
    3a8a:	40 e0       	ldi	r20, 0x00	; 0
    3a8c:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>
	uint8 u8ErrorCounts=0;
    3a90:	1e 8e       	std	Y+30, r1	; 0x1e
	while(1){
		//-------------Arduino stuff----------------
		// start counting no. of trials on the 7SEG
		//if no. of trials exceeded 3
		//turn the siren ON (buzzer)
		uint8 u8WrongPass = SPI_u8TransceiverDataSynch(0);
    3a92:	80 e0       	ldi	r24, 0x00	; 0
    3a94:	0e 94 b8 06 	call	0xd70	; 0xd70 <SPI_u8TransceiverDataSynch>
    3a98:	8d 8f       	std	Y+29, r24	; 0x1d

		if(u8WrongPass == 5){
    3a9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a9c:	85 30       	cpi	r24, 0x05	; 5
    3a9e:	09 f0       	breq	.+2      	; 0x3aa2 <main+0x38>
    3aa0:	7c c0       	rjmp	.+248    	; 0x3b9a <main+0x130>
			if(u8ErrorCounts<2){
    3aa2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3aa4:	82 30       	cpi	r24, 0x02	; 2
    3aa6:	a8 f7       	brcc	.-22     	; 0x3a92 <main+0x28>
				u8ErrorCounts++;
    3aa8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3aaa:	8f 5f       	subi	r24, 0xFF	; 255
    3aac:	8e 8f       	std	Y+30, r24	; 0x1e
				SevSeg_voidDisplay(u8ErrorCounts);
    3aae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3ab0:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <SevSeg_voidDisplay>
    3ab4:	80 e0       	ldi	r24, 0x00	; 0
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	a0 ea       	ldi	r26, 0xA0	; 160
    3aba:	b1 e4       	ldi	r27, 0x41	; 65
    3abc:	89 8f       	std	Y+25, r24	; 0x19
    3abe:	9a 8f       	std	Y+26, r25	; 0x1a
    3ac0:	ab 8f       	std	Y+27, r26	; 0x1b
    3ac2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ac4:	69 8d       	ldd	r22, Y+25	; 0x19
    3ac6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ac8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3aca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3acc:	20 e0       	ldi	r18, 0x00	; 0
    3ace:	30 e0       	ldi	r19, 0x00	; 0
    3ad0:	4a ef       	ldi	r20, 0xFA	; 250
    3ad2:	54 e4       	ldi	r21, 0x44	; 68
    3ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ad8:	dc 01       	movw	r26, r24
    3ada:	cb 01       	movw	r24, r22
    3adc:	8d 8b       	std	Y+21, r24	; 0x15
    3ade:	9e 8b       	std	Y+22, r25	; 0x16
    3ae0:	af 8b       	std	Y+23, r26	; 0x17
    3ae2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ae4:	6d 89       	ldd	r22, Y+21	; 0x15
    3ae6:	7e 89       	ldd	r23, Y+22	; 0x16
    3ae8:	8f 89       	ldd	r24, Y+23	; 0x17
    3aea:	98 8d       	ldd	r25, Y+24	; 0x18
    3aec:	20 e0       	ldi	r18, 0x00	; 0
    3aee:	30 e0       	ldi	r19, 0x00	; 0
    3af0:	40 e8       	ldi	r20, 0x80	; 128
    3af2:	5f e3       	ldi	r21, 0x3F	; 63
    3af4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3af8:	88 23       	and	r24, r24
    3afa:	2c f4       	brge	.+10     	; 0x3b06 <main+0x9c>
		__ticks = 1;
    3afc:	81 e0       	ldi	r24, 0x01	; 1
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	9c 8b       	std	Y+20, r25	; 0x14
    3b02:	8b 8b       	std	Y+19, r24	; 0x13
    3b04:	3f c0       	rjmp	.+126    	; 0x3b84 <main+0x11a>
	else if (__tmp > 65535)
    3b06:	6d 89       	ldd	r22, Y+21	; 0x15
    3b08:	7e 89       	ldd	r23, Y+22	; 0x16
    3b0a:	8f 89       	ldd	r24, Y+23	; 0x17
    3b0c:	98 8d       	ldd	r25, Y+24	; 0x18
    3b0e:	20 e0       	ldi	r18, 0x00	; 0
    3b10:	3f ef       	ldi	r19, 0xFF	; 255
    3b12:	4f e7       	ldi	r20, 0x7F	; 127
    3b14:	57 e4       	ldi	r21, 0x47	; 71
    3b16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b1a:	18 16       	cp	r1, r24
    3b1c:	4c f5       	brge	.+82     	; 0x3b70 <main+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b1e:	69 8d       	ldd	r22, Y+25	; 0x19
    3b20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b26:	20 e0       	ldi	r18, 0x00	; 0
    3b28:	30 e0       	ldi	r19, 0x00	; 0
    3b2a:	40 e2       	ldi	r20, 0x20	; 32
    3b2c:	51 e4       	ldi	r21, 0x41	; 65
    3b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b32:	dc 01       	movw	r26, r24
    3b34:	cb 01       	movw	r24, r22
    3b36:	bc 01       	movw	r22, r24
    3b38:	cd 01       	movw	r24, r26
    3b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b3e:	dc 01       	movw	r26, r24
    3b40:	cb 01       	movw	r24, r22
    3b42:	9c 8b       	std	Y+20, r25	; 0x14
    3b44:	8b 8b       	std	Y+19, r24	; 0x13
    3b46:	0f c0       	rjmp	.+30     	; 0x3b66 <main+0xfc>
    3b48:	88 ec       	ldi	r24, 0xC8	; 200
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	9a 8b       	std	Y+18, r25	; 0x12
    3b4e:	89 8b       	std	Y+17, r24	; 0x11
    3b50:	89 89       	ldd	r24, Y+17	; 0x11
    3b52:	9a 89       	ldd	r25, Y+18	; 0x12
    3b54:	01 97       	sbiw	r24, 0x01	; 1
    3b56:	f1 f7       	brne	.-4      	; 0x3b54 <main+0xea>
    3b58:	9a 8b       	std	Y+18, r25	; 0x12
    3b5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b5c:	8b 89       	ldd	r24, Y+19	; 0x13
    3b5e:	9c 89       	ldd	r25, Y+20	; 0x14
    3b60:	01 97       	sbiw	r24, 0x01	; 1
    3b62:	9c 8b       	std	Y+20, r25	; 0x14
    3b64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b66:	8b 89       	ldd	r24, Y+19	; 0x13
    3b68:	9c 89       	ldd	r25, Y+20	; 0x14
    3b6a:	00 97       	sbiw	r24, 0x00	; 0
    3b6c:	69 f7       	brne	.-38     	; 0x3b48 <main+0xde>
    3b6e:	91 cf       	rjmp	.-222    	; 0x3a92 <main+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b70:	6d 89       	ldd	r22, Y+21	; 0x15
    3b72:	7e 89       	ldd	r23, Y+22	; 0x16
    3b74:	8f 89       	ldd	r24, Y+23	; 0x17
    3b76:	98 8d       	ldd	r25, Y+24	; 0x18
    3b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	cb 01       	movw	r24, r22
    3b80:	9c 8b       	std	Y+20, r25	; 0x14
    3b82:	8b 8b       	std	Y+19, r24	; 0x13
    3b84:	8b 89       	ldd	r24, Y+19	; 0x13
    3b86:	9c 89       	ldd	r25, Y+20	; 0x14
    3b88:	98 8b       	std	Y+16, r25	; 0x10
    3b8a:	8f 87       	std	Y+15, r24	; 0x0f
    3b8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b8e:	98 89       	ldd	r25, Y+16	; 0x10
    3b90:	01 97       	sbiw	r24, 0x01	; 1
    3b92:	f1 f7       	brne	.-4      	; 0x3b90 <main+0x126>
    3b94:	98 8b       	std	Y+16, r25	; 0x10
    3b96:	8f 87       	std	Y+15, r24	; 0x0f
    3b98:	7c cf       	rjmp	.-264    	; 0x3a92 <main+0x28>
			}
			else{
				//do nth
			}
		}
		else if(u8WrongPass == 3){
    3b9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b9c:	83 30       	cpi	r24, 0x03	; 3
    3b9e:	09 f0       	breq	.+2      	; 0x3ba2 <main+0x138>
    3ba0:	78 c0       	rjmp	.+240    	; 0x3c92 <main+0x228>
			DIO_voidWritePin(PORT_B, DIO_PIN_NUM_B0, DIO_HIGH);		//buzzer ON
    3ba2:	82 e0       	ldi	r24, 0x02	; 2
    3ba4:	60 e0       	ldi	r22, 0x00	; 0
    3ba6:	41 e0       	ldi	r20, 0x01	; 1
    3ba8:	0e 94 49 1a 	call	0x3492	; 0x3492 <DIO_voidWritePin>
    3bac:	80 e0       	ldi	r24, 0x00	; 0
    3bae:	90 e4       	ldi	r25, 0x40	; 64
    3bb0:	ac e9       	ldi	r26, 0x9C	; 156
    3bb2:	b5 e4       	ldi	r27, 0x45	; 69
    3bb4:	8b 87       	std	Y+11, r24	; 0x0b
    3bb6:	9c 87       	std	Y+12, r25	; 0x0c
    3bb8:	ad 87       	std	Y+13, r26	; 0x0d
    3bba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bc4:	20 e0       	ldi	r18, 0x00	; 0
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
    3bc8:	4a ef       	ldi	r20, 0xFA	; 250
    3bca:	54 e4       	ldi	r21, 0x44	; 68
    3bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd0:	dc 01       	movw	r26, r24
    3bd2:	cb 01       	movw	r24, r22
    3bd4:	8f 83       	std	Y+7, r24	; 0x07
    3bd6:	98 87       	std	Y+8, r25	; 0x08
    3bd8:	a9 87       	std	Y+9, r26	; 0x09
    3bda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bdc:	6f 81       	ldd	r22, Y+7	; 0x07
    3bde:	78 85       	ldd	r23, Y+8	; 0x08
    3be0:	89 85       	ldd	r24, Y+9	; 0x09
    3be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3be4:	20 e0       	ldi	r18, 0x00	; 0
    3be6:	30 e0       	ldi	r19, 0x00	; 0
    3be8:	40 e8       	ldi	r20, 0x80	; 128
    3bea:	5f e3       	ldi	r21, 0x3F	; 63
    3bec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bf0:	88 23       	and	r24, r24
    3bf2:	2c f4       	brge	.+10     	; 0x3bfe <main+0x194>
		__ticks = 1;
    3bf4:	81 e0       	ldi	r24, 0x01	; 1
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	9e 83       	std	Y+6, r25	; 0x06
    3bfa:	8d 83       	std	Y+5, r24	; 0x05
    3bfc:	3f c0       	rjmp	.+126    	; 0x3c7c <main+0x212>
	else if (__tmp > 65535)
    3bfe:	6f 81       	ldd	r22, Y+7	; 0x07
    3c00:	78 85       	ldd	r23, Y+8	; 0x08
    3c02:	89 85       	ldd	r24, Y+9	; 0x09
    3c04:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c06:	20 e0       	ldi	r18, 0x00	; 0
    3c08:	3f ef       	ldi	r19, 0xFF	; 255
    3c0a:	4f e7       	ldi	r20, 0x7F	; 127
    3c0c:	57 e4       	ldi	r21, 0x47	; 71
    3c0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c12:	18 16       	cp	r1, r24
    3c14:	4c f5       	brge	.+82     	; 0x3c68 <main+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c16:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c18:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c1e:	20 e0       	ldi	r18, 0x00	; 0
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	40 e2       	ldi	r20, 0x20	; 32
    3c24:	51 e4       	ldi	r21, 0x41	; 65
    3c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c2a:	dc 01       	movw	r26, r24
    3c2c:	cb 01       	movw	r24, r22
    3c2e:	bc 01       	movw	r22, r24
    3c30:	cd 01       	movw	r24, r26
    3c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c36:	dc 01       	movw	r26, r24
    3c38:	cb 01       	movw	r24, r22
    3c3a:	9e 83       	std	Y+6, r25	; 0x06
    3c3c:	8d 83       	std	Y+5, r24	; 0x05
    3c3e:	0f c0       	rjmp	.+30     	; 0x3c5e <main+0x1f4>
    3c40:	88 ec       	ldi	r24, 0xC8	; 200
    3c42:	90 e0       	ldi	r25, 0x00	; 0
    3c44:	9c 83       	std	Y+4, r25	; 0x04
    3c46:	8b 83       	std	Y+3, r24	; 0x03
    3c48:	8b 81       	ldd	r24, Y+3	; 0x03
    3c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c4c:	01 97       	sbiw	r24, 0x01	; 1
    3c4e:	f1 f7       	brne	.-4      	; 0x3c4c <main+0x1e2>
    3c50:	9c 83       	std	Y+4, r25	; 0x04
    3c52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c54:	8d 81       	ldd	r24, Y+5	; 0x05
    3c56:	9e 81       	ldd	r25, Y+6	; 0x06
    3c58:	01 97       	sbiw	r24, 0x01	; 1
    3c5a:	9e 83       	std	Y+6, r25	; 0x06
    3c5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c60:	9e 81       	ldd	r25, Y+6	; 0x06
    3c62:	00 97       	sbiw	r24, 0x00	; 0
    3c64:	69 f7       	brne	.-38     	; 0x3c40 <main+0x1d6>
    3c66:	15 cf       	rjmp	.-470    	; 0x3a92 <main+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c68:	6f 81       	ldd	r22, Y+7	; 0x07
    3c6a:	78 85       	ldd	r23, Y+8	; 0x08
    3c6c:	89 85       	ldd	r24, Y+9	; 0x09
    3c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c74:	dc 01       	movw	r26, r24
    3c76:	cb 01       	movw	r24, r22
    3c78:	9e 83       	std	Y+6, r25	; 0x06
    3c7a:	8d 83       	std	Y+5, r24	; 0x05
    3c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c80:	9a 83       	std	Y+2, r25	; 0x02
    3c82:	89 83       	std	Y+1, r24	; 0x01
    3c84:	89 81       	ldd	r24, Y+1	; 0x01
    3c86:	9a 81       	ldd	r25, Y+2	; 0x02
    3c88:	01 97       	sbiw	r24, 0x01	; 1
    3c8a:	f1 f7       	brne	.-4      	; 0x3c88 <main+0x21e>
    3c8c:	9a 83       	std	Y+2, r25	; 0x02
    3c8e:	89 83       	std	Y+1, r24	; 0x01
    3c90:	00 cf       	rjmp	.-512    	; 0x3a92 <main+0x28>
			_delay_ms(5000);
//			DIO_voidWritePin(PORT_B, DIO_PIN_NUM_B0, DIO_LOW);
		}
		else {
			u8ErrorCounts=0;
    3c92:	1e 8e       	std	Y+30, r1	; 0x1e
			SevSeg_voidDisplay(u8ErrorCounts);
    3c94:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c96:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <SevSeg_voidDisplay>
    3c9a:	fb ce       	rjmp	.-522    	; 0x3a92 <main+0x28>

00003c9c <__udivmodqi4>:
    3c9c:	99 1b       	sub	r25, r25
    3c9e:	79 e0       	ldi	r23, 0x09	; 9
    3ca0:	04 c0       	rjmp	.+8      	; 0x3caa <__udivmodqi4_ep>

00003ca2 <__udivmodqi4_loop>:
    3ca2:	99 1f       	adc	r25, r25
    3ca4:	96 17       	cp	r25, r22
    3ca6:	08 f0       	brcs	.+2      	; 0x3caa <__udivmodqi4_ep>
    3ca8:	96 1b       	sub	r25, r22

00003caa <__udivmodqi4_ep>:
    3caa:	88 1f       	adc	r24, r24
    3cac:	7a 95       	dec	r23
    3cae:	c9 f7       	brne	.-14     	; 0x3ca2 <__udivmodqi4_loop>
    3cb0:	80 95       	com	r24
    3cb2:	08 95       	ret

00003cb4 <__prologue_saves__>:
    3cb4:	2f 92       	push	r2
    3cb6:	3f 92       	push	r3
    3cb8:	4f 92       	push	r4
    3cba:	5f 92       	push	r5
    3cbc:	6f 92       	push	r6
    3cbe:	7f 92       	push	r7
    3cc0:	8f 92       	push	r8
    3cc2:	9f 92       	push	r9
    3cc4:	af 92       	push	r10
    3cc6:	bf 92       	push	r11
    3cc8:	cf 92       	push	r12
    3cca:	df 92       	push	r13
    3ccc:	ef 92       	push	r14
    3cce:	ff 92       	push	r15
    3cd0:	0f 93       	push	r16
    3cd2:	1f 93       	push	r17
    3cd4:	cf 93       	push	r28
    3cd6:	df 93       	push	r29
    3cd8:	cd b7       	in	r28, 0x3d	; 61
    3cda:	de b7       	in	r29, 0x3e	; 62
    3cdc:	ca 1b       	sub	r28, r26
    3cde:	db 0b       	sbc	r29, r27
    3ce0:	0f b6       	in	r0, 0x3f	; 63
    3ce2:	f8 94       	cli
    3ce4:	de bf       	out	0x3e, r29	; 62
    3ce6:	0f be       	out	0x3f, r0	; 63
    3ce8:	cd bf       	out	0x3d, r28	; 61
    3cea:	09 94       	ijmp

00003cec <__epilogue_restores__>:
    3cec:	2a 88       	ldd	r2, Y+18	; 0x12
    3cee:	39 88       	ldd	r3, Y+17	; 0x11
    3cf0:	48 88       	ldd	r4, Y+16	; 0x10
    3cf2:	5f 84       	ldd	r5, Y+15	; 0x0f
    3cf4:	6e 84       	ldd	r6, Y+14	; 0x0e
    3cf6:	7d 84       	ldd	r7, Y+13	; 0x0d
    3cf8:	8c 84       	ldd	r8, Y+12	; 0x0c
    3cfa:	9b 84       	ldd	r9, Y+11	; 0x0b
    3cfc:	aa 84       	ldd	r10, Y+10	; 0x0a
    3cfe:	b9 84       	ldd	r11, Y+9	; 0x09
    3d00:	c8 84       	ldd	r12, Y+8	; 0x08
    3d02:	df 80       	ldd	r13, Y+7	; 0x07
    3d04:	ee 80       	ldd	r14, Y+6	; 0x06
    3d06:	fd 80       	ldd	r15, Y+5	; 0x05
    3d08:	0c 81       	ldd	r16, Y+4	; 0x04
    3d0a:	1b 81       	ldd	r17, Y+3	; 0x03
    3d0c:	aa 81       	ldd	r26, Y+2	; 0x02
    3d0e:	b9 81       	ldd	r27, Y+1	; 0x01
    3d10:	ce 0f       	add	r28, r30
    3d12:	d1 1d       	adc	r29, r1
    3d14:	0f b6       	in	r0, 0x3f	; 63
    3d16:	f8 94       	cli
    3d18:	de bf       	out	0x3e, r29	; 62
    3d1a:	0f be       	out	0x3f, r0	; 63
    3d1c:	cd bf       	out	0x3d, r28	; 61
    3d1e:	ed 01       	movw	r28, r26
    3d20:	08 95       	ret

00003d22 <_exit>:
    3d22:	f8 94       	cli

00003d24 <__stop_program>:
    3d24:	ff cf       	rjmp	.-2      	; 0x3d24 <__stop_program>
