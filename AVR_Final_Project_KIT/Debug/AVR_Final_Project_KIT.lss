
AVR_Final_Project_KIT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005892  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  00800060  00005892  00005926  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003d  008000e0  008000e0  000059a6  2**0
                  ALLOC
  3 .stab         00006240  00000000  00000000  000059a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e5b  00000000  00000000  0000bbe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000da43  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000db83  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000dcf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000f93c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00010827  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000115d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00011734  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000119c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001218f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f1 1b 	jmp	0x37e2	; 0x37e2 <__vector_1>
       8:	0c 94 1e 1c 	jmp	0x383c	; 0x383c <__vector_2>
       c:	0c 94 4b 1c 	jmp	0x3896	; 0x3896 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 88 09 	jmp	0x1310	; 0x1310 <__vector_6>
      1c:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__vector_7>
      20:	0c 94 5b 09 	jmp	0x12b6	; 0x12b6 <__vector_8>
      24:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__vector_9>
      28:	0c 94 db 0a 	jmp	0x15b6	; 0x15b6 <__vector_10>
      2c:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 b8 06 	jmp	0xd70	; 0xd70 <__vector_13>
      38:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__vector_14>
      3c:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <__vector_15>
      40:	0c 94 3c 23 	jmp	0x4678	; 0x4678 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e9       	ldi	r30, 0x92	; 146
      68:	f8 e5       	ldi	r31, 0x58	; 88
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3e       	cpi	r26, 0xE0	; 224
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 ee       	ldi	r26, 0xE0	; 224
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 31       	cpi	r26, 0x1D	; 29
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 69 23 	call	0x46d2	; 0x46d2 <main>
      8a:	0c 94 47 2c 	jmp	0x588e	; 0x588e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 ec       	ldi	r26, 0xC7	; 199
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2c 2c 	jmp	0x5858	; 0x5858 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1c 2c 	jmp	0x5838	; 0x5838 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 38 2c 	jmp	0x5870	; 0x5870 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1c 2c 	jmp	0x5838	; 0x5838 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 38 2c 	jmp	0x5870	; 0x5870 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 ec       	ldi	r24, 0xC7	; 199
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2c 2c 	jmp	0x5858	; 0x5858 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1c 2c 	jmp	0x5838	; 0x5838 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 38 2c 	jmp	0x5870	; 0x5870 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1c 2c 	jmp	0x5838	; 0x5838 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 38 2c 	jmp	0x5870	; 0x5870 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1c 2c 	jmp	0x5838	; 0x5838 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 38 2c 	jmp	0x5870	; 0x5870 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 20 2c 	jmp	0x5840	; 0x5840 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 3c 2c 	jmp	0x5878	; 0x5878 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_voidInit>:
#include "util/delay.h"

volatile uint8 u8Global_Data;
volatile uint8 u8Global_Receive;

void UART_voidInit(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	uint8 u8Local_temp = 0;
     b50:	19 82       	std	Y+1, r1	; 0x01

	/* enable RXCIE, RX Complete Interrupt Enable */
	SET_BIT(UCSRB, UCSRB_RXCIE);
     b52:	aa e2       	ldi	r26, 0x2A	; 42
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	ea e2       	ldi	r30, 0x2A	; 42
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	80 68       	ori	r24, 0x80	; 128
     b5e:	8c 93       	st	X, r24
	/* Enable UDRIE, Data Register Empty Interrupt Enable */
	SET_BIT(UCSRB, UCSRB_UDRIE);
     b60:	aa e2       	ldi	r26, 0x2A	; 42
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	ea e2       	ldi	r30, 0x2A	; 42
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	80 62       	ori	r24, 0x20	; 32
     b6c:	8c 93       	st	X, r24

	/* Select 8-bit data (character size) */
	CLR_BIT(UCSRB, UCSRB_UCSZ2);
     b6e:	aa e2       	ldi	r26, 0x2A	; 42
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	ea e2       	ldi	r30, 0x2A	; 42
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 81       	ld	r24, Z
     b78:	8b 7f       	andi	r24, 0xFB	; 251
     b7a:	8c 93       	st	X, r24

	/*************** Select UCSRC register ********************/
	SET_BIT(u8Local_temp, UCSRC_URSEL);
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	80 68       	ori	r24, 0x80	; 128
     b80:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(u8Local_temp, UCSRC_UCSZ0);
     b82:	89 81       	ldd	r24, Y+1	; 0x01
     b84:	82 60       	ori	r24, 0x02	; 2
     b86:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(u8Local_temp, UCSRC_UCSZ1);
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	84 60       	ori	r24, 0x04	; 4
     b8c:	89 83       	std	Y+1, r24	; 0x01

	/* Select UART mode */
	CLR_BIT(u8Local_temp, UCSRC_UMSEL);     //Asynchronous Operation
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	8f 7b       	andi	r24, 0xBF	; 191
     b92:	89 83       	std	Y+1, r24	; 0x01
	/* Select parity mode */				//disable parity bits
	CLR_BIT(u8Local_temp, UCSRC_UPM0);
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	8f 7e       	andi	r24, 0xEF	; 239
     b98:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(u8Local_temp, UCSRC_UPM1);
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	8f 7d       	andi	r24, 0xDF	; 223
     b9e:	89 83       	std	Y+1, r24	; 0x01
	/* Select stop bit */
	CLR_BIT(u8Local_temp, UCSRC_USBS);      //1 stop bit
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	87 7f       	andi	r24, 0xF7	; 247
     ba4:	89 83       	std	Y+1, r24	; 0x01
	/**********************************************************/

	/* Select BaudRate = 9600 */
	UBRRL = BAUD_RATE;
     ba6:	e9 e2       	ldi	r30, 0x29	; 41
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	83 e3       	ldi	r24, 0x33	; 51
     bac:	80 83       	st	Z, r24

	/* Enable RXEN */
	SET_BIT(UCSRB, UCSRB_RXEN);
     bae:	aa e2       	ldi	r26, 0x2A	; 42
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	ea e2       	ldi	r30, 0x2A	; 42
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	80 61       	ori	r24, 0x10	; 16
     bba:	8c 93       	st	X, r24
	/* Enable TXEN */
	SET_BIT(UCSRB, UCSRB_TXEN);
     bbc:	aa e2       	ldi	r26, 0x2A	; 42
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	ea e2       	ldi	r30, 0x2A	; 42
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	88 60       	ori	r24, 0x08	; 8
     bc8:	8c 93       	st	X, r24

	/**********************************************************/
	UCSRC = u8Local_temp;
     bca:	e0 e4       	ldi	r30, 0x40	; 64
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	80 83       	st	Z, r24
}
     bd2:	0f 90       	pop	r0
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	08 95       	ret

00000bda <UART_voidSendDataAsynch>:

void UART_voidSendDataAsynch(const uint8 u8DataCpy){
     bda:	df 93       	push	r29
     bdc:	cf 93       	push	r28
     bde:	0f 92       	push	r0
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	89 83       	std	Y+1, r24	; 0x01
	u8Global_Data = u8DataCpy;
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	80 93 ef 00 	sts	0x00EF, r24
	//UDR = u8DataCpy
}
     bec:	0f 90       	pop	r0
     bee:	cf 91       	pop	r28
     bf0:	df 91       	pop	r29
     bf2:	08 95       	ret

00000bf4 <UART_voidSendDataSynch>:
void UART_voidSendDataSynch(const uint8 u8DataCpy){
     bf4:	df 93       	push	r29
     bf6:	cf 93       	push	r28
     bf8:	0f 92       	push	r0
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	89 83       	std	Y+1, r24	; 0x01
	while ((UCSRA & 0x20) == 0x00);
     c00:	eb e2       	ldi	r30, 0x2B	; 43
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	88 2f       	mov	r24, r24
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	80 72       	andi	r24, 0x20	; 32
     c0c:	90 70       	andi	r25, 0x00	; 0
     c0e:	00 97       	sbiw	r24, 0x00	; 0
     c10:	b9 f3       	breq	.-18     	; 0xc00 <UART_voidSendDataSynch+0xc>
	UDR = u8DataCpy;
     c12:	ec e2       	ldi	r30, 0x2C	; 44
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	89 81       	ldd	r24, Y+1	; 0x01
     c18:	80 83       	st	Z, r24
}
     c1a:	0f 90       	pop	r0
     c1c:	cf 91       	pop	r28
     c1e:	df 91       	pop	r29
     c20:	08 95       	ret

00000c22 <UART_u8ReceiveData>:

uint8 UART_u8ReceiveData(void){
     c22:	df 93       	push	r29
     c24:	cf 93       	push	r28
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62

//	uint8 Result;
	// Wait until Reception Complete
	while((UCSRA & 0x80) == 0x00);
     c2a:	eb e2       	ldi	r30, 0x2B	; 43
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	88 23       	and	r24, r24
     c32:	dc f7       	brge	.-10     	; 0xc2a <UART_u8ReceiveData+0x8>
//	Result = UDR;
	return UDR;
     c34:	ec e2       	ldi	r30, 0x2C	; 44
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z


}
     c3a:	cf 91       	pop	r28
     c3c:	df 91       	pop	r29
     c3e:	08 95       	ret

00000c40 <UART_voidSendstring>:
void UART_voidSendstring(uint8 *ptr)
{
     c40:	df 93       	push	r29
     c42:	cf 93       	push	r28
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
     c48:	60 97       	sbiw	r28, 0x10	; 16
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	cd bf       	out	0x3d, r28	; 61
     c54:	98 8b       	std	Y+16, r25	; 0x10
     c56:	8f 87       	std	Y+15, r24	; 0x0f
     c58:	7c c0       	rjmp	.+248    	; 0xd52 <UART_voidSendstring+0x112>
	while(*ptr!=0)
	{
		UART_voidSendDataSynch(*ptr);
     c5a:	ef 85       	ldd	r30, Y+15	; 0x0f
     c5c:	f8 89       	ldd	r31, Y+16	; 0x10
     c5e:	80 81       	ld	r24, Z
     c60:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <UART_voidSendDataSynch>
		ptr++;
     c64:	8f 85       	ldd	r24, Y+15	; 0x0f
     c66:	98 89       	ldd	r25, Y+16	; 0x10
     c68:	01 96       	adiw	r24, 0x01	; 1
     c6a:	98 8b       	std	Y+16, r25	; 0x10
     c6c:	8f 87       	std	Y+15, r24	; 0x0f
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	a8 ec       	ldi	r26, 0xC8	; 200
     c74:	b2 e4       	ldi	r27, 0x42	; 66
     c76:	8b 87       	std	Y+11, r24	; 0x0b
     c78:	9c 87       	std	Y+12, r25	; 0x0c
     c7a:	ad 87       	std	Y+13, r26	; 0x0d
     c7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c7e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c80:	7c 85       	ldd	r23, Y+12	; 0x0c
     c82:	8d 85       	ldd	r24, Y+13	; 0x0d
     c84:	9e 85       	ldd	r25, Y+14	; 0x0e
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	4a ef       	ldi	r20, 0xFA	; 250
     c8c:	54 e4       	ldi	r21, 0x44	; 68
     c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c92:	dc 01       	movw	r26, r24
     c94:	cb 01       	movw	r24, r22
     c96:	8f 83       	std	Y+7, r24	; 0x07
     c98:	98 87       	std	Y+8, r25	; 0x08
     c9a:	a9 87       	std	Y+9, r26	; 0x09
     c9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c9e:	6f 81       	ldd	r22, Y+7	; 0x07
     ca0:	78 85       	ldd	r23, Y+8	; 0x08
     ca2:	89 85       	ldd	r24, Y+9	; 0x09
     ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	40 e8       	ldi	r20, 0x80	; 128
     cac:	5f e3       	ldi	r21, 0x3F	; 63
     cae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cb2:	88 23       	and	r24, r24
     cb4:	2c f4       	brge	.+10     	; 0xcc0 <UART_voidSendstring+0x80>
		__ticks = 1;
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	9e 83       	std	Y+6, r25	; 0x06
     cbc:	8d 83       	std	Y+5, r24	; 0x05
     cbe:	3f c0       	rjmp	.+126    	; 0xd3e <UART_voidSendstring+0xfe>
	else if (__tmp > 65535)
     cc0:	6f 81       	ldd	r22, Y+7	; 0x07
     cc2:	78 85       	ldd	r23, Y+8	; 0x08
     cc4:	89 85       	ldd	r24, Y+9	; 0x09
     cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	3f ef       	ldi	r19, 0xFF	; 255
     ccc:	4f e7       	ldi	r20, 0x7F	; 127
     cce:	57 e4       	ldi	r21, 0x47	; 71
     cd0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cd4:	18 16       	cp	r1, r24
     cd6:	4c f5       	brge	.+82     	; 0xd2a <UART_voidSendstring+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cd8:	6b 85       	ldd	r22, Y+11	; 0x0b
     cda:	7c 85       	ldd	r23, Y+12	; 0x0c
     cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
     cde:	9e 85       	ldd	r25, Y+14	; 0x0e
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	40 e2       	ldi	r20, 0x20	; 32
     ce6:	51 e4       	ldi	r21, 0x41	; 65
     ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cec:	dc 01       	movw	r26, r24
     cee:	cb 01       	movw	r24, r22
     cf0:	bc 01       	movw	r22, r24
     cf2:	cd 01       	movw	r24, r26
     cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cf8:	dc 01       	movw	r26, r24
     cfa:	cb 01       	movw	r24, r22
     cfc:	9e 83       	std	Y+6, r25	; 0x06
     cfe:	8d 83       	std	Y+5, r24	; 0x05
     d00:	0f c0       	rjmp	.+30     	; 0xd20 <UART_voidSendstring+0xe0>
     d02:	88 ec       	ldi	r24, 0xC8	; 200
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	9c 83       	std	Y+4, r25	; 0x04
     d08:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	9c 81       	ldd	r25, Y+4	; 0x04
     d0e:	01 97       	sbiw	r24, 0x01	; 1
     d10:	f1 f7       	brne	.-4      	; 0xd0e <UART_voidSendstring+0xce>
     d12:	9c 83       	std	Y+4, r25	; 0x04
     d14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d16:	8d 81       	ldd	r24, Y+5	; 0x05
     d18:	9e 81       	ldd	r25, Y+6	; 0x06
     d1a:	01 97       	sbiw	r24, 0x01	; 1
     d1c:	9e 83       	std	Y+6, r25	; 0x06
     d1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d20:	8d 81       	ldd	r24, Y+5	; 0x05
     d22:	9e 81       	ldd	r25, Y+6	; 0x06
     d24:	00 97       	sbiw	r24, 0x00	; 0
     d26:	69 f7       	brne	.-38     	; 0xd02 <UART_voidSendstring+0xc2>
     d28:	14 c0       	rjmp	.+40     	; 0xd52 <UART_voidSendstring+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d2a:	6f 81       	ldd	r22, Y+7	; 0x07
     d2c:	78 85       	ldd	r23, Y+8	; 0x08
     d2e:	89 85       	ldd	r24, Y+9	; 0x09
     d30:	9a 85       	ldd	r25, Y+10	; 0x0a
     d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d36:	dc 01       	movw	r26, r24
     d38:	cb 01       	movw	r24, r22
     d3a:	9e 83       	std	Y+6, r25	; 0x06
     d3c:	8d 83       	std	Y+5, r24	; 0x05
     d3e:	8d 81       	ldd	r24, Y+5	; 0x05
     d40:	9e 81       	ldd	r25, Y+6	; 0x06
     d42:	9a 83       	std	Y+2, r25	; 0x02
     d44:	89 83       	std	Y+1, r24	; 0x01
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	9a 81       	ldd	r25, Y+2	; 0x02
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	f1 f7       	brne	.-4      	; 0xd4a <UART_voidSendstring+0x10a>
     d4e:	9a 83       	std	Y+2, r25	; 0x02
     d50:	89 83       	std	Y+1, r24	; 0x01


}
void UART_voidSendstring(uint8 *ptr)
{
	while(*ptr!=0)
     d52:	ef 85       	ldd	r30, Y+15	; 0x0f
     d54:	f8 89       	ldd	r31, Y+16	; 0x10
     d56:	80 81       	ld	r24, Z
     d58:	88 23       	and	r24, r24
     d5a:	09 f0       	breq	.+2      	; 0xd5e <UART_voidSendstring+0x11e>
     d5c:	7e cf       	rjmp	.-260    	; 0xc5a <UART_voidSendstring+0x1a>
	{
		UART_voidSendDataSynch(*ptr);
		ptr++;
		_delay_ms(100);
	}
}
     d5e:	60 96       	adiw	r28, 0x10	; 16
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <__vector_13>:

// __attribute__ -> communicate with LINKER, to not to optimize it
//  USART, RXC, Rx Complete
void __vector_13 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_13 (void)
{
     d70:	1f 92       	push	r1
     d72:	0f 92       	push	r0
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	0f 92       	push	r0
     d78:	11 24       	eor	r1, r1
     d7a:	8f 93       	push	r24
     d7c:	ef 93       	push	r30
     d7e:	ff 93       	push	r31
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
	UDR = u8Global_Data;
     d88:	ec e2       	ldi	r30, 0x2C	; 44
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 91 ef 00 	lds	r24, 0x00EF
     d90:	80 83       	st	Z, r24
}
     d92:	cf 91       	pop	r28
     d94:	df 91       	pop	r29
     d96:	ff 91       	pop	r31
     d98:	ef 91       	pop	r30
     d9a:	8f 91       	pop	r24
     d9c:	0f 90       	pop	r0
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	0f 90       	pop	r0
     da2:	1f 90       	pop	r1
     da4:	18 95       	reti

00000da6 <__vector_15>:

//USART, TXC, Tx Complete
void __vector_15 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_15 (void)
{
     da6:	1f 92       	push	r1
     da8:	0f 92       	push	r0
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	0f 92       	push	r0
     dae:	11 24       	eor	r1, r1
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62

}
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	0f 90       	pop	r0
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	0f 90       	pop	r0
     dc2:	1f 90       	pop	r1
     dc4:	18 95       	reti

00000dc6 <__vector_14>:

//USART, UDRE, Data Register Empty
void __vector_14 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_14 (void)
{
     dc6:	1f 92       	push	r1
     dc8:	0f 92       	push	r0
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	0f 92       	push	r0
     dce:	11 24       	eor	r1, r1
     dd0:	2f 93       	push	r18
     dd2:	3f 93       	push	r19
     dd4:	4f 93       	push	r20
     dd6:	5f 93       	push	r21
     dd8:	6f 93       	push	r22
     dda:	7f 93       	push	r23
     ddc:	8f 93       	push	r24
     dde:	9f 93       	push	r25
     de0:	af 93       	push	r26
     de2:	bf 93       	push	r27
     de4:	ef 93       	push	r30
     de6:	ff 93       	push	r31
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
	UART_voidSendDataAsynch(u8Global_Data);
     df0:	80 91 ef 00 	lds	r24, 0x00EF
     df4:	0e 94 ed 05 	call	0xbda	; 0xbda <UART_voidSendDataAsynch>
}
     df8:	cf 91       	pop	r28
     dfa:	df 91       	pop	r29
     dfc:	ff 91       	pop	r31
     dfe:	ef 91       	pop	r30
     e00:	bf 91       	pop	r27
     e02:	af 91       	pop	r26
     e04:	9f 91       	pop	r25
     e06:	8f 91       	pop	r24
     e08:	7f 91       	pop	r23
     e0a:	6f 91       	pop	r22
     e0c:	5f 91       	pop	r21
     e0e:	4f 91       	pop	r20
     e10:	3f 91       	pop	r19
     e12:	2f 91       	pop	r18
     e14:	0f 90       	pop	r0
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	0f 90       	pop	r0
     e1a:	1f 90       	pop	r1
     e1c:	18 95       	reti

00000e1e <TIM1_voidInit>:
pf  TIM1_pfCmpBCallBack;
pf  TIM1_pfIcuCallBack;


void TIM1_voidInit(void)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TCCR1A , 0);
	SET_BIT(TCCR1A , 1);
	SET_BIT(TCCR1B , 3);
	CLR_BIT(TCCR1B , 4);
#elif TIM1_MODE ==  TIM1_F_PWM_TO_ICR1
    CLR_BIT(TCCR1A , 0);
     e26:	af e4       	ldi	r26, 0x4F	; 79
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	ef e4       	ldi	r30, 0x4F	; 79
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	8e 7f       	andi	r24, 0xFE	; 254
     e32:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 1);
     e34:	af e4       	ldi	r26, 0x4F	; 79
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	ef e4       	ldi	r30, 0x4F	; 79
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	82 60       	ori	r24, 0x02	; 2
     e40:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , 3);
     e42:	ae e4       	ldi	r26, 0x4E	; 78
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	ee e4       	ldi	r30, 0x4E	; 78
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	88 60       	ori	r24, 0x08	; 8
     e4e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , 4);
     e50:	ae e4       	ldi	r26, 0x4E	; 78
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	ee e4       	ldi	r30, 0x4E	; 78
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	80 61       	ori	r24, 0x10	; 16
     e5c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 7);
#elif TIM1_OUTFORM_comA == TIM1_SET_OC1A
    SET_BIT(TCCR1A , 6);
	SET_BIT(TCCR1A , 7);
#elif TIM1_OUTFORM_comA == TIM1_F_NON_INVERT_OC1A
    CLR_BIT(TCCR1A , 6);
     e5e:	af e4       	ldi	r26, 0x4F	; 79
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	ef e4       	ldi	r30, 0x4F	; 79
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	8f 7b       	andi	r24, 0xBF	; 191
     e6a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 7);
     e6c:	af e4       	ldi	r26, 0x4F	; 79
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	ef e4       	ldi	r30, 0x4F	; 79
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	80 68       	ori	r24, 0x80	; 128
     e78:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 5);
#elif TIM1_OUTFORM_comB == TIM1_SET_OC1B
    SET_BIT(TCCR1A , 4);
	SET_BIT(TCCR1A , 5);
#elif TIM1_OUTFORM_comB == TIM1_F_NON_INVERT_OC1B
    CLR_BIT(TCCR1A , 4);
     e7a:	af e4       	ldi	r26, 0x4F	; 79
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	ef e4       	ldi	r30, 0x4F	; 79
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	8f 7e       	andi	r24, 0xEF	; 239
     e86:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 5);
     e88:	af e4       	ldi	r26, 0x4F	; 79
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	ef e4       	ldi	r30, 0x4F	; 79
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	80 62       	ori	r24, 0x20	; 32
     e94:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , 4);
	CLR_BIT(TCCR1A , 5);

#endif
  /*Disable timer*/
  TCCR1B &= 0b11111000;
     e96:	ae e4       	ldi	r26, 0x4E	; 78
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	ee e4       	ldi	r30, 0x4E	; 78
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	88 7f       	andi	r24, 0xF8	; 248
     ea2:	8c 93       	st	X, r24
  /*Disable Int OVF-CMPA,B ICU*/
  CLR_BIT(TIMSK , 2 );
     ea4:	a9 e5       	ldi	r26, 0x59	; 89
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e9 e5       	ldi	r30, 0x59	; 89
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	8b 7f       	andi	r24, 0xFB	; 251
     eb0:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 3);
     eb2:	a9 e5       	ldi	r26, 0x59	; 89
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e9 e5       	ldi	r30, 0x59	; 89
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	87 7f       	andi	r24, 0xF7	; 247
     ebe:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 4 );
     ec0:	a9 e5       	ldi	r26, 0x59	; 89
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e9 e5       	ldi	r30, 0x59	; 89
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	8f 7e       	andi	r24, 0xEF	; 239
     ecc:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 5);
     ece:	a9 e5       	ldi	r26, 0x59	; 89
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	e9 e5       	ldi	r30, 0x59	; 89
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	8f 7d       	andi	r24, 0xDF	; 223
     eda:	8c 93       	st	X, r24
  /*Clear Int OVF-CMP flags*/
  SET_BIT(TIFR , 2 );
     edc:	a8 e5       	ldi	r26, 0x58	; 88
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e8 e5       	ldi	r30, 0x58	; 88
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	84 60       	ori	r24, 0x04	; 4
     ee8:	8c 93       	st	X, r24
  SET_BIT(TIFR , 3 );
     eea:	a8 e5       	ldi	r26, 0x58	; 88
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e8 e5       	ldi	r30, 0x58	; 88
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	88 60       	ori	r24, 0x08	; 8
     ef6:	8c 93       	st	X, r24
  SET_BIT(TIFR , 4 );
     ef8:	a8 e5       	ldi	r26, 0x58	; 88
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e8 e5       	ldi	r30, 0x58	; 88
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	80 61       	ori	r24, 0x10	; 16
     f04:	8c 93       	st	X, r24
  SET_BIT(TIFR , 5 );
     f06:	a8 e5       	ldi	r26, 0x58	; 88
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e8 e5       	ldi	r30, 0x58	; 88
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	80 62       	ori	r24, 0x20	; 32
     f12:	8c 93       	st	X, r24

  /*Clear TCNT,OCE1A,B,ICR*/
  OCR1AL = 0 ;
     f14:	ea e4       	ldi	r30, 0x4A	; 74
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	10 82       	st	Z, r1
  OCR1AH = 0 ;
     f1a:	eb e4       	ldi	r30, 0x4B	; 75
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	10 82       	st	Z, r1
  OCR1BL = 0 ;
     f20:	e8 e4       	ldi	r30, 0x48	; 72
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	10 82       	st	Z, r1
  OCR1BH = 0 ;
     f26:	e9 e4       	ldi	r30, 0x49	; 73
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	10 82       	st	Z, r1
  TCNT1L = 0 ;
     f2c:	ec e4       	ldi	r30, 0x4C	; 76
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	10 82       	st	Z, r1
  TCNT1H = 0 ;
     f32:	ed e4       	ldi	r30, 0x4D	; 77
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	10 82       	st	Z, r1
  ICR1L  = 0 ;
     f38:	e6 e4       	ldi	r30, 0x46	; 70
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	10 82       	st	Z, r1
  ICR1H  = 0 ;
     f3e:	e7 e4       	ldi	r30, 0x47	; 71
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	10 82       	st	Z, r1

}
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <TIM1_voidEnable>:
void TIM1_voidEnable(uint8 u8PrescalValCpy)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	0f 92       	push	r0
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B &= 0b11111000;
     f56:	ae e4       	ldi	r26, 0x4E	; 78
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	ee e4       	ldi	r30, 0x4E	; 78
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	88 7f       	andi	r24, 0xF8	; 248
     f62:	8c 93       	st	X, r24
	TCCR1B |= u8PrescalValCpy & 0x07 ;// 0b00000111
     f64:	ae e4       	ldi	r26, 0x4E	; 78
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	ee e4       	ldi	r30, 0x4E	; 78
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	98 2f       	mov	r25, r24
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	87 70       	andi	r24, 0x07	; 7
     f74:	89 2b       	or	r24, r25
     f76:	8c 93       	st	X, r24

}
     f78:	0f 90       	pop	r0
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <TIM1_voidDisable>:
void TIM1_voidDisable(void)
{
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000;
     f88:	ae e4       	ldi	r26, 0x4E	; 78
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	ee e4       	ldi	r30, 0x4E	; 78
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	88 7f       	andi	r24, 0xF8	; 248
     f94:	8c 93       	st	X, r24

}
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	08 95       	ret

00000f9c <TIM1_voidEnableOvfInt>:
void TIM1_voidEnableOvfInt(void)
{
     f9c:	df 93       	push	r29
     f9e:	cf 93       	push	r28
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 2 );
     fa4:	a9 e5       	ldi	r26, 0x59	; 89
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e9 e5       	ldi	r30, 0x59	; 89
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	84 60       	ori	r24, 0x04	; 4
     fb0:	8c 93       	st	X, r24

}
     fb2:	cf 91       	pop	r28
     fb4:	df 91       	pop	r29
     fb6:	08 95       	ret

00000fb8 <TIM1_voidDisableOvfInt>:
void TIM1_voidDisableOvfInt(void)
{
     fb8:	df 93       	push	r29
     fba:	cf 93       	push	r28
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 2 );
     fc0:	a9 e5       	ldi	r26, 0x59	; 89
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e9 e5       	ldi	r30, 0x59	; 89
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	8b 7f       	andi	r24, 0xFB	; 251
     fcc:	8c 93       	st	X, r24

}
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	08 95       	ret

00000fd4 <TIM1_voidEnableCmpAInt>:
void TIM1_voidEnableCmpAInt(void)
{
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 4 );
     fdc:	a9 e5       	ldi	r26, 0x59	; 89
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e9 e5       	ldi	r30, 0x59	; 89
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	80 61       	ori	r24, 0x10	; 16
     fe8:	8c 93       	st	X, r24

}
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	08 95       	ret

00000ff0 <TIM1_voidDisableCmpAInt>:
void TIM1_voidDisableCmpAInt(void)
{
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 4 );
     ff8:	a9 e5       	ldi	r26, 0x59	; 89
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e9 e5       	ldi	r30, 0x59	; 89
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	8f 7e       	andi	r24, 0xEF	; 239
    1004:	8c 93       	st	X, r24

}
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	08 95       	ret

0000100c <TIM1_voidEnableCmpBInt>:
void TIM1_voidEnableCmpBInt(void)
{
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 3 );
    1014:	a9 e5       	ldi	r26, 0x59	; 89
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e9 e5       	ldi	r30, 0x59	; 89
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	88 60       	ori	r24, 0x08	; 8
    1020:	8c 93       	st	X, r24

}
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <TIM1_voidDisableCmpBInt>:
void TIM1_voidDisableCmpBInt(void)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 3);
    1030:	a9 e5       	ldi	r26, 0x59	; 89
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e9 e5       	ldi	r30, 0x59	; 89
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	87 7f       	andi	r24, 0xF7	; 247
    103c:	8c 93       	st	X, r24

}
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	08 95       	ret

00001044 <TIM1_voidEnableIcuInt>:
void TIM1_voidEnableIcuInt(void)
{
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 5 );
    104c:	a9 e5       	ldi	r26, 0x59	; 89
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e9 e5       	ldi	r30, 0x59	; 89
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	80 62       	ori	r24, 0x20	; 32
    1058:	8c 93       	st	X, r24
}
    105a:	cf 91       	pop	r28
    105c:	df 91       	pop	r29
    105e:	08 95       	ret

00001060 <TIM1_voidDisableIcuInt>:
void TIM1_voidDisableIcuInt(void)
{
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 5);
    1068:	a9 e5       	ldi	r26, 0x59	; 89
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e9 e5       	ldi	r30, 0x59	; 89
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	8f 7d       	andi	r24, 0xDF	; 223
    1074:	8c 93       	st	X, r24
}
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <TIM1_voidSetCallbackOvfInt>:

void TIM1_voidSetCallbackOvfInt(pf pfOvfCalbckCpy)
{
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	00 d0       	rcall	.+0      	; 0x1082 <TIM1_voidSetCallbackOvfInt+0x6>
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	9a 83       	std	Y+2, r25	; 0x02
    1088:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfOvfCallBack = pfOvfCalbckCpy;
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	9a 81       	ldd	r25, Y+2	; 0x02
    108e:	90 93 f5 00 	sts	0x00F5, r25
    1092:	80 93 f4 00 	sts	0x00F4, r24
}
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <TIM1_voidSetCallbackCompAInt>:
void TIM1_voidSetCallbackCompAInt(pf pfCompACalbckCpy)
{
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <TIM1_voidSetCallbackCompAInt+0x6>
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	9a 83       	std	Y+2, r25	; 0x02
    10ac:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfCmpACallBack = pfCompACalbckCpy;
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	9a 81       	ldd	r25, Y+2	; 0x02
    10b2:	90 93 f7 00 	sts	0x00F7, r25
    10b6:	80 93 f6 00 	sts	0x00F6, r24
}
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <TIM1_voidSetCallbackCompBInt>:
void TIM1_voidSetCallbackCompBInt(pf pfCompBCalbckCpy)
{
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <TIM1_voidSetCallbackCompBInt+0x6>
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    10ce:	9a 83       	std	Y+2, r25	; 0x02
    10d0:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfCmpBCallBack = pfCompBCalbckCpy;
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	9a 81       	ldd	r25, Y+2	; 0x02
    10d6:	90 93 f1 00 	sts	0x00F1, r25
    10da:	80 93 f0 00 	sts	0x00F0, r24
}
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	08 95       	ret

000010e8 <TIM1_voidSetCallbackIcuInt>:
void TIM1_voidSetCallbackIcuInt(pf pfIcuCalbckCpy)
{
    10e8:	df 93       	push	r29
    10ea:	cf 93       	push	r28
    10ec:	00 d0       	rcall	.+0      	; 0x10ee <TIM1_voidSetCallbackIcuInt+0x6>
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
    10f2:	9a 83       	std	Y+2, r25	; 0x02
    10f4:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfIcuCallBack = pfIcuCalbckCpy;
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	9a 81       	ldd	r25, Y+2	; 0x02
    10fa:	90 93 f3 00 	sts	0x00F3, r25
    10fe:	80 93 f2 00 	sts	0x00F2, r24
}
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	08 95       	ret

0000110c <TIM1_voidSetTimerValue>:
void TIM1_voidSetTimerValue(uint16 u16TimValCpy) //TCNT
{
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	00 d0       	rcall	.+0      	; 0x1112 <TIM1_voidSetTimerValue+0x6>
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	9a 83       	std	Y+2, r25	; 0x02
    1118:	89 83       	std	Y+1, r24	; 0x01
	TCNT1L =(uint8) u16TimValCpy;
    111a:	ec e4       	ldi	r30, 0x4C	; 76
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	80 83       	st	Z, r24
	TCNT1H =(uint8) (u16TimValCpy>>8);
    1122:	ed e4       	ldi	r30, 0x4D	; 77
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	9a 81       	ldd	r25, Y+2	; 0x02
    112a:	89 2f       	mov	r24, r25
    112c:	99 27       	eor	r25, r25
    112e:	80 83       	st	Z, r24
	//TCNT1=u16TimValCpy
}
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	cf 91       	pop	r28
    1136:	df 91       	pop	r29
    1138:	08 95       	ret

0000113a <TIM1_voidSetCmpARegValue>:
void TIM1_voidSetCmpARegValue(uint16 u16CmpAValCpy)
{
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	00 d0       	rcall	.+0      	; 0x1140 <TIM1_voidSetCmpARegValue+0x6>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	9a 83       	std	Y+2, r25	; 0x02
    1146:	89 83       	std	Y+1, r24	; 0x01
	OCR1AL= (uint8)u16CmpAValCpy;
    1148:	ea e4       	ldi	r30, 0x4A	; 74
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	80 83       	st	Z, r24
	OCR1AH= (uint8)(u16CmpAValCpy>>8);
    1150:	eb e4       	ldi	r30, 0x4B	; 75
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	9a 81       	ldd	r25, Y+2	; 0x02
    1158:	89 2f       	mov	r24, r25
    115a:	99 27       	eor	r25, r25
    115c:	80 83       	st	Z, r24

}
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	cf 91       	pop	r28
    1164:	df 91       	pop	r29
    1166:	08 95       	ret

00001168 <TIM1_voidSetCmpBRegValue>:
void TIM1_voidSetCmpBRegValue(uint16 u16CmpBValCpy)
{
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	00 d0       	rcall	.+0      	; 0x116e <TIM1_voidSetCmpBRegValue+0x6>
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	9a 83       	std	Y+2, r25	; 0x02
    1174:	89 83       	std	Y+1, r24	; 0x01
	OCR1BL= (uint8)u16CmpBValCpy;
    1176:	e8 e4       	ldi	r30, 0x48	; 72
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	80 83       	st	Z, r24
	OCR1BH= (uint8)(u16CmpBValCpy>>8);
    117e:	e9 e4       	ldi	r30, 0x49	; 73
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	9a 81       	ldd	r25, Y+2	; 0x02
    1186:	89 2f       	mov	r24, r25
    1188:	99 27       	eor	r25, r25
    118a:	80 83       	st	Z, r24

}
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <TIM1_voidSetIcuRegValue>:
void TIM1_voidSetIcuRegValue(uint16 u16IcuValCpy)
{
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	00 d0       	rcall	.+0      	; 0x119c <TIM1_voidSetIcuRegValue+0x6>
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	9a 83       	std	Y+2, r25	; 0x02
    11a2:	89 83       	std	Y+1, r24	; 0x01
	ICR1=u16IcuValCpy;
    11a4:	e6 e4       	ldi	r30, 0x46	; 70
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	9a 81       	ldd	r25, Y+2	; 0x02
    11ac:	91 83       	std	Z+1, r25	; 0x01
    11ae:	80 83       	st	Z, r24

}
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <TIM1_u8ReadTimerValue>:
uint16 TIM1_u8ReadTimerValue(void)
{
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <TIM1_u8ReadTimerValue+0x6>
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
	uint16 u16TcntValueLoc;
	u16TcntValueLoc   = TCNT1H;
    11c4:	ed e4       	ldi	r30, 0x4D	; 77
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	88 2f       	mov	r24, r24
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	9a 83       	std	Y+2, r25	; 0x02
    11d0:	89 83       	std	Y+1, r24	; 0x01
	u16TcntValueLoc   = (u16TcntValueLoc<<8);
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	9a 81       	ldd	r25, Y+2	; 0x02
    11d6:	98 2f       	mov	r25, r24
    11d8:	88 27       	eor	r24, r24
    11da:	9a 83       	std	Y+2, r25	; 0x02
    11dc:	89 83       	std	Y+1, r24	; 0x01
	u16TcntValueLoc |= TCNT1L;
    11de:	ec e4       	ldi	r30, 0x4C	; 76
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	9a 81       	ldd	r25, Y+2	; 0x02
    11ec:	82 2b       	or	r24, r18
    11ee:	93 2b       	or	r25, r19
    11f0:	9a 83       	std	Y+2, r25	; 0x02
    11f2:	89 83       	std	Y+1, r24	; 0x01
	return u16TcntValueLoc;
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <__vector_9>:
/* ISR for overflow*/
void __vector_9(void) __attribute__ ((signal,used));
void __vector_9 (void)
{
    1202:	1f 92       	push	r1
    1204:	0f 92       	push	r0
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	0f 92       	push	r0
    120a:	11 24       	eor	r1, r1
    120c:	2f 93       	push	r18
    120e:	3f 93       	push	r19
    1210:	4f 93       	push	r20
    1212:	5f 93       	push	r21
    1214:	6f 93       	push	r22
    1216:	7f 93       	push	r23
    1218:	8f 93       	push	r24
    121a:	9f 93       	push	r25
    121c:	af 93       	push	r26
    121e:	bf 93       	push	r27
    1220:	ef 93       	push	r30
    1222:	ff 93       	push	r31
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfOvfCallBack();
    122c:	e0 91 f4 00 	lds	r30, 0x00F4
    1230:	f0 91 f5 00 	lds	r31, 0x00F5
    1234:	09 95       	icall

}
    1236:	cf 91       	pop	r28
    1238:	df 91       	pop	r29
    123a:	ff 91       	pop	r31
    123c:	ef 91       	pop	r30
    123e:	bf 91       	pop	r27
    1240:	af 91       	pop	r26
    1242:	9f 91       	pop	r25
    1244:	8f 91       	pop	r24
    1246:	7f 91       	pop	r23
    1248:	6f 91       	pop	r22
    124a:	5f 91       	pop	r21
    124c:	4f 91       	pop	r20
    124e:	3f 91       	pop	r19
    1250:	2f 91       	pop	r18
    1252:	0f 90       	pop	r0
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	0f 90       	pop	r0
    1258:	1f 90       	pop	r1
    125a:	18 95       	reti

0000125c <__vector_7>:
/* ISR for compaA*/

void __vector_7 (void) __attribute__ ((signal,used));
void __vector_7 (void)
{
    125c:	1f 92       	push	r1
    125e:	0f 92       	push	r0
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	0f 92       	push	r0
    1264:	11 24       	eor	r1, r1
    1266:	2f 93       	push	r18
    1268:	3f 93       	push	r19
    126a:	4f 93       	push	r20
    126c:	5f 93       	push	r21
    126e:	6f 93       	push	r22
    1270:	7f 93       	push	r23
    1272:	8f 93       	push	r24
    1274:	9f 93       	push	r25
    1276:	af 93       	push	r26
    1278:	bf 93       	push	r27
    127a:	ef 93       	push	r30
    127c:	ff 93       	push	r31
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfCmpACallBack();
    1286:	e0 91 f6 00 	lds	r30, 0x00F6
    128a:	f0 91 f7 00 	lds	r31, 0x00F7
    128e:	09 95       	icall
}
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	ff 91       	pop	r31
    1296:	ef 91       	pop	r30
    1298:	bf 91       	pop	r27
    129a:	af 91       	pop	r26
    129c:	9f 91       	pop	r25
    129e:	8f 91       	pop	r24
    12a0:	7f 91       	pop	r23
    12a2:	6f 91       	pop	r22
    12a4:	5f 91       	pop	r21
    12a6:	4f 91       	pop	r20
    12a8:	3f 91       	pop	r19
    12aa:	2f 91       	pop	r18
    12ac:	0f 90       	pop	r0
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	0f 90       	pop	r0
    12b2:	1f 90       	pop	r1
    12b4:	18 95       	reti

000012b6 <__vector_8>:
/* ISR for compaB*/

void __vector_8 (void) __attribute__ ((signal,used));
void __vector_8 (void)
{
    12b6:	1f 92       	push	r1
    12b8:	0f 92       	push	r0
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	0f 92       	push	r0
    12be:	11 24       	eor	r1, r1
    12c0:	2f 93       	push	r18
    12c2:	3f 93       	push	r19
    12c4:	4f 93       	push	r20
    12c6:	5f 93       	push	r21
    12c8:	6f 93       	push	r22
    12ca:	7f 93       	push	r23
    12cc:	8f 93       	push	r24
    12ce:	9f 93       	push	r25
    12d0:	af 93       	push	r26
    12d2:	bf 93       	push	r27
    12d4:	ef 93       	push	r30
    12d6:	ff 93       	push	r31
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfCmpBCallBack();
    12e0:	e0 91 f0 00 	lds	r30, 0x00F0
    12e4:	f0 91 f1 00 	lds	r31, 0x00F1
    12e8:	09 95       	icall
}
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	ff 91       	pop	r31
    12f0:	ef 91       	pop	r30
    12f2:	bf 91       	pop	r27
    12f4:	af 91       	pop	r26
    12f6:	9f 91       	pop	r25
    12f8:	8f 91       	pop	r24
    12fa:	7f 91       	pop	r23
    12fc:	6f 91       	pop	r22
    12fe:	5f 91       	pop	r21
    1300:	4f 91       	pop	r20
    1302:	3f 91       	pop	r19
    1304:	2f 91       	pop	r18
    1306:	0f 90       	pop	r0
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	0f 90       	pop	r0
    130c:	1f 90       	pop	r1
    130e:	18 95       	reti

00001310 <__vector_6>:
/* ISR for ICU*/

void __vector_6 (void) __attribute__ ((signal,used));
void __vector_6 (void)
{
    1310:	1f 92       	push	r1
    1312:	0f 92       	push	r0
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	0f 92       	push	r0
    1318:	11 24       	eor	r1, r1
    131a:	2f 93       	push	r18
    131c:	3f 93       	push	r19
    131e:	4f 93       	push	r20
    1320:	5f 93       	push	r21
    1322:	6f 93       	push	r22
    1324:	7f 93       	push	r23
    1326:	8f 93       	push	r24
    1328:	9f 93       	push	r25
    132a:	af 93       	push	r26
    132c:	bf 93       	push	r27
    132e:	ef 93       	push	r30
    1330:	ff 93       	push	r31
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfIcuCallBack();
    133a:	e0 91 f2 00 	lds	r30, 0x00F2
    133e:	f0 91 f3 00 	lds	r31, 0x00F3
    1342:	09 95       	icall
}
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	ff 91       	pop	r31
    134a:	ef 91       	pop	r30
    134c:	bf 91       	pop	r27
    134e:	af 91       	pop	r26
    1350:	9f 91       	pop	r25
    1352:	8f 91       	pop	r24
    1354:	7f 91       	pop	r23
    1356:	6f 91       	pop	r22
    1358:	5f 91       	pop	r21
    135a:	4f 91       	pop	r20
    135c:	3f 91       	pop	r19
    135e:	2f 91       	pop	r18
    1360:	0f 90       	pop	r0
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	0f 90       	pop	r0
    1366:	1f 90       	pop	r1
    1368:	18 95       	reti

0000136a <TIM1_u16GetIcuValue>:

/*ICU*/


uint16 TIM1_u16GetIcuValue(void)
{
    136a:	df 93       	push	r29
    136c:	cf 93       	push	r28
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1372:	e6 e4       	ldi	r30, 0x46	; 70
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	91 81       	ldd	r25, Z+1	; 0x01
}
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	08 95       	ret

00001380 <ICU_voidRisingEdge>:
void ICU_voidRisingEdge(void)
 {
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B , 6);
    1388:	ae e4       	ldi	r26, 0x4E	; 78
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	ee e4       	ldi	r30, 0x4E	; 78
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	80 64       	ori	r24, 0x40	; 64
    1394:	8c 93       	st	X, r24
 }
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <ICU_voidFallenEdge>:

 void ICU_voidFallenEdge(void)
 {
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B , 6);
    13a4:	ae e4       	ldi	r26, 0x4E	; 78
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	ee e4       	ldi	r30, 0x4E	; 78
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	8f 7b       	andi	r24, 0xBF	; 191
    13b0:	8c 93       	st	X, r24
 }
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <TIMER0_voidInit>:

pf TIMER0_pfOVFCallBack = NULL_PTR;
pf TIMER0_pfComCallBack = NULL_PTR;

void TIMER0_voidInit(void)
{
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0,3);
#elif TIMER0_MODE == CTC_MODE
	CLR_BIT(TCCR0,6);
	SET_BIT(TCCR0,3);
#elif TIMER0_MODE == FAST_PWM
	SET_BIT(TCCR0,6);
    13c0:	a3 e5       	ldi	r26, 0x53	; 83
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e3 e5       	ldi	r30, 0x53	; 83
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	80 64       	ori	r24, 0x40	; 64
    13cc:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
    13ce:	a3 e5       	ldi	r26, 0x53	; 83
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e3 e5       	ldi	r30, 0x53	; 83
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	88 60       	ori	r24, 0x08	; 8
    13da:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
#elif TIMER0_OC0_PWM == SET_OC0
	CLR_BIT(TCCR0,4);
	SET_BIT(TCCR0,5);
#elif TIMER0_OC0_PWM == INVERTING_FAST_PWM
	SET_BIT(TCCR0,4);
    13dc:	a3 e5       	ldi	r26, 0x53	; 83
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e3 e5       	ldi	r30, 0x53	; 83
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	80 61       	ori	r24, 0x10	; 16
    13e8:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
    13ea:	a3 e5       	ldi	r26, 0x53	; 83
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e3 e5       	ldi	r30, 0x53	; 83
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	80 62       	ori	r24, 0x20	; 32
    13f6:	8c 93       	st	X, r24

//	/*PRESCALAR CONFIG*/
//	TCCR0 = TCCR0 & 0b11111000;
//	TCCR0 |=TIMER0_PRESCALER;

}
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	08 95       	ret

000013fe <TIMER0_voidEnable>:

//used to enable and update prescalar
void TIMER0_voidEnable(uint8 u8Prescalar)
{
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	0f 92       	push	r0
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	89 83       	std	Y+1, r24	; 0x01
	/*PRESCALAR CONFIG*/
	TCCR0 = TCCR0 & 0b11111000;
    140a:	a3 e5       	ldi	r26, 0x53	; 83
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e3 e5       	ldi	r30, 0x53	; 83
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	88 7f       	andi	r24, 0xF8	; 248
    1416:	8c 93       	st	X, r24
	TCCR0 |=u8Prescalar;
    1418:	a3 e5       	ldi	r26, 0x53	; 83
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e3 e5       	ldi	r30, 0x53	; 83
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	90 81       	ld	r25, Z
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	89 2b       	or	r24, r25
    1426:	8c 93       	st	X, r24
}
    1428:	0f 90       	pop	r0
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	08 95       	ret

00001430 <TIMER0_voidDisable>:
void TIMER0_voidDisable(void)
{
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = TCCR0 & 0b11111000;
    1438:	a3 e5       	ldi	r26, 0x53	; 83
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e3 e5       	ldi	r30, 0x53	; 83
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	88 7f       	andi	r24, 0xF8	; 248
    1444:	8c 93       	st	X, r24
}
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	08 95       	ret

0000144c <TIMER0_voidEnableOvfInt>:

void TIMER0_voidEnableOvfInt(void)
{
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,0);
    1454:	a9 e5       	ldi	r26, 0x59	; 89
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e9 e5       	ldi	r30, 0x59	; 89
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	81 60       	ori	r24, 0x01	; 1
    1460:	8c 93       	st	X, r24
}
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <TIMER0_voidDisableOvfInt>:
void TIMER0_voidDisableOvfInt(void)
{
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,0);
    1470:	a9 e5       	ldi	r26, 0x59	; 89
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	e9 e5       	ldi	r30, 0x59	; 89
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	8e 7f       	andi	r24, 0xFE	; 254
    147c:	8c 93       	st	X, r24
}
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	08 95       	ret

00001484 <TIMER0_voidEnableComInt>:


void TIMER0_voidEnableComInt(void)
{
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,1);
    148c:	a9 e5       	ldi	r26, 0x59	; 89
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e9 e5       	ldi	r30, 0x59	; 89
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	82 60       	ori	r24, 0x02	; 2
    1498:	8c 93       	st	X, r24
}
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <TIMER0_voidDisableComInt>:
void TIMER0_voidDisableComInt(void)
{
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,1);
    14a8:	a9 e5       	ldi	r26, 0x59	; 89
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e9 e5       	ldi	r30, 0x59	; 89
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	8d 7f       	andi	r24, 0xFD	; 253
    14b4:	8c 93       	st	X, r24
}
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <TIMER0_voidSetTCNTValue>:


void TIMER0_voidSetTCNTValue(uint8 u8ValueCpy)
{
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	0f 92       	push	r0
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = u8ValueCpy;
    14c8:	e2 e5       	ldi	r30, 0x52	; 82
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	80 83       	st	Z, r24
}
    14d0:	0f 90       	pop	r0
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	08 95       	ret

000014d8 <TIMER0_voidSetOCRValue>:

void TIMER0_voidSetOCRValue(uint8 u8ValueCpy)
{
    14d8:	df 93       	push	r29
    14da:	cf 93       	push	r28
    14dc:	0f 92       	push	r0
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = u8ValueCpy;
    14e4:	ec e5       	ldi	r30, 0x5C	; 92
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	80 83       	st	Z, r24
}
    14ec:	0f 90       	pop	r0
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <TIMER0_voidReadTCNTReg>:

uint8 TIMER0_voidReadTCNTReg(void)
{
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    14fc:	e2 e5       	ldi	r30, 0x52	; 82
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
}
    1502:	cf 91       	pop	r28
    1504:	df 91       	pop	r29
    1506:	08 95       	ret

00001508 <TIMER0_voidSetCallBackOvfInt>:

void TIMER0_voidSetCallBackOvfInt(pf pfOvfcallbackCpy)
{
    1508:	df 93       	push	r29
    150a:	cf 93       	push	r28
    150c:	00 d0       	rcall	.+0      	; 0x150e <TIMER0_voidSetCallBackOvfInt+0x6>
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	9a 83       	std	Y+2, r25	; 0x02
    1514:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_pfOVFCallBack = pfOvfcallbackCpy;
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	9a 81       	ldd	r25, Y+2	; 0x02
    151a:	90 93 e1 00 	sts	0x00E1, r25
    151e:	80 93 e0 00 	sts	0x00E0, r24
}
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	08 95       	ret

0000152c <TIMER0_voidSetCallBackComInt>:


void TIMER0_voidSetCallBackComInt(pf pfComcallbackCpy)
{
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	00 d0       	rcall	.+0      	; 0x1532 <TIMER0_voidSetCallBackComInt+0x6>
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
    1536:	9a 83       	std	Y+2, r25	; 0x02
    1538:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_pfComCallBack = pfComcallbackCpy;
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	9a 81       	ldd	r25, Y+2	; 0x02
    153e:	90 93 e3 00 	sts	0x00E3, r25
    1542:	80 93 e2 00 	sts	0x00E2, r24
}
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <__vector_11>:

//__attribute__ means -> compiler  do not optimize			//12-1=11
void __vector_11 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_11 (void)
{
    1550:	1f 92       	push	r1
    1552:	0f 92       	push	r0
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	0f 92       	push	r0
    1558:	11 24       	eor	r1, r1
    155a:	2f 93       	push	r18
    155c:	3f 93       	push	r19
    155e:	4f 93       	push	r20
    1560:	5f 93       	push	r21
    1562:	6f 93       	push	r22
    1564:	7f 93       	push	r23
    1566:	8f 93       	push	r24
    1568:	9f 93       	push	r25
    156a:	af 93       	push	r26
    156c:	bf 93       	push	r27
    156e:	ef 93       	push	r30
    1570:	ff 93       	push	r31
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pfOVFCallBack!= NULL_PTR)
    157a:	80 91 e0 00 	lds	r24, 0x00E0
    157e:	90 91 e1 00 	lds	r25, 0x00E1
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	29 f0       	breq	.+10     	; 0x1590 <__vector_11+0x40>
	{
		TIMER0_pfOVFCallBack();
    1586:	e0 91 e0 00 	lds	r30, 0x00E0
    158a:	f0 91 e1 00 	lds	r31, 0x00E1
    158e:	09 95       	icall
	}
	else
	{
		//do nothing
	}
}
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	ff 91       	pop	r31
    1596:	ef 91       	pop	r30
    1598:	bf 91       	pop	r27
    159a:	af 91       	pop	r26
    159c:	9f 91       	pop	r25
    159e:	8f 91       	pop	r24
    15a0:	7f 91       	pop	r23
    15a2:	6f 91       	pop	r22
    15a4:	5f 91       	pop	r21
    15a6:	4f 91       	pop	r20
    15a8:	3f 91       	pop	r19
    15aa:	2f 91       	pop	r18
    15ac:	0f 90       	pop	r0
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	0f 90       	pop	r0
    15b2:	1f 90       	pop	r1
    15b4:	18 95       	reti

000015b6 <__vector_10>:

void __vector_10 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_10 (void)
{
    15b6:	1f 92       	push	r1
    15b8:	0f 92       	push	r0
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	0f 92       	push	r0
    15be:	11 24       	eor	r1, r1
    15c0:	2f 93       	push	r18
    15c2:	3f 93       	push	r19
    15c4:	4f 93       	push	r20
    15c6:	5f 93       	push	r21
    15c8:	6f 93       	push	r22
    15ca:	7f 93       	push	r23
    15cc:	8f 93       	push	r24
    15ce:	9f 93       	push	r25
    15d0:	af 93       	push	r26
    15d2:	bf 93       	push	r27
    15d4:	ef 93       	push	r30
    15d6:	ff 93       	push	r31
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pfComCallBack!= NULL_PTR)
    15e0:	80 91 e2 00 	lds	r24, 0x00E2
    15e4:	90 91 e3 00 	lds	r25, 0x00E3
    15e8:	00 97       	sbiw	r24, 0x00	; 0
    15ea:	29 f0       	breq	.+10     	; 0x15f6 <__vector_10+0x40>
	{
		TIMER0_pfComCallBack();
    15ec:	e0 91 e2 00 	lds	r30, 0x00E2
    15f0:	f0 91 e3 00 	lds	r31, 0x00E3
    15f4:	09 95       	icall
	}
	else
	{
		//do nothing
	}
}
    15f6:	cf 91       	pop	r28
    15f8:	df 91       	pop	r29
    15fa:	ff 91       	pop	r31
    15fc:	ef 91       	pop	r30
    15fe:	bf 91       	pop	r27
    1600:	af 91       	pop	r26
    1602:	9f 91       	pop	r25
    1604:	8f 91       	pop	r24
    1606:	7f 91       	pop	r23
    1608:	6f 91       	pop	r22
    160a:	5f 91       	pop	r21
    160c:	4f 91       	pop	r20
    160e:	3f 91       	pop	r19
    1610:	2f 91       	pop	r18
    1612:	0f 90       	pop	r0
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	0f 90       	pop	r0
    1618:	1f 90       	pop	r1
    161a:	18 95       	reti

0000161c <SPI_voidMasterInit>:
#include "SPI_interface.h"
#include "SPI_private.h"
#include "SPI_config.h"


void SPI_voidMasterInit(void){
    161c:	df 93       	push	r29
    161e:	cf 93       	push	r28
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
	/******Select data order*******/						  // default
	CLR_BIT(SPCR, SPCR_DORD);
    1624:	ad e2       	ldi	r26, 0x2D	; 45
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	ed e2       	ldi	r30, 0x2D	; 45
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	8f 7d       	andi	r24, 0xDF	; 223
    1630:	8c 93       	st	X, r24
	/******Select master******/
	SET_BIT(SPCR, SPCR_MSTR);
    1632:	ad e2       	ldi	r26, 0x2D	; 45
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	ed e2       	ldi	r30, 0x2D	; 45
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	80 61       	ori	r24, 0x10	; 16
    163e:	8c 93       	st	X, r24
	/******Clock Polarity -> leading edge -> rising ******/	  // default
	CLR_BIT(SPCR, SPCR_CPOL);
    1640:	ad e2       	ldi	r26, 0x2D	; 45
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	ed e2       	ldi	r30, 0x2D	; 45
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	87 7f       	andi	r24, 0xF7	; 247
    164c:	8c 93       	st	X, r24
	/******Clock Phase    -> sample first ******/			  // default
	CLR_BIT(SPCR, SPCR_CPHA);
    164e:	ad e2       	ldi	r26, 0x2D	; 45
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	ed e2       	ldi	r30, 0x2D	; 45
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	8b 7f       	andi	r24, 0xFB	; 251
    165a:	8c 93       	st	X, r24
	/******Select SPI clock rate******/
	SET_BIT(SPCR, SPCR_SPR0);
    165c:	ad e2       	ldi	r26, 0x2D	; 45
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	ed e2       	ldi	r30, 0x2D	; 45
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	81 60       	ori	r24, 0x01	; 1
    1668:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPCR_SPR1);
    166a:	ad e2       	ldi	r26, 0x2D	; 45
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	ed e2       	ldi	r30, 0x2D	; 45
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	8d 7f       	andi	r24, 0xFD	; 253
    1676:	8c 93       	st	X, r24
	CLR_BIT(SPSR, SPSR_SPI2X);
    1678:	ae e2       	ldi	r26, 0x2E	; 46
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	ee e2       	ldi	r30, 0x2E	; 46
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	8e 7f       	andi	r24, 0xFE	; 254
    1684:	8c 93       	st	X, r24

	/******Enable SPI******/
	SET_BIT(SPCR, SPCR_SPE);
    1686:	ad e2       	ldi	r26, 0x2D	; 45
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	ed e2       	ldi	r30, 0x2D	; 45
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	80 64       	ori	r24, 0x40	; 64
    1692:	8c 93       	st	X, r24
}
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	08 95       	ret

0000169a <SPI_voidSlaveInit>:
void SPI_voidSlaveInit(void){
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
	/******Select data order******/
	CLR_BIT(SPCR, SPCR_DORD);								  // default
    16a2:	ad e2       	ldi	r26, 0x2D	; 45
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	ed e2       	ldi	r30, 0x2D	; 45
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	8f 7d       	andi	r24, 0xDF	; 223
    16ae:	8c 93       	st	X, r24
	/******Select slave******/
	CLR_BIT(SPCR, SPCR_MSTR);
    16b0:	ad e2       	ldi	r26, 0x2D	; 45
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	ed e2       	ldi	r30, 0x2D	; 45
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	8f 7e       	andi	r24, 0xEF	; 239
    16bc:	8c 93       	st	X, r24
	/******Clock Polarity -> leading edge -> rising ******/   // default
	CLR_BIT(SPCR, SPCR_CPOL);
    16be:	ad e2       	ldi	r26, 0x2D	; 45
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	ed e2       	ldi	r30, 0x2D	; 45
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	87 7f       	andi	r24, 0xF7	; 247
    16ca:	8c 93       	st	X, r24
	/******Clock Phase    -> sample first ******/             // default
	CLR_BIT(SPCR, SPCR_CPHA);
    16cc:	ad e2       	ldi	r26, 0x2D	; 45
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	ed e2       	ldi	r30, 0x2D	; 45
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	8b 7f       	andi	r24, 0xFB	; 251
    16d8:	8c 93       	st	X, r24

	/******Enable SPI******/
	SET_BIT(SPCR, SPCR_SPE);
    16da:	ad e2       	ldi	r26, 0x2D	; 45
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	ed e2       	ldi	r30, 0x2D	; 45
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	80 64       	ori	r24, 0x40	; 64
    16e6:	8c 93       	st	X, r24
}
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <SPI_u8TransceiverDataSynch>:

uint8 SPI_u8TransceiverDataSynch(uint8 u8DataCpy){
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	0f 92       	push	r0
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
    16f8:	89 83       	std	Y+1, r24	; 0x01
	/*****Send Data****/
	SPDR = u8DataCpy;
    16fa:	ef e2       	ldi	r30, 0x2F	; 47
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	80 83       	st	Z, r24
	/*****wait until data received****/
	while(GET_BIT(SPSR, SPSR_SPIF)==0);
    1702:	ee e2       	ldi	r30, 0x2E	; 46
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	88 23       	and	r24, r24
    170a:	dc f7       	brge	.-10     	; 0x1702 <SPI_u8TransceiverDataSynch+0x14>

	return SPDR;
    170c:	ef e2       	ldi	r30, 0x2F	; 47
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
}
    1712:	0f 90       	pop	r0
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	08 95       	ret

0000171a <PASS_u8Setup>:
#include "../KeyPad/KPD_interface.h"

uint8 u8key[5];


uint8* PASS_u8Setup(void){
    171a:	0f 93       	push	r16
    171c:	1f 93       	push	r17
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	0f 92       	push	r0
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
//	while(KPD_u8GetKey() == 0);

	for(uint8 i=0; i<5; i++){
    1728:	19 82       	std	Y+1, r1	; 0x01
    172a:	0c c0       	rjmp	.+24     	; 0x1744 <PASS_u8Setup+0x2a>
		u8key[i] = KPD_u8GetKey();
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	08 2f       	mov	r16, r24
    1730:	10 e0       	ldi	r17, 0x00	; 0
    1732:	0e 94 4a 1a 	call	0x3494	; 0x3494 <KPD_u8GetKey>
    1736:	f8 01       	movw	r30, r16
    1738:	e8 50       	subi	r30, 0x08	; 8
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	80 83       	st	Z, r24


uint8* PASS_u8Setup(void){
//	while(KPD_u8GetKey() == 0);

	for(uint8 i=0; i<5; i++){
    173e:	89 81       	ldd	r24, Y+1	; 0x01
    1740:	8f 5f       	subi	r24, 0xFF	; 255
    1742:	89 83       	std	Y+1, r24	; 0x01
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	85 30       	cpi	r24, 0x05	; 5
    1748:	88 f3       	brcs	.-30     	; 0x172c <PASS_u8Setup+0x12>
		u8key[i] = KPD_u8GetKey();
	}
	return u8key;
    174a:	88 ef       	ldi	r24, 0xF8	; 248
    174c:	90 e0       	ldi	r25, 0x00	; 0
}
    174e:	0f 90       	pop	r0
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	1f 91       	pop	r17
    1756:	0f 91       	pop	r16
    1758:	08 95       	ret

0000175a <PASS_u8ComparePassword>:

uint8 PASS_u8ComparePassword(uint8 key1, uint8 key2 ){
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	00 d0       	rcall	.+0      	; 0x1760 <PASS_u8ComparePassword+0x6>
    1760:	0f 92       	push	r0
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	8a 83       	std	Y+2, r24	; 0x02
    1768:	6b 83       	std	Y+3, r22	; 0x03
	uint8 u8Error = 0;
    176a:	19 82       	std	Y+1, r1	; 0x01
	if(key1 == key2){
    176c:	9a 81       	ldd	r25, Y+2	; 0x02
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	98 17       	cp	r25, r24
    1772:	11 f4       	brne	.+4      	; 0x1778 <PASS_u8ComparePassword+0x1e>
		u8Error = 0;
    1774:	19 82       	std	Y+1, r1	; 0x01
    1776:	02 c0       	rjmp	.+4      	; 0x177c <PASS_u8ComparePassword+0x22>
	}
	else{
		u8Error = 1;
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8Error;
    177c:	89 81       	ldd	r24, Y+1	; 0x01
}
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <LCD_voidInit>:
#include "../DIO/DIO_interface.h"
#include "LCD_interface.h"
#include "../Password/Password_interface.h"
#include "util/delay.h"

void LCD_voidInit(void){
    178a:	0f 93       	push	r16
    178c:	1f 93       	push	r17
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	c4 55       	subi	r28, 0x54	; 84
    1798:	d0 40       	sbci	r29, 0x00	; 0
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	de bf       	out	0x3e, r29	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	cd bf       	out	0x3d, r28	; 61
	/* Pin Direction*/
	DIO_voidWritePort(lcd_DATAPORT   , DIO_OUTPUT);
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	61 e0       	ldi	r22, 0x01	; 1
    17a8:	0e 94 97 21 	call	0x432e	; 0x432e <DIO_voidWritePort>
	DIO_voidWritePin (lcd_CONTROLPORT, lcd_RSPIN, DIO_OUTPUT);
    17ac:	83 e0       	ldi	r24, 0x03	; 3
    17ae:	62 e0       	ldi	r22, 0x02	; 2
    17b0:	41 e0       	ldi	r20, 0x01	; 1
    17b2:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
	//DIO_voidWritePin (lcd_CONTROLPORT, lcd_RWPIN, DIO_OUTPUT);
	DIO_voidWritePin (lcd_CONTROLPORT, lcd_EPIN , DIO_OUTPUT);
    17b6:	83 e0       	ldi	r24, 0x03	; 3
    17b8:	63 e0       	ldi	r22, 0x03	; 3
    17ba:	41 e0       	ldi	r20, 0x01	; 1
    17bc:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
	/* Make Enable Low*/
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    17c0:	83 e0       	ldi	r24, 0x03	; 3
    17c2:	63 e0       	ldi	r22, 0x03	; 3
    17c4:	40 e0       	ldi	r20, 0x00	; 0
    17c6:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
    17ca:	fe 01       	movw	r30, r28
    17cc:	ef 5a       	subi	r30, 0xAF	; 175
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	a0 ef       	ldi	r26, 0xF0	; 240
    17d6:	b1 e4       	ldi	r27, 0x41	; 65
    17d8:	80 83       	st	Z, r24
    17da:	91 83       	std	Z+1, r25	; 0x01
    17dc:	a2 83       	std	Z+2, r26	; 0x02
    17de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e0:	8e 01       	movw	r16, r28
    17e2:	03 5b       	subi	r16, 0xB3	; 179
    17e4:	1f 4f       	sbci	r17, 0xFF	; 255
    17e6:	fe 01       	movw	r30, r28
    17e8:	ef 5a       	subi	r30, 0xAF	; 175
    17ea:	ff 4f       	sbci	r31, 0xFF	; 255
    17ec:	60 81       	ld	r22, Z
    17ee:	71 81       	ldd	r23, Z+1	; 0x01
    17f0:	82 81       	ldd	r24, Z+2	; 0x02
    17f2:	93 81       	ldd	r25, Z+3	; 0x03
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	4a ef       	ldi	r20, 0xFA	; 250
    17fa:	54 e4       	ldi	r21, 0x44	; 68
    17fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	f8 01       	movw	r30, r16
    1806:	80 83       	st	Z, r24
    1808:	91 83       	std	Z+1, r25	; 0x01
    180a:	a2 83       	std	Z+2, r26	; 0x02
    180c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    180e:	fe 01       	movw	r30, r28
    1810:	e3 5b       	subi	r30, 0xB3	; 179
    1812:	ff 4f       	sbci	r31, 0xFF	; 255
    1814:	60 81       	ld	r22, Z
    1816:	71 81       	ldd	r23, Z+1	; 0x01
    1818:	82 81       	ldd	r24, Z+2	; 0x02
    181a:	93 81       	ldd	r25, Z+3	; 0x03
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	40 e8       	ldi	r20, 0x80	; 128
    1822:	5f e3       	ldi	r21, 0x3F	; 63
    1824:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1828:	88 23       	and	r24, r24
    182a:	44 f4       	brge	.+16     	; 0x183c <LCD_voidInit+0xb2>
		__ticks = 1;
    182c:	fe 01       	movw	r30, r28
    182e:	e5 5b       	subi	r30, 0xB5	; 181
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	91 83       	std	Z+1, r25	; 0x01
    1838:	80 83       	st	Z, r24
    183a:	64 c0       	rjmp	.+200    	; 0x1904 <LCD_voidInit+0x17a>
	else if (__tmp > 65535)
    183c:	fe 01       	movw	r30, r28
    183e:	e3 5b       	subi	r30, 0xB3	; 179
    1840:	ff 4f       	sbci	r31, 0xFF	; 255
    1842:	60 81       	ld	r22, Z
    1844:	71 81       	ldd	r23, Z+1	; 0x01
    1846:	82 81       	ldd	r24, Z+2	; 0x02
    1848:	93 81       	ldd	r25, Z+3	; 0x03
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	3f ef       	ldi	r19, 0xFF	; 255
    184e:	4f e7       	ldi	r20, 0x7F	; 127
    1850:	57 e4       	ldi	r21, 0x47	; 71
    1852:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1856:	18 16       	cp	r1, r24
    1858:	0c f0       	brlt	.+2      	; 0x185c <LCD_voidInit+0xd2>
    185a:	43 c0       	rjmp	.+134    	; 0x18e2 <LCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    185c:	fe 01       	movw	r30, r28
    185e:	ef 5a       	subi	r30, 0xAF	; 175
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	60 81       	ld	r22, Z
    1864:	71 81       	ldd	r23, Z+1	; 0x01
    1866:	82 81       	ldd	r24, Z+2	; 0x02
    1868:	93 81       	ldd	r25, Z+3	; 0x03
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e2       	ldi	r20, 0x20	; 32
    1870:	51 e4       	ldi	r21, 0x41	; 65
    1872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	8e 01       	movw	r16, r28
    187c:	05 5b       	subi	r16, 0xB5	; 181
    187e:	1f 4f       	sbci	r17, 0xFF	; 255
    1880:	bc 01       	movw	r22, r24
    1882:	cd 01       	movw	r24, r26
    1884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	f8 01       	movw	r30, r16
    188e:	91 83       	std	Z+1, r25	; 0x01
    1890:	80 83       	st	Z, r24
    1892:	1f c0       	rjmp	.+62     	; 0x18d2 <LCD_voidInit+0x148>
    1894:	fe 01       	movw	r30, r28
    1896:	e7 5b       	subi	r30, 0xB7	; 183
    1898:	ff 4f       	sbci	r31, 0xFF	; 255
    189a:	88 ec       	ldi	r24, 0xC8	; 200
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	91 83       	std	Z+1, r25	; 0x01
    18a0:	80 83       	st	Z, r24
    18a2:	fe 01       	movw	r30, r28
    18a4:	e7 5b       	subi	r30, 0xB7	; 183
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	80 81       	ld	r24, Z
    18aa:	91 81       	ldd	r25, Z+1	; 0x01
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	f1 f7       	brne	.-4      	; 0x18ac <LCD_voidInit+0x122>
    18b0:	fe 01       	movw	r30, r28
    18b2:	e7 5b       	subi	r30, 0xB7	; 183
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	91 83       	std	Z+1, r25	; 0x01
    18b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ba:	de 01       	movw	r26, r28
    18bc:	a5 5b       	subi	r26, 0xB5	; 181
    18be:	bf 4f       	sbci	r27, 0xFF	; 255
    18c0:	fe 01       	movw	r30, r28
    18c2:	e5 5b       	subi	r30, 0xB5	; 181
    18c4:	ff 4f       	sbci	r31, 0xFF	; 255
    18c6:	80 81       	ld	r24, Z
    18c8:	91 81       	ldd	r25, Z+1	; 0x01
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	11 96       	adiw	r26, 0x01	; 1
    18ce:	9c 93       	st	X, r25
    18d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d2:	fe 01       	movw	r30, r28
    18d4:	e5 5b       	subi	r30, 0xB5	; 181
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	80 81       	ld	r24, Z
    18da:	91 81       	ldd	r25, Z+1	; 0x01
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	d1 f6       	brne	.-76     	; 0x1894 <LCD_voidInit+0x10a>
    18e0:	27 c0       	rjmp	.+78     	; 0x1930 <LCD_voidInit+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e2:	8e 01       	movw	r16, r28
    18e4:	05 5b       	subi	r16, 0xB5	; 181
    18e6:	1f 4f       	sbci	r17, 0xFF	; 255
    18e8:	fe 01       	movw	r30, r28
    18ea:	e3 5b       	subi	r30, 0xB3	; 179
    18ec:	ff 4f       	sbci	r31, 0xFF	; 255
    18ee:	60 81       	ld	r22, Z
    18f0:	71 81       	ldd	r23, Z+1	; 0x01
    18f2:	82 81       	ldd	r24, Z+2	; 0x02
    18f4:	93 81       	ldd	r25, Z+3	; 0x03
    18f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	f8 01       	movw	r30, r16
    1900:	91 83       	std	Z+1, r25	; 0x01
    1902:	80 83       	st	Z, r24
    1904:	de 01       	movw	r26, r28
    1906:	a9 5b       	subi	r26, 0xB9	; 185
    1908:	bf 4f       	sbci	r27, 0xFF	; 255
    190a:	fe 01       	movw	r30, r28
    190c:	e5 5b       	subi	r30, 0xB5	; 181
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	80 81       	ld	r24, Z
    1912:	91 81       	ldd	r25, Z+1	; 0x01
    1914:	8d 93       	st	X+, r24
    1916:	9c 93       	st	X, r25
    1918:	fe 01       	movw	r30, r28
    191a:	e9 5b       	subi	r30, 0xB9	; 185
    191c:	ff 4f       	sbci	r31, 0xFF	; 255
    191e:	80 81       	ld	r24, Z
    1920:	91 81       	ldd	r25, Z+1	; 0x01
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	f1 f7       	brne	.-4      	; 0x1922 <LCD_voidInit+0x198>
    1926:	fe 01       	movw	r30, r28
    1928:	e9 5b       	subi	r30, 0xB9	; 185
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	91 83       	std	Z+1, r25	; 0x01
    192e:	80 83       	st	Z, r24

	_delay_ms(30);
	LCD_voidSendCommand(lcd_Home);
    1930:	82 e0       	ldi	r24, 0x02	; 2
    1932:	0e 94 4b 12 	call	0x2496	; 0x2496 <LCD_voidSendCommand>
    1936:	fe 01       	movw	r30, r28
    1938:	ed 5b       	subi	r30, 0xBD	; 189
    193a:	ff 4f       	sbci	r31, 0xFF	; 255
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	a0 ea       	ldi	r26, 0xA0	; 160
    1942:	b0 e4       	ldi	r27, 0x40	; 64
    1944:	80 83       	st	Z, r24
    1946:	91 83       	std	Z+1, r25	; 0x01
    1948:	a2 83       	std	Z+2, r26	; 0x02
    194a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194c:	8e 01       	movw	r16, r28
    194e:	01 5c       	subi	r16, 0xC1	; 193
    1950:	1f 4f       	sbci	r17, 0xFF	; 255
    1952:	fe 01       	movw	r30, r28
    1954:	ed 5b       	subi	r30, 0xBD	; 189
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	60 81       	ld	r22, Z
    195a:	71 81       	ldd	r23, Z+1	; 0x01
    195c:	82 81       	ldd	r24, Z+2	; 0x02
    195e:	93 81       	ldd	r25, Z+3	; 0x03
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	4a ef       	ldi	r20, 0xFA	; 250
    1966:	54 e4       	ldi	r21, 0x44	; 68
    1968:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	f8 01       	movw	r30, r16
    1972:	80 83       	st	Z, r24
    1974:	91 83       	std	Z+1, r25	; 0x01
    1976:	a2 83       	std	Z+2, r26	; 0x02
    1978:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    197a:	fe 01       	movw	r30, r28
    197c:	ff 96       	adiw	r30, 0x3f	; 63
    197e:	60 81       	ld	r22, Z
    1980:	71 81       	ldd	r23, Z+1	; 0x01
    1982:	82 81       	ldd	r24, Z+2	; 0x02
    1984:	93 81       	ldd	r25, Z+3	; 0x03
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	40 e8       	ldi	r20, 0x80	; 128
    198c:	5f e3       	ldi	r21, 0x3F	; 63
    198e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1992:	88 23       	and	r24, r24
    1994:	2c f4       	brge	.+10     	; 0x19a0 <LCD_voidInit+0x216>
		__ticks = 1;
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	9e af       	std	Y+62, r25	; 0x3e
    199c:	8d af       	std	Y+61, r24	; 0x3d
    199e:	46 c0       	rjmp	.+140    	; 0x1a2c <LCD_voidInit+0x2a2>
	else if (__tmp > 65535)
    19a0:	fe 01       	movw	r30, r28
    19a2:	ff 96       	adiw	r30, 0x3f	; 63
    19a4:	60 81       	ld	r22, Z
    19a6:	71 81       	ldd	r23, Z+1	; 0x01
    19a8:	82 81       	ldd	r24, Z+2	; 0x02
    19aa:	93 81       	ldd	r25, Z+3	; 0x03
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	3f ef       	ldi	r19, 0xFF	; 255
    19b0:	4f e7       	ldi	r20, 0x7F	; 127
    19b2:	57 e4       	ldi	r21, 0x47	; 71
    19b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19b8:	18 16       	cp	r1, r24
    19ba:	64 f5       	brge	.+88     	; 0x1a14 <LCD_voidInit+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19bc:	fe 01       	movw	r30, r28
    19be:	ed 5b       	subi	r30, 0xBD	; 189
    19c0:	ff 4f       	sbci	r31, 0xFF	; 255
    19c2:	60 81       	ld	r22, Z
    19c4:	71 81       	ldd	r23, Z+1	; 0x01
    19c6:	82 81       	ldd	r24, Z+2	; 0x02
    19c8:	93 81       	ldd	r25, Z+3	; 0x03
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	40 e2       	ldi	r20, 0x20	; 32
    19d0:	51 e4       	ldi	r21, 0x41	; 65
    19d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	bc 01       	movw	r22, r24
    19dc:	cd 01       	movw	r24, r26
    19de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	9e af       	std	Y+62, r25	; 0x3e
    19e8:	8d af       	std	Y+61, r24	; 0x3d
    19ea:	0f c0       	rjmp	.+30     	; 0x1a0a <LCD_voidInit+0x280>
    19ec:	88 ec       	ldi	r24, 0xC8	; 200
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	9c af       	std	Y+60, r25	; 0x3c
    19f2:	8b af       	std	Y+59, r24	; 0x3b
    19f4:	8b ad       	ldd	r24, Y+59	; 0x3b
    19f6:	9c ad       	ldd	r25, Y+60	; 0x3c
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	f1 f7       	brne	.-4      	; 0x19f8 <LCD_voidInit+0x26e>
    19fc:	9c af       	std	Y+60, r25	; 0x3c
    19fe:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a00:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a02:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	9e af       	std	Y+62, r25	; 0x3e
    1a08:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a0c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a0e:	00 97       	sbiw	r24, 0x00	; 0
    1a10:	69 f7       	brne	.-38     	; 0x19ec <LCD_voidInit+0x262>
    1a12:	16 c0       	rjmp	.+44     	; 0x1a40 <LCD_voidInit+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a14:	fe 01       	movw	r30, r28
    1a16:	ff 96       	adiw	r30, 0x3f	; 63
    1a18:	60 81       	ld	r22, Z
    1a1a:	71 81       	ldd	r23, Z+1	; 0x01
    1a1c:	82 81       	ldd	r24, Z+2	; 0x02
    1a1e:	93 81       	ldd	r25, Z+3	; 0x03
    1a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	9e af       	std	Y+62, r25	; 0x3e
    1a2a:	8d af       	std	Y+61, r24	; 0x3d
    1a2c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a2e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a30:	9a af       	std	Y+58, r25	; 0x3a
    1a32:	89 af       	std	Y+57, r24	; 0x39
    1a34:	89 ad       	ldd	r24, Y+57	; 0x39
    1a36:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	f1 f7       	brne	.-4      	; 0x1a38 <LCD_voidInit+0x2ae>
    1a3c:	9a af       	std	Y+58, r25	; 0x3a
    1a3e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);
	LCD_voidSendCommand(lcd_FunctionSet8bit);
    1a40:	88 e3       	ldi	r24, 0x38	; 56
    1a42:	0e 94 4b 12 	call	0x2496	; 0x2496 <LCD_voidSendCommand>
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	a0 ea       	ldi	r26, 0xA0	; 160
    1a4c:	b0 e4       	ldi	r27, 0x40	; 64
    1a4e:	8d ab       	std	Y+53, r24	; 0x35
    1a50:	9e ab       	std	Y+54, r25	; 0x36
    1a52:	af ab       	std	Y+55, r26	; 0x37
    1a54:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a56:	6d a9       	ldd	r22, Y+53	; 0x35
    1a58:	7e a9       	ldd	r23, Y+54	; 0x36
    1a5a:	8f a9       	ldd	r24, Y+55	; 0x37
    1a5c:	98 ad       	ldd	r25, Y+56	; 0x38
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	4a ef       	ldi	r20, 0xFA	; 250
    1a64:	54 e4       	ldi	r21, 0x44	; 68
    1a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	89 ab       	std	Y+49, r24	; 0x31
    1a70:	9a ab       	std	Y+50, r25	; 0x32
    1a72:	ab ab       	std	Y+51, r26	; 0x33
    1a74:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a76:	69 a9       	ldd	r22, Y+49	; 0x31
    1a78:	7a a9       	ldd	r23, Y+50	; 0x32
    1a7a:	8b a9       	ldd	r24, Y+51	; 0x33
    1a7c:	9c a9       	ldd	r25, Y+52	; 0x34
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e8       	ldi	r20, 0x80	; 128
    1a84:	5f e3       	ldi	r21, 0x3F	; 63
    1a86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a8a:	88 23       	and	r24, r24
    1a8c:	2c f4       	brge	.+10     	; 0x1a98 <LCD_voidInit+0x30e>
		__ticks = 1;
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	98 ab       	std	Y+48, r25	; 0x30
    1a94:	8f a7       	std	Y+47, r24	; 0x2f
    1a96:	3f c0       	rjmp	.+126    	; 0x1b16 <LCD_voidInit+0x38c>
	else if (__tmp > 65535)
    1a98:	69 a9       	ldd	r22, Y+49	; 0x31
    1a9a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a9c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a9e:	9c a9       	ldd	r25, Y+52	; 0x34
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	3f ef       	ldi	r19, 0xFF	; 255
    1aa4:	4f e7       	ldi	r20, 0x7F	; 127
    1aa6:	57 e4       	ldi	r21, 0x47	; 71
    1aa8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aac:	18 16       	cp	r1, r24
    1aae:	4c f5       	brge	.+82     	; 0x1b02 <LCD_voidInit+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ab2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ab4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ab6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e2       	ldi	r20, 0x20	; 32
    1abe:	51 e4       	ldi	r21, 0x41	; 65
    1ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	bc 01       	movw	r22, r24
    1aca:	cd 01       	movw	r24, r26
    1acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	98 ab       	std	Y+48, r25	; 0x30
    1ad6:	8f a7       	std	Y+47, r24	; 0x2f
    1ad8:	0f c0       	rjmp	.+30     	; 0x1af8 <LCD_voidInit+0x36e>
    1ada:	88 ec       	ldi	r24, 0xC8	; 200
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	9e a7       	std	Y+46, r25	; 0x2e
    1ae0:	8d a7       	std	Y+45, r24	; 0x2d
    1ae2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ae4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	f1 f7       	brne	.-4      	; 0x1ae6 <LCD_voidInit+0x35c>
    1aea:	9e a7       	std	Y+46, r25	; 0x2e
    1aec:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aee:	8f a5       	ldd	r24, Y+47	; 0x2f
    1af0:	98 a9       	ldd	r25, Y+48	; 0x30
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	98 ab       	std	Y+48, r25	; 0x30
    1af6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1afa:	98 a9       	ldd	r25, Y+48	; 0x30
    1afc:	00 97       	sbiw	r24, 0x00	; 0
    1afe:	69 f7       	brne	.-38     	; 0x1ada <LCD_voidInit+0x350>
    1b00:	14 c0       	rjmp	.+40     	; 0x1b2a <LCD_voidInit+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b02:	69 a9       	ldd	r22, Y+49	; 0x31
    1b04:	7a a9       	ldd	r23, Y+50	; 0x32
    1b06:	8b a9       	ldd	r24, Y+51	; 0x33
    1b08:	9c a9       	ldd	r25, Y+52	; 0x34
    1b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	98 ab       	std	Y+48, r25	; 0x30
    1b14:	8f a7       	std	Y+47, r24	; 0x2f
    1b16:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b18:	98 a9       	ldd	r25, Y+48	; 0x30
    1b1a:	9c a7       	std	Y+44, r25	; 0x2c
    1b1c:	8b a7       	std	Y+43, r24	; 0x2b
    1b1e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b20:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	f1 f7       	brne	.-4      	; 0x1b22 <LCD_voidInit+0x398>
    1b26:	9c a7       	std	Y+44, r25	; 0x2c
    1b28:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	LCD_voidSendCommand(lcd_DisplayOn);
    1b2a:	8c e0       	ldi	r24, 0x0C	; 12
    1b2c:	0e 94 4b 12 	call	0x2496	; 0x2496 <LCD_voidSendCommand>
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	a0 ea       	ldi	r26, 0xA0	; 160
    1b36:	b0 e4       	ldi	r27, 0x40	; 64
    1b38:	8f a3       	std	Y+39, r24	; 0x27
    1b3a:	98 a7       	std	Y+40, r25	; 0x28
    1b3c:	a9 a7       	std	Y+41, r26	; 0x29
    1b3e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b40:	6f a1       	ldd	r22, Y+39	; 0x27
    1b42:	78 a5       	ldd	r23, Y+40	; 0x28
    1b44:	89 a5       	ldd	r24, Y+41	; 0x29
    1b46:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	4a ef       	ldi	r20, 0xFA	; 250
    1b4e:	54 e4       	ldi	r21, 0x44	; 68
    1b50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	8b a3       	std	Y+35, r24	; 0x23
    1b5a:	9c a3       	std	Y+36, r25	; 0x24
    1b5c:	ad a3       	std	Y+37, r26	; 0x25
    1b5e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b60:	6b a1       	ldd	r22, Y+35	; 0x23
    1b62:	7c a1       	ldd	r23, Y+36	; 0x24
    1b64:	8d a1       	ldd	r24, Y+37	; 0x25
    1b66:	9e a1       	ldd	r25, Y+38	; 0x26
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	40 e8       	ldi	r20, 0x80	; 128
    1b6e:	5f e3       	ldi	r21, 0x3F	; 63
    1b70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b74:	88 23       	and	r24, r24
    1b76:	2c f4       	brge	.+10     	; 0x1b82 <LCD_voidInit+0x3f8>
		__ticks = 1;
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	9a a3       	std	Y+34, r25	; 0x22
    1b7e:	89 a3       	std	Y+33, r24	; 0x21
    1b80:	3f c0       	rjmp	.+126    	; 0x1c00 <LCD_voidInit+0x476>
	else if (__tmp > 65535)
    1b82:	6b a1       	ldd	r22, Y+35	; 0x23
    1b84:	7c a1       	ldd	r23, Y+36	; 0x24
    1b86:	8d a1       	ldd	r24, Y+37	; 0x25
    1b88:	9e a1       	ldd	r25, Y+38	; 0x26
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	3f ef       	ldi	r19, 0xFF	; 255
    1b8e:	4f e7       	ldi	r20, 0x7F	; 127
    1b90:	57 e4       	ldi	r21, 0x47	; 71
    1b92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b96:	18 16       	cp	r1, r24
    1b98:	4c f5       	brge	.+82     	; 0x1bec <LCD_voidInit+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b9a:	6f a1       	ldd	r22, Y+39	; 0x27
    1b9c:	78 a5       	ldd	r23, Y+40	; 0x28
    1b9e:	89 a5       	ldd	r24, Y+41	; 0x29
    1ba0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	40 e2       	ldi	r20, 0x20	; 32
    1ba8:	51 e4       	ldi	r21, 0x41	; 65
    1baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	bc 01       	movw	r22, r24
    1bb4:	cd 01       	movw	r24, r26
    1bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	9a a3       	std	Y+34, r25	; 0x22
    1bc0:	89 a3       	std	Y+33, r24	; 0x21
    1bc2:	0f c0       	rjmp	.+30     	; 0x1be2 <LCD_voidInit+0x458>
    1bc4:	88 ec       	ldi	r24, 0xC8	; 200
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	98 a3       	std	Y+32, r25	; 0x20
    1bca:	8f 8f       	std	Y+31, r24	; 0x1f
    1bcc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bce:	98 a1       	ldd	r25, Y+32	; 0x20
    1bd0:	01 97       	sbiw	r24, 0x01	; 1
    1bd2:	f1 f7       	brne	.-4      	; 0x1bd0 <LCD_voidInit+0x446>
    1bd4:	98 a3       	std	Y+32, r25	; 0x20
    1bd6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd8:	89 a1       	ldd	r24, Y+33	; 0x21
    1bda:	9a a1       	ldd	r25, Y+34	; 0x22
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	9a a3       	std	Y+34, r25	; 0x22
    1be0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be2:	89 a1       	ldd	r24, Y+33	; 0x21
    1be4:	9a a1       	ldd	r25, Y+34	; 0x22
    1be6:	00 97       	sbiw	r24, 0x00	; 0
    1be8:	69 f7       	brne	.-38     	; 0x1bc4 <LCD_voidInit+0x43a>
    1bea:	14 c0       	rjmp	.+40     	; 0x1c14 <LCD_voidInit+0x48a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bec:	6b a1       	ldd	r22, Y+35	; 0x23
    1bee:	7c a1       	ldd	r23, Y+36	; 0x24
    1bf0:	8d a1       	ldd	r24, Y+37	; 0x25
    1bf2:	9e a1       	ldd	r25, Y+38	; 0x26
    1bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	9a a3       	std	Y+34, r25	; 0x22
    1bfe:	89 a3       	std	Y+33, r24	; 0x21
    1c00:	89 a1       	ldd	r24, Y+33	; 0x21
    1c02:	9a a1       	ldd	r25, Y+34	; 0x22
    1c04:	9e 8f       	std	Y+30, r25	; 0x1e
    1c06:	8d 8f       	std	Y+29, r24	; 0x1d
    1c08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	f1 f7       	brne	.-4      	; 0x1c0c <LCD_voidInit+0x482>
    1c10:	9e 8f       	std	Y+30, r25	; 0x1e
    1c12:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand(lcd_Clear);
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	0e 94 4b 12 	call	0x2496	; 0x2496 <LCD_voidSendCommand>
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	a0 ea       	ldi	r26, 0xA0	; 160
    1c20:	b0 e4       	ldi	r27, 0x40	; 64
    1c22:	89 8f       	std	Y+25, r24	; 0x19
    1c24:	9a 8f       	std	Y+26, r25	; 0x1a
    1c26:	ab 8f       	std	Y+27, r26	; 0x1b
    1c28:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c2a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	4a ef       	ldi	r20, 0xFA	; 250
    1c38:	54 e4       	ldi	r21, 0x44	; 68
    1c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	8d 8b       	std	Y+21, r24	; 0x15
    1c44:	9e 8b       	std	Y+22, r25	; 0x16
    1c46:	af 8b       	std	Y+23, r26	; 0x17
    1c48:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c50:	98 8d       	ldd	r25, Y+24	; 0x18
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e8       	ldi	r20, 0x80	; 128
    1c58:	5f e3       	ldi	r21, 0x3F	; 63
    1c5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c5e:	88 23       	and	r24, r24
    1c60:	2c f4       	brge	.+10     	; 0x1c6c <LCD_voidInit+0x4e2>
		__ticks = 1;
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	9c 8b       	std	Y+20, r25	; 0x14
    1c68:	8b 8b       	std	Y+19, r24	; 0x13
    1c6a:	3f c0       	rjmp	.+126    	; 0x1cea <LCD_voidInit+0x560>
	else if (__tmp > 65535)
    1c6c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c6e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c70:	8f 89       	ldd	r24, Y+23	; 0x17
    1c72:	98 8d       	ldd	r25, Y+24	; 0x18
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	3f ef       	ldi	r19, 0xFF	; 255
    1c78:	4f e7       	ldi	r20, 0x7F	; 127
    1c7a:	57 e4       	ldi	r21, 0x47	; 71
    1c7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c80:	18 16       	cp	r1, r24
    1c82:	4c f5       	brge	.+82     	; 0x1cd6 <LCD_voidInit+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c84:	69 8d       	ldd	r22, Y+25	; 0x19
    1c86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	40 e2       	ldi	r20, 0x20	; 32
    1c92:	51 e4       	ldi	r21, 0x41	; 65
    1c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	bc 01       	movw	r22, r24
    1c9e:	cd 01       	movw	r24, r26
    1ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	9c 8b       	std	Y+20, r25	; 0x14
    1caa:	8b 8b       	std	Y+19, r24	; 0x13
    1cac:	0f c0       	rjmp	.+30     	; 0x1ccc <LCD_voidInit+0x542>
    1cae:	88 ec       	ldi	r24, 0xC8	; 200
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	9a 8b       	std	Y+18, r25	; 0x12
    1cb4:	89 8b       	std	Y+17, r24	; 0x11
    1cb6:	89 89       	ldd	r24, Y+17	; 0x11
    1cb8:	9a 89       	ldd	r25, Y+18	; 0x12
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	f1 f7       	brne	.-4      	; 0x1cba <LCD_voidInit+0x530>
    1cbe:	9a 8b       	std	Y+18, r25	; 0x12
    1cc0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	9c 8b       	std	Y+20, r25	; 0x14
    1cca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ccc:	8b 89       	ldd	r24, Y+19	; 0x13
    1cce:	9c 89       	ldd	r25, Y+20	; 0x14
    1cd0:	00 97       	sbiw	r24, 0x00	; 0
    1cd2:	69 f7       	brne	.-38     	; 0x1cae <LCD_voidInit+0x524>
    1cd4:	14 c0       	rjmp	.+40     	; 0x1cfe <LCD_voidInit+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd6:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cda:	8f 89       	ldd	r24, Y+23	; 0x17
    1cdc:	98 8d       	ldd	r25, Y+24	; 0x18
    1cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	9c 8b       	std	Y+20, r25	; 0x14
    1ce8:	8b 8b       	std	Y+19, r24	; 0x13
    1cea:	8b 89       	ldd	r24, Y+19	; 0x13
    1cec:	9c 89       	ldd	r25, Y+20	; 0x14
    1cee:	98 8b       	std	Y+16, r25	; 0x10
    1cf0:	8f 87       	std	Y+15, r24	; 0x0f
    1cf2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cf4:	98 89       	ldd	r25, Y+16	; 0x10
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	f1 f7       	brne	.-4      	; 0x1cf6 <LCD_voidInit+0x56c>
    1cfa:	98 8b       	std	Y+16, r25	; 0x10
    1cfc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	LCD_voidSendCommand(lcd_EntryMode);
    1cfe:	86 e0       	ldi	r24, 0x06	; 6
    1d00:	0e 94 4b 12 	call	0x2496	; 0x2496 <LCD_voidSendCommand>
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	a0 ea       	ldi	r26, 0xA0	; 160
    1d0a:	b0 e4       	ldi	r27, 0x40	; 64
    1d0c:	8b 87       	std	Y+11, r24	; 0x0b
    1d0e:	9c 87       	std	Y+12, r25	; 0x0c
    1d10:	ad 87       	std	Y+13, r26	; 0x0d
    1d12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	4a ef       	ldi	r20, 0xFA	; 250
    1d22:	54 e4       	ldi	r21, 0x44	; 68
    1d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	8f 83       	std	Y+7, r24	; 0x07
    1d2e:	98 87       	std	Y+8, r25	; 0x08
    1d30:	a9 87       	std	Y+9, r26	; 0x09
    1d32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d34:	6f 81       	ldd	r22, Y+7	; 0x07
    1d36:	78 85       	ldd	r23, Y+8	; 0x08
    1d38:	89 85       	ldd	r24, Y+9	; 0x09
    1d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e8       	ldi	r20, 0x80	; 128
    1d42:	5f e3       	ldi	r21, 0x3F	; 63
    1d44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d48:	88 23       	and	r24, r24
    1d4a:	2c f4       	brge	.+10     	; 0x1d56 <LCD_voidInit+0x5cc>
		__ticks = 1;
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	9e 83       	std	Y+6, r25	; 0x06
    1d52:	8d 83       	std	Y+5, r24	; 0x05
    1d54:	3f c0       	rjmp	.+126    	; 0x1dd4 <LCD_voidInit+0x64a>
	else if (__tmp > 65535)
    1d56:	6f 81       	ldd	r22, Y+7	; 0x07
    1d58:	78 85       	ldd	r23, Y+8	; 0x08
    1d5a:	89 85       	ldd	r24, Y+9	; 0x09
    1d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	3f ef       	ldi	r19, 0xFF	; 255
    1d62:	4f e7       	ldi	r20, 0x7F	; 127
    1d64:	57 e4       	ldi	r21, 0x47	; 71
    1d66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d6a:	18 16       	cp	r1, r24
    1d6c:	4c f5       	brge	.+82     	; 0x1dc0 <LCD_voidInit+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	40 e2       	ldi	r20, 0x20	; 32
    1d7c:	51 e4       	ldi	r21, 0x41	; 65
    1d7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	bc 01       	movw	r22, r24
    1d88:	cd 01       	movw	r24, r26
    1d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	9e 83       	std	Y+6, r25	; 0x06
    1d94:	8d 83       	std	Y+5, r24	; 0x05
    1d96:	0f c0       	rjmp	.+30     	; 0x1db6 <LCD_voidInit+0x62c>
    1d98:	88 ec       	ldi	r24, 0xC8	; 200
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	9c 83       	std	Y+4, r25	; 0x04
    1d9e:	8b 83       	std	Y+3, r24	; 0x03
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	9c 81       	ldd	r25, Y+4	; 0x04
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	f1 f7       	brne	.-4      	; 0x1da4 <LCD_voidInit+0x61a>
    1da8:	9c 83       	std	Y+4, r25	; 0x04
    1daa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dac:	8d 81       	ldd	r24, Y+5	; 0x05
    1dae:	9e 81       	ldd	r25, Y+6	; 0x06
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	9e 83       	std	Y+6, r25	; 0x06
    1db4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db6:	8d 81       	ldd	r24, Y+5	; 0x05
    1db8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	69 f7       	brne	.-38     	; 0x1d98 <LCD_voidInit+0x60e>
    1dbe:	14 c0       	rjmp	.+40     	; 0x1de8 <LCD_voidInit+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc2:	78 85       	ldd	r23, Y+8	; 0x08
    1dc4:	89 85       	ldd	r24, Y+9	; 0x09
    1dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	9e 83       	std	Y+6, r25	; 0x06
    1dd2:	8d 83       	std	Y+5, r24	; 0x05
    1dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd8:	9a 83       	std	Y+2, r25	; 0x02
    1dda:	89 83       	std	Y+1, r24	; 0x01
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
    1dde:	9a 81       	ldd	r25, Y+2	; 0x02
    1de0:	01 97       	sbiw	r24, 0x01	; 1
    1de2:	f1 f7       	brne	.-4      	; 0x1de0 <LCD_voidInit+0x656>
    1de4:	9a 83       	std	Y+2, r25	; 0x02
    1de6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    1de8:	cc 5a       	subi	r28, 0xAC	; 172
    1dea:	df 4f       	sbci	r29, 0xFF	; 255
    1dec:	0f b6       	in	r0, 0x3f	; 63
    1dee:	f8 94       	cli
    1df0:	de bf       	out	0x3e, r29	; 62
    1df2:	0f be       	out	0x3f, r0	; 63
    1df4:	cd bf       	out	0x3d, r28	; 61
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	1f 91       	pop	r17
    1dfc:	0f 91       	pop	r16
    1dfe:	08 95       	ret

00001e00 <LCD_voidInit_4bitMode>:
void LCD_voidInit_4bitMode(void){
    1e00:	0f 93       	push	r16
    1e02:	1f 93       	push	r17
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	c4 55       	subi	r28, 0x54	; 84
    1e0e:	d0 40       	sbci	r29, 0x00	; 0
    1e10:	0f b6       	in	r0, 0x3f	; 63
    1e12:	f8 94       	cli
    1e14:	de bf       	out	0x3e, r29	; 62
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	cd bf       	out	0x3d, r28	; 61
	/* Pin Direction*/
//	DIO_voidWritePort(lcd_DATAPORT, DIO_OUTPUT);
	DIO_voidWritePin (lcd_DATAPORT, DIO_PIN_NUM_A4, DIO_OUTPUT);
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	64 e0       	ldi	r22, 0x04	; 4
    1e1e:	41 e0       	ldi	r20, 0x01	; 1
    1e20:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
	DIO_voidWritePin (lcd_DATAPORT, DIO_PIN_NUM_A5, DIO_OUTPUT);
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	65 e0       	ldi	r22, 0x05	; 5
    1e28:	41 e0       	ldi	r20, 0x01	; 1
    1e2a:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
	DIO_voidWritePin (lcd_DATAPORT, DIO_PIN_NUM_A6, DIO_OUTPUT);
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	66 e0       	ldi	r22, 0x06	; 6
    1e32:	41 e0       	ldi	r20, 0x01	; 1
    1e34:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
	DIO_voidWritePin (lcd_DATAPORT, DIO_PIN_NUM_A7, DIO_OUTPUT);
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	67 e0       	ldi	r22, 0x07	; 7
    1e3c:	41 e0       	ldi	r20, 0x01	; 1
    1e3e:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>

	DIO_voidWritePin (lcd_CONTROLPORT, lcd_RSPIN, DIO_OUTPUT);
    1e42:	83 e0       	ldi	r24, 0x03	; 3
    1e44:	62 e0       	ldi	r22, 0x02	; 2
    1e46:	41 e0       	ldi	r20, 0x01	; 1
    1e48:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
	//DIO_voidWritePin (lcd_CONTROLPORT, lcd_RWPIN, DIO_OUTPUT);
	DIO_voidWritePin (lcd_CONTROLPORT, lcd_EPIN , DIO_OUTPUT);
    1e4c:	83 e0       	ldi	r24, 0x03	; 3
    1e4e:	63 e0       	ldi	r22, 0x03	; 3
    1e50:	41 e0       	ldi	r20, 0x01	; 1
    1e52:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
	/* Make Enable Low*/
	DIO_voidWritePin (lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    1e56:	83 e0       	ldi	r24, 0x03	; 3
    1e58:	63 e0       	ldi	r22, 0x03	; 3
    1e5a:	40 e0       	ldi	r20, 0x00	; 0
    1e5c:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
    1e60:	fe 01       	movw	r30, r28
    1e62:	ef 5a       	subi	r30, 0xAF	; 175
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	a8 e4       	ldi	r26, 0x48	; 72
    1e6c:	b2 e4       	ldi	r27, 0x42	; 66
    1e6e:	80 83       	st	Z, r24
    1e70:	91 83       	std	Z+1, r25	; 0x01
    1e72:	a2 83       	std	Z+2, r26	; 0x02
    1e74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e76:	8e 01       	movw	r16, r28
    1e78:	03 5b       	subi	r16, 0xB3	; 179
    1e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	ef 5a       	subi	r30, 0xAF	; 175
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	60 81       	ld	r22, Z
    1e84:	71 81       	ldd	r23, Z+1	; 0x01
    1e86:	82 81       	ldd	r24, Z+2	; 0x02
    1e88:	93 81       	ldd	r25, Z+3	; 0x03
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	4a ef       	ldi	r20, 0xFA	; 250
    1e90:	54 e4       	ldi	r21, 0x44	; 68
    1e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	f8 01       	movw	r30, r16
    1e9c:	80 83       	st	Z, r24
    1e9e:	91 83       	std	Z+1, r25	; 0x01
    1ea0:	a2 83       	std	Z+2, r26	; 0x02
    1ea2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	e3 5b       	subi	r30, 0xB3	; 179
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	60 81       	ld	r22, Z
    1eac:	71 81       	ldd	r23, Z+1	; 0x01
    1eae:	82 81       	ldd	r24, Z+2	; 0x02
    1eb0:	93 81       	ldd	r25, Z+3	; 0x03
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e8       	ldi	r20, 0x80	; 128
    1eb8:	5f e3       	ldi	r21, 0x3F	; 63
    1eba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ebe:	88 23       	and	r24, r24
    1ec0:	44 f4       	brge	.+16     	; 0x1ed2 <LCD_voidInit_4bitMode+0xd2>
		__ticks = 1;
    1ec2:	fe 01       	movw	r30, r28
    1ec4:	e5 5b       	subi	r30, 0xB5	; 181
    1ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	91 83       	std	Z+1, r25	; 0x01
    1ece:	80 83       	st	Z, r24
    1ed0:	64 c0       	rjmp	.+200    	; 0x1f9a <LCD_voidInit_4bitMode+0x19a>
	else if (__tmp > 65535)
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	e3 5b       	subi	r30, 0xB3	; 179
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	60 81       	ld	r22, Z
    1eda:	71 81       	ldd	r23, Z+1	; 0x01
    1edc:	82 81       	ldd	r24, Z+2	; 0x02
    1ede:	93 81       	ldd	r25, Z+3	; 0x03
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	3f ef       	ldi	r19, 0xFF	; 255
    1ee4:	4f e7       	ldi	r20, 0x7F	; 127
    1ee6:	57 e4       	ldi	r21, 0x47	; 71
    1ee8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eec:	18 16       	cp	r1, r24
    1eee:	0c f0       	brlt	.+2      	; 0x1ef2 <LCD_voidInit_4bitMode+0xf2>
    1ef0:	43 c0       	rjmp	.+134    	; 0x1f78 <LCD_voidInit_4bitMode+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	ef 5a       	subi	r30, 0xAF	; 175
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	60 81       	ld	r22, Z
    1efa:	71 81       	ldd	r23, Z+1	; 0x01
    1efc:	82 81       	ldd	r24, Z+2	; 0x02
    1efe:	93 81       	ldd	r25, Z+3	; 0x03
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	40 e2       	ldi	r20, 0x20	; 32
    1f06:	51 e4       	ldi	r21, 0x41	; 65
    1f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	8e 01       	movw	r16, r28
    1f12:	05 5b       	subi	r16, 0xB5	; 181
    1f14:	1f 4f       	sbci	r17, 0xFF	; 255
    1f16:	bc 01       	movw	r22, r24
    1f18:	cd 01       	movw	r24, r26
    1f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	f8 01       	movw	r30, r16
    1f24:	91 83       	std	Z+1, r25	; 0x01
    1f26:	80 83       	st	Z, r24
    1f28:	1f c0       	rjmp	.+62     	; 0x1f68 <LCD_voidInit_4bitMode+0x168>
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	e7 5b       	subi	r30, 0xB7	; 183
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	88 ec       	ldi	r24, 0xC8	; 200
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	91 83       	std	Z+1, r25	; 0x01
    1f36:	80 83       	st	Z, r24
    1f38:	fe 01       	movw	r30, r28
    1f3a:	e7 5b       	subi	r30, 0xB7	; 183
    1f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3e:	80 81       	ld	r24, Z
    1f40:	91 81       	ldd	r25, Z+1	; 0x01
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	f1 f7       	brne	.-4      	; 0x1f42 <LCD_voidInit_4bitMode+0x142>
    1f46:	fe 01       	movw	r30, r28
    1f48:	e7 5b       	subi	r30, 0xB7	; 183
    1f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4c:	91 83       	std	Z+1, r25	; 0x01
    1f4e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f50:	de 01       	movw	r26, r28
    1f52:	a5 5b       	subi	r26, 0xB5	; 181
    1f54:	bf 4f       	sbci	r27, 0xFF	; 255
    1f56:	fe 01       	movw	r30, r28
    1f58:	e5 5b       	subi	r30, 0xB5	; 181
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	80 81       	ld	r24, Z
    1f5e:	91 81       	ldd	r25, Z+1	; 0x01
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	11 96       	adiw	r26, 0x01	; 1
    1f64:	9c 93       	st	X, r25
    1f66:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f68:	fe 01       	movw	r30, r28
    1f6a:	e5 5b       	subi	r30, 0xB5	; 181
    1f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6e:	80 81       	ld	r24, Z
    1f70:	91 81       	ldd	r25, Z+1	; 0x01
    1f72:	00 97       	sbiw	r24, 0x00	; 0
    1f74:	d1 f6       	brne	.-76     	; 0x1f2a <LCD_voidInit_4bitMode+0x12a>
    1f76:	27 c0       	rjmp	.+78     	; 0x1fc6 <LCD_voidInit_4bitMode+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f78:	8e 01       	movw	r16, r28
    1f7a:	05 5b       	subi	r16, 0xB5	; 181
    1f7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f7e:	fe 01       	movw	r30, r28
    1f80:	e3 5b       	subi	r30, 0xB3	; 179
    1f82:	ff 4f       	sbci	r31, 0xFF	; 255
    1f84:	60 81       	ld	r22, Z
    1f86:	71 81       	ldd	r23, Z+1	; 0x01
    1f88:	82 81       	ldd	r24, Z+2	; 0x02
    1f8a:	93 81       	ldd	r25, Z+3	; 0x03
    1f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	f8 01       	movw	r30, r16
    1f96:	91 83       	std	Z+1, r25	; 0x01
    1f98:	80 83       	st	Z, r24
    1f9a:	de 01       	movw	r26, r28
    1f9c:	a9 5b       	subi	r26, 0xB9	; 185
    1f9e:	bf 4f       	sbci	r27, 0xFF	; 255
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	e5 5b       	subi	r30, 0xB5	; 181
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	80 81       	ld	r24, Z
    1fa8:	91 81       	ldd	r25, Z+1	; 0x01
    1faa:	8d 93       	st	X+, r24
    1fac:	9c 93       	st	X, r25
    1fae:	fe 01       	movw	r30, r28
    1fb0:	e9 5b       	subi	r30, 0xB9	; 185
    1fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb4:	80 81       	ld	r24, Z
    1fb6:	91 81       	ldd	r25, Z+1	; 0x01
    1fb8:	01 97       	sbiw	r24, 0x01	; 1
    1fba:	f1 f7       	brne	.-4      	; 0x1fb8 <LCD_voidInit_4bitMode+0x1b8>
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	e9 5b       	subi	r30, 0xB9	; 185
    1fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc2:	91 83       	std	Z+1, r25	; 0x01
    1fc4:	80 83       	st	Z, r24

	_delay_ms(50);
	LCD_voidSendCommand_4bitMode(lcd_Home);
    1fc6:	82 e0       	ldi	r24, 0x02	; 2
    1fc8:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendCommand_4bitMode>
    1fcc:	fe 01       	movw	r30, r28
    1fce:	ed 5b       	subi	r30, 0xBD	; 189
    1fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	a0 ea       	ldi	r26, 0xA0	; 160
    1fd8:	b0 e4       	ldi	r27, 0x40	; 64
    1fda:	80 83       	st	Z, r24
    1fdc:	91 83       	std	Z+1, r25	; 0x01
    1fde:	a2 83       	std	Z+2, r26	; 0x02
    1fe0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe2:	8e 01       	movw	r16, r28
    1fe4:	01 5c       	subi	r16, 0xC1	; 193
    1fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe8:	fe 01       	movw	r30, r28
    1fea:	ed 5b       	subi	r30, 0xBD	; 189
    1fec:	ff 4f       	sbci	r31, 0xFF	; 255
    1fee:	60 81       	ld	r22, Z
    1ff0:	71 81       	ldd	r23, Z+1	; 0x01
    1ff2:	82 81       	ldd	r24, Z+2	; 0x02
    1ff4:	93 81       	ldd	r25, Z+3	; 0x03
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	4a ef       	ldi	r20, 0xFA	; 250
    1ffc:	54 e4       	ldi	r21, 0x44	; 68
    1ffe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	f8 01       	movw	r30, r16
    2008:	80 83       	st	Z, r24
    200a:	91 83       	std	Z+1, r25	; 0x01
    200c:	a2 83       	std	Z+2, r26	; 0x02
    200e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2010:	fe 01       	movw	r30, r28
    2012:	ff 96       	adiw	r30, 0x3f	; 63
    2014:	60 81       	ld	r22, Z
    2016:	71 81       	ldd	r23, Z+1	; 0x01
    2018:	82 81       	ldd	r24, Z+2	; 0x02
    201a:	93 81       	ldd	r25, Z+3	; 0x03
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	40 e8       	ldi	r20, 0x80	; 128
    2022:	5f e3       	ldi	r21, 0x3F	; 63
    2024:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2028:	88 23       	and	r24, r24
    202a:	2c f4       	brge	.+10     	; 0x2036 <LCD_voidInit_4bitMode+0x236>
		__ticks = 1;
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	9e af       	std	Y+62, r25	; 0x3e
    2032:	8d af       	std	Y+61, r24	; 0x3d
    2034:	46 c0       	rjmp	.+140    	; 0x20c2 <LCD_voidInit_4bitMode+0x2c2>
	else if (__tmp > 65535)
    2036:	fe 01       	movw	r30, r28
    2038:	ff 96       	adiw	r30, 0x3f	; 63
    203a:	60 81       	ld	r22, Z
    203c:	71 81       	ldd	r23, Z+1	; 0x01
    203e:	82 81       	ldd	r24, Z+2	; 0x02
    2040:	93 81       	ldd	r25, Z+3	; 0x03
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	3f ef       	ldi	r19, 0xFF	; 255
    2046:	4f e7       	ldi	r20, 0x7F	; 127
    2048:	57 e4       	ldi	r21, 0x47	; 71
    204a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    204e:	18 16       	cp	r1, r24
    2050:	64 f5       	brge	.+88     	; 0x20aa <LCD_voidInit_4bitMode+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2052:	fe 01       	movw	r30, r28
    2054:	ed 5b       	subi	r30, 0xBD	; 189
    2056:	ff 4f       	sbci	r31, 0xFF	; 255
    2058:	60 81       	ld	r22, Z
    205a:	71 81       	ldd	r23, Z+1	; 0x01
    205c:	82 81       	ldd	r24, Z+2	; 0x02
    205e:	93 81       	ldd	r25, Z+3	; 0x03
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e2       	ldi	r20, 0x20	; 32
    2066:	51 e4       	ldi	r21, 0x41	; 65
    2068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	bc 01       	movw	r22, r24
    2072:	cd 01       	movw	r24, r26
    2074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	9e af       	std	Y+62, r25	; 0x3e
    207e:	8d af       	std	Y+61, r24	; 0x3d
    2080:	0f c0       	rjmp	.+30     	; 0x20a0 <LCD_voidInit_4bitMode+0x2a0>
    2082:	88 ec       	ldi	r24, 0xC8	; 200
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	9c af       	std	Y+60, r25	; 0x3c
    2088:	8b af       	std	Y+59, r24	; 0x3b
    208a:	8b ad       	ldd	r24, Y+59	; 0x3b
    208c:	9c ad       	ldd	r25, Y+60	; 0x3c
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <LCD_voidInit_4bitMode+0x28e>
    2092:	9c af       	std	Y+60, r25	; 0x3c
    2094:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2096:	8d ad       	ldd	r24, Y+61	; 0x3d
    2098:	9e ad       	ldd	r25, Y+62	; 0x3e
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	9e af       	std	Y+62, r25	; 0x3e
    209e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    20a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	69 f7       	brne	.-38     	; 0x2082 <LCD_voidInit_4bitMode+0x282>
    20a8:	16 c0       	rjmp	.+44     	; 0x20d6 <LCD_voidInit_4bitMode+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20aa:	fe 01       	movw	r30, r28
    20ac:	ff 96       	adiw	r30, 0x3f	; 63
    20ae:	60 81       	ld	r22, Z
    20b0:	71 81       	ldd	r23, Z+1	; 0x01
    20b2:	82 81       	ldd	r24, Z+2	; 0x02
    20b4:	93 81       	ldd	r25, Z+3	; 0x03
    20b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	9e af       	std	Y+62, r25	; 0x3e
    20c0:	8d af       	std	Y+61, r24	; 0x3d
    20c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    20c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    20c6:	9a af       	std	Y+58, r25	; 0x3a
    20c8:	89 af       	std	Y+57, r24	; 0x39
    20ca:	89 ad       	ldd	r24, Y+57	; 0x39
    20cc:	9a ad       	ldd	r25, Y+58	; 0x3a
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	f1 f7       	brne	.-4      	; 0x20ce <LCD_voidInit_4bitMode+0x2ce>
    20d2:	9a af       	std	Y+58, r25	; 0x3a
    20d4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);
	LCD_voidSendCommand_4bitMode(lcd_FunctionSet4bit);
    20d6:	88 e2       	ldi	r24, 0x28	; 40
    20d8:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendCommand_4bitMode>
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	a0 ea       	ldi	r26, 0xA0	; 160
    20e2:	b0 e4       	ldi	r27, 0x40	; 64
    20e4:	8d ab       	std	Y+53, r24	; 0x35
    20e6:	9e ab       	std	Y+54, r25	; 0x36
    20e8:	af ab       	std	Y+55, r26	; 0x37
    20ea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ec:	6d a9       	ldd	r22, Y+53	; 0x35
    20ee:	7e a9       	ldd	r23, Y+54	; 0x36
    20f0:	8f a9       	ldd	r24, Y+55	; 0x37
    20f2:	98 ad       	ldd	r25, Y+56	; 0x38
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	4a ef       	ldi	r20, 0xFA	; 250
    20fa:	54 e4       	ldi	r21, 0x44	; 68
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	89 ab       	std	Y+49, r24	; 0x31
    2106:	9a ab       	std	Y+50, r25	; 0x32
    2108:	ab ab       	std	Y+51, r26	; 0x33
    210a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    210c:	69 a9       	ldd	r22, Y+49	; 0x31
    210e:	7a a9       	ldd	r23, Y+50	; 0x32
    2110:	8b a9       	ldd	r24, Y+51	; 0x33
    2112:	9c a9       	ldd	r25, Y+52	; 0x34
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e8       	ldi	r20, 0x80	; 128
    211a:	5f e3       	ldi	r21, 0x3F	; 63
    211c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2120:	88 23       	and	r24, r24
    2122:	2c f4       	brge	.+10     	; 0x212e <LCD_voidInit_4bitMode+0x32e>
		__ticks = 1;
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	98 ab       	std	Y+48, r25	; 0x30
    212a:	8f a7       	std	Y+47, r24	; 0x2f
    212c:	3f c0       	rjmp	.+126    	; 0x21ac <LCD_voidInit_4bitMode+0x3ac>
	else if (__tmp > 65535)
    212e:	69 a9       	ldd	r22, Y+49	; 0x31
    2130:	7a a9       	ldd	r23, Y+50	; 0x32
    2132:	8b a9       	ldd	r24, Y+51	; 0x33
    2134:	9c a9       	ldd	r25, Y+52	; 0x34
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	3f ef       	ldi	r19, 0xFF	; 255
    213a:	4f e7       	ldi	r20, 0x7F	; 127
    213c:	57 e4       	ldi	r21, 0x47	; 71
    213e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2142:	18 16       	cp	r1, r24
    2144:	4c f5       	brge	.+82     	; 0x2198 <LCD_voidInit_4bitMode+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2146:	6d a9       	ldd	r22, Y+53	; 0x35
    2148:	7e a9       	ldd	r23, Y+54	; 0x36
    214a:	8f a9       	ldd	r24, Y+55	; 0x37
    214c:	98 ad       	ldd	r25, Y+56	; 0x38
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	40 e2       	ldi	r20, 0x20	; 32
    2154:	51 e4       	ldi	r21, 0x41	; 65
    2156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	bc 01       	movw	r22, r24
    2160:	cd 01       	movw	r24, r26
    2162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	98 ab       	std	Y+48, r25	; 0x30
    216c:	8f a7       	std	Y+47, r24	; 0x2f
    216e:	0f c0       	rjmp	.+30     	; 0x218e <LCD_voidInit_4bitMode+0x38e>
    2170:	88 ec       	ldi	r24, 0xC8	; 200
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	9e a7       	std	Y+46, r25	; 0x2e
    2176:	8d a7       	std	Y+45, r24	; 0x2d
    2178:	8d a5       	ldd	r24, Y+45	; 0x2d
    217a:	9e a5       	ldd	r25, Y+46	; 0x2e
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	f1 f7       	brne	.-4      	; 0x217c <LCD_voidInit_4bitMode+0x37c>
    2180:	9e a7       	std	Y+46, r25	; 0x2e
    2182:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2184:	8f a5       	ldd	r24, Y+47	; 0x2f
    2186:	98 a9       	ldd	r25, Y+48	; 0x30
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	98 ab       	std	Y+48, r25	; 0x30
    218c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2190:	98 a9       	ldd	r25, Y+48	; 0x30
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	69 f7       	brne	.-38     	; 0x2170 <LCD_voidInit_4bitMode+0x370>
    2196:	14 c0       	rjmp	.+40     	; 0x21c0 <LCD_voidInit_4bitMode+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2198:	69 a9       	ldd	r22, Y+49	; 0x31
    219a:	7a a9       	ldd	r23, Y+50	; 0x32
    219c:	8b a9       	ldd	r24, Y+51	; 0x33
    219e:	9c a9       	ldd	r25, Y+52	; 0x34
    21a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	98 ab       	std	Y+48, r25	; 0x30
    21aa:	8f a7       	std	Y+47, r24	; 0x2f
    21ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ae:	98 a9       	ldd	r25, Y+48	; 0x30
    21b0:	9c a7       	std	Y+44, r25	; 0x2c
    21b2:	8b a7       	std	Y+43, r24	; 0x2b
    21b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    21b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	f1 f7       	brne	.-4      	; 0x21b8 <LCD_voidInit_4bitMode+0x3b8>
    21bc:	9c a7       	std	Y+44, r25	; 0x2c
    21be:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	LCD_voidSendCommand_4bitMode(lcd_DisplayOn);
    21c0:	8c e0       	ldi	r24, 0x0C	; 12
    21c2:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendCommand_4bitMode>
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	a0 ea       	ldi	r26, 0xA0	; 160
    21cc:	b0 e4       	ldi	r27, 0x40	; 64
    21ce:	8f a3       	std	Y+39, r24	; 0x27
    21d0:	98 a7       	std	Y+40, r25	; 0x28
    21d2:	a9 a7       	std	Y+41, r26	; 0x29
    21d4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d6:	6f a1       	ldd	r22, Y+39	; 0x27
    21d8:	78 a5       	ldd	r23, Y+40	; 0x28
    21da:	89 a5       	ldd	r24, Y+41	; 0x29
    21dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	4a ef       	ldi	r20, 0xFA	; 250
    21e4:	54 e4       	ldi	r21, 0x44	; 68
    21e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	8b a3       	std	Y+35, r24	; 0x23
    21f0:	9c a3       	std	Y+36, r25	; 0x24
    21f2:	ad a3       	std	Y+37, r26	; 0x25
    21f4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21f6:	6b a1       	ldd	r22, Y+35	; 0x23
    21f8:	7c a1       	ldd	r23, Y+36	; 0x24
    21fa:	8d a1       	ldd	r24, Y+37	; 0x25
    21fc:	9e a1       	ldd	r25, Y+38	; 0x26
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e8       	ldi	r20, 0x80	; 128
    2204:	5f e3       	ldi	r21, 0x3F	; 63
    2206:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    220a:	88 23       	and	r24, r24
    220c:	2c f4       	brge	.+10     	; 0x2218 <LCD_voidInit_4bitMode+0x418>
		__ticks = 1;
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	9a a3       	std	Y+34, r25	; 0x22
    2214:	89 a3       	std	Y+33, r24	; 0x21
    2216:	3f c0       	rjmp	.+126    	; 0x2296 <LCD_voidInit_4bitMode+0x496>
	else if (__tmp > 65535)
    2218:	6b a1       	ldd	r22, Y+35	; 0x23
    221a:	7c a1       	ldd	r23, Y+36	; 0x24
    221c:	8d a1       	ldd	r24, Y+37	; 0x25
    221e:	9e a1       	ldd	r25, Y+38	; 0x26
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	3f ef       	ldi	r19, 0xFF	; 255
    2224:	4f e7       	ldi	r20, 0x7F	; 127
    2226:	57 e4       	ldi	r21, 0x47	; 71
    2228:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    222c:	18 16       	cp	r1, r24
    222e:	4c f5       	brge	.+82     	; 0x2282 <LCD_voidInit_4bitMode+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2230:	6f a1       	ldd	r22, Y+39	; 0x27
    2232:	78 a5       	ldd	r23, Y+40	; 0x28
    2234:	89 a5       	ldd	r24, Y+41	; 0x29
    2236:	9a a5       	ldd	r25, Y+42	; 0x2a
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	40 e2       	ldi	r20, 0x20	; 32
    223e:	51 e4       	ldi	r21, 0x41	; 65
    2240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	bc 01       	movw	r22, r24
    224a:	cd 01       	movw	r24, r26
    224c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	9a a3       	std	Y+34, r25	; 0x22
    2256:	89 a3       	std	Y+33, r24	; 0x21
    2258:	0f c0       	rjmp	.+30     	; 0x2278 <LCD_voidInit_4bitMode+0x478>
    225a:	88 ec       	ldi	r24, 0xC8	; 200
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	98 a3       	std	Y+32, r25	; 0x20
    2260:	8f 8f       	std	Y+31, r24	; 0x1f
    2262:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2264:	98 a1       	ldd	r25, Y+32	; 0x20
    2266:	01 97       	sbiw	r24, 0x01	; 1
    2268:	f1 f7       	brne	.-4      	; 0x2266 <LCD_voidInit_4bitMode+0x466>
    226a:	98 a3       	std	Y+32, r25	; 0x20
    226c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    226e:	89 a1       	ldd	r24, Y+33	; 0x21
    2270:	9a a1       	ldd	r25, Y+34	; 0x22
    2272:	01 97       	sbiw	r24, 0x01	; 1
    2274:	9a a3       	std	Y+34, r25	; 0x22
    2276:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2278:	89 a1       	ldd	r24, Y+33	; 0x21
    227a:	9a a1       	ldd	r25, Y+34	; 0x22
    227c:	00 97       	sbiw	r24, 0x00	; 0
    227e:	69 f7       	brne	.-38     	; 0x225a <LCD_voidInit_4bitMode+0x45a>
    2280:	14 c0       	rjmp	.+40     	; 0x22aa <LCD_voidInit_4bitMode+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2282:	6b a1       	ldd	r22, Y+35	; 0x23
    2284:	7c a1       	ldd	r23, Y+36	; 0x24
    2286:	8d a1       	ldd	r24, Y+37	; 0x25
    2288:	9e a1       	ldd	r25, Y+38	; 0x26
    228a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	9a a3       	std	Y+34, r25	; 0x22
    2294:	89 a3       	std	Y+33, r24	; 0x21
    2296:	89 a1       	ldd	r24, Y+33	; 0x21
    2298:	9a a1       	ldd	r25, Y+34	; 0x22
    229a:	9e 8f       	std	Y+30, r25	; 0x1e
    229c:	8d 8f       	std	Y+29, r24	; 0x1d
    229e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22a2:	01 97       	sbiw	r24, 0x01	; 1
    22a4:	f1 f7       	brne	.-4      	; 0x22a2 <LCD_voidInit_4bitMode+0x4a2>
    22a6:	9e 8f       	std	Y+30, r25	; 0x1e
    22a8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand_4bitMode(lcd_Clear);
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendCommand_4bitMode>
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	a0 ea       	ldi	r26, 0xA0	; 160
    22b6:	b0 e4       	ldi	r27, 0x40	; 64
    22b8:	89 8f       	std	Y+25, r24	; 0x19
    22ba:	9a 8f       	std	Y+26, r25	; 0x1a
    22bc:	ab 8f       	std	Y+27, r26	; 0x1b
    22be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c0:	69 8d       	ldd	r22, Y+25	; 0x19
    22c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	4a ef       	ldi	r20, 0xFA	; 250
    22ce:	54 e4       	ldi	r21, 0x44	; 68
    22d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	8d 8b       	std	Y+21, r24	; 0x15
    22da:	9e 8b       	std	Y+22, r25	; 0x16
    22dc:	af 8b       	std	Y+23, r26	; 0x17
    22de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22e0:	6d 89       	ldd	r22, Y+21	; 0x15
    22e2:	7e 89       	ldd	r23, Y+22	; 0x16
    22e4:	8f 89       	ldd	r24, Y+23	; 0x17
    22e6:	98 8d       	ldd	r25, Y+24	; 0x18
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e8       	ldi	r20, 0x80	; 128
    22ee:	5f e3       	ldi	r21, 0x3F	; 63
    22f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22f4:	88 23       	and	r24, r24
    22f6:	2c f4       	brge	.+10     	; 0x2302 <LCD_voidInit_4bitMode+0x502>
		__ticks = 1;
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	9c 8b       	std	Y+20, r25	; 0x14
    22fe:	8b 8b       	std	Y+19, r24	; 0x13
    2300:	3f c0       	rjmp	.+126    	; 0x2380 <LCD_voidInit_4bitMode+0x580>
	else if (__tmp > 65535)
    2302:	6d 89       	ldd	r22, Y+21	; 0x15
    2304:	7e 89       	ldd	r23, Y+22	; 0x16
    2306:	8f 89       	ldd	r24, Y+23	; 0x17
    2308:	98 8d       	ldd	r25, Y+24	; 0x18
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	3f ef       	ldi	r19, 0xFF	; 255
    230e:	4f e7       	ldi	r20, 0x7F	; 127
    2310:	57 e4       	ldi	r21, 0x47	; 71
    2312:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2316:	18 16       	cp	r1, r24
    2318:	4c f5       	brge	.+82     	; 0x236c <LCD_voidInit_4bitMode+0x56c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    231a:	69 8d       	ldd	r22, Y+25	; 0x19
    231c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    231e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2320:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	40 e2       	ldi	r20, 0x20	; 32
    2328:	51 e4       	ldi	r21, 0x41	; 65
    232a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	bc 01       	movw	r22, r24
    2334:	cd 01       	movw	r24, r26
    2336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	9c 8b       	std	Y+20, r25	; 0x14
    2340:	8b 8b       	std	Y+19, r24	; 0x13
    2342:	0f c0       	rjmp	.+30     	; 0x2362 <LCD_voidInit_4bitMode+0x562>
    2344:	88 ec       	ldi	r24, 0xC8	; 200
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	9a 8b       	std	Y+18, r25	; 0x12
    234a:	89 8b       	std	Y+17, r24	; 0x11
    234c:	89 89       	ldd	r24, Y+17	; 0x11
    234e:	9a 89       	ldd	r25, Y+18	; 0x12
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f1 f7       	brne	.-4      	; 0x2350 <LCD_voidInit_4bitMode+0x550>
    2354:	9a 8b       	std	Y+18, r25	; 0x12
    2356:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2358:	8b 89       	ldd	r24, Y+19	; 0x13
    235a:	9c 89       	ldd	r25, Y+20	; 0x14
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	9c 8b       	std	Y+20, r25	; 0x14
    2360:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2362:	8b 89       	ldd	r24, Y+19	; 0x13
    2364:	9c 89       	ldd	r25, Y+20	; 0x14
    2366:	00 97       	sbiw	r24, 0x00	; 0
    2368:	69 f7       	brne	.-38     	; 0x2344 <LCD_voidInit_4bitMode+0x544>
    236a:	14 c0       	rjmp	.+40     	; 0x2394 <LCD_voidInit_4bitMode+0x594>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    236c:	6d 89       	ldd	r22, Y+21	; 0x15
    236e:	7e 89       	ldd	r23, Y+22	; 0x16
    2370:	8f 89       	ldd	r24, Y+23	; 0x17
    2372:	98 8d       	ldd	r25, Y+24	; 0x18
    2374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	9c 8b       	std	Y+20, r25	; 0x14
    237e:	8b 8b       	std	Y+19, r24	; 0x13
    2380:	8b 89       	ldd	r24, Y+19	; 0x13
    2382:	9c 89       	ldd	r25, Y+20	; 0x14
    2384:	98 8b       	std	Y+16, r25	; 0x10
    2386:	8f 87       	std	Y+15, r24	; 0x0f
    2388:	8f 85       	ldd	r24, Y+15	; 0x0f
    238a:	98 89       	ldd	r25, Y+16	; 0x10
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	f1 f7       	brne	.-4      	; 0x238c <LCD_voidInit_4bitMode+0x58c>
    2390:	98 8b       	std	Y+16, r25	; 0x10
    2392:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	LCD_voidSendCommand_4bitMode(lcd_EntryMode);
    2394:	86 e0       	ldi	r24, 0x06	; 6
    2396:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendCommand_4bitMode>
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	a0 ea       	ldi	r26, 0xA0	; 160
    23a0:	b0 e4       	ldi	r27, 0x40	; 64
    23a2:	8b 87       	std	Y+11, r24	; 0x0b
    23a4:	9c 87       	std	Y+12, r25	; 0x0c
    23a6:	ad 87       	std	Y+13, r26	; 0x0d
    23a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    23b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	4a ef       	ldi	r20, 0xFA	; 250
    23b8:	54 e4       	ldi	r21, 0x44	; 68
    23ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	8f 83       	std	Y+7, r24	; 0x07
    23c4:	98 87       	std	Y+8, r25	; 0x08
    23c6:	a9 87       	std	Y+9, r26	; 0x09
    23c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23ca:	6f 81       	ldd	r22, Y+7	; 0x07
    23cc:	78 85       	ldd	r23, Y+8	; 0x08
    23ce:	89 85       	ldd	r24, Y+9	; 0x09
    23d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	40 e8       	ldi	r20, 0x80	; 128
    23d8:	5f e3       	ldi	r21, 0x3F	; 63
    23da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23de:	88 23       	and	r24, r24
    23e0:	2c f4       	brge	.+10     	; 0x23ec <LCD_voidInit_4bitMode+0x5ec>
		__ticks = 1;
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	9e 83       	std	Y+6, r25	; 0x06
    23e8:	8d 83       	std	Y+5, r24	; 0x05
    23ea:	3f c0       	rjmp	.+126    	; 0x246a <LCD_voidInit_4bitMode+0x66a>
	else if (__tmp > 65535)
    23ec:	6f 81       	ldd	r22, Y+7	; 0x07
    23ee:	78 85       	ldd	r23, Y+8	; 0x08
    23f0:	89 85       	ldd	r24, Y+9	; 0x09
    23f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	3f ef       	ldi	r19, 0xFF	; 255
    23f8:	4f e7       	ldi	r20, 0x7F	; 127
    23fa:	57 e4       	ldi	r21, 0x47	; 71
    23fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2400:	18 16       	cp	r1, r24
    2402:	4c f5       	brge	.+82     	; 0x2456 <LCD_voidInit_4bitMode+0x656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2404:	6b 85       	ldd	r22, Y+11	; 0x0b
    2406:	7c 85       	ldd	r23, Y+12	; 0x0c
    2408:	8d 85       	ldd	r24, Y+13	; 0x0d
    240a:	9e 85       	ldd	r25, Y+14	; 0x0e
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	40 e2       	ldi	r20, 0x20	; 32
    2412:	51 e4       	ldi	r21, 0x41	; 65
    2414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	bc 01       	movw	r22, r24
    241e:	cd 01       	movw	r24, r26
    2420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	9e 83       	std	Y+6, r25	; 0x06
    242a:	8d 83       	std	Y+5, r24	; 0x05
    242c:	0f c0       	rjmp	.+30     	; 0x244c <LCD_voidInit_4bitMode+0x64c>
    242e:	88 ec       	ldi	r24, 0xC8	; 200
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	9c 83       	std	Y+4, r25	; 0x04
    2434:	8b 83       	std	Y+3, r24	; 0x03
    2436:	8b 81       	ldd	r24, Y+3	; 0x03
    2438:	9c 81       	ldd	r25, Y+4	; 0x04
    243a:	01 97       	sbiw	r24, 0x01	; 1
    243c:	f1 f7       	brne	.-4      	; 0x243a <LCD_voidInit_4bitMode+0x63a>
    243e:	9c 83       	std	Y+4, r25	; 0x04
    2440:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2442:	8d 81       	ldd	r24, Y+5	; 0x05
    2444:	9e 81       	ldd	r25, Y+6	; 0x06
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	9e 83       	std	Y+6, r25	; 0x06
    244a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244c:	8d 81       	ldd	r24, Y+5	; 0x05
    244e:	9e 81       	ldd	r25, Y+6	; 0x06
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	69 f7       	brne	.-38     	; 0x242e <LCD_voidInit_4bitMode+0x62e>
    2454:	14 c0       	rjmp	.+40     	; 0x247e <LCD_voidInit_4bitMode+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2456:	6f 81       	ldd	r22, Y+7	; 0x07
    2458:	78 85       	ldd	r23, Y+8	; 0x08
    245a:	89 85       	ldd	r24, Y+9	; 0x09
    245c:	9a 85       	ldd	r25, Y+10	; 0x0a
    245e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	9e 83       	std	Y+6, r25	; 0x06
    2468:	8d 83       	std	Y+5, r24	; 0x05
    246a:	8d 81       	ldd	r24, Y+5	; 0x05
    246c:	9e 81       	ldd	r25, Y+6	; 0x06
    246e:	9a 83       	std	Y+2, r25	; 0x02
    2470:	89 83       	std	Y+1, r24	; 0x01
    2472:	89 81       	ldd	r24, Y+1	; 0x01
    2474:	9a 81       	ldd	r25, Y+2	; 0x02
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	f1 f7       	brne	.-4      	; 0x2476 <LCD_voidInit_4bitMode+0x676>
    247a:	9a 83       	std	Y+2, r25	; 0x02
    247c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    247e:	cc 5a       	subi	r28, 0xAC	; 172
    2480:	df 4f       	sbci	r29, 0xFF	; 255
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	f8 94       	cli
    2486:	de bf       	out	0x3e, r29	; 62
    2488:	0f be       	out	0x3f, r0	; 63
    248a:	cd bf       	out	0x3d, r28	; 61
    248c:	cf 91       	pop	r28
    248e:	df 91       	pop	r29
    2490:	1f 91       	pop	r17
    2492:	0f 91       	pop	r16
    2494:	08 95       	ret

00002496 <LCD_voidSendCommand>:
void LCD_voidSendCommand(uint8 u8CmdCpy){
    2496:	df 93       	push	r29
    2498:	cf 93       	push	r28
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    249e:	2f 97       	sbiw	r28, 0x0f	; 15
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	f8 94       	cli
    24a4:	de bf       	out	0x3e, r29	; 62
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	cd bf       	out	0x3d, r28	; 61
    24aa:	8f 87       	std	Y+15, r24	; 0x0f
	/* Command(0) or Data(1) */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_RSPIN, DIO_LOW);
    24ac:	83 e0       	ldi	r24, 0x03	; 3
    24ae:	62 e0       	ldi	r22, 0x02	; 2
    24b0:	40 e0       	ldi	r20, 0x00	; 0
    24b2:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
	/* Read(1) or Write(0) */
	//DIO_voidWritePin(lcd_CONTROLPORT, lcd_RWPIN, DIO_LOW);
	/* Write Commands on Data Pins*/
	DIO_voidWritePort(lcd_DATAPORT, u8CmdCpy);
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	6f 85       	ldd	r22, Y+15	; 0x0f
    24ba:	0e 94 97 21 	call	0x432e	; 0x432e <DIO_voidWritePort>
	/* Enable Sequence */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    24be:	83 e0       	ldi	r24, 0x03	; 3
    24c0:	63 e0       	ldi	r22, 0x03	; 3
    24c2:	41 e0       	ldi	r20, 0x01	; 1
    24c4:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	a0 ea       	ldi	r26, 0xA0	; 160
    24ce:	b0 e4       	ldi	r27, 0x40	; 64
    24d0:	8b 87       	std	Y+11, r24	; 0x0b
    24d2:	9c 87       	std	Y+12, r25	; 0x0c
    24d4:	ad 87       	std	Y+13, r26	; 0x0d
    24d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24da:	7c 85       	ldd	r23, Y+12	; 0x0c
    24dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24de:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	4a ef       	ldi	r20, 0xFA	; 250
    24e6:	54 e4       	ldi	r21, 0x44	; 68
    24e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	8f 83       	std	Y+7, r24	; 0x07
    24f2:	98 87       	std	Y+8, r25	; 0x08
    24f4:	a9 87       	std	Y+9, r26	; 0x09
    24f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24f8:	6f 81       	ldd	r22, Y+7	; 0x07
    24fa:	78 85       	ldd	r23, Y+8	; 0x08
    24fc:	89 85       	ldd	r24, Y+9	; 0x09
    24fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	40 e8       	ldi	r20, 0x80	; 128
    2506:	5f e3       	ldi	r21, 0x3F	; 63
    2508:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    250c:	88 23       	and	r24, r24
    250e:	2c f4       	brge	.+10     	; 0x251a <LCD_voidSendCommand+0x84>
		__ticks = 1;
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	9e 83       	std	Y+6, r25	; 0x06
    2516:	8d 83       	std	Y+5, r24	; 0x05
    2518:	3f c0       	rjmp	.+126    	; 0x2598 <LCD_voidSendCommand+0x102>
	else if (__tmp > 65535)
    251a:	6f 81       	ldd	r22, Y+7	; 0x07
    251c:	78 85       	ldd	r23, Y+8	; 0x08
    251e:	89 85       	ldd	r24, Y+9	; 0x09
    2520:	9a 85       	ldd	r25, Y+10	; 0x0a
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	3f ef       	ldi	r19, 0xFF	; 255
    2526:	4f e7       	ldi	r20, 0x7F	; 127
    2528:	57 e4       	ldi	r21, 0x47	; 71
    252a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    252e:	18 16       	cp	r1, r24
    2530:	4c f5       	brge	.+82     	; 0x2584 <LCD_voidSendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2532:	6b 85       	ldd	r22, Y+11	; 0x0b
    2534:	7c 85       	ldd	r23, Y+12	; 0x0c
    2536:	8d 85       	ldd	r24, Y+13	; 0x0d
    2538:	9e 85       	ldd	r25, Y+14	; 0x0e
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	40 e2       	ldi	r20, 0x20	; 32
    2540:	51 e4       	ldi	r21, 0x41	; 65
    2542:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	bc 01       	movw	r22, r24
    254c:	cd 01       	movw	r24, r26
    254e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	9e 83       	std	Y+6, r25	; 0x06
    2558:	8d 83       	std	Y+5, r24	; 0x05
    255a:	0f c0       	rjmp	.+30     	; 0x257a <LCD_voidSendCommand+0xe4>
    255c:	88 ec       	ldi	r24, 0xC8	; 200
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	9c 83       	std	Y+4, r25	; 0x04
    2562:	8b 83       	std	Y+3, r24	; 0x03
    2564:	8b 81       	ldd	r24, Y+3	; 0x03
    2566:	9c 81       	ldd	r25, Y+4	; 0x04
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	f1 f7       	brne	.-4      	; 0x2568 <LCD_voidSendCommand+0xd2>
    256c:	9c 83       	std	Y+4, r25	; 0x04
    256e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2570:	8d 81       	ldd	r24, Y+5	; 0x05
    2572:	9e 81       	ldd	r25, Y+6	; 0x06
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	9e 83       	std	Y+6, r25	; 0x06
    2578:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257a:	8d 81       	ldd	r24, Y+5	; 0x05
    257c:	9e 81       	ldd	r25, Y+6	; 0x06
    257e:	00 97       	sbiw	r24, 0x00	; 0
    2580:	69 f7       	brne	.-38     	; 0x255c <LCD_voidSendCommand+0xc6>
    2582:	14 c0       	rjmp	.+40     	; 0x25ac <LCD_voidSendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2584:	6f 81       	ldd	r22, Y+7	; 0x07
    2586:	78 85       	ldd	r23, Y+8	; 0x08
    2588:	89 85       	ldd	r24, Y+9	; 0x09
    258a:	9a 85       	ldd	r25, Y+10	; 0x0a
    258c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	9e 83       	std	Y+6, r25	; 0x06
    2596:	8d 83       	std	Y+5, r24	; 0x05
    2598:	8d 81       	ldd	r24, Y+5	; 0x05
    259a:	9e 81       	ldd	r25, Y+6	; 0x06
    259c:	9a 83       	std	Y+2, r25	; 0x02
    259e:	89 83       	std	Y+1, r24	; 0x01
    25a0:	89 81       	ldd	r24, Y+1	; 0x01
    25a2:	9a 81       	ldd	r25, Y+2	; 0x02
    25a4:	01 97       	sbiw	r24, 0x01	; 1
    25a6:	f1 f7       	brne	.-4      	; 0x25a4 <LCD_voidSendCommand+0x10e>
    25a8:	9a 83       	std	Y+2, r25	; 0x02
    25aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    25ac:	83 e0       	ldi	r24, 0x03	; 3
    25ae:	63 e0       	ldi	r22, 0x03	; 3
    25b0:	40 e0       	ldi	r20, 0x00	; 0
    25b2:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
}
    25b6:	2f 96       	adiw	r28, 0x0f	; 15
    25b8:	0f b6       	in	r0, 0x3f	; 63
    25ba:	f8 94       	cli
    25bc:	de bf       	out	0x3e, r29	; 62
    25be:	0f be       	out	0x3f, r0	; 63
    25c0:	cd bf       	out	0x3d, r28	; 61
    25c2:	cf 91       	pop	r28
    25c4:	df 91       	pop	r29
    25c6:	08 95       	ret

000025c8 <LCD_voidSendCommand_4bitMode>:

void LCD_voidSendCommand_4bitMode(uint8 u8CmdCpy){
    25c8:	df 93       	push	r29
    25ca:	cf 93       	push	r28
    25cc:	cd b7       	in	r28, 0x3d	; 61
    25ce:	de b7       	in	r29, 0x3e	; 62
    25d0:	e9 97       	sbiw	r28, 0x39	; 57
    25d2:	0f b6       	in	r0, 0x3f	; 63
    25d4:	f8 94       	cli
    25d6:	de bf       	out	0x3e, r29	; 62
    25d8:	0f be       	out	0x3f, r0	; 63
    25da:	cd bf       	out	0x3d, r28	; 61
    25dc:	89 af       	std	Y+57, r24	; 0x39
    /* Send Higher nibble of command */
    DIO_voidWritePort(lcd_DATAPORT, (lcd_DATAPORT & 0x0F) | (u8CmdCpy & 0xF0));
    25de:	89 ad       	ldd	r24, Y+57	; 0x39
    25e0:	80 7f       	andi	r24, 0xF0	; 240
    25e2:	81 60       	ori	r24, 0x01	; 1
    25e4:	98 2f       	mov	r25, r24
    25e6:	81 e0       	ldi	r24, 0x01	; 1
    25e8:	69 2f       	mov	r22, r25
    25ea:	0e 94 97 21 	call	0x432e	; 0x432e <DIO_voidWritePort>
    /* Command(0) or Data(1) */
    DIO_voidWritePin(lcd_CONTROLPORT, lcd_RSPIN, DIO_LOW);
    25ee:	83 e0       	ldi	r24, 0x03	; 3
    25f0:	62 e0       	ldi	r22, 0x02	; 2
    25f2:	40 e0       	ldi	r20, 0x00	; 0
    25f4:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
    /* Read(1) or Write(0) */
    //DIO_voidWritePin(lcd_CONTROLPORT, lcd_RWPIN, DIO_LOW);

    /* Enable Sequence */
    DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    25f8:	83 e0       	ldi	r24, 0x03	; 3
    25fa:	63 e0       	ldi	r22, 0x03	; 3
    25fc:	41 e0       	ldi	r20, 0x01	; 1
    25fe:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
    2602:	80 e0       	ldi	r24, 0x00	; 0
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	a0 ea       	ldi	r26, 0xA0	; 160
    2608:	b0 e4       	ldi	r27, 0x40	; 64
    260a:	8d ab       	std	Y+53, r24	; 0x35
    260c:	9e ab       	std	Y+54, r25	; 0x36
    260e:	af ab       	std	Y+55, r26	; 0x37
    2610:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2612:	6d a9       	ldd	r22, Y+53	; 0x35
    2614:	7e a9       	ldd	r23, Y+54	; 0x36
    2616:	8f a9       	ldd	r24, Y+55	; 0x37
    2618:	98 ad       	ldd	r25, Y+56	; 0x38
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	4a ef       	ldi	r20, 0xFA	; 250
    2620:	54 e4       	ldi	r21, 0x44	; 68
    2622:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	89 ab       	std	Y+49, r24	; 0x31
    262c:	9a ab       	std	Y+50, r25	; 0x32
    262e:	ab ab       	std	Y+51, r26	; 0x33
    2630:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2632:	69 a9       	ldd	r22, Y+49	; 0x31
    2634:	7a a9       	ldd	r23, Y+50	; 0x32
    2636:	8b a9       	ldd	r24, Y+51	; 0x33
    2638:	9c a9       	ldd	r25, Y+52	; 0x34
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e8       	ldi	r20, 0x80	; 128
    2640:	5f e3       	ldi	r21, 0x3F	; 63
    2642:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2646:	88 23       	and	r24, r24
    2648:	2c f4       	brge	.+10     	; 0x2654 <LCD_voidSendCommand_4bitMode+0x8c>
		__ticks = 1;
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	98 ab       	std	Y+48, r25	; 0x30
    2650:	8f a7       	std	Y+47, r24	; 0x2f
    2652:	3f c0       	rjmp	.+126    	; 0x26d2 <LCD_voidSendCommand_4bitMode+0x10a>
	else if (__tmp > 65535)
    2654:	69 a9       	ldd	r22, Y+49	; 0x31
    2656:	7a a9       	ldd	r23, Y+50	; 0x32
    2658:	8b a9       	ldd	r24, Y+51	; 0x33
    265a:	9c a9       	ldd	r25, Y+52	; 0x34
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	3f ef       	ldi	r19, 0xFF	; 255
    2660:	4f e7       	ldi	r20, 0x7F	; 127
    2662:	57 e4       	ldi	r21, 0x47	; 71
    2664:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2668:	18 16       	cp	r1, r24
    266a:	4c f5       	brge	.+82     	; 0x26be <LCD_voidSendCommand_4bitMode+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266c:	6d a9       	ldd	r22, Y+53	; 0x35
    266e:	7e a9       	ldd	r23, Y+54	; 0x36
    2670:	8f a9       	ldd	r24, Y+55	; 0x37
    2672:	98 ad       	ldd	r25, Y+56	; 0x38
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	40 e2       	ldi	r20, 0x20	; 32
    267a:	51 e4       	ldi	r21, 0x41	; 65
    267c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	bc 01       	movw	r22, r24
    2686:	cd 01       	movw	r24, r26
    2688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	98 ab       	std	Y+48, r25	; 0x30
    2692:	8f a7       	std	Y+47, r24	; 0x2f
    2694:	0f c0       	rjmp	.+30     	; 0x26b4 <LCD_voidSendCommand_4bitMode+0xec>
    2696:	88 ec       	ldi	r24, 0xC8	; 200
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	9e a7       	std	Y+46, r25	; 0x2e
    269c:	8d a7       	std	Y+45, r24	; 0x2d
    269e:	8d a5       	ldd	r24, Y+45	; 0x2d
    26a0:	9e a5       	ldd	r25, Y+46	; 0x2e
    26a2:	01 97       	sbiw	r24, 0x01	; 1
    26a4:	f1 f7       	brne	.-4      	; 0x26a2 <LCD_voidSendCommand_4bitMode+0xda>
    26a6:	9e a7       	std	Y+46, r25	; 0x2e
    26a8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    26ac:	98 a9       	ldd	r25, Y+48	; 0x30
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	98 ab       	std	Y+48, r25	; 0x30
    26b2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    26b6:	98 a9       	ldd	r25, Y+48	; 0x30
    26b8:	00 97       	sbiw	r24, 0x00	; 0
    26ba:	69 f7       	brne	.-38     	; 0x2696 <LCD_voidSendCommand_4bitMode+0xce>
    26bc:	14 c0       	rjmp	.+40     	; 0x26e6 <LCD_voidSendCommand_4bitMode+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26be:	69 a9       	ldd	r22, Y+49	; 0x31
    26c0:	7a a9       	ldd	r23, Y+50	; 0x32
    26c2:	8b a9       	ldd	r24, Y+51	; 0x33
    26c4:	9c a9       	ldd	r25, Y+52	; 0x34
    26c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	98 ab       	std	Y+48, r25	; 0x30
    26d0:	8f a7       	std	Y+47, r24	; 0x2f
    26d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    26d4:	98 a9       	ldd	r25, Y+48	; 0x30
    26d6:	9c a7       	std	Y+44, r25	; 0x2c
    26d8:	8b a7       	std	Y+43, r24	; 0x2b
    26da:	8b a5       	ldd	r24, Y+43	; 0x2b
    26dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    26de:	01 97       	sbiw	r24, 0x01	; 1
    26e0:	f1 f7       	brne	.-4      	; 0x26de <LCD_voidSendCommand_4bitMode+0x116>
    26e2:	9c a7       	std	Y+44, r25	; 0x2c
    26e4:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(5);
    DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    26e6:	83 e0       	ldi	r24, 0x03	; 3
    26e8:	63 e0       	ldi	r22, 0x03	; 3
    26ea:	40 e0       	ldi	r20, 0x00	; 0
    26ec:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	a0 e2       	ldi	r26, 0x20	; 32
    26f6:	b1 e4       	ldi	r27, 0x41	; 65
    26f8:	8f a3       	std	Y+39, r24	; 0x27
    26fa:	98 a7       	std	Y+40, r25	; 0x28
    26fc:	a9 a7       	std	Y+41, r26	; 0x29
    26fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2700:	6f a1       	ldd	r22, Y+39	; 0x27
    2702:	78 a5       	ldd	r23, Y+40	; 0x28
    2704:	89 a5       	ldd	r24, Y+41	; 0x29
    2706:	9a a5       	ldd	r25, Y+42	; 0x2a
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	4a ef       	ldi	r20, 0xFA	; 250
    270e:	54 e4       	ldi	r21, 0x44	; 68
    2710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	8b a3       	std	Y+35, r24	; 0x23
    271a:	9c a3       	std	Y+36, r25	; 0x24
    271c:	ad a3       	std	Y+37, r26	; 0x25
    271e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2720:	6b a1       	ldd	r22, Y+35	; 0x23
    2722:	7c a1       	ldd	r23, Y+36	; 0x24
    2724:	8d a1       	ldd	r24, Y+37	; 0x25
    2726:	9e a1       	ldd	r25, Y+38	; 0x26
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	40 e8       	ldi	r20, 0x80	; 128
    272e:	5f e3       	ldi	r21, 0x3F	; 63
    2730:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2734:	88 23       	and	r24, r24
    2736:	2c f4       	brge	.+10     	; 0x2742 <LCD_voidSendCommand_4bitMode+0x17a>
		__ticks = 1;
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	9a a3       	std	Y+34, r25	; 0x22
    273e:	89 a3       	std	Y+33, r24	; 0x21
    2740:	3f c0       	rjmp	.+126    	; 0x27c0 <LCD_voidSendCommand_4bitMode+0x1f8>
	else if (__tmp > 65535)
    2742:	6b a1       	ldd	r22, Y+35	; 0x23
    2744:	7c a1       	ldd	r23, Y+36	; 0x24
    2746:	8d a1       	ldd	r24, Y+37	; 0x25
    2748:	9e a1       	ldd	r25, Y+38	; 0x26
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	3f ef       	ldi	r19, 0xFF	; 255
    274e:	4f e7       	ldi	r20, 0x7F	; 127
    2750:	57 e4       	ldi	r21, 0x47	; 71
    2752:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2756:	18 16       	cp	r1, r24
    2758:	4c f5       	brge	.+82     	; 0x27ac <LCD_voidSendCommand_4bitMode+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275a:	6f a1       	ldd	r22, Y+39	; 0x27
    275c:	78 a5       	ldd	r23, Y+40	; 0x28
    275e:	89 a5       	ldd	r24, Y+41	; 0x29
    2760:	9a a5       	ldd	r25, Y+42	; 0x2a
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	40 e2       	ldi	r20, 0x20	; 32
    2768:	51 e4       	ldi	r21, 0x41	; 65
    276a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	bc 01       	movw	r22, r24
    2774:	cd 01       	movw	r24, r26
    2776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	9a a3       	std	Y+34, r25	; 0x22
    2780:	89 a3       	std	Y+33, r24	; 0x21
    2782:	0f c0       	rjmp	.+30     	; 0x27a2 <LCD_voidSendCommand_4bitMode+0x1da>
    2784:	88 ec       	ldi	r24, 0xC8	; 200
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	98 a3       	std	Y+32, r25	; 0x20
    278a:	8f 8f       	std	Y+31, r24	; 0x1f
    278c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    278e:	98 a1       	ldd	r25, Y+32	; 0x20
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	f1 f7       	brne	.-4      	; 0x2790 <LCD_voidSendCommand_4bitMode+0x1c8>
    2794:	98 a3       	std	Y+32, r25	; 0x20
    2796:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2798:	89 a1       	ldd	r24, Y+33	; 0x21
    279a:	9a a1       	ldd	r25, Y+34	; 0x22
    279c:	01 97       	sbiw	r24, 0x01	; 1
    279e:	9a a3       	std	Y+34, r25	; 0x22
    27a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a2:	89 a1       	ldd	r24, Y+33	; 0x21
    27a4:	9a a1       	ldd	r25, Y+34	; 0x22
    27a6:	00 97       	sbiw	r24, 0x00	; 0
    27a8:	69 f7       	brne	.-38     	; 0x2784 <LCD_voidSendCommand_4bitMode+0x1bc>
    27aa:	14 c0       	rjmp	.+40     	; 0x27d4 <LCD_voidSendCommand_4bitMode+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ac:	6b a1       	ldd	r22, Y+35	; 0x23
    27ae:	7c a1       	ldd	r23, Y+36	; 0x24
    27b0:	8d a1       	ldd	r24, Y+37	; 0x25
    27b2:	9e a1       	ldd	r25, Y+38	; 0x26
    27b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	9a a3       	std	Y+34, r25	; 0x22
    27be:	89 a3       	std	Y+33, r24	; 0x21
    27c0:	89 a1       	ldd	r24, Y+33	; 0x21
    27c2:	9a a1       	ldd	r25, Y+34	; 0x22
    27c4:	9e 8f       	std	Y+30, r25	; 0x1e
    27c6:	8d 8f       	std	Y+29, r24	; 0x1d
    27c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27cc:	01 97       	sbiw	r24, 0x01	; 1
    27ce:	f1 f7       	brne	.-4      	; 0x27cc <LCD_voidSendCommand_4bitMode+0x204>
    27d0:	9e 8f       	std	Y+30, r25	; 0x1e
    27d2:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(10);

    /* Send Lower nibble of command */
    DIO_voidWritePort(lcd_DATAPORT, (lcd_DATAPORT & 0x0F) | (u8CmdCpy <<4));
    27d4:	89 ad       	ldd	r24, Y+57	; 0x39
    27d6:	88 2f       	mov	r24, r24
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	82 95       	swap	r24
    27dc:	92 95       	swap	r25
    27de:	90 7f       	andi	r25, 0xF0	; 240
    27e0:	98 27       	eor	r25, r24
    27e2:	80 7f       	andi	r24, 0xF0	; 240
    27e4:	98 27       	eor	r25, r24
    27e6:	81 60       	ori	r24, 0x01	; 1
    27e8:	98 2f       	mov	r25, r24
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	69 2f       	mov	r22, r25
    27ee:	0e 94 97 21 	call	0x432e	; 0x432e <DIO_voidWritePort>
    /* Enable Sequence */
    DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    27f2:	83 e0       	ldi	r24, 0x03	; 3
    27f4:	63 e0       	ldi	r22, 0x03	; 3
    27f6:	41 e0       	ldi	r20, 0x01	; 1
    27f8:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	a0 ea       	ldi	r26, 0xA0	; 160
    2802:	b0 e4       	ldi	r27, 0x40	; 64
    2804:	89 8f       	std	Y+25, r24	; 0x19
    2806:	9a 8f       	std	Y+26, r25	; 0x1a
    2808:	ab 8f       	std	Y+27, r26	; 0x1b
    280a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    280c:	69 8d       	ldd	r22, Y+25	; 0x19
    280e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2810:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2812:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	4a ef       	ldi	r20, 0xFA	; 250
    281a:	54 e4       	ldi	r21, 0x44	; 68
    281c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	8d 8b       	std	Y+21, r24	; 0x15
    2826:	9e 8b       	std	Y+22, r25	; 0x16
    2828:	af 8b       	std	Y+23, r26	; 0x17
    282a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    282c:	6d 89       	ldd	r22, Y+21	; 0x15
    282e:	7e 89       	ldd	r23, Y+22	; 0x16
    2830:	8f 89       	ldd	r24, Y+23	; 0x17
    2832:	98 8d       	ldd	r25, Y+24	; 0x18
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	40 e8       	ldi	r20, 0x80	; 128
    283a:	5f e3       	ldi	r21, 0x3F	; 63
    283c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2840:	88 23       	and	r24, r24
    2842:	2c f4       	brge	.+10     	; 0x284e <LCD_voidSendCommand_4bitMode+0x286>
		__ticks = 1;
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	9c 8b       	std	Y+20, r25	; 0x14
    284a:	8b 8b       	std	Y+19, r24	; 0x13
    284c:	3f c0       	rjmp	.+126    	; 0x28cc <LCD_voidSendCommand_4bitMode+0x304>
	else if (__tmp > 65535)
    284e:	6d 89       	ldd	r22, Y+21	; 0x15
    2850:	7e 89       	ldd	r23, Y+22	; 0x16
    2852:	8f 89       	ldd	r24, Y+23	; 0x17
    2854:	98 8d       	ldd	r25, Y+24	; 0x18
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	3f ef       	ldi	r19, 0xFF	; 255
    285a:	4f e7       	ldi	r20, 0x7F	; 127
    285c:	57 e4       	ldi	r21, 0x47	; 71
    285e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2862:	18 16       	cp	r1, r24
    2864:	4c f5       	brge	.+82     	; 0x28b8 <LCD_voidSendCommand_4bitMode+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2866:	69 8d       	ldd	r22, Y+25	; 0x19
    2868:	7a 8d       	ldd	r23, Y+26	; 0x1a
    286a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    286c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	40 e2       	ldi	r20, 0x20	; 32
    2874:	51 e4       	ldi	r21, 0x41	; 65
    2876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	bc 01       	movw	r22, r24
    2880:	cd 01       	movw	r24, r26
    2882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	9c 8b       	std	Y+20, r25	; 0x14
    288c:	8b 8b       	std	Y+19, r24	; 0x13
    288e:	0f c0       	rjmp	.+30     	; 0x28ae <LCD_voidSendCommand_4bitMode+0x2e6>
    2890:	88 ec       	ldi	r24, 0xC8	; 200
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	9a 8b       	std	Y+18, r25	; 0x12
    2896:	89 8b       	std	Y+17, r24	; 0x11
    2898:	89 89       	ldd	r24, Y+17	; 0x11
    289a:	9a 89       	ldd	r25, Y+18	; 0x12
    289c:	01 97       	sbiw	r24, 0x01	; 1
    289e:	f1 f7       	brne	.-4      	; 0x289c <LCD_voidSendCommand_4bitMode+0x2d4>
    28a0:	9a 8b       	std	Y+18, r25	; 0x12
    28a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a4:	8b 89       	ldd	r24, Y+19	; 0x13
    28a6:	9c 89       	ldd	r25, Y+20	; 0x14
    28a8:	01 97       	sbiw	r24, 0x01	; 1
    28aa:	9c 8b       	std	Y+20, r25	; 0x14
    28ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ae:	8b 89       	ldd	r24, Y+19	; 0x13
    28b0:	9c 89       	ldd	r25, Y+20	; 0x14
    28b2:	00 97       	sbiw	r24, 0x00	; 0
    28b4:	69 f7       	brne	.-38     	; 0x2890 <LCD_voidSendCommand_4bitMode+0x2c8>
    28b6:	14 c0       	rjmp	.+40     	; 0x28e0 <LCD_voidSendCommand_4bitMode+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b8:	6d 89       	ldd	r22, Y+21	; 0x15
    28ba:	7e 89       	ldd	r23, Y+22	; 0x16
    28bc:	8f 89       	ldd	r24, Y+23	; 0x17
    28be:	98 8d       	ldd	r25, Y+24	; 0x18
    28c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	9c 8b       	std	Y+20, r25	; 0x14
    28ca:	8b 8b       	std	Y+19, r24	; 0x13
    28cc:	8b 89       	ldd	r24, Y+19	; 0x13
    28ce:	9c 89       	ldd	r25, Y+20	; 0x14
    28d0:	98 8b       	std	Y+16, r25	; 0x10
    28d2:	8f 87       	std	Y+15, r24	; 0x0f
    28d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    28d6:	98 89       	ldd	r25, Y+16	; 0x10
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	f1 f7       	brne	.-4      	; 0x28d8 <LCD_voidSendCommand_4bitMode+0x310>
    28dc:	98 8b       	std	Y+16, r25	; 0x10
    28de:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(5);
    DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    28e0:	83 e0       	ldi	r24, 0x03	; 3
    28e2:	63 e0       	ldi	r22, 0x03	; 3
    28e4:	40 e0       	ldi	r20, 0x00	; 0
    28e6:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	a0 ea       	ldi	r26, 0xA0	; 160
    28f0:	b0 e4       	ldi	r27, 0x40	; 64
    28f2:	8b 87       	std	Y+11, r24	; 0x0b
    28f4:	9c 87       	std	Y+12, r25	; 0x0c
    28f6:	ad 87       	std	Y+13, r26	; 0x0d
    28f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    28fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    28fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2900:	9e 85       	ldd	r25, Y+14	; 0x0e
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	4a ef       	ldi	r20, 0xFA	; 250
    2908:	54 e4       	ldi	r21, 0x44	; 68
    290a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	8f 83       	std	Y+7, r24	; 0x07
    2914:	98 87       	std	Y+8, r25	; 0x08
    2916:	a9 87       	std	Y+9, r26	; 0x09
    2918:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    291a:	6f 81       	ldd	r22, Y+7	; 0x07
    291c:	78 85       	ldd	r23, Y+8	; 0x08
    291e:	89 85       	ldd	r24, Y+9	; 0x09
    2920:	9a 85       	ldd	r25, Y+10	; 0x0a
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	40 e8       	ldi	r20, 0x80	; 128
    2928:	5f e3       	ldi	r21, 0x3F	; 63
    292a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    292e:	88 23       	and	r24, r24
    2930:	2c f4       	brge	.+10     	; 0x293c <LCD_voidSendCommand_4bitMode+0x374>
		__ticks = 1;
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	9e 83       	std	Y+6, r25	; 0x06
    2938:	8d 83       	std	Y+5, r24	; 0x05
    293a:	3f c0       	rjmp	.+126    	; 0x29ba <LCD_voidSendCommand_4bitMode+0x3f2>
	else if (__tmp > 65535)
    293c:	6f 81       	ldd	r22, Y+7	; 0x07
    293e:	78 85       	ldd	r23, Y+8	; 0x08
    2940:	89 85       	ldd	r24, Y+9	; 0x09
    2942:	9a 85       	ldd	r25, Y+10	; 0x0a
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	3f ef       	ldi	r19, 0xFF	; 255
    2948:	4f e7       	ldi	r20, 0x7F	; 127
    294a:	57 e4       	ldi	r21, 0x47	; 71
    294c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2950:	18 16       	cp	r1, r24
    2952:	4c f5       	brge	.+82     	; 0x29a6 <LCD_voidSendCommand_4bitMode+0x3de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2954:	6b 85       	ldd	r22, Y+11	; 0x0b
    2956:	7c 85       	ldd	r23, Y+12	; 0x0c
    2958:	8d 85       	ldd	r24, Y+13	; 0x0d
    295a:	9e 85       	ldd	r25, Y+14	; 0x0e
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	40 e2       	ldi	r20, 0x20	; 32
    2962:	51 e4       	ldi	r21, 0x41	; 65
    2964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	bc 01       	movw	r22, r24
    296e:	cd 01       	movw	r24, r26
    2970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	9e 83       	std	Y+6, r25	; 0x06
    297a:	8d 83       	std	Y+5, r24	; 0x05
    297c:	0f c0       	rjmp	.+30     	; 0x299c <LCD_voidSendCommand_4bitMode+0x3d4>
    297e:	88 ec       	ldi	r24, 0xC8	; 200
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	9c 83       	std	Y+4, r25	; 0x04
    2984:	8b 83       	std	Y+3, r24	; 0x03
    2986:	8b 81       	ldd	r24, Y+3	; 0x03
    2988:	9c 81       	ldd	r25, Y+4	; 0x04
    298a:	01 97       	sbiw	r24, 0x01	; 1
    298c:	f1 f7       	brne	.-4      	; 0x298a <LCD_voidSendCommand_4bitMode+0x3c2>
    298e:	9c 83       	std	Y+4, r25	; 0x04
    2990:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2992:	8d 81       	ldd	r24, Y+5	; 0x05
    2994:	9e 81       	ldd	r25, Y+6	; 0x06
    2996:	01 97       	sbiw	r24, 0x01	; 1
    2998:	9e 83       	std	Y+6, r25	; 0x06
    299a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    299c:	8d 81       	ldd	r24, Y+5	; 0x05
    299e:	9e 81       	ldd	r25, Y+6	; 0x06
    29a0:	00 97       	sbiw	r24, 0x00	; 0
    29a2:	69 f7       	brne	.-38     	; 0x297e <LCD_voidSendCommand_4bitMode+0x3b6>
    29a4:	14 c0       	rjmp	.+40     	; 0x29ce <LCD_voidSendCommand_4bitMode+0x406>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a6:	6f 81       	ldd	r22, Y+7	; 0x07
    29a8:	78 85       	ldd	r23, Y+8	; 0x08
    29aa:	89 85       	ldd	r24, Y+9	; 0x09
    29ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	9e 83       	std	Y+6, r25	; 0x06
    29b8:	8d 83       	std	Y+5, r24	; 0x05
    29ba:	8d 81       	ldd	r24, Y+5	; 0x05
    29bc:	9e 81       	ldd	r25, Y+6	; 0x06
    29be:	9a 83       	std	Y+2, r25	; 0x02
    29c0:	89 83       	std	Y+1, r24	; 0x01
    29c2:	89 81       	ldd	r24, Y+1	; 0x01
    29c4:	9a 81       	ldd	r25, Y+2	; 0x02
    29c6:	01 97       	sbiw	r24, 0x01	; 1
    29c8:	f1 f7       	brne	.-4      	; 0x29c6 <LCD_voidSendCommand_4bitMode+0x3fe>
    29ca:	9a 83       	std	Y+2, r25	; 0x02
    29cc:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(5);
}
    29ce:	e9 96       	adiw	r28, 0x39	; 57
    29d0:	0f b6       	in	r0, 0x3f	; 63
    29d2:	f8 94       	cli
    29d4:	de bf       	out	0x3e, r29	; 62
    29d6:	0f be       	out	0x3f, r0	; 63
    29d8:	cd bf       	out	0x3d, r28	; 61
    29da:	cf 91       	pop	r28
    29dc:	df 91       	pop	r29
    29de:	08 95       	ret

000029e0 <LCD_voidWriteCharctr>:


void LCD_voidWriteCharctr(uint8 u8DataCpy){		//LCD_voidWriteCharctr('A')
    29e0:	df 93       	push	r29
    29e2:	cf 93       	push	r28
    29e4:	cd b7       	in	r28, 0x3d	; 61
    29e6:	de b7       	in	r29, 0x3e	; 62
    29e8:	2f 97       	sbiw	r28, 0x0f	; 15
    29ea:	0f b6       	in	r0, 0x3f	; 63
    29ec:	f8 94       	cli
    29ee:	de bf       	out	0x3e, r29	; 62
    29f0:	0f be       	out	0x3f, r0	; 63
    29f2:	cd bf       	out	0x3d, r28	; 61
    29f4:	8f 87       	std	Y+15, r24	; 0x0f
	/* Command(0) or Data(1) */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_RSPIN, DIO_HIGH);
    29f6:	83 e0       	ldi	r24, 0x03	; 3
    29f8:	62 e0       	ldi	r22, 0x02	; 2
    29fa:	41 e0       	ldi	r20, 0x01	; 1
    29fc:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
	/* Read(1) or Write(0) */
	//DIO_voidWritePin(lcd_CONTROLPORT, lcd_RWPIN, DIO_LOW);
	/* Write Data on Data Pins*/
	DIO_voidWritePort(lcd_DATAPORT, u8DataCpy);
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	6f 85       	ldd	r22, Y+15	; 0x0f
    2a04:	0e 94 97 21 	call	0x432e	; 0x432e <DIO_voidWritePort>
	/* Enable Sequence */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    2a08:	83 e0       	ldi	r24, 0x03	; 3
    2a0a:	63 e0       	ldi	r22, 0x03	; 3
    2a0c:	41 e0       	ldi	r20, 0x01	; 1
    2a0e:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	a0 ea       	ldi	r26, 0xA0	; 160
    2a18:	b0 e4       	ldi	r27, 0x40	; 64
    2a1a:	8b 87       	std	Y+11, r24	; 0x0b
    2a1c:	9c 87       	std	Y+12, r25	; 0x0c
    2a1e:	ad 87       	std	Y+13, r26	; 0x0d
    2a20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a22:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a24:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a26:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a28:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	4a ef       	ldi	r20, 0xFA	; 250
    2a30:	54 e4       	ldi	r21, 0x44	; 68
    2a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	8f 83       	std	Y+7, r24	; 0x07
    2a3c:	98 87       	std	Y+8, r25	; 0x08
    2a3e:	a9 87       	std	Y+9, r26	; 0x09
    2a40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a42:	6f 81       	ldd	r22, Y+7	; 0x07
    2a44:	78 85       	ldd	r23, Y+8	; 0x08
    2a46:	89 85       	ldd	r24, Y+9	; 0x09
    2a48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	40 e8       	ldi	r20, 0x80	; 128
    2a50:	5f e3       	ldi	r21, 0x3F	; 63
    2a52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a56:	88 23       	and	r24, r24
    2a58:	2c f4       	brge	.+10     	; 0x2a64 <LCD_voidWriteCharctr+0x84>
		__ticks = 1;
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	9e 83       	std	Y+6, r25	; 0x06
    2a60:	8d 83       	std	Y+5, r24	; 0x05
    2a62:	3f c0       	rjmp	.+126    	; 0x2ae2 <LCD_voidWriteCharctr+0x102>
	else if (__tmp > 65535)
    2a64:	6f 81       	ldd	r22, Y+7	; 0x07
    2a66:	78 85       	ldd	r23, Y+8	; 0x08
    2a68:	89 85       	ldd	r24, Y+9	; 0x09
    2a6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	3f ef       	ldi	r19, 0xFF	; 255
    2a70:	4f e7       	ldi	r20, 0x7F	; 127
    2a72:	57 e4       	ldi	r21, 0x47	; 71
    2a74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a78:	18 16       	cp	r1, r24
    2a7a:	4c f5       	brge	.+82     	; 0x2ace <LCD_voidWriteCharctr+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a80:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a82:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	40 e2       	ldi	r20, 0x20	; 32
    2a8a:	51 e4       	ldi	r21, 0x41	; 65
    2a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a90:	dc 01       	movw	r26, r24
    2a92:	cb 01       	movw	r24, r22
    2a94:	bc 01       	movw	r22, r24
    2a96:	cd 01       	movw	r24, r26
    2a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	9e 83       	std	Y+6, r25	; 0x06
    2aa2:	8d 83       	std	Y+5, r24	; 0x05
    2aa4:	0f c0       	rjmp	.+30     	; 0x2ac4 <LCD_voidWriteCharctr+0xe4>
    2aa6:	88 ec       	ldi	r24, 0xC8	; 200
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	9c 83       	std	Y+4, r25	; 0x04
    2aac:	8b 83       	std	Y+3, r24	; 0x03
    2aae:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab2:	01 97       	sbiw	r24, 0x01	; 1
    2ab4:	f1 f7       	brne	.-4      	; 0x2ab2 <LCD_voidWriteCharctr+0xd2>
    2ab6:	9c 83       	std	Y+4, r25	; 0x04
    2ab8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aba:	8d 81       	ldd	r24, Y+5	; 0x05
    2abc:	9e 81       	ldd	r25, Y+6	; 0x06
    2abe:	01 97       	sbiw	r24, 0x01	; 1
    2ac0:	9e 83       	std	Y+6, r25	; 0x06
    2ac2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac8:	00 97       	sbiw	r24, 0x00	; 0
    2aca:	69 f7       	brne	.-38     	; 0x2aa6 <LCD_voidWriteCharctr+0xc6>
    2acc:	14 c0       	rjmp	.+40     	; 0x2af6 <LCD_voidWriteCharctr+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ace:	6f 81       	ldd	r22, Y+7	; 0x07
    2ad0:	78 85       	ldd	r23, Y+8	; 0x08
    2ad2:	89 85       	ldd	r24, Y+9	; 0x09
    2ad4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	9e 83       	std	Y+6, r25	; 0x06
    2ae0:	8d 83       	std	Y+5, r24	; 0x05
    2ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae6:	9a 83       	std	Y+2, r25	; 0x02
    2ae8:	89 83       	std	Y+1, r24	; 0x01
    2aea:	89 81       	ldd	r24, Y+1	; 0x01
    2aec:	9a 81       	ldd	r25, Y+2	; 0x02
    2aee:	01 97       	sbiw	r24, 0x01	; 1
    2af0:	f1 f7       	brne	.-4      	; 0x2aee <LCD_voidWriteCharctr+0x10e>
    2af2:	9a 83       	std	Y+2, r25	; 0x02
    2af4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    2af6:	83 e0       	ldi	r24, 0x03	; 3
    2af8:	63 e0       	ldi	r22, 0x03	; 3
    2afa:	40 e0       	ldi	r20, 0x00	; 0
    2afc:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>

}
    2b00:	2f 96       	adiw	r28, 0x0f	; 15
    2b02:	0f b6       	in	r0, 0x3f	; 63
    2b04:	f8 94       	cli
    2b06:	de bf       	out	0x3e, r29	; 62
    2b08:	0f be       	out	0x3f, r0	; 63
    2b0a:	cd bf       	out	0x3d, r28	; 61
    2b0c:	cf 91       	pop	r28
    2b0e:	df 91       	pop	r29
    2b10:	08 95       	ret

00002b12 <LCD_voidWriteCharctr_4bitMode>:
void LCD_voidWriteCharctr_4bitMode(uint8 u8DataCpy){		//LCD_voidWriteCharctr('A')
    2b12:	df 93       	push	r29
    2b14:	cf 93       	push	r28
    2b16:	cd b7       	in	r28, 0x3d	; 61
    2b18:	de b7       	in	r29, 0x3e	; 62
    2b1a:	e9 97       	sbiw	r28, 0x39	; 57
    2b1c:	0f b6       	in	r0, 0x3f	; 63
    2b1e:	f8 94       	cli
    2b20:	de bf       	out	0x3e, r29	; 62
    2b22:	0f be       	out	0x3f, r0	; 63
    2b24:	cd bf       	out	0x3d, r28	; 61
    2b26:	89 af       	std	Y+57, r24	; 0x39
	/* Command(0) or Data(1) */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_RSPIN, DIO_HIGH);
    2b28:	83 e0       	ldi	r24, 0x03	; 3
    2b2a:	62 e0       	ldi	r22, 0x02	; 2
    2b2c:	41 e0       	ldi	r20, 0x01	; 1
    2b2e:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
	/* Read(1) or Write(0) */
	//DIO_voidWritePin(lcd_CONTROLPORT, lcd_RWPIN, DIO_LOW);
	/* Write Data on Data Pins, sending upper nibble*/
	DIO_voidWritePort(lcd_DATAPORT, (lcd_DATAPORT & 0x0F) | (u8DataCpy & 0xF0));
    2b32:	89 ad       	ldd	r24, Y+57	; 0x39
    2b34:	80 7f       	andi	r24, 0xF0	; 240
    2b36:	81 60       	ori	r24, 0x01	; 1
    2b38:	98 2f       	mov	r25, r24
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	69 2f       	mov	r22, r25
    2b3e:	0e 94 97 21 	call	0x432e	; 0x432e <DIO_voidWritePort>
	/* Enable Sequence */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    2b42:	83 e0       	ldi	r24, 0x03	; 3
    2b44:	63 e0       	ldi	r22, 0x03	; 3
    2b46:	41 e0       	ldi	r20, 0x01	; 1
    2b48:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	a0 ea       	ldi	r26, 0xA0	; 160
    2b52:	b0 e4       	ldi	r27, 0x40	; 64
    2b54:	8d ab       	std	Y+53, r24	; 0x35
    2b56:	9e ab       	std	Y+54, r25	; 0x36
    2b58:	af ab       	std	Y+55, r26	; 0x37
    2b5a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b5c:	6d a9       	ldd	r22, Y+53	; 0x35
    2b5e:	7e a9       	ldd	r23, Y+54	; 0x36
    2b60:	8f a9       	ldd	r24, Y+55	; 0x37
    2b62:	98 ad       	ldd	r25, Y+56	; 0x38
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	4a ef       	ldi	r20, 0xFA	; 250
    2b6a:	54 e4       	ldi	r21, 0x44	; 68
    2b6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	89 ab       	std	Y+49, r24	; 0x31
    2b76:	9a ab       	std	Y+50, r25	; 0x32
    2b78:	ab ab       	std	Y+51, r26	; 0x33
    2b7a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b7c:	69 a9       	ldd	r22, Y+49	; 0x31
    2b7e:	7a a9       	ldd	r23, Y+50	; 0x32
    2b80:	8b a9       	ldd	r24, Y+51	; 0x33
    2b82:	9c a9       	ldd	r25, Y+52	; 0x34
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	40 e8       	ldi	r20, 0x80	; 128
    2b8a:	5f e3       	ldi	r21, 0x3F	; 63
    2b8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b90:	88 23       	and	r24, r24
    2b92:	2c f4       	brge	.+10     	; 0x2b9e <LCD_voidWriteCharctr_4bitMode+0x8c>
		__ticks = 1;
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	98 ab       	std	Y+48, r25	; 0x30
    2b9a:	8f a7       	std	Y+47, r24	; 0x2f
    2b9c:	3f c0       	rjmp	.+126    	; 0x2c1c <LCD_voidWriteCharctr_4bitMode+0x10a>
	else if (__tmp > 65535)
    2b9e:	69 a9       	ldd	r22, Y+49	; 0x31
    2ba0:	7a a9       	ldd	r23, Y+50	; 0x32
    2ba2:	8b a9       	ldd	r24, Y+51	; 0x33
    2ba4:	9c a9       	ldd	r25, Y+52	; 0x34
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	3f ef       	ldi	r19, 0xFF	; 255
    2baa:	4f e7       	ldi	r20, 0x7F	; 127
    2bac:	57 e4       	ldi	r21, 0x47	; 71
    2bae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bb2:	18 16       	cp	r1, r24
    2bb4:	4c f5       	brge	.+82     	; 0x2c08 <LCD_voidWriteCharctr_4bitMode+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb6:	6d a9       	ldd	r22, Y+53	; 0x35
    2bb8:	7e a9       	ldd	r23, Y+54	; 0x36
    2bba:	8f a9       	ldd	r24, Y+55	; 0x37
    2bbc:	98 ad       	ldd	r25, Y+56	; 0x38
    2bbe:	20 e0       	ldi	r18, 0x00	; 0
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	40 e2       	ldi	r20, 0x20	; 32
    2bc4:	51 e4       	ldi	r21, 0x41	; 65
    2bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	bc 01       	movw	r22, r24
    2bd0:	cd 01       	movw	r24, r26
    2bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	98 ab       	std	Y+48, r25	; 0x30
    2bdc:	8f a7       	std	Y+47, r24	; 0x2f
    2bde:	0f c0       	rjmp	.+30     	; 0x2bfe <LCD_voidWriteCharctr_4bitMode+0xec>
    2be0:	88 ec       	ldi	r24, 0xC8	; 200
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	9e a7       	std	Y+46, r25	; 0x2e
    2be6:	8d a7       	std	Y+45, r24	; 0x2d
    2be8:	8d a5       	ldd	r24, Y+45	; 0x2d
    2bea:	9e a5       	ldd	r25, Y+46	; 0x2e
    2bec:	01 97       	sbiw	r24, 0x01	; 1
    2bee:	f1 f7       	brne	.-4      	; 0x2bec <LCD_voidWriteCharctr_4bitMode+0xda>
    2bf0:	9e a7       	std	Y+46, r25	; 0x2e
    2bf2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bf6:	98 a9       	ldd	r25, Y+48	; 0x30
    2bf8:	01 97       	sbiw	r24, 0x01	; 1
    2bfa:	98 ab       	std	Y+48, r25	; 0x30
    2bfc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bfe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c00:	98 a9       	ldd	r25, Y+48	; 0x30
    2c02:	00 97       	sbiw	r24, 0x00	; 0
    2c04:	69 f7       	brne	.-38     	; 0x2be0 <LCD_voidWriteCharctr_4bitMode+0xce>
    2c06:	14 c0       	rjmp	.+40     	; 0x2c30 <LCD_voidWriteCharctr_4bitMode+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c08:	69 a9       	ldd	r22, Y+49	; 0x31
    2c0a:	7a a9       	ldd	r23, Y+50	; 0x32
    2c0c:	8b a9       	ldd	r24, Y+51	; 0x33
    2c0e:	9c a9       	ldd	r25, Y+52	; 0x34
    2c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	98 ab       	std	Y+48, r25	; 0x30
    2c1a:	8f a7       	std	Y+47, r24	; 0x2f
    2c1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c1e:	98 a9       	ldd	r25, Y+48	; 0x30
    2c20:	9c a7       	std	Y+44, r25	; 0x2c
    2c22:	8b a7       	std	Y+43, r24	; 0x2b
    2c24:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c26:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c28:	01 97       	sbiw	r24, 0x01	; 1
    2c2a:	f1 f7       	brne	.-4      	; 0x2c28 <LCD_voidWriteCharctr_4bitMode+0x116>
    2c2c:	9c a7       	std	Y+44, r25	; 0x2c
    2c2e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    2c30:	83 e0       	ldi	r24, 0x03	; 3
    2c32:	63 e0       	ldi	r22, 0x03	; 3
    2c34:	40 e0       	ldi	r20, 0x00	; 0
    2c36:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
    2c3a:	80 e0       	ldi	r24, 0x00	; 0
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	a0 e2       	ldi	r26, 0x20	; 32
    2c40:	b1 e4       	ldi	r27, 0x41	; 65
    2c42:	8f a3       	std	Y+39, r24	; 0x27
    2c44:	98 a7       	std	Y+40, r25	; 0x28
    2c46:	a9 a7       	std	Y+41, r26	; 0x29
    2c48:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c4a:	6f a1       	ldd	r22, Y+39	; 0x27
    2c4c:	78 a5       	ldd	r23, Y+40	; 0x28
    2c4e:	89 a5       	ldd	r24, Y+41	; 0x29
    2c50:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	4a ef       	ldi	r20, 0xFA	; 250
    2c58:	54 e4       	ldi	r21, 0x44	; 68
    2c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	cb 01       	movw	r24, r22
    2c62:	8b a3       	std	Y+35, r24	; 0x23
    2c64:	9c a3       	std	Y+36, r25	; 0x24
    2c66:	ad a3       	std	Y+37, r26	; 0x25
    2c68:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c6a:	6b a1       	ldd	r22, Y+35	; 0x23
    2c6c:	7c a1       	ldd	r23, Y+36	; 0x24
    2c6e:	8d a1       	ldd	r24, Y+37	; 0x25
    2c70:	9e a1       	ldd	r25, Y+38	; 0x26
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	40 e8       	ldi	r20, 0x80	; 128
    2c78:	5f e3       	ldi	r21, 0x3F	; 63
    2c7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c7e:	88 23       	and	r24, r24
    2c80:	2c f4       	brge	.+10     	; 0x2c8c <LCD_voidWriteCharctr_4bitMode+0x17a>
		__ticks = 1;
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	9a a3       	std	Y+34, r25	; 0x22
    2c88:	89 a3       	std	Y+33, r24	; 0x21
    2c8a:	3f c0       	rjmp	.+126    	; 0x2d0a <LCD_voidWriteCharctr_4bitMode+0x1f8>
	else if (__tmp > 65535)
    2c8c:	6b a1       	ldd	r22, Y+35	; 0x23
    2c8e:	7c a1       	ldd	r23, Y+36	; 0x24
    2c90:	8d a1       	ldd	r24, Y+37	; 0x25
    2c92:	9e a1       	ldd	r25, Y+38	; 0x26
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	3f ef       	ldi	r19, 0xFF	; 255
    2c98:	4f e7       	ldi	r20, 0x7F	; 127
    2c9a:	57 e4       	ldi	r21, 0x47	; 71
    2c9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ca0:	18 16       	cp	r1, r24
    2ca2:	4c f5       	brge	.+82     	; 0x2cf6 <LCD_voidWriteCharctr_4bitMode+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ca6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ca8:	89 a5       	ldd	r24, Y+41	; 0x29
    2caa:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	40 e2       	ldi	r20, 0x20	; 32
    2cb2:	51 e4       	ldi	r21, 0x41	; 65
    2cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	bc 01       	movw	r22, r24
    2cbe:	cd 01       	movw	r24, r26
    2cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	9a a3       	std	Y+34, r25	; 0x22
    2cca:	89 a3       	std	Y+33, r24	; 0x21
    2ccc:	0f c0       	rjmp	.+30     	; 0x2cec <LCD_voidWriteCharctr_4bitMode+0x1da>
    2cce:	88 ec       	ldi	r24, 0xC8	; 200
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	98 a3       	std	Y+32, r25	; 0x20
    2cd4:	8f 8f       	std	Y+31, r24	; 0x1f
    2cd6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cd8:	98 a1       	ldd	r25, Y+32	; 0x20
    2cda:	01 97       	sbiw	r24, 0x01	; 1
    2cdc:	f1 f7       	brne	.-4      	; 0x2cda <LCD_voidWriteCharctr_4bitMode+0x1c8>
    2cde:	98 a3       	std	Y+32, r25	; 0x20
    2ce0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ce4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ce6:	01 97       	sbiw	r24, 0x01	; 1
    2ce8:	9a a3       	std	Y+34, r25	; 0x22
    2cea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cec:	89 a1       	ldd	r24, Y+33	; 0x21
    2cee:	9a a1       	ldd	r25, Y+34	; 0x22
    2cf0:	00 97       	sbiw	r24, 0x00	; 0
    2cf2:	69 f7       	brne	.-38     	; 0x2cce <LCD_voidWriteCharctr_4bitMode+0x1bc>
    2cf4:	14 c0       	rjmp	.+40     	; 0x2d1e <LCD_voidWriteCharctr_4bitMode+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf6:	6b a1       	ldd	r22, Y+35	; 0x23
    2cf8:	7c a1       	ldd	r23, Y+36	; 0x24
    2cfa:	8d a1       	ldd	r24, Y+37	; 0x25
    2cfc:	9e a1       	ldd	r25, Y+38	; 0x26
    2cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	9a a3       	std	Y+34, r25	; 0x22
    2d08:	89 a3       	std	Y+33, r24	; 0x21
    2d0a:	89 a1       	ldd	r24, Y+33	; 0x21
    2d0c:	9a a1       	ldd	r25, Y+34	; 0x22
    2d0e:	9e 8f       	std	Y+30, r25	; 0x1e
    2d10:	8d 8f       	std	Y+29, r24	; 0x1d
    2d12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d14:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d16:	01 97       	sbiw	r24, 0x01	; 1
    2d18:	f1 f7       	brne	.-4      	; 0x2d16 <LCD_voidWriteCharctr_4bitMode+0x204>
    2d1a:	9e 8f       	std	Y+30, r25	; 0x1e
    2d1c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);

	/* Write Data on Data Pins, sending lower nibble*/
	DIO_voidWritePort(lcd_DATAPORT, (lcd_DATAPORT & 0x0F) | (u8DataCpy <<4));
    2d1e:	89 ad       	ldd	r24, Y+57	; 0x39
    2d20:	88 2f       	mov	r24, r24
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	82 95       	swap	r24
    2d26:	92 95       	swap	r25
    2d28:	90 7f       	andi	r25, 0xF0	; 240
    2d2a:	98 27       	eor	r25, r24
    2d2c:	80 7f       	andi	r24, 0xF0	; 240
    2d2e:	98 27       	eor	r25, r24
    2d30:	81 60       	ori	r24, 0x01	; 1
    2d32:	98 2f       	mov	r25, r24
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	69 2f       	mov	r22, r25
    2d38:	0e 94 97 21 	call	0x432e	; 0x432e <DIO_voidWritePort>
	/* Enable Sequence */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    2d3c:	83 e0       	ldi	r24, 0x03	; 3
    2d3e:	63 e0       	ldi	r22, 0x03	; 3
    2d40:	41 e0       	ldi	r20, 0x01	; 1
    2d42:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
    2d46:	80 e0       	ldi	r24, 0x00	; 0
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	a0 ea       	ldi	r26, 0xA0	; 160
    2d4c:	b0 e4       	ldi	r27, 0x40	; 64
    2d4e:	89 8f       	std	Y+25, r24	; 0x19
    2d50:	9a 8f       	std	Y+26, r25	; 0x1a
    2d52:	ab 8f       	std	Y+27, r26	; 0x1b
    2d54:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d56:	69 8d       	ldd	r22, Y+25	; 0x19
    2d58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	4a ef       	ldi	r20, 0xFA	; 250
    2d64:	54 e4       	ldi	r21, 0x44	; 68
    2d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	8d 8b       	std	Y+21, r24	; 0x15
    2d70:	9e 8b       	std	Y+22, r25	; 0x16
    2d72:	af 8b       	std	Y+23, r26	; 0x17
    2d74:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d76:	6d 89       	ldd	r22, Y+21	; 0x15
    2d78:	7e 89       	ldd	r23, Y+22	; 0x16
    2d7a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d7c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	40 e8       	ldi	r20, 0x80	; 128
    2d84:	5f e3       	ldi	r21, 0x3F	; 63
    2d86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d8a:	88 23       	and	r24, r24
    2d8c:	2c f4       	brge	.+10     	; 0x2d98 <LCD_voidWriteCharctr_4bitMode+0x286>
		__ticks = 1;
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	9c 8b       	std	Y+20, r25	; 0x14
    2d94:	8b 8b       	std	Y+19, r24	; 0x13
    2d96:	3f c0       	rjmp	.+126    	; 0x2e16 <LCD_voidWriteCharctr_4bitMode+0x304>
	else if (__tmp > 65535)
    2d98:	6d 89       	ldd	r22, Y+21	; 0x15
    2d9a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d9c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d9e:	98 8d       	ldd	r25, Y+24	; 0x18
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	3f ef       	ldi	r19, 0xFF	; 255
    2da4:	4f e7       	ldi	r20, 0x7F	; 127
    2da6:	57 e4       	ldi	r21, 0x47	; 71
    2da8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dac:	18 16       	cp	r1, r24
    2dae:	4c f5       	brge	.+82     	; 0x2e02 <LCD_voidWriteCharctr_4bitMode+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db0:	69 8d       	ldd	r22, Y+25	; 0x19
    2db2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2db4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2db6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	40 e2       	ldi	r20, 0x20	; 32
    2dbe:	51 e4       	ldi	r21, 0x41	; 65
    2dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	bc 01       	movw	r22, r24
    2dca:	cd 01       	movw	r24, r26
    2dcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd0:	dc 01       	movw	r26, r24
    2dd2:	cb 01       	movw	r24, r22
    2dd4:	9c 8b       	std	Y+20, r25	; 0x14
    2dd6:	8b 8b       	std	Y+19, r24	; 0x13
    2dd8:	0f c0       	rjmp	.+30     	; 0x2df8 <LCD_voidWriteCharctr_4bitMode+0x2e6>
    2dda:	88 ec       	ldi	r24, 0xC8	; 200
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	9a 8b       	std	Y+18, r25	; 0x12
    2de0:	89 8b       	std	Y+17, r24	; 0x11
    2de2:	89 89       	ldd	r24, Y+17	; 0x11
    2de4:	9a 89       	ldd	r25, Y+18	; 0x12
    2de6:	01 97       	sbiw	r24, 0x01	; 1
    2de8:	f1 f7       	brne	.-4      	; 0x2de6 <LCD_voidWriteCharctr_4bitMode+0x2d4>
    2dea:	9a 8b       	std	Y+18, r25	; 0x12
    2dec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dee:	8b 89       	ldd	r24, Y+19	; 0x13
    2df0:	9c 89       	ldd	r25, Y+20	; 0x14
    2df2:	01 97       	sbiw	r24, 0x01	; 1
    2df4:	9c 8b       	std	Y+20, r25	; 0x14
    2df6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2df8:	8b 89       	ldd	r24, Y+19	; 0x13
    2dfa:	9c 89       	ldd	r25, Y+20	; 0x14
    2dfc:	00 97       	sbiw	r24, 0x00	; 0
    2dfe:	69 f7       	brne	.-38     	; 0x2dda <LCD_voidWriteCharctr_4bitMode+0x2c8>
    2e00:	14 c0       	rjmp	.+40     	; 0x2e2a <LCD_voidWriteCharctr_4bitMode+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e02:	6d 89       	ldd	r22, Y+21	; 0x15
    2e04:	7e 89       	ldd	r23, Y+22	; 0x16
    2e06:	8f 89       	ldd	r24, Y+23	; 0x17
    2e08:	98 8d       	ldd	r25, Y+24	; 0x18
    2e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e0e:	dc 01       	movw	r26, r24
    2e10:	cb 01       	movw	r24, r22
    2e12:	9c 8b       	std	Y+20, r25	; 0x14
    2e14:	8b 8b       	std	Y+19, r24	; 0x13
    2e16:	8b 89       	ldd	r24, Y+19	; 0x13
    2e18:	9c 89       	ldd	r25, Y+20	; 0x14
    2e1a:	98 8b       	std	Y+16, r25	; 0x10
    2e1c:	8f 87       	std	Y+15, r24	; 0x0f
    2e1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e20:	98 89       	ldd	r25, Y+16	; 0x10
    2e22:	01 97       	sbiw	r24, 0x01	; 1
    2e24:	f1 f7       	brne	.-4      	; 0x2e22 <LCD_voidWriteCharctr_4bitMode+0x310>
    2e26:	98 8b       	std	Y+16, r25	; 0x10
    2e28:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    2e2a:	83 e0       	ldi	r24, 0x03	; 3
    2e2c:	63 e0       	ldi	r22, 0x03	; 3
    2e2e:	40 e0       	ldi	r20, 0x00	; 0
    2e30:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
    2e34:	80 e0       	ldi	r24, 0x00	; 0
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	a0 e2       	ldi	r26, 0x20	; 32
    2e3a:	b1 e4       	ldi	r27, 0x41	; 65
    2e3c:	8b 87       	std	Y+11, r24	; 0x0b
    2e3e:	9c 87       	std	Y+12, r25	; 0x0c
    2e40:	ad 87       	std	Y+13, r26	; 0x0d
    2e42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e44:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e46:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	4a ef       	ldi	r20, 0xFA	; 250
    2e52:	54 e4       	ldi	r21, 0x44	; 68
    2e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	8f 83       	std	Y+7, r24	; 0x07
    2e5e:	98 87       	std	Y+8, r25	; 0x08
    2e60:	a9 87       	std	Y+9, r26	; 0x09
    2e62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e64:	6f 81       	ldd	r22, Y+7	; 0x07
    2e66:	78 85       	ldd	r23, Y+8	; 0x08
    2e68:	89 85       	ldd	r24, Y+9	; 0x09
    2e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	40 e8       	ldi	r20, 0x80	; 128
    2e72:	5f e3       	ldi	r21, 0x3F	; 63
    2e74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e78:	88 23       	and	r24, r24
    2e7a:	2c f4       	brge	.+10     	; 0x2e86 <LCD_voidWriteCharctr_4bitMode+0x374>
		__ticks = 1;
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	9e 83       	std	Y+6, r25	; 0x06
    2e82:	8d 83       	std	Y+5, r24	; 0x05
    2e84:	3f c0       	rjmp	.+126    	; 0x2f04 <LCD_voidWriteCharctr_4bitMode+0x3f2>
	else if (__tmp > 65535)
    2e86:	6f 81       	ldd	r22, Y+7	; 0x07
    2e88:	78 85       	ldd	r23, Y+8	; 0x08
    2e8a:	89 85       	ldd	r24, Y+9	; 0x09
    2e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	3f ef       	ldi	r19, 0xFF	; 255
    2e92:	4f e7       	ldi	r20, 0x7F	; 127
    2e94:	57 e4       	ldi	r21, 0x47	; 71
    2e96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e9a:	18 16       	cp	r1, r24
    2e9c:	4c f5       	brge	.+82     	; 0x2ef0 <LCD_voidWriteCharctr_4bitMode+0x3de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ea0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ea2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	40 e2       	ldi	r20, 0x20	; 32
    2eac:	51 e4       	ldi	r21, 0x41	; 65
    2eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb2:	dc 01       	movw	r26, r24
    2eb4:	cb 01       	movw	r24, r22
    2eb6:	bc 01       	movw	r22, r24
    2eb8:	cd 01       	movw	r24, r26
    2eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ebe:	dc 01       	movw	r26, r24
    2ec0:	cb 01       	movw	r24, r22
    2ec2:	9e 83       	std	Y+6, r25	; 0x06
    2ec4:	8d 83       	std	Y+5, r24	; 0x05
    2ec6:	0f c0       	rjmp	.+30     	; 0x2ee6 <LCD_voidWriteCharctr_4bitMode+0x3d4>
    2ec8:	88 ec       	ldi	r24, 0xC8	; 200
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	9c 83       	std	Y+4, r25	; 0x04
    2ece:	8b 83       	std	Y+3, r24	; 0x03
    2ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed4:	01 97       	sbiw	r24, 0x01	; 1
    2ed6:	f1 f7       	brne	.-4      	; 0x2ed4 <LCD_voidWriteCharctr_4bitMode+0x3c2>
    2ed8:	9c 83       	std	Y+4, r25	; 0x04
    2eda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2edc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ede:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee0:	01 97       	sbiw	r24, 0x01	; 1
    2ee2:	9e 83       	std	Y+6, r25	; 0x06
    2ee4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eea:	00 97       	sbiw	r24, 0x00	; 0
    2eec:	69 f7       	brne	.-38     	; 0x2ec8 <LCD_voidWriteCharctr_4bitMode+0x3b6>
    2eee:	14 c0       	rjmp	.+40     	; 0x2f18 <LCD_voidWriteCharctr_4bitMode+0x406>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef2:	78 85       	ldd	r23, Y+8	; 0x08
    2ef4:	89 85       	ldd	r24, Y+9	; 0x09
    2ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	9e 83       	std	Y+6, r25	; 0x06
    2f02:	8d 83       	std	Y+5, r24	; 0x05
    2f04:	8d 81       	ldd	r24, Y+5	; 0x05
    2f06:	9e 81       	ldd	r25, Y+6	; 0x06
    2f08:	9a 83       	std	Y+2, r25	; 0x02
    2f0a:	89 83       	std	Y+1, r24	; 0x01
    2f0c:	89 81       	ldd	r24, Y+1	; 0x01
    2f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f10:	01 97       	sbiw	r24, 0x01	; 1
    2f12:	f1 f7       	brne	.-4      	; 0x2f10 <LCD_voidWriteCharctr_4bitMode+0x3fe>
    2f14:	9a 83       	std	Y+2, r25	; 0x02
    2f16:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

}
    2f18:	e9 96       	adiw	r28, 0x39	; 57
    2f1a:	0f b6       	in	r0, 0x3f	; 63
    2f1c:	f8 94       	cli
    2f1e:	de bf       	out	0x3e, r29	; 62
    2f20:	0f be       	out	0x3f, r0	; 63
    2f22:	cd bf       	out	0x3d, r28	; 61
    2f24:	cf 91       	pop	r28
    2f26:	df 91       	pop	r29
    2f28:	08 95       	ret

00002f2a <LCD_voidWriteString>:
void LCD_voidWriteString(uint8 *pu8StringCpy, uint8 u8Index){	//LCD_voidWriteString('Tasneem')
    2f2a:	df 93       	push	r29
    2f2c:	cf 93       	push	r28
    2f2e:	00 d0       	rcall	.+0      	; 0x2f30 <LCD_voidWriteString+0x6>
    2f30:	00 d0       	rcall	.+0      	; 0x2f32 <LCD_voidWriteString+0x8>
    2f32:	cd b7       	in	r28, 0x3d	; 61
    2f34:	de b7       	in	r29, 0x3e	; 62
    2f36:	9b 83       	std	Y+3, r25	; 0x03
    2f38:	8a 83       	std	Y+2, r24	; 0x02
    2f3a:	6c 83       	std	Y+4, r22	; 0x04
	/*uint8 i=0;
	 *while(pu8StringCpy[i] != '\0'){
	 *		LCD_voidWriteCharctr(pu8StringCpy[i]);
	 *		i++;
	 *}*/
	for(uint8 i=0; i<u8Index; i++){
    2f3c:	19 82       	std	Y+1, r1	; 0x01
    2f3e:	0e c0       	rjmp	.+28     	; 0x2f5c <LCD_voidWriteString+0x32>
		LCD_voidWriteCharctr(pu8StringCpy[i]);
    2f40:	89 81       	ldd	r24, Y+1	; 0x01
    2f42:	28 2f       	mov	r18, r24
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	8a 81       	ldd	r24, Y+2	; 0x02
    2f48:	9b 81       	ldd	r25, Y+3	; 0x03
    2f4a:	fc 01       	movw	r30, r24
    2f4c:	e2 0f       	add	r30, r18
    2f4e:	f3 1f       	adc	r31, r19
    2f50:	80 81       	ld	r24, Z
    2f52:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <LCD_voidWriteCharctr>
	/*uint8 i=0;
	 *while(pu8StringCpy[i] != '\0'){
	 *		LCD_voidWriteCharctr(pu8StringCpy[i]);
	 *		i++;
	 *}*/
	for(uint8 i=0; i<u8Index; i++){
    2f56:	89 81       	ldd	r24, Y+1	; 0x01
    2f58:	8f 5f       	subi	r24, 0xFF	; 255
    2f5a:	89 83       	std	Y+1, r24	; 0x01
    2f5c:	99 81       	ldd	r25, Y+1	; 0x01
    2f5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f60:	98 17       	cp	r25, r24
    2f62:	70 f3       	brcs	.-36     	; 0x2f40 <LCD_voidWriteString+0x16>
		LCD_voidWriteCharctr(pu8StringCpy[i]);
	}
}
    2f64:	0f 90       	pop	r0
    2f66:	0f 90       	pop	r0
    2f68:	0f 90       	pop	r0
    2f6a:	0f 90       	pop	r0
    2f6c:	cf 91       	pop	r28
    2f6e:	df 91       	pop	r29
    2f70:	08 95       	ret

00002f72 <LCD_voidWriteString_4bitMode>:
void LCD_voidWriteString_4bitMode(uint8 *pu8StringCpy, uint8 u8Index){	//LCD_voidWriteString('Tasneem')
    2f72:	df 93       	push	r29
    2f74:	cf 93       	push	r28
    2f76:	cd b7       	in	r28, 0x3d	; 61
    2f78:	de b7       	in	r29, 0x3e	; 62
    2f7a:	62 97       	sbiw	r28, 0x12	; 18
    2f7c:	0f b6       	in	r0, 0x3f	; 63
    2f7e:	f8 94       	cli
    2f80:	de bf       	out	0x3e, r29	; 62
    2f82:	0f be       	out	0x3f, r0	; 63
    2f84:	cd bf       	out	0x3d, r28	; 61
    2f86:	99 8b       	std	Y+17, r25	; 0x11
    2f88:	88 8b       	std	Y+16, r24	; 0x10
    2f8a:	6a 8b       	std	Y+18, r22	; 0x12
	for(uint8 i=0; i<u8Index; i++){
    2f8c:	1f 86       	std	Y+15, r1	; 0x0f
    2f8e:	80 c0       	rjmp	.+256    	; 0x3090 <LCD_voidWriteString_4bitMode+0x11e>
		LCD_voidWriteCharctr_4bitMode(pu8StringCpy[i]);
    2f90:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f92:	28 2f       	mov	r18, r24
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	88 89       	ldd	r24, Y+16	; 0x10
    2f98:	99 89       	ldd	r25, Y+17	; 0x11
    2f9a:	fc 01       	movw	r30, r24
    2f9c:	e2 0f       	add	r30, r18
    2f9e:	f3 1f       	adc	r31, r19
    2fa0:	80 81       	ld	r24, Z
    2fa2:	0e 94 89 15 	call	0x2b12	; 0x2b12 <LCD_voidWriteCharctr_4bitMode>
    2fa6:	80 e0       	ldi	r24, 0x00	; 0
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	a0 ea       	ldi	r26, 0xA0	; 160
    2fac:	b0 e4       	ldi	r27, 0x40	; 64
    2fae:	8b 87       	std	Y+11, r24	; 0x0b
    2fb0:	9c 87       	std	Y+12, r25	; 0x0c
    2fb2:	ad 87       	std	Y+13, r26	; 0x0d
    2fb4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fba:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	4a ef       	ldi	r20, 0xFA	; 250
    2fc4:	54 e4       	ldi	r21, 0x44	; 68
    2fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fca:	dc 01       	movw	r26, r24
    2fcc:	cb 01       	movw	r24, r22
    2fce:	8f 83       	std	Y+7, r24	; 0x07
    2fd0:	98 87       	std	Y+8, r25	; 0x08
    2fd2:	a9 87       	std	Y+9, r26	; 0x09
    2fd4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fd6:	6f 81       	ldd	r22, Y+7	; 0x07
    2fd8:	78 85       	ldd	r23, Y+8	; 0x08
    2fda:	89 85       	ldd	r24, Y+9	; 0x09
    2fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fde:	20 e0       	ldi	r18, 0x00	; 0
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	40 e8       	ldi	r20, 0x80	; 128
    2fe4:	5f e3       	ldi	r21, 0x3F	; 63
    2fe6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fea:	88 23       	and	r24, r24
    2fec:	2c f4       	brge	.+10     	; 0x2ff8 <LCD_voidWriteString_4bitMode+0x86>
		__ticks = 1;
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	9e 83       	std	Y+6, r25	; 0x06
    2ff4:	8d 83       	std	Y+5, r24	; 0x05
    2ff6:	3f c0       	rjmp	.+126    	; 0x3076 <LCD_voidWriteString_4bitMode+0x104>
	else if (__tmp > 65535)
    2ff8:	6f 81       	ldd	r22, Y+7	; 0x07
    2ffa:	78 85       	ldd	r23, Y+8	; 0x08
    2ffc:	89 85       	ldd	r24, Y+9	; 0x09
    2ffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3000:	20 e0       	ldi	r18, 0x00	; 0
    3002:	3f ef       	ldi	r19, 0xFF	; 255
    3004:	4f e7       	ldi	r20, 0x7F	; 127
    3006:	57 e4       	ldi	r21, 0x47	; 71
    3008:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    300c:	18 16       	cp	r1, r24
    300e:	4c f5       	brge	.+82     	; 0x3062 <LCD_voidWriteString_4bitMode+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3010:	6b 85       	ldd	r22, Y+11	; 0x0b
    3012:	7c 85       	ldd	r23, Y+12	; 0x0c
    3014:	8d 85       	ldd	r24, Y+13	; 0x0d
    3016:	9e 85       	ldd	r25, Y+14	; 0x0e
    3018:	20 e0       	ldi	r18, 0x00	; 0
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	40 e2       	ldi	r20, 0x20	; 32
    301e:	51 e4       	ldi	r21, 0x41	; 65
    3020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	bc 01       	movw	r22, r24
    302a:	cd 01       	movw	r24, r26
    302c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3030:	dc 01       	movw	r26, r24
    3032:	cb 01       	movw	r24, r22
    3034:	9e 83       	std	Y+6, r25	; 0x06
    3036:	8d 83       	std	Y+5, r24	; 0x05
    3038:	0f c0       	rjmp	.+30     	; 0x3058 <LCD_voidWriteString_4bitMode+0xe6>
    303a:	88 ec       	ldi	r24, 0xC8	; 200
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	9c 83       	std	Y+4, r25	; 0x04
    3040:	8b 83       	std	Y+3, r24	; 0x03
    3042:	8b 81       	ldd	r24, Y+3	; 0x03
    3044:	9c 81       	ldd	r25, Y+4	; 0x04
    3046:	01 97       	sbiw	r24, 0x01	; 1
    3048:	f1 f7       	brne	.-4      	; 0x3046 <LCD_voidWriteString_4bitMode+0xd4>
    304a:	9c 83       	std	Y+4, r25	; 0x04
    304c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    304e:	8d 81       	ldd	r24, Y+5	; 0x05
    3050:	9e 81       	ldd	r25, Y+6	; 0x06
    3052:	01 97       	sbiw	r24, 0x01	; 1
    3054:	9e 83       	std	Y+6, r25	; 0x06
    3056:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3058:	8d 81       	ldd	r24, Y+5	; 0x05
    305a:	9e 81       	ldd	r25, Y+6	; 0x06
    305c:	00 97       	sbiw	r24, 0x00	; 0
    305e:	69 f7       	brne	.-38     	; 0x303a <LCD_voidWriteString_4bitMode+0xc8>
    3060:	14 c0       	rjmp	.+40     	; 0x308a <LCD_voidWriteString_4bitMode+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3062:	6f 81       	ldd	r22, Y+7	; 0x07
    3064:	78 85       	ldd	r23, Y+8	; 0x08
    3066:	89 85       	ldd	r24, Y+9	; 0x09
    3068:	9a 85       	ldd	r25, Y+10	; 0x0a
    306a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	9e 83       	std	Y+6, r25	; 0x06
    3074:	8d 83       	std	Y+5, r24	; 0x05
    3076:	8d 81       	ldd	r24, Y+5	; 0x05
    3078:	9e 81       	ldd	r25, Y+6	; 0x06
    307a:	9a 83       	std	Y+2, r25	; 0x02
    307c:	89 83       	std	Y+1, r24	; 0x01
    307e:	89 81       	ldd	r24, Y+1	; 0x01
    3080:	9a 81       	ldd	r25, Y+2	; 0x02
    3082:	01 97       	sbiw	r24, 0x01	; 1
    3084:	f1 f7       	brne	.-4      	; 0x3082 <LCD_voidWriteString_4bitMode+0x110>
    3086:	9a 83       	std	Y+2, r25	; 0x02
    3088:	89 83       	std	Y+1, r24	; 0x01
	for(uint8 i=0; i<u8Index; i++){
		LCD_voidWriteCharctr(pu8StringCpy[i]);
	}
}
void LCD_voidWriteString_4bitMode(uint8 *pu8StringCpy, uint8 u8Index){	//LCD_voidWriteString('Tasneem')
	for(uint8 i=0; i<u8Index; i++){
    308a:	8f 85       	ldd	r24, Y+15	; 0x0f
    308c:	8f 5f       	subi	r24, 0xFF	; 255
    308e:	8f 87       	std	Y+15, r24	; 0x0f
    3090:	9f 85       	ldd	r25, Y+15	; 0x0f
    3092:	8a 89       	ldd	r24, Y+18	; 0x12
    3094:	98 17       	cp	r25, r24
    3096:	08 f4       	brcc	.+2      	; 0x309a <LCD_voidWriteString_4bitMode+0x128>
    3098:	7b cf       	rjmp	.-266    	; 0x2f90 <LCD_voidWriteString_4bitMode+0x1e>
		LCD_voidWriteCharctr_4bitMode(pu8StringCpy[i]);
		_delay_ms(5);
	}
}
    309a:	62 96       	adiw	r28, 0x12	; 18
    309c:	0f b6       	in	r0, 0x3f	; 63
    309e:	f8 94       	cli
    30a0:	de bf       	out	0x3e, r29	; 62
    30a2:	0f be       	out	0x3f, r0	; 63
    30a4:	cd bf       	out	0x3d, r28	; 61
    30a6:	cf 91       	pop	r28
    30a8:	df 91       	pop	r29
    30aa:	08 95       	ret

000030ac <Gotoxy>:
void Gotoxy(uint8 x, uint8 y){
    30ac:	df 93       	push	r29
    30ae:	cf 93       	push	r28
    30b0:	00 d0       	rcall	.+0      	; 0x30b2 <Gotoxy+0x6>
    30b2:	00 d0       	rcall	.+0      	; 0x30b4 <Gotoxy+0x8>
    30b4:	cd b7       	in	r28, 0x3d	; 61
    30b6:	de b7       	in	r29, 0x3e	; 62
    30b8:	89 83       	std	Y+1, r24	; 0x01
    30ba:	6a 83       	std	Y+2, r22	; 0x02
	if(x>=0 && x<16)
    30bc:	89 81       	ldd	r24, Y+1	; 0x01
    30be:	80 31       	cpi	r24, 0x10	; 16
    30c0:	c8 f4       	brcc	.+50     	; 0x30f4 <Gotoxy+0x48>
	{
		switch(y){
    30c2:	8a 81       	ldd	r24, Y+2	; 0x02
    30c4:	28 2f       	mov	r18, r24
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	3c 83       	std	Y+4, r19	; 0x04
    30ca:	2b 83       	std	Y+3, r18	; 0x03
    30cc:	8b 81       	ldd	r24, Y+3	; 0x03
    30ce:	9c 81       	ldd	r25, Y+4	; 0x04
    30d0:	81 30       	cpi	r24, 0x01	; 1
    30d2:	91 05       	cpc	r25, r1
    30d4:	31 f0       	breq	.+12     	; 0x30e2 <Gotoxy+0x36>
    30d6:	2b 81       	ldd	r18, Y+3	; 0x03
    30d8:	3c 81       	ldd	r19, Y+4	; 0x04
    30da:	22 30       	cpi	r18, 0x02	; 2
    30dc:	31 05       	cpc	r19, r1
    30de:	31 f0       	breq	.+12     	; 0x30ec <Gotoxy+0x40>
    30e0:	09 c0       	rjmp	.+18     	; 0x30f4 <Gotoxy+0x48>
		case LineOne:
			LCD_voidSendCommand(LineOneStart+x);	//set DDRAM address
    30e2:	89 81       	ldd	r24, Y+1	; 0x01
    30e4:	80 58       	subi	r24, 0x80	; 128
    30e6:	0e 94 4b 12 	call	0x2496	; 0x2496 <LCD_voidSendCommand>
    30ea:	04 c0       	rjmp	.+8      	; 0x30f4 <Gotoxy+0x48>
			break;
		case LineTwo:
			LCD_voidSendCommand(LineTwoStart+x);	//set DDRAM address
    30ec:	89 81       	ldd	r24, Y+1	; 0x01
    30ee:	80 54       	subi	r24, 0x40	; 64
    30f0:	0e 94 4b 12 	call	0x2496	; 0x2496 <LCD_voidSendCommand>
	}
	else
	{
		//do nothing
	}
}
    30f4:	0f 90       	pop	r0
    30f6:	0f 90       	pop	r0
    30f8:	0f 90       	pop	r0
    30fa:	0f 90       	pop	r0
    30fc:	cf 91       	pop	r28
    30fe:	df 91       	pop	r29
    3100:	08 95       	ret

00003102 <LCD_voidGotoxy_4bitMode>:

void LCD_voidGotoxy_4bitMode(uint8 x, uint8 y){
    3102:	df 93       	push	r29
    3104:	cf 93       	push	r28
    3106:	00 d0       	rcall	.+0      	; 0x3108 <LCD_voidGotoxy_4bitMode+0x6>
    3108:	00 d0       	rcall	.+0      	; 0x310a <LCD_voidGotoxy_4bitMode+0x8>
    310a:	cd b7       	in	r28, 0x3d	; 61
    310c:	de b7       	in	r29, 0x3e	; 62
    310e:	89 83       	std	Y+1, r24	; 0x01
    3110:	6a 83       	std	Y+2, r22	; 0x02
	if(x>=0 && x<16)
    3112:	89 81       	ldd	r24, Y+1	; 0x01
    3114:	80 31       	cpi	r24, 0x10	; 16
    3116:	c8 f4       	brcc	.+50     	; 0x314a <LCD_voidGotoxy_4bitMode+0x48>
	{
		switch(y){
    3118:	8a 81       	ldd	r24, Y+2	; 0x02
    311a:	28 2f       	mov	r18, r24
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	3c 83       	std	Y+4, r19	; 0x04
    3120:	2b 83       	std	Y+3, r18	; 0x03
    3122:	8b 81       	ldd	r24, Y+3	; 0x03
    3124:	9c 81       	ldd	r25, Y+4	; 0x04
    3126:	81 30       	cpi	r24, 0x01	; 1
    3128:	91 05       	cpc	r25, r1
    312a:	31 f0       	breq	.+12     	; 0x3138 <LCD_voidGotoxy_4bitMode+0x36>
    312c:	2b 81       	ldd	r18, Y+3	; 0x03
    312e:	3c 81       	ldd	r19, Y+4	; 0x04
    3130:	22 30       	cpi	r18, 0x02	; 2
    3132:	31 05       	cpc	r19, r1
    3134:	31 f0       	breq	.+12     	; 0x3142 <LCD_voidGotoxy_4bitMode+0x40>
    3136:	09 c0       	rjmp	.+18     	; 0x314a <LCD_voidGotoxy_4bitMode+0x48>
		case LineOne:
			LCD_voidSendCommand_4bitMode(LineOneStart+x);	//set DDRAM address
    3138:	89 81       	ldd	r24, Y+1	; 0x01
    313a:	80 58       	subi	r24, 0x80	; 128
    313c:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendCommand_4bitMode>
    3140:	04 c0       	rjmp	.+8      	; 0x314a <LCD_voidGotoxy_4bitMode+0x48>
			break;
		case LineTwo:
			LCD_voidSendCommand_4bitMode(LineTwoStart+x);	//set DDRAM address
    3142:	89 81       	ldd	r24, Y+1	; 0x01
    3144:	80 54       	subi	r24, 0x40	; 64
    3146:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendCommand_4bitMode>
	}
	else
	{
		//do nothing
	}
}
    314a:	0f 90       	pop	r0
    314c:	0f 90       	pop	r0
    314e:	0f 90       	pop	r0
    3150:	0f 90       	pop	r0
    3152:	cf 91       	pop	r28
    3154:	df 91       	pop	r29
    3156:	08 95       	ret

00003158 <LCD_voidWriteExtraChar>:
void LCD_voidWriteExtraChar(uint8 Y, uint8 X){
    3158:	df 93       	push	r29
    315a:	cf 93       	push	r28
    315c:	00 d0       	rcall	.+0      	; 0x315e <LCD_voidWriteExtraChar+0x6>
    315e:	cd b7       	in	r28, 0x3d	; 61
    3160:	de b7       	in	r29, 0x3e	; 62
    3162:	89 83       	std	Y+1, r24	; 0x01
    3164:	6a 83       	std	Y+2, r22	; 0x02

}
    3166:	0f 90       	pop	r0
    3168:	0f 90       	pop	r0
    316a:	cf 91       	pop	r28
    316c:	df 91       	pop	r29
    316e:	08 95       	ret

00003170 <LCD_voidDisplayKeys>:

void LCD_voidDisplayKeys(uint8 *u8key, uint8 *index){
    3170:	df 93       	push	r29
    3172:	cf 93       	push	r28
    3174:	cd b7       	in	r28, 0x3d	; 61
    3176:	de b7       	in	r29, 0x3e	; 62
    3178:	a0 97       	sbiw	r28, 0x20	; 32
    317a:	0f b6       	in	r0, 0x3f	; 63
    317c:	f8 94       	cli
    317e:	de bf       	out	0x3e, r29	; 62
    3180:	0f be       	out	0x3f, r0	; 63
    3182:	cd bf       	out	0x3d, r28	; 61
    3184:	9e 8f       	std	Y+30, r25	; 0x1e
    3186:	8d 8f       	std	Y+29, r24	; 0x1d
    3188:	78 a3       	std	Y+32, r23	; 0x20
    318a:	6f 8f       	std	Y+31, r22	; 0x1f
	LCD_voidGotoxy_4bitMode(*index, LineTwo);
    318c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    318e:	f8 a1       	ldd	r31, Y+32	; 0x20
    3190:	80 81       	ld	r24, Z
    3192:	62 e0       	ldi	r22, 0x02	; 2
    3194:	0e 94 81 18 	call	0x3102	; 0x3102 <LCD_voidGotoxy_4bitMode>
	if ((u8key[*index] >= '0' && u8key[*index] <= '9') || (u8key[*index] >= 'A' && u8key[*index] <= 'D') || (u8key[*index] =='*')||(u8key[*index] =='#')) {
    3198:	ef 8d       	ldd	r30, Y+31	; 0x1f
    319a:	f8 a1       	ldd	r31, Y+32	; 0x20
    319c:	80 81       	ld	r24, Z
    319e:	28 2f       	mov	r18, r24
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31a6:	fc 01       	movw	r30, r24
    31a8:	e2 0f       	add	r30, r18
    31aa:	f3 1f       	adc	r31, r19
    31ac:	80 81       	ld	r24, Z
    31ae:	80 33       	cpi	r24, 0x30	; 48
    31b0:	68 f0       	brcs	.+26     	; 0x31cc <LCD_voidDisplayKeys+0x5c>
    31b2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    31b4:	f8 a1       	ldd	r31, Y+32	; 0x20
    31b6:	80 81       	ld	r24, Z
    31b8:	28 2f       	mov	r18, r24
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31c0:	fc 01       	movw	r30, r24
    31c2:	e2 0f       	add	r30, r18
    31c4:	f3 1f       	adc	r31, r19
    31c6:	80 81       	ld	r24, Z
    31c8:	8a 33       	cpi	r24, 0x3A	; 58
    31ca:	a8 f1       	brcs	.+106    	; 0x3236 <LCD_voidDisplayKeys+0xc6>
    31cc:	ef 8d       	ldd	r30, Y+31	; 0x1f
    31ce:	f8 a1       	ldd	r31, Y+32	; 0x20
    31d0:	80 81       	ld	r24, Z
    31d2:	28 2f       	mov	r18, r24
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31da:	fc 01       	movw	r30, r24
    31dc:	e2 0f       	add	r30, r18
    31de:	f3 1f       	adc	r31, r19
    31e0:	80 81       	ld	r24, Z
    31e2:	81 34       	cpi	r24, 0x41	; 65
    31e4:	68 f0       	brcs	.+26     	; 0x3200 <LCD_voidDisplayKeys+0x90>
    31e6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    31e8:	f8 a1       	ldd	r31, Y+32	; 0x20
    31ea:	80 81       	ld	r24, Z
    31ec:	28 2f       	mov	r18, r24
    31ee:	30 e0       	ldi	r19, 0x00	; 0
    31f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31f4:	fc 01       	movw	r30, r24
    31f6:	e2 0f       	add	r30, r18
    31f8:	f3 1f       	adc	r31, r19
    31fa:	80 81       	ld	r24, Z
    31fc:	85 34       	cpi	r24, 0x45	; 69
    31fe:	d8 f0       	brcs	.+54     	; 0x3236 <LCD_voidDisplayKeys+0xc6>
    3200:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3202:	f8 a1       	ldd	r31, Y+32	; 0x20
    3204:	80 81       	ld	r24, Z
    3206:	28 2f       	mov	r18, r24
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    320c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    320e:	fc 01       	movw	r30, r24
    3210:	e2 0f       	add	r30, r18
    3212:	f3 1f       	adc	r31, r19
    3214:	80 81       	ld	r24, Z
    3216:	8a 32       	cpi	r24, 0x2A	; 42
    3218:	71 f0       	breq	.+28     	; 0x3236 <LCD_voidDisplayKeys+0xc6>
    321a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    321c:	f8 a1       	ldd	r31, Y+32	; 0x20
    321e:	80 81       	ld	r24, Z
    3220:	28 2f       	mov	r18, r24
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3226:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3228:	fc 01       	movw	r30, r24
    322a:	e2 0f       	add	r30, r18
    322c:	f3 1f       	adc	r31, r19
    322e:	80 81       	ld	r24, Z
    3230:	83 32       	cpi	r24, 0x23	; 35
    3232:	09 f0       	breq	.+2      	; 0x3236 <LCD_voidDisplayKeys+0xc6>
    3234:	01 c1       	rjmp	.+514    	; 0x3438 <LCD_voidDisplayKeys+0x2c8>
		LCD_voidWriteCharctr_4bitMode(u8key[*index]);
    3236:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3238:	f8 a1       	ldd	r31, Y+32	; 0x20
    323a:	80 81       	ld	r24, Z
    323c:	28 2f       	mov	r18, r24
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3242:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3244:	fc 01       	movw	r30, r24
    3246:	e2 0f       	add	r30, r18
    3248:	f3 1f       	adc	r31, r19
    324a:	80 81       	ld	r24, Z
    324c:	0e 94 89 15 	call	0x2b12	; 0x2b12 <LCD_voidWriteCharctr_4bitMode>
		LCD_voidGotoxy_4bitMode(*index, LineTwo);
    3250:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3252:	f8 a1       	ldd	r31, Y+32	; 0x20
    3254:	80 81       	ld	r24, Z
    3256:	62 e0       	ldi	r22, 0x02	; 2
    3258:	0e 94 81 18 	call	0x3102	; 0x3102 <LCD_voidGotoxy_4bitMode>
    325c:	80 e0       	ldi	r24, 0x00	; 0
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	a6 e9       	ldi	r26, 0x96	; 150
    3262:	b3 e4       	ldi	r27, 0x43	; 67
    3264:	89 8f       	std	Y+25, r24	; 0x19
    3266:	9a 8f       	std	Y+26, r25	; 0x1a
    3268:	ab 8f       	std	Y+27, r26	; 0x1b
    326a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    326c:	69 8d       	ldd	r22, Y+25	; 0x19
    326e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3270:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3272:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	4a ef       	ldi	r20, 0xFA	; 250
    327a:	54 e4       	ldi	r21, 0x44	; 68
    327c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	8d 8b       	std	Y+21, r24	; 0x15
    3286:	9e 8b       	std	Y+22, r25	; 0x16
    3288:	af 8b       	std	Y+23, r26	; 0x17
    328a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    328c:	6d 89       	ldd	r22, Y+21	; 0x15
    328e:	7e 89       	ldd	r23, Y+22	; 0x16
    3290:	8f 89       	ldd	r24, Y+23	; 0x17
    3292:	98 8d       	ldd	r25, Y+24	; 0x18
    3294:	20 e0       	ldi	r18, 0x00	; 0
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	40 e8       	ldi	r20, 0x80	; 128
    329a:	5f e3       	ldi	r21, 0x3F	; 63
    329c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32a0:	88 23       	and	r24, r24
    32a2:	2c f4       	brge	.+10     	; 0x32ae <LCD_voidDisplayKeys+0x13e>
		__ticks = 1;
    32a4:	81 e0       	ldi	r24, 0x01	; 1
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	9c 8b       	std	Y+20, r25	; 0x14
    32aa:	8b 8b       	std	Y+19, r24	; 0x13
    32ac:	3f c0       	rjmp	.+126    	; 0x332c <LCD_voidDisplayKeys+0x1bc>
	else if (__tmp > 65535)
    32ae:	6d 89       	ldd	r22, Y+21	; 0x15
    32b0:	7e 89       	ldd	r23, Y+22	; 0x16
    32b2:	8f 89       	ldd	r24, Y+23	; 0x17
    32b4:	98 8d       	ldd	r25, Y+24	; 0x18
    32b6:	20 e0       	ldi	r18, 0x00	; 0
    32b8:	3f ef       	ldi	r19, 0xFF	; 255
    32ba:	4f e7       	ldi	r20, 0x7F	; 127
    32bc:	57 e4       	ldi	r21, 0x47	; 71
    32be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32c2:	18 16       	cp	r1, r24
    32c4:	4c f5       	brge	.+82     	; 0x3318 <LCD_voidDisplayKeys+0x1a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32c6:	69 8d       	ldd	r22, Y+25	; 0x19
    32c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32ce:	20 e0       	ldi	r18, 0x00	; 0
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	40 e2       	ldi	r20, 0x20	; 32
    32d4:	51 e4       	ldi	r21, 0x41	; 65
    32d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	bc 01       	movw	r22, r24
    32e0:	cd 01       	movw	r24, r26
    32e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e6:	dc 01       	movw	r26, r24
    32e8:	cb 01       	movw	r24, r22
    32ea:	9c 8b       	std	Y+20, r25	; 0x14
    32ec:	8b 8b       	std	Y+19, r24	; 0x13
    32ee:	0f c0       	rjmp	.+30     	; 0x330e <LCD_voidDisplayKeys+0x19e>
    32f0:	88 ec       	ldi	r24, 0xC8	; 200
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	9a 8b       	std	Y+18, r25	; 0x12
    32f6:	89 8b       	std	Y+17, r24	; 0x11
    32f8:	89 89       	ldd	r24, Y+17	; 0x11
    32fa:	9a 89       	ldd	r25, Y+18	; 0x12
    32fc:	01 97       	sbiw	r24, 0x01	; 1
    32fe:	f1 f7       	brne	.-4      	; 0x32fc <LCD_voidDisplayKeys+0x18c>
    3300:	9a 8b       	std	Y+18, r25	; 0x12
    3302:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3304:	8b 89       	ldd	r24, Y+19	; 0x13
    3306:	9c 89       	ldd	r25, Y+20	; 0x14
    3308:	01 97       	sbiw	r24, 0x01	; 1
    330a:	9c 8b       	std	Y+20, r25	; 0x14
    330c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    330e:	8b 89       	ldd	r24, Y+19	; 0x13
    3310:	9c 89       	ldd	r25, Y+20	; 0x14
    3312:	00 97       	sbiw	r24, 0x00	; 0
    3314:	69 f7       	brne	.-38     	; 0x32f0 <LCD_voidDisplayKeys+0x180>
    3316:	14 c0       	rjmp	.+40     	; 0x3340 <LCD_voidDisplayKeys+0x1d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3318:	6d 89       	ldd	r22, Y+21	; 0x15
    331a:	7e 89       	ldd	r23, Y+22	; 0x16
    331c:	8f 89       	ldd	r24, Y+23	; 0x17
    331e:	98 8d       	ldd	r25, Y+24	; 0x18
    3320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3324:	dc 01       	movw	r26, r24
    3326:	cb 01       	movw	r24, r22
    3328:	9c 8b       	std	Y+20, r25	; 0x14
    332a:	8b 8b       	std	Y+19, r24	; 0x13
    332c:	8b 89       	ldd	r24, Y+19	; 0x13
    332e:	9c 89       	ldd	r25, Y+20	; 0x14
    3330:	98 8b       	std	Y+16, r25	; 0x10
    3332:	8f 87       	std	Y+15, r24	; 0x0f
    3334:	8f 85       	ldd	r24, Y+15	; 0x0f
    3336:	98 89       	ldd	r25, Y+16	; 0x10
    3338:	01 97       	sbiw	r24, 0x01	; 1
    333a:	f1 f7       	brne	.-4      	; 0x3338 <LCD_voidDisplayKeys+0x1c8>
    333c:	98 8b       	std	Y+16, r25	; 0x10
    333e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(300);
		LCD_voidWriteCharctr_4bitMode('*');
    3340:	8a e2       	ldi	r24, 0x2A	; 42
    3342:	0e 94 89 15 	call	0x2b12	; 0x2b12 <LCD_voidWriteCharctr_4bitMode>
    3346:	80 e0       	ldi	r24, 0x00	; 0
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	a8 ec       	ldi	r26, 0xC8	; 200
    334c:	b2 e4       	ldi	r27, 0x42	; 66
    334e:	8b 87       	std	Y+11, r24	; 0x0b
    3350:	9c 87       	std	Y+12, r25	; 0x0c
    3352:	ad 87       	std	Y+13, r26	; 0x0d
    3354:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3356:	6b 85       	ldd	r22, Y+11	; 0x0b
    3358:	7c 85       	ldd	r23, Y+12	; 0x0c
    335a:	8d 85       	ldd	r24, Y+13	; 0x0d
    335c:	9e 85       	ldd	r25, Y+14	; 0x0e
    335e:	20 e0       	ldi	r18, 0x00	; 0
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	4a ef       	ldi	r20, 0xFA	; 250
    3364:	54 e4       	ldi	r21, 0x44	; 68
    3366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    336a:	dc 01       	movw	r26, r24
    336c:	cb 01       	movw	r24, r22
    336e:	8f 83       	std	Y+7, r24	; 0x07
    3370:	98 87       	std	Y+8, r25	; 0x08
    3372:	a9 87       	std	Y+9, r26	; 0x09
    3374:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3376:	6f 81       	ldd	r22, Y+7	; 0x07
    3378:	78 85       	ldd	r23, Y+8	; 0x08
    337a:	89 85       	ldd	r24, Y+9	; 0x09
    337c:	9a 85       	ldd	r25, Y+10	; 0x0a
    337e:	20 e0       	ldi	r18, 0x00	; 0
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	40 e8       	ldi	r20, 0x80	; 128
    3384:	5f e3       	ldi	r21, 0x3F	; 63
    3386:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    338a:	88 23       	and	r24, r24
    338c:	2c f4       	brge	.+10     	; 0x3398 <LCD_voidDisplayKeys+0x228>
		__ticks = 1;
    338e:	81 e0       	ldi	r24, 0x01	; 1
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	9e 83       	std	Y+6, r25	; 0x06
    3394:	8d 83       	std	Y+5, r24	; 0x05
    3396:	3f c0       	rjmp	.+126    	; 0x3416 <LCD_voidDisplayKeys+0x2a6>
	else if (__tmp > 65535)
    3398:	6f 81       	ldd	r22, Y+7	; 0x07
    339a:	78 85       	ldd	r23, Y+8	; 0x08
    339c:	89 85       	ldd	r24, Y+9	; 0x09
    339e:	9a 85       	ldd	r25, Y+10	; 0x0a
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	3f ef       	ldi	r19, 0xFF	; 255
    33a4:	4f e7       	ldi	r20, 0x7F	; 127
    33a6:	57 e4       	ldi	r21, 0x47	; 71
    33a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33ac:	18 16       	cp	r1, r24
    33ae:	4c f5       	brge	.+82     	; 0x3402 <LCD_voidDisplayKeys+0x292>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	40 e2       	ldi	r20, 0x20	; 32
    33be:	51 e4       	ldi	r21, 0x41	; 65
    33c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c4:	dc 01       	movw	r26, r24
    33c6:	cb 01       	movw	r24, r22
    33c8:	bc 01       	movw	r22, r24
    33ca:	cd 01       	movw	r24, r26
    33cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d0:	dc 01       	movw	r26, r24
    33d2:	cb 01       	movw	r24, r22
    33d4:	9e 83       	std	Y+6, r25	; 0x06
    33d6:	8d 83       	std	Y+5, r24	; 0x05
    33d8:	0f c0       	rjmp	.+30     	; 0x33f8 <LCD_voidDisplayKeys+0x288>
    33da:	88 ec       	ldi	r24, 0xC8	; 200
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	9c 83       	std	Y+4, r25	; 0x04
    33e0:	8b 83       	std	Y+3, r24	; 0x03
    33e2:	8b 81       	ldd	r24, Y+3	; 0x03
    33e4:	9c 81       	ldd	r25, Y+4	; 0x04
    33e6:	01 97       	sbiw	r24, 0x01	; 1
    33e8:	f1 f7       	brne	.-4      	; 0x33e6 <LCD_voidDisplayKeys+0x276>
    33ea:	9c 83       	std	Y+4, r25	; 0x04
    33ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ee:	8d 81       	ldd	r24, Y+5	; 0x05
    33f0:	9e 81       	ldd	r25, Y+6	; 0x06
    33f2:	01 97       	sbiw	r24, 0x01	; 1
    33f4:	9e 83       	std	Y+6, r25	; 0x06
    33f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33f8:	8d 81       	ldd	r24, Y+5	; 0x05
    33fa:	9e 81       	ldd	r25, Y+6	; 0x06
    33fc:	00 97       	sbiw	r24, 0x00	; 0
    33fe:	69 f7       	brne	.-38     	; 0x33da <LCD_voidDisplayKeys+0x26a>
    3400:	14 c0       	rjmp	.+40     	; 0x342a <LCD_voidDisplayKeys+0x2ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3402:	6f 81       	ldd	r22, Y+7	; 0x07
    3404:	78 85       	ldd	r23, Y+8	; 0x08
    3406:	89 85       	ldd	r24, Y+9	; 0x09
    3408:	9a 85       	ldd	r25, Y+10	; 0x0a
    340a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    340e:	dc 01       	movw	r26, r24
    3410:	cb 01       	movw	r24, r22
    3412:	9e 83       	std	Y+6, r25	; 0x06
    3414:	8d 83       	std	Y+5, r24	; 0x05
    3416:	8d 81       	ldd	r24, Y+5	; 0x05
    3418:	9e 81       	ldd	r25, Y+6	; 0x06
    341a:	9a 83       	std	Y+2, r25	; 0x02
    341c:	89 83       	std	Y+1, r24	; 0x01
    341e:	89 81       	ldd	r24, Y+1	; 0x01
    3420:	9a 81       	ldd	r25, Y+2	; 0x02
    3422:	01 97       	sbiw	r24, 0x01	; 1
    3424:	f1 f7       	brne	.-4      	; 0x3422 <LCD_voidDisplayKeys+0x2b2>
    3426:	9a 83       	std	Y+2, r25	; 0x02
    3428:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		(*index)++;
    342a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    342c:	f8 a1       	ldd	r31, Y+32	; 0x20
    342e:	80 81       	ld	r24, Z
    3430:	8f 5f       	subi	r24, 0xFF	; 255
    3432:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3434:	f8 a1       	ldd	r31, Y+32	; 0x20
    3436:	80 83       	st	Z, r24
	}
}
    3438:	a0 96       	adiw	r28, 0x20	; 32
    343a:	0f b6       	in	r0, 0x3f	; 63
    343c:	f8 94       	cli
    343e:	de bf       	out	0x3e, r29	; 62
    3440:	0f be       	out	0x3f, r0	; 63
    3442:	cd bf       	out	0x3d, r28	; 61
    3444:	cf 91       	pop	r28
    3446:	df 91       	pop	r29
    3448:	08 95       	ret

0000344a <KPD_voidInit>:
					 { '4', '5', '6', 'B'},
					 { '1', '2', '3', 'C'},
					 { '*', '0', '#', 'D'}};


void KPD_voidInit(void){
    344a:	df 93       	push	r29
    344c:	cf 93       	push	r28
    344e:	0f 92       	push	r0
    3450:	cd b7       	in	r28, 0x3d	; 61
    3452:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	for(i=ROW_START; i<=ROW_END; i++){
    3454:	84 e0       	ldi	r24, 0x04	; 4
    3456:	89 83       	std	Y+1, r24	; 0x01
    3458:	08 c0       	rjmp	.+16     	; 0x346a <KPD_voidInit+0x20>
		//make all rows input pull up
		DIO_voidPullUpState(KPD_ROW_PORT,i, ENABLE_PULLUP);
    345a:	82 e0       	ldi	r24, 0x02	; 2
    345c:	69 81       	ldd	r22, Y+1	; 0x01
    345e:	41 e0       	ldi	r20, 0x01	; 1
    3460:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <DIO_voidPullUpState>
					 { '*', '0', '#', 'D'}};


void KPD_voidInit(void){
	uint8 i;
	for(i=ROW_START; i<=ROW_END; i++){
    3464:	89 81       	ldd	r24, Y+1	; 0x01
    3466:	8f 5f       	subi	r24, 0xFF	; 255
    3468:	89 83       	std	Y+1, r24	; 0x01
    346a:	89 81       	ldd	r24, Y+1	; 0x01
    346c:	88 30       	cpi	r24, 0x08	; 8
    346e:	a8 f3       	brcs	.-22     	; 0x345a <KPD_voidInit+0x10>
		//make all rows input pull up
		DIO_voidPullUpState(KPD_ROW_PORT,i, ENABLE_PULLUP);
	}
	for(i=COLUMN_START; i<=COLUMN_END; i++){
    3470:	84 e0       	ldi	r24, 0x04	; 4
    3472:	89 83       	std	Y+1, r24	; 0x01
    3474:	08 c0       	rjmp	.+16     	; 0x3486 <KPD_voidInit+0x3c>
		//make all column pins high
		//DIO_voidWritePin(KPD_PORT,i, DIO_INPUT);
		DIO_voidWritePin(KPD_COLUMN_PORT,i, DIO_HIGH);
    3476:	83 e0       	ldi	r24, 0x03	; 3
    3478:	69 81       	ldd	r22, Y+1	; 0x01
    347a:	41 e0       	ldi	r20, 0x01	; 1
    347c:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
	uint8 i;
	for(i=ROW_START; i<=ROW_END; i++){
		//make all rows input pull up
		DIO_voidPullUpState(KPD_ROW_PORT,i, ENABLE_PULLUP);
	}
	for(i=COLUMN_START; i<=COLUMN_END; i++){
    3480:	89 81       	ldd	r24, Y+1	; 0x01
    3482:	8f 5f       	subi	r24, 0xFF	; 255
    3484:	89 83       	std	Y+1, r24	; 0x01
    3486:	89 81       	ldd	r24, Y+1	; 0x01
    3488:	88 30       	cpi	r24, 0x08	; 8
    348a:	a8 f3       	brcs	.-22     	; 0x3476 <KPD_voidInit+0x2c>
		//make all column pins high
		//DIO_voidWritePin(KPD_PORT,i, DIO_INPUT);
		DIO_voidWritePin(KPD_COLUMN_PORT,i, DIO_HIGH);
		}
}
    348c:	0f 90       	pop	r0
    348e:	cf 91       	pop	r28
    3490:	df 91       	pop	r29
    3492:	08 95       	ret

00003494 <KPD_u8GetKey>:

uint8 KPD_u8GetKey(void){
    3494:	df 93       	push	r29
    3496:	cf 93       	push	r28
    3498:	cd b7       	in	r28, 0x3d	; 61
    349a:	de b7       	in	r29, 0x3e	; 62
    349c:	64 97       	sbiw	r28, 0x14	; 20
    349e:	0f b6       	in	r0, 0x3f	; 63
    34a0:	f8 94       	cli
    34a2:	de bf       	out	0x3e, r29	; 62
    34a4:	0f be       	out	0x3f, r0	; 63
    34a6:	cd bf       	out	0x3d, r28	; 61
	uint8 key = NoPressedKey;
    34a8:	8f ef       	ldi	r24, 0xFF	; 255
    34aa:	8c 8b       	std	Y+20, r24	; 0x14
	uint8 i=0, j=0, k=0;
    34ac:	1b 8a       	std	Y+19, r1	; 0x13
    34ae:	1a 8a       	std	Y+18, r1	; 0x12
    34b0:	19 8a       	std	Y+17, r1	; 0x11
	uint8 result, exitflag = DIO_LOW;
    34b2:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;i<4;i++){			//loop over columns
    34b4:	1b 8a       	std	Y+19, r1	; 0x13
    34b6:	b9 c0       	rjmp	.+370    	; 0x362a <KPD_u8GetKey+0x196>
		//set all columns high
		for(k=COLUMN_START; k<=COLUMN_END;k++){
    34b8:	84 e0       	ldi	r24, 0x04	; 4
    34ba:	89 8b       	std	Y+17, r24	; 0x11
    34bc:	08 c0       	rjmp	.+16     	; 0x34ce <KPD_u8GetKey+0x3a>
			DIO_voidWritePin(KPD_COLUMN_PORT,k, DIO_HIGH);
    34be:	83 e0       	ldi	r24, 0x03	; 3
    34c0:	69 89       	ldd	r22, Y+17	; 0x11
    34c2:	41 e0       	ldi	r20, 0x01	; 1
    34c4:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
	uint8 key = NoPressedKey;
	uint8 i=0, j=0, k=0;
	uint8 result, exitflag = DIO_LOW;
	for(i=0;i<4;i++){			//loop over columns
		//set all columns high
		for(k=COLUMN_START; k<=COLUMN_END;k++){
    34c8:	89 89       	ldd	r24, Y+17	; 0x11
    34ca:	8f 5f       	subi	r24, 0xFF	; 255
    34cc:	89 8b       	std	Y+17, r24	; 0x11
    34ce:	89 89       	ldd	r24, Y+17	; 0x11
    34d0:	88 30       	cpi	r24, 0x08	; 8
    34d2:	a8 f3       	brcs	.-22     	; 0x34be <KPD_u8GetKey+0x2a>
			DIO_voidWritePin(KPD_COLUMN_PORT,k, DIO_HIGH);
		}
		//set column low
		DIO_voidWritePin(KPD_COLUMN_PORT,(COLUMN_START+i), DIO_LOW);
    34d4:	8b 89       	ldd	r24, Y+19	; 0x13
    34d6:	98 2f       	mov	r25, r24
    34d8:	9c 5f       	subi	r25, 0xFC	; 252
    34da:	83 e0       	ldi	r24, 0x03	; 3
    34dc:	69 2f       	mov	r22, r25
    34de:	40 e0       	ldi	r20, 0x00	; 0
    34e0:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>

		for(j=0;j<4;j++){		//loop over rows
    34e4:	1a 8a       	std	Y+18, r1	; 0x12
    34e6:	97 c0       	rjmp	.+302    	; 0x3616 <KPD_u8GetKey+0x182>
			result = DIO_u8ReadPin(KPD_ROW_PORT, (ROW_START+j));
    34e8:	8a 89       	ldd	r24, Y+18	; 0x12
    34ea:	98 2f       	mov	r25, r24
    34ec:	9c 5f       	subi	r25, 0xFC	; 252
    34ee:	82 e0       	ldi	r24, 0x02	; 2
    34f0:	69 2f       	mov	r22, r25
    34f2:	0e 94 a0 20 	call	0x4140	; 0x4140 <DIO_u8ReadPin>
    34f6:	88 8b       	std	Y+16, r24	; 0x10
    34f8:	80 e0       	ldi	r24, 0x00	; 0
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	a0 ea       	ldi	r26, 0xA0	; 160
    34fe:	b1 e4       	ldi	r27, 0x41	; 65
    3500:	8b 87       	std	Y+11, r24	; 0x0b
    3502:	9c 87       	std	Y+12, r25	; 0x0c
    3504:	ad 87       	std	Y+13, r26	; 0x0d
    3506:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3508:	6b 85       	ldd	r22, Y+11	; 0x0b
    350a:	7c 85       	ldd	r23, Y+12	; 0x0c
    350c:	8d 85       	ldd	r24, Y+13	; 0x0d
    350e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3510:	20 e0       	ldi	r18, 0x00	; 0
    3512:	30 e0       	ldi	r19, 0x00	; 0
    3514:	4a ef       	ldi	r20, 0xFA	; 250
    3516:	54 e4       	ldi	r21, 0x44	; 68
    3518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    351c:	dc 01       	movw	r26, r24
    351e:	cb 01       	movw	r24, r22
    3520:	8f 83       	std	Y+7, r24	; 0x07
    3522:	98 87       	std	Y+8, r25	; 0x08
    3524:	a9 87       	std	Y+9, r26	; 0x09
    3526:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3528:	6f 81       	ldd	r22, Y+7	; 0x07
    352a:	78 85       	ldd	r23, Y+8	; 0x08
    352c:	89 85       	ldd	r24, Y+9	; 0x09
    352e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	40 e8       	ldi	r20, 0x80	; 128
    3536:	5f e3       	ldi	r21, 0x3F	; 63
    3538:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    353c:	88 23       	and	r24, r24
    353e:	2c f4       	brge	.+10     	; 0x354a <KPD_u8GetKey+0xb6>
		__ticks = 1;
    3540:	81 e0       	ldi	r24, 0x01	; 1
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	9e 83       	std	Y+6, r25	; 0x06
    3546:	8d 83       	std	Y+5, r24	; 0x05
    3548:	3f c0       	rjmp	.+126    	; 0x35c8 <KPD_u8GetKey+0x134>
	else if (__tmp > 65535)
    354a:	6f 81       	ldd	r22, Y+7	; 0x07
    354c:	78 85       	ldd	r23, Y+8	; 0x08
    354e:	89 85       	ldd	r24, Y+9	; 0x09
    3550:	9a 85       	ldd	r25, Y+10	; 0x0a
    3552:	20 e0       	ldi	r18, 0x00	; 0
    3554:	3f ef       	ldi	r19, 0xFF	; 255
    3556:	4f e7       	ldi	r20, 0x7F	; 127
    3558:	57 e4       	ldi	r21, 0x47	; 71
    355a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    355e:	18 16       	cp	r1, r24
    3560:	4c f5       	brge	.+82     	; 0x35b4 <KPD_u8GetKey+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3562:	6b 85       	ldd	r22, Y+11	; 0x0b
    3564:	7c 85       	ldd	r23, Y+12	; 0x0c
    3566:	8d 85       	ldd	r24, Y+13	; 0x0d
    3568:	9e 85       	ldd	r25, Y+14	; 0x0e
    356a:	20 e0       	ldi	r18, 0x00	; 0
    356c:	30 e0       	ldi	r19, 0x00	; 0
    356e:	40 e2       	ldi	r20, 0x20	; 32
    3570:	51 e4       	ldi	r21, 0x41	; 65
    3572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3576:	dc 01       	movw	r26, r24
    3578:	cb 01       	movw	r24, r22
    357a:	bc 01       	movw	r22, r24
    357c:	cd 01       	movw	r24, r26
    357e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3582:	dc 01       	movw	r26, r24
    3584:	cb 01       	movw	r24, r22
    3586:	9e 83       	std	Y+6, r25	; 0x06
    3588:	8d 83       	std	Y+5, r24	; 0x05
    358a:	0f c0       	rjmp	.+30     	; 0x35aa <KPD_u8GetKey+0x116>
    358c:	88 ec       	ldi	r24, 0xC8	; 200
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	9c 83       	std	Y+4, r25	; 0x04
    3592:	8b 83       	std	Y+3, r24	; 0x03
    3594:	8b 81       	ldd	r24, Y+3	; 0x03
    3596:	9c 81       	ldd	r25, Y+4	; 0x04
    3598:	01 97       	sbiw	r24, 0x01	; 1
    359a:	f1 f7       	brne	.-4      	; 0x3598 <KPD_u8GetKey+0x104>
    359c:	9c 83       	std	Y+4, r25	; 0x04
    359e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35a0:	8d 81       	ldd	r24, Y+5	; 0x05
    35a2:	9e 81       	ldd	r25, Y+6	; 0x06
    35a4:	01 97       	sbiw	r24, 0x01	; 1
    35a6:	9e 83       	std	Y+6, r25	; 0x06
    35a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35aa:	8d 81       	ldd	r24, Y+5	; 0x05
    35ac:	9e 81       	ldd	r25, Y+6	; 0x06
    35ae:	00 97       	sbiw	r24, 0x00	; 0
    35b0:	69 f7       	brne	.-38     	; 0x358c <KPD_u8GetKey+0xf8>
    35b2:	14 c0       	rjmp	.+40     	; 0x35dc <KPD_u8GetKey+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35b4:	6f 81       	ldd	r22, Y+7	; 0x07
    35b6:	78 85       	ldd	r23, Y+8	; 0x08
    35b8:	89 85       	ldd	r24, Y+9	; 0x09
    35ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    35bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c0:	dc 01       	movw	r26, r24
    35c2:	cb 01       	movw	r24, r22
    35c4:	9e 83       	std	Y+6, r25	; 0x06
    35c6:	8d 83       	std	Y+5, r24	; 0x05
    35c8:	8d 81       	ldd	r24, Y+5	; 0x05
    35ca:	9e 81       	ldd	r25, Y+6	; 0x06
    35cc:	9a 83       	std	Y+2, r25	; 0x02
    35ce:	89 83       	std	Y+1, r24	; 0x01
    35d0:	89 81       	ldd	r24, Y+1	; 0x01
    35d2:	9a 81       	ldd	r25, Y+2	; 0x02
    35d4:	01 97       	sbiw	r24, 0x01	; 1
    35d6:	f1 f7       	brne	.-4      	; 0x35d4 <KPD_u8GetKey+0x140>
    35d8:	9a 83       	std	Y+2, r25	; 0x02
    35da:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(20);
			if(result == DIO_LOW){
    35dc:	88 89       	ldd	r24, Y+16	; 0x10
    35de:	88 23       	and	r24, r24
    35e0:	b9 f4       	brne	.+46     	; 0x3610 <KPD_u8GetKey+0x17c>
				key = KPD_arr[j][i];
    35e2:	8a 89       	ldd	r24, Y+18	; 0x12
    35e4:	48 2f       	mov	r20, r24
    35e6:	50 e0       	ldi	r21, 0x00	; 0
    35e8:	8b 89       	ldd	r24, Y+19	; 0x13
    35ea:	28 2f       	mov	r18, r24
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	ca 01       	movw	r24, r20
    35f0:	88 0f       	add	r24, r24
    35f2:	99 1f       	adc	r25, r25
    35f4:	88 0f       	add	r24, r24
    35f6:	99 1f       	adc	r25, r25
    35f8:	82 0f       	add	r24, r18
    35fa:	93 1f       	adc	r25, r19
    35fc:	fc 01       	movw	r30, r24
    35fe:	e1 53       	subi	r30, 0x31	; 49
    3600:	ff 4f       	sbci	r31, 0xFF	; 255
    3602:	80 81       	ld	r24, Z
    3604:	8c 8b       	std	Y+20, r24	; 0x14
				exitflag = DIO_HIGH;
    3606:	81 e0       	ldi	r24, 0x01	; 1
    3608:	8f 87       	std	Y+15, r24	; 0x0f
				if(exitflag ==DIO_HIGH){
    360a:	8f 85       	ldd	r24, Y+15	; 0x0f
    360c:	81 30       	cpi	r24, 0x01	; 1
    360e:	39 f0       	breq	.+14     	; 0x361e <KPD_u8GetKey+0x18a>
			DIO_voidWritePin(KPD_COLUMN_PORT,k, DIO_HIGH);
		}
		//set column low
		DIO_voidWritePin(KPD_COLUMN_PORT,(COLUMN_START+i), DIO_LOW);

		for(j=0;j<4;j++){		//loop over rows
    3610:	8a 89       	ldd	r24, Y+18	; 0x12
    3612:	8f 5f       	subi	r24, 0xFF	; 255
    3614:	8a 8b       	std	Y+18, r24	; 0x12
    3616:	8a 89       	ldd	r24, Y+18	; 0x12
    3618:	84 30       	cpi	r24, 0x04	; 4
    361a:	08 f4       	brcc	.+2      	; 0x361e <KPD_u8GetKey+0x18a>
    361c:	65 cf       	rjmp	.-310    	; 0x34e8 <KPD_u8GetKey+0x54>
				if(exitflag ==DIO_HIGH){
					break;
				}
			}
		}
		if(exitflag == DIO_HIGH){
    361e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3620:	81 30       	cpi	r24, 0x01	; 1
    3622:	39 f0       	breq	.+14     	; 0x3632 <KPD_u8GetKey+0x19e>

uint8 KPD_u8GetKey(void){
	uint8 key = NoPressedKey;
	uint8 i=0, j=0, k=0;
	uint8 result, exitflag = DIO_LOW;
	for(i=0;i<4;i++){			//loop over columns
    3624:	8b 89       	ldd	r24, Y+19	; 0x13
    3626:	8f 5f       	subi	r24, 0xFF	; 255
    3628:	8b 8b       	std	Y+19, r24	; 0x13
    362a:	8b 89       	ldd	r24, Y+19	; 0x13
    362c:	84 30       	cpi	r24, 0x04	; 4
    362e:	08 f4       	brcc	.+2      	; 0x3632 <KPD_u8GetKey+0x19e>
    3630:	43 cf       	rjmp	.-378    	; 0x34b8 <KPD_u8GetKey+0x24>
		}
		if(exitflag == DIO_HIGH){
			break;
		}
	}
	return key;
    3632:	8c 89       	ldd	r24, Y+20	; 0x14
}
    3634:	64 96       	adiw	r28, 0x14	; 20
    3636:	0f b6       	in	r0, 0x3f	; 63
    3638:	f8 94       	cli
    363a:	de bf       	out	0x3e, r29	; 62
    363c:	0f be       	out	0x3f, r0	; 63
    363e:	cd bf       	out	0x3d, r28	; 61
    3640:	cf 91       	pop	r28
    3642:	df 91       	pop	r29
    3644:	08 95       	ret

00003646 <EXT_INTERRUPT_VID_INIT>:
void (*EXTI0_CALLBACK_PTR)(void)=NULL;
void (*EXTI1_CALLBACK_PTR)(void)=NULL;
void (*EXTI2_CALLBACK_PTR)(void)=NULL;


void EXT_INTERRUPT_VID_INIT(void){
    3646:	df 93       	push	r29
    3648:	cf 93       	push	r28
    364a:	cd b7       	in	r28, 0x3d	; 61
    364c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,ISC01);
#elif EXT0_MODE==   IOC
	SET_BIT(MCUCR,ISC00);
	CLR_BIT(MCUCR,ISC01);
#elif EXT0_MODE==   FALLING_EDGE
	CLR_BIT(MCUCR,ISC00);
    364e:	a5 e5       	ldi	r26, 0x55	; 85
    3650:	b0 e0       	ldi	r27, 0x00	; 0
    3652:	e5 e5       	ldi	r30, 0x55	; 85
    3654:	f0 e0       	ldi	r31, 0x00	; 0
    3656:	80 81       	ld	r24, Z
    3658:	8e 7f       	andi	r24, 0xFE	; 254
    365a:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC01);
    365c:	a5 e5       	ldi	r26, 0x55	; 85
    365e:	b0 e0       	ldi	r27, 0x00	; 0
    3660:	e5 e5       	ldi	r30, 0x55	; 85
    3662:	f0 e0       	ldi	r31, 0x00	; 0
    3664:	80 81       	ld	r24, Z
    3666:	82 60       	ori	r24, 0x02	; 2
    3668:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,ISC11);
#elif EXT1_MODE==   FALLING_EDGE
	CLR_BIT(MCUCR,ISC10);
	SET_BIT(MCUCR,ISC11);
#elif EXT1_MODE==   RISING_EDGE
	SET_BIT(MCUCR,ISC10);
    366a:	a5 e5       	ldi	r26, 0x55	; 85
    366c:	b0 e0       	ldi	r27, 0x00	; 0
    366e:	e5 e5       	ldi	r30, 0x55	; 85
    3670:	f0 e0       	ldi	r31, 0x00	; 0
    3672:	80 81       	ld	r24, Z
    3674:	84 60       	ori	r24, 0x04	; 4
    3676:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC11);
    3678:	a5 e5       	ldi	r26, 0x55	; 85
    367a:	b0 e0       	ldi	r27, 0x00	; 0
    367c:	e5 e5       	ldi	r30, 0x55	; 85
    367e:	f0 e0       	ldi	r31, 0x00	; 0
    3680:	80 81       	ld	r24, Z
    3682:	88 60       	ori	r24, 0x08	; 8
    3684:	8c 93       	st	X, r24
#else
#endif

#if EXT2_MODE== FALLING_EDGE
	CLR_BIT(MCUCSR,ISC2);
    3686:	a4 e5       	ldi	r26, 0x54	; 84
    3688:	b0 e0       	ldi	r27, 0x00	; 0
    368a:	e4 e5       	ldi	r30, 0x54	; 84
    368c:	f0 e0       	ldi	r31, 0x00	; 0
    368e:	80 81       	ld	r24, Z
    3690:	8f 7b       	andi	r24, 0xBF	; 191
    3692:	8c 93       	st	X, r24
	SET_BIT(MCUCSR,ISC2);


#else
#endif
}
    3694:	cf 91       	pop	r28
    3696:	df 91       	pop	r29
    3698:	08 95       	ret

0000369a <EXT_INTERRUPT_VID_ENABLE>:

void EXT_INTERRUPT_VID_ENABLE(uint8 interrupt_number){
    369a:	df 93       	push	r29
    369c:	cf 93       	push	r28
    369e:	00 d0       	rcall	.+0      	; 0x36a0 <EXT_INTERRUPT_VID_ENABLE+0x6>
    36a0:	0f 92       	push	r0
    36a2:	cd b7       	in	r28, 0x3d	; 61
    36a4:	de b7       	in	r29, 0x3e	; 62
    36a6:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt_number){
    36a8:	89 81       	ldd	r24, Y+1	; 0x01
    36aa:	28 2f       	mov	r18, r24
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	3b 83       	std	Y+3, r19	; 0x03
    36b0:	2a 83       	std	Y+2, r18	; 0x02
    36b2:	8a 81       	ldd	r24, Y+2	; 0x02
    36b4:	9b 81       	ldd	r25, Y+3	; 0x03
    36b6:	81 30       	cpi	r24, 0x01	; 1
    36b8:	91 05       	cpc	r25, r1
    36ba:	89 f0       	breq	.+34     	; 0x36de <EXT_INTERRUPT_VID_ENABLE+0x44>
    36bc:	2a 81       	ldd	r18, Y+2	; 0x02
    36be:	3b 81       	ldd	r19, Y+3	; 0x03
    36c0:	22 30       	cpi	r18, 0x02	; 2
    36c2:	31 05       	cpc	r19, r1
    36c4:	a1 f0       	breq	.+40     	; 0x36ee <EXT_INTERRUPT_VID_ENABLE+0x54>
    36c6:	8a 81       	ldd	r24, Y+2	; 0x02
    36c8:	9b 81       	ldd	r25, Y+3	; 0x03
    36ca:	00 97       	sbiw	r24, 0x00	; 0
    36cc:	b9 f4       	brne	.+46     	; 0x36fc <EXT_INTERRUPT_VID_ENABLE+0x62>
	case EXT0:
		SET_BIT(GICR, INT0);
    36ce:	ab e5       	ldi	r26, 0x5B	; 91
    36d0:	b0 e0       	ldi	r27, 0x00	; 0
    36d2:	eb e5       	ldi	r30, 0x5B	; 91
    36d4:	f0 e0       	ldi	r31, 0x00	; 0
    36d6:	80 81       	ld	r24, Z
    36d8:	80 64       	ori	r24, 0x40	; 64
    36da:	8c 93       	st	X, r24
    36dc:	0f c0       	rjmp	.+30     	; 0x36fc <EXT_INTERRUPT_VID_ENABLE+0x62>
		break;
	case EXT1:
		SET_BIT(GICR, INT1);
    36de:	ab e5       	ldi	r26, 0x5B	; 91
    36e0:	b0 e0       	ldi	r27, 0x00	; 0
    36e2:	eb e5       	ldi	r30, 0x5B	; 91
    36e4:	f0 e0       	ldi	r31, 0x00	; 0
    36e6:	80 81       	ld	r24, Z
    36e8:	80 68       	ori	r24, 0x80	; 128
    36ea:	8c 93       	st	X, r24
    36ec:	07 c0       	rjmp	.+14     	; 0x36fc <EXT_INTERRUPT_VID_ENABLE+0x62>
		break;
	case EXT2:
		SET_BIT(GICR, INT2);
    36ee:	ab e5       	ldi	r26, 0x5B	; 91
    36f0:	b0 e0       	ldi	r27, 0x00	; 0
    36f2:	eb e5       	ldi	r30, 0x5B	; 91
    36f4:	f0 e0       	ldi	r31, 0x00	; 0
    36f6:	80 81       	ld	r24, Z
    36f8:	80 62       	ori	r24, 0x20	; 32
    36fa:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    36fc:	0f 90       	pop	r0
    36fe:	0f 90       	pop	r0
    3700:	0f 90       	pop	r0
    3702:	cf 91       	pop	r28
    3704:	df 91       	pop	r29
    3706:	08 95       	ret

00003708 <EXT_INTERRUPT_VID_DISABLE>:

void EXT_INTERRUPT_VID_DISABLE(uint8 interrupt_number){
    3708:	df 93       	push	r29
    370a:	cf 93       	push	r28
    370c:	00 d0       	rcall	.+0      	; 0x370e <EXT_INTERRUPT_VID_DISABLE+0x6>
    370e:	0f 92       	push	r0
    3710:	cd b7       	in	r28, 0x3d	; 61
    3712:	de b7       	in	r29, 0x3e	; 62
    3714:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt_number){
    3716:	89 81       	ldd	r24, Y+1	; 0x01
    3718:	28 2f       	mov	r18, r24
    371a:	30 e0       	ldi	r19, 0x00	; 0
    371c:	3b 83       	std	Y+3, r19	; 0x03
    371e:	2a 83       	std	Y+2, r18	; 0x02
    3720:	8a 81       	ldd	r24, Y+2	; 0x02
    3722:	9b 81       	ldd	r25, Y+3	; 0x03
    3724:	81 30       	cpi	r24, 0x01	; 1
    3726:	91 05       	cpc	r25, r1
    3728:	89 f0       	breq	.+34     	; 0x374c <EXT_INTERRUPT_VID_DISABLE+0x44>
    372a:	2a 81       	ldd	r18, Y+2	; 0x02
    372c:	3b 81       	ldd	r19, Y+3	; 0x03
    372e:	22 30       	cpi	r18, 0x02	; 2
    3730:	31 05       	cpc	r19, r1
    3732:	a1 f0       	breq	.+40     	; 0x375c <EXT_INTERRUPT_VID_DISABLE+0x54>
    3734:	8a 81       	ldd	r24, Y+2	; 0x02
    3736:	9b 81       	ldd	r25, Y+3	; 0x03
    3738:	00 97       	sbiw	r24, 0x00	; 0
    373a:	b9 f4       	brne	.+46     	; 0x376a <EXT_INTERRUPT_VID_DISABLE+0x62>
		case EXT0:
			CLR_BIT(GICR, INT0);
    373c:	ab e5       	ldi	r26, 0x5B	; 91
    373e:	b0 e0       	ldi	r27, 0x00	; 0
    3740:	eb e5       	ldi	r30, 0x5B	; 91
    3742:	f0 e0       	ldi	r31, 0x00	; 0
    3744:	80 81       	ld	r24, Z
    3746:	8f 7b       	andi	r24, 0xBF	; 191
    3748:	8c 93       	st	X, r24
    374a:	0f c0       	rjmp	.+30     	; 0x376a <EXT_INTERRUPT_VID_DISABLE+0x62>
			break;
		case EXT1:
			CLR_BIT(GICR, INT1);
    374c:	ab e5       	ldi	r26, 0x5B	; 91
    374e:	b0 e0       	ldi	r27, 0x00	; 0
    3750:	eb e5       	ldi	r30, 0x5B	; 91
    3752:	f0 e0       	ldi	r31, 0x00	; 0
    3754:	80 81       	ld	r24, Z
    3756:	8f 77       	andi	r24, 0x7F	; 127
    3758:	8c 93       	st	X, r24
    375a:	07 c0       	rjmp	.+14     	; 0x376a <EXT_INTERRUPT_VID_DISABLE+0x62>
			break;
		case EXT2:
			CLR_BIT(GICR, INT2);
    375c:	ab e5       	ldi	r26, 0x5B	; 91
    375e:	b0 e0       	ldi	r27, 0x00	; 0
    3760:	eb e5       	ldi	r30, 0x5B	; 91
    3762:	f0 e0       	ldi	r31, 0x00	; 0
    3764:	80 81       	ld	r24, Z
    3766:	8f 7d       	andi	r24, 0xDF	; 223
    3768:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
}
    376a:	0f 90       	pop	r0
    376c:	0f 90       	pop	r0
    376e:	0f 90       	pop	r0
    3770:	cf 91       	pop	r28
    3772:	df 91       	pop	r29
    3774:	08 95       	ret

00003776 <EXT0_VID_SET_CALL_BACK>:

	void EXT0_VID_SET_CALL_BACK(void (*PTR)(void)){
    3776:	df 93       	push	r29
    3778:	cf 93       	push	r28
    377a:	00 d0       	rcall	.+0      	; 0x377c <EXT0_VID_SET_CALL_BACK+0x6>
    377c:	cd b7       	in	r28, 0x3d	; 61
    377e:	de b7       	in	r29, 0x3e	; 62
    3780:	9a 83       	std	Y+2, r25	; 0x02
    3782:	89 83       	std	Y+1, r24	; 0x01
		EXTI0_CALLBACK_PTR=PTR;
    3784:	89 81       	ldd	r24, Y+1	; 0x01
    3786:	9a 81       	ldd	r25, Y+2	; 0x02
    3788:	90 93 e5 00 	sts	0x00E5, r25
    378c:	80 93 e4 00 	sts	0x00E4, r24
	}
    3790:	0f 90       	pop	r0
    3792:	0f 90       	pop	r0
    3794:	cf 91       	pop	r28
    3796:	df 91       	pop	r29
    3798:	08 95       	ret

0000379a <EXT1_VID_SET_CALL_BACK>:

	void EXT1_VID_SET_CALL_BACK(void (*PTR)(void)){
    379a:	df 93       	push	r29
    379c:	cf 93       	push	r28
    379e:	00 d0       	rcall	.+0      	; 0x37a0 <EXT1_VID_SET_CALL_BACK+0x6>
    37a0:	cd b7       	in	r28, 0x3d	; 61
    37a2:	de b7       	in	r29, 0x3e	; 62
    37a4:	9a 83       	std	Y+2, r25	; 0x02
    37a6:	89 83       	std	Y+1, r24	; 0x01
		EXTI1_CALLBACK_PTR=PTR;
    37a8:	89 81       	ldd	r24, Y+1	; 0x01
    37aa:	9a 81       	ldd	r25, Y+2	; 0x02
    37ac:	90 93 e7 00 	sts	0x00E7, r25
    37b0:	80 93 e6 00 	sts	0x00E6, r24
	}
    37b4:	0f 90       	pop	r0
    37b6:	0f 90       	pop	r0
    37b8:	cf 91       	pop	r28
    37ba:	df 91       	pop	r29
    37bc:	08 95       	ret

000037be <EXT2_VID_SET_CALL_BACK>:

	void EXT2_VID_SET_CALL_BACK(void (*PTR)(void)){
    37be:	df 93       	push	r29
    37c0:	cf 93       	push	r28
    37c2:	00 d0       	rcall	.+0      	; 0x37c4 <EXT2_VID_SET_CALL_BACK+0x6>
    37c4:	cd b7       	in	r28, 0x3d	; 61
    37c6:	de b7       	in	r29, 0x3e	; 62
    37c8:	9a 83       	std	Y+2, r25	; 0x02
    37ca:	89 83       	std	Y+1, r24	; 0x01
		EXTI2_CALLBACK_PTR=PTR;
    37cc:	89 81       	ldd	r24, Y+1	; 0x01
    37ce:	9a 81       	ldd	r25, Y+2	; 0x02
    37d0:	90 93 e9 00 	sts	0x00E9, r25
    37d4:	80 93 e8 00 	sts	0x00E8, r24
	}
    37d8:	0f 90       	pop	r0
    37da:	0f 90       	pop	r0
    37dc:	cf 91       	pop	r28
    37de:	df 91       	pop	r29
    37e0:	08 95       	ret

000037e2 <__vector_1>:


	void __vector_1 (void) __attribute__ ((signal,used, externally_visible)) ; \
	void __vector_1 (void){
    37e2:	1f 92       	push	r1
    37e4:	0f 92       	push	r0
    37e6:	0f b6       	in	r0, 0x3f	; 63
    37e8:	0f 92       	push	r0
    37ea:	11 24       	eor	r1, r1
    37ec:	2f 93       	push	r18
    37ee:	3f 93       	push	r19
    37f0:	4f 93       	push	r20
    37f2:	5f 93       	push	r21
    37f4:	6f 93       	push	r22
    37f6:	7f 93       	push	r23
    37f8:	8f 93       	push	r24
    37fa:	9f 93       	push	r25
    37fc:	af 93       	push	r26
    37fe:	bf 93       	push	r27
    3800:	ef 93       	push	r30
    3802:	ff 93       	push	r31
    3804:	df 93       	push	r29
    3806:	cf 93       	push	r28
    3808:	cd b7       	in	r28, 0x3d	; 61
    380a:	de b7       	in	r29, 0x3e	; 62
		EXTI0_CALLBACK_PTR();
    380c:	e0 91 e4 00 	lds	r30, 0x00E4
    3810:	f0 91 e5 00 	lds	r31, 0x00E5
    3814:	09 95       	icall
	}
    3816:	cf 91       	pop	r28
    3818:	df 91       	pop	r29
    381a:	ff 91       	pop	r31
    381c:	ef 91       	pop	r30
    381e:	bf 91       	pop	r27
    3820:	af 91       	pop	r26
    3822:	9f 91       	pop	r25
    3824:	8f 91       	pop	r24
    3826:	7f 91       	pop	r23
    3828:	6f 91       	pop	r22
    382a:	5f 91       	pop	r21
    382c:	4f 91       	pop	r20
    382e:	3f 91       	pop	r19
    3830:	2f 91       	pop	r18
    3832:	0f 90       	pop	r0
    3834:	0f be       	out	0x3f, r0	; 63
    3836:	0f 90       	pop	r0
    3838:	1f 90       	pop	r1
    383a:	18 95       	reti

0000383c <__vector_2>:

	void __vector_2 (void) __attribute__ ((signal,used, externally_visible)) ; \
	void __vector_2 (void){
    383c:	1f 92       	push	r1
    383e:	0f 92       	push	r0
    3840:	0f b6       	in	r0, 0x3f	; 63
    3842:	0f 92       	push	r0
    3844:	11 24       	eor	r1, r1
    3846:	2f 93       	push	r18
    3848:	3f 93       	push	r19
    384a:	4f 93       	push	r20
    384c:	5f 93       	push	r21
    384e:	6f 93       	push	r22
    3850:	7f 93       	push	r23
    3852:	8f 93       	push	r24
    3854:	9f 93       	push	r25
    3856:	af 93       	push	r26
    3858:	bf 93       	push	r27
    385a:	ef 93       	push	r30
    385c:	ff 93       	push	r31
    385e:	df 93       	push	r29
    3860:	cf 93       	push	r28
    3862:	cd b7       	in	r28, 0x3d	; 61
    3864:	de b7       	in	r29, 0x3e	; 62
		EXTI1_CALLBACK_PTR();
    3866:	e0 91 e6 00 	lds	r30, 0x00E6
    386a:	f0 91 e7 00 	lds	r31, 0x00E7
    386e:	09 95       	icall
	}
    3870:	cf 91       	pop	r28
    3872:	df 91       	pop	r29
    3874:	ff 91       	pop	r31
    3876:	ef 91       	pop	r30
    3878:	bf 91       	pop	r27
    387a:	af 91       	pop	r26
    387c:	9f 91       	pop	r25
    387e:	8f 91       	pop	r24
    3880:	7f 91       	pop	r23
    3882:	6f 91       	pop	r22
    3884:	5f 91       	pop	r21
    3886:	4f 91       	pop	r20
    3888:	3f 91       	pop	r19
    388a:	2f 91       	pop	r18
    388c:	0f 90       	pop	r0
    388e:	0f be       	out	0x3f, r0	; 63
    3890:	0f 90       	pop	r0
    3892:	1f 90       	pop	r1
    3894:	18 95       	reti

00003896 <__vector_3>:


	void __vector_3 (void) __attribute__ ((signal,used, externally_visible)) ; \
	void __vector_3 (void){
    3896:	1f 92       	push	r1
    3898:	0f 92       	push	r0
    389a:	0f b6       	in	r0, 0x3f	; 63
    389c:	0f 92       	push	r0
    389e:	11 24       	eor	r1, r1
    38a0:	2f 93       	push	r18
    38a2:	3f 93       	push	r19
    38a4:	4f 93       	push	r20
    38a6:	5f 93       	push	r21
    38a8:	6f 93       	push	r22
    38aa:	7f 93       	push	r23
    38ac:	8f 93       	push	r24
    38ae:	9f 93       	push	r25
    38b0:	af 93       	push	r26
    38b2:	bf 93       	push	r27
    38b4:	ef 93       	push	r30
    38b6:	ff 93       	push	r31
    38b8:	df 93       	push	r29
    38ba:	cf 93       	push	r28
    38bc:	cd b7       	in	r28, 0x3d	; 61
    38be:	de b7       	in	r29, 0x3e	; 62
		EXTI2_CALLBACK_PTR();
    38c0:	e0 91 e8 00 	lds	r30, 0x00E8
    38c4:	f0 91 e9 00 	lds	r31, 0x00E9
    38c8:	09 95       	icall
	}
    38ca:	cf 91       	pop	r28
    38cc:	df 91       	pop	r29
    38ce:	ff 91       	pop	r31
    38d0:	ef 91       	pop	r30
    38d2:	bf 91       	pop	r27
    38d4:	af 91       	pop	r26
    38d6:	9f 91       	pop	r25
    38d8:	8f 91       	pop	r24
    38da:	7f 91       	pop	r23
    38dc:	6f 91       	pop	r22
    38de:	5f 91       	pop	r21
    38e0:	4f 91       	pop	r20
    38e2:	3f 91       	pop	r19
    38e4:	2f 91       	pop	r18
    38e6:	0f 90       	pop	r0
    38e8:	0f be       	out	0x3f, r0	; 63
    38ea:	0f 90       	pop	r0
    38ec:	1f 90       	pop	r1
    38ee:	18 95       	reti

000038f0 <Global_Interrupt_Enable>:
#include "../BIT_Math.h"
#include "Global_Interrupt_register.h"
#include "Global_Interrupt_interface.h"

void Global_Interrupt_Enable(void)
{
    38f0:	df 93       	push	r29
    38f2:	cf 93       	push	r28
    38f4:	cd b7       	in	r28, 0x3d	; 61
    38f6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I);
    38f8:	af e5       	ldi	r26, 0x5F	; 95
    38fa:	b0 e0       	ldi	r27, 0x00	; 0
    38fc:	ef e5       	ldi	r30, 0x5F	; 95
    38fe:	f0 e0       	ldi	r31, 0x00	; 0
    3900:	80 81       	ld	r24, Z
    3902:	80 68       	ori	r24, 0x80	; 128
    3904:	8c 93       	st	X, r24
}
    3906:	cf 91       	pop	r28
    3908:	df 91       	pop	r29
    390a:	08 95       	ret

0000390c <Global_Interrupt_Disable>:
void Global_Interrupt_Disable(void)
{
    390c:	df 93       	push	r29
    390e:	cf 93       	push	r28
    3910:	cd b7       	in	r28, 0x3d	; 61
    3912:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
    3914:	af e5       	ldi	r26, 0x5F	; 95
    3916:	b0 e0       	ldi	r27, 0x00	; 0
    3918:	ef e5       	ldi	r30, 0x5F	; 95
    391a:	f0 e0       	ldi	r31, 0x00	; 0
    391c:	80 81       	ld	r24, Z
    391e:	8f 77       	andi	r24, 0x7F	; 127
    3920:	8c 93       	st	X, r24
}
    3922:	cf 91       	pop	r28
    3924:	df 91       	pop	r29
    3926:	08 95       	ret

00003928 <EEPROM_voidRead>:
#include "EEPROM_config.h"



void EEPROM_voidRead(uint8 u8LocationAddressCpy , uint8* pu8DataCpy)
{
    3928:	df 93       	push	r29
    392a:	cf 93       	push	r28
    392c:	00 d0       	rcall	.+0      	; 0x392e <EEPROM_voidRead+0x6>
    392e:	0f 92       	push	r0
    3930:	cd b7       	in	r28, 0x3d	; 61
    3932:	de b7       	in	r29, 0x3e	; 62
    3934:	89 83       	std	Y+1, r24	; 0x01
    3936:	7b 83       	std	Y+3, r23	; 0x03
    3938:	6a 83       	std	Y+2, r22	; 0x02
	/* Start condition  */
	TWI_enStartCondition();
    393a:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <TWI_enStartCondition>
	/* Send SLA With Write */
	TWI_enSetSlaveAddress_Write(SLAVE_ADDRESS_WRITE);
    393e:	80 ea       	ldi	r24, 0xA0	; 160
    3940:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <TWI_enSetSlaveAddress_Write>
	/* Send Memory location */
	TWI_enMasterWriteData(u8LocationAddressCpy);
    3944:	89 81       	ldd	r24, Y+1	; 0x01
    3946:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <TWI_enMasterWriteData>
	/* Repeat Start to change Write operation to Read operation */
	TWI_enRepeatStart();
    394a:	0e 94 67 1e 	call	0x3cce	; 0x3cce <TWI_enRepeatStart>
	//	TWI_enSetSlaveAddress_Write(SLAVE_ADDRESS_READ);   //will be also read successfully
	TWI_enSetSlaveAddress_Read(SLAVE_ADDRESS_WRITE);
    394e:	80 ea       	ldi	r24, 0xA0	; 160
    3950:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <TWI_enSetSlaveAddress_Read>
	/* Master Receive Data*/
	TWI_enMasterReadData(pu8DataCpy);
    3954:	8a 81       	ldd	r24, Y+2	; 0x02
    3956:	9b 81       	ldd	r25, Y+3	; 0x03
    3958:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <TWI_enMasterReadData>
	TWI_voidStopCondition();
    395c:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <TWI_voidStopCondition>

}
    3960:	0f 90       	pop	r0
    3962:	0f 90       	pop	r0
    3964:	0f 90       	pop	r0
    3966:	cf 91       	pop	r28
    3968:	df 91       	pop	r29
    396a:	08 95       	ret

0000396c <EEPROM_voidWrite>:

void EEPROM_voidWrite(uint8 u8LocationAddressCpy , uint8 u8DataCpy){
    396c:	df 93       	push	r29
    396e:	cf 93       	push	r28
    3970:	cd b7       	in	r28, 0x3d	; 61
    3972:	de b7       	in	r29, 0x3e	; 62
    3974:	60 97       	sbiw	r28, 0x10	; 16
    3976:	0f b6       	in	r0, 0x3f	; 63
    3978:	f8 94       	cli
    397a:	de bf       	out	0x3e, r29	; 62
    397c:	0f be       	out	0x3f, r0	; 63
    397e:	cd bf       	out	0x3d, r28	; 61
    3980:	8f 87       	std	Y+15, r24	; 0x0f
    3982:	68 8b       	std	Y+16, r22	; 0x10

	/* Start condition  */
	TWI_enStartCondition();
    3984:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <TWI_enStartCondition>
	/* Send SLA With Write */
	TWI_enSetSlaveAddress_Write(SLAVE_ADDRESS_WRITE);
    3988:	80 ea       	ldi	r24, 0xA0	; 160
    398a:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <TWI_enSetSlaveAddress_Write>
	/* Send Memory location */
	TWI_enMasterWriteData(u8LocationAddressCpy);
    398e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3990:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <TWI_enMasterWriteData>
	TWI_enMasterWriteData(u8DataCpy);
    3994:	88 89       	ldd	r24, Y+16	; 0x10
    3996:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <TWI_enMasterWriteData>
	TWI_voidStopCondition();
    399a:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <TWI_voidStopCondition>
    399e:	80 e0       	ldi	r24, 0x00	; 0
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	a8 e4       	ldi	r26, 0x48	; 72
    39a4:	b3 e4       	ldi	r27, 0x43	; 67
    39a6:	8b 87       	std	Y+11, r24	; 0x0b
    39a8:	9c 87       	std	Y+12, r25	; 0x0c
    39aa:	ad 87       	std	Y+13, r26	; 0x0d
    39ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    39b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    39b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    39b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    39b6:	20 e0       	ldi	r18, 0x00	; 0
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	4a ef       	ldi	r20, 0xFA	; 250
    39bc:	54 e4       	ldi	r21, 0x44	; 68
    39be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c2:	dc 01       	movw	r26, r24
    39c4:	cb 01       	movw	r24, r22
    39c6:	8f 83       	std	Y+7, r24	; 0x07
    39c8:	98 87       	std	Y+8, r25	; 0x08
    39ca:	a9 87       	std	Y+9, r26	; 0x09
    39cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39ce:	6f 81       	ldd	r22, Y+7	; 0x07
    39d0:	78 85       	ldd	r23, Y+8	; 0x08
    39d2:	89 85       	ldd	r24, Y+9	; 0x09
    39d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    39d6:	20 e0       	ldi	r18, 0x00	; 0
    39d8:	30 e0       	ldi	r19, 0x00	; 0
    39da:	40 e8       	ldi	r20, 0x80	; 128
    39dc:	5f e3       	ldi	r21, 0x3F	; 63
    39de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39e2:	88 23       	and	r24, r24
    39e4:	2c f4       	brge	.+10     	; 0x39f0 <EEPROM_voidWrite+0x84>
		__ticks = 1;
    39e6:	81 e0       	ldi	r24, 0x01	; 1
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	9e 83       	std	Y+6, r25	; 0x06
    39ec:	8d 83       	std	Y+5, r24	; 0x05
    39ee:	3f c0       	rjmp	.+126    	; 0x3a6e <EEPROM_voidWrite+0x102>
	else if (__tmp > 65535)
    39f0:	6f 81       	ldd	r22, Y+7	; 0x07
    39f2:	78 85       	ldd	r23, Y+8	; 0x08
    39f4:	89 85       	ldd	r24, Y+9	; 0x09
    39f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    39f8:	20 e0       	ldi	r18, 0x00	; 0
    39fa:	3f ef       	ldi	r19, 0xFF	; 255
    39fc:	4f e7       	ldi	r20, 0x7F	; 127
    39fe:	57 e4       	ldi	r21, 0x47	; 71
    3a00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a04:	18 16       	cp	r1, r24
    3a06:	4c f5       	brge	.+82     	; 0x3a5a <EEPROM_voidWrite+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a08:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a10:	20 e0       	ldi	r18, 0x00	; 0
    3a12:	30 e0       	ldi	r19, 0x00	; 0
    3a14:	40 e2       	ldi	r20, 0x20	; 32
    3a16:	51 e4       	ldi	r21, 0x41	; 65
    3a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a1c:	dc 01       	movw	r26, r24
    3a1e:	cb 01       	movw	r24, r22
    3a20:	bc 01       	movw	r22, r24
    3a22:	cd 01       	movw	r24, r26
    3a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a28:	dc 01       	movw	r26, r24
    3a2a:	cb 01       	movw	r24, r22
    3a2c:	9e 83       	std	Y+6, r25	; 0x06
    3a2e:	8d 83       	std	Y+5, r24	; 0x05
    3a30:	0f c0       	rjmp	.+30     	; 0x3a50 <EEPROM_voidWrite+0xe4>
    3a32:	88 ec       	ldi	r24, 0xC8	; 200
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	9c 83       	std	Y+4, r25	; 0x04
    3a38:	8b 83       	std	Y+3, r24	; 0x03
    3a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a3e:	01 97       	sbiw	r24, 0x01	; 1
    3a40:	f1 f7       	brne	.-4      	; 0x3a3e <EEPROM_voidWrite+0xd2>
    3a42:	9c 83       	std	Y+4, r25	; 0x04
    3a44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a46:	8d 81       	ldd	r24, Y+5	; 0x05
    3a48:	9e 81       	ldd	r25, Y+6	; 0x06
    3a4a:	01 97       	sbiw	r24, 0x01	; 1
    3a4c:	9e 83       	std	Y+6, r25	; 0x06
    3a4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a50:	8d 81       	ldd	r24, Y+5	; 0x05
    3a52:	9e 81       	ldd	r25, Y+6	; 0x06
    3a54:	00 97       	sbiw	r24, 0x00	; 0
    3a56:	69 f7       	brne	.-38     	; 0x3a32 <EEPROM_voidWrite+0xc6>
    3a58:	14 c0       	rjmp	.+40     	; 0x3a82 <EEPROM_voidWrite+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a5c:	78 85       	ldd	r23, Y+8	; 0x08
    3a5e:	89 85       	ldd	r24, Y+9	; 0x09
    3a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a66:	dc 01       	movw	r26, r24
    3a68:	cb 01       	movw	r24, r22
    3a6a:	9e 83       	std	Y+6, r25	; 0x06
    3a6c:	8d 83       	std	Y+5, r24	; 0x05
    3a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a70:	9e 81       	ldd	r25, Y+6	; 0x06
    3a72:	9a 83       	std	Y+2, r25	; 0x02
    3a74:	89 83       	std	Y+1, r24	; 0x01
    3a76:	89 81       	ldd	r24, Y+1	; 0x01
    3a78:	9a 81       	ldd	r25, Y+2	; 0x02
    3a7a:	01 97       	sbiw	r24, 0x01	; 1
    3a7c:	f1 f7       	brne	.-4      	; 0x3a7a <EEPROM_voidWrite+0x10e>
    3a7e:	9a 83       	std	Y+2, r25	; 0x02
    3a80:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);

}
    3a82:	60 96       	adiw	r28, 0x10	; 16
    3a84:	0f b6       	in	r0, 0x3f	; 63
    3a86:	f8 94       	cli
    3a88:	de bf       	out	0x3e, r29	; 62
    3a8a:	0f be       	out	0x3f, r0	; 63
    3a8c:	cd bf       	out	0x3d, r28	; 61
    3a8e:	cf 91       	pop	r28
    3a90:	df 91       	pop	r29
    3a92:	08 95       	ret

00003a94 <EEPROM_voidWritePage>:

void EEPROM_voidWritePage(uint8 u8LocationAddressCpy , uint8* pu8DataCpy, uint8 length){
    3a94:	df 93       	push	r29
    3a96:	cf 93       	push	r28
    3a98:	cd b7       	in	r28, 0x3d	; 61
    3a9a:	de b7       	in	r29, 0x3e	; 62
    3a9c:	63 97       	sbiw	r28, 0x13	; 19
    3a9e:	0f b6       	in	r0, 0x3f	; 63
    3aa0:	f8 94       	cli
    3aa2:	de bf       	out	0x3e, r29	; 62
    3aa4:	0f be       	out	0x3f, r0	; 63
    3aa6:	cd bf       	out	0x3d, r28	; 61
    3aa8:	88 8b       	std	Y+16, r24	; 0x10
    3aaa:	7a 8b       	std	Y+18, r23	; 0x12
    3aac:	69 8b       	std	Y+17, r22	; 0x11
    3aae:	4b 8b       	std	Y+19, r20	; 0x13

	/* Start condition  */
	TWI_enStartCondition();
    3ab0:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <TWI_enStartCondition>
	/* Send SLA With Write */
	TWI_enSetSlaveAddress_Write(SLAVE_ADDRESS_WRITE);
    3ab4:	80 ea       	ldi	r24, 0xA0	; 160
    3ab6:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <TWI_enSetSlaveAddress_Write>
	/* Send Memory location */
	TWI_enMasterWriteData(u8LocationAddressCpy);
    3aba:	88 89       	ldd	r24, Y+16	; 0x10
    3abc:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <TWI_enMasterWriteData>
	for(uint8 i=0; i<length; i++){
    3ac0:	1f 86       	std	Y+15, r1	; 0x0f
    3ac2:	80 c0       	rjmp	.+256    	; 0x3bc4 <EEPROM_voidWritePage+0x130>
		TWI_enMasterWriteData(pu8DataCpy[i]);
    3ac4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ac6:	28 2f       	mov	r18, r24
    3ac8:	30 e0       	ldi	r19, 0x00	; 0
    3aca:	89 89       	ldd	r24, Y+17	; 0x11
    3acc:	9a 89       	ldd	r25, Y+18	; 0x12
    3ace:	fc 01       	movw	r30, r24
    3ad0:	e2 0f       	add	r30, r18
    3ad2:	f3 1f       	adc	r31, r19
    3ad4:	80 81       	ld	r24, Z
    3ad6:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <TWI_enMasterWriteData>
    3ada:	80 e0       	ldi	r24, 0x00	; 0
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	a0 ea       	ldi	r26, 0xA0	; 160
    3ae0:	b0 e4       	ldi	r27, 0x40	; 64
    3ae2:	8b 87       	std	Y+11, r24	; 0x0b
    3ae4:	9c 87       	std	Y+12, r25	; 0x0c
    3ae6:	ad 87       	std	Y+13, r26	; 0x0d
    3ae8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aea:	6b 85       	ldd	r22, Y+11	; 0x0b
    3aec:	7c 85       	ldd	r23, Y+12	; 0x0c
    3aee:	8d 85       	ldd	r24, Y+13	; 0x0d
    3af0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3af2:	20 e0       	ldi	r18, 0x00	; 0
    3af4:	30 e0       	ldi	r19, 0x00	; 0
    3af6:	4a ef       	ldi	r20, 0xFA	; 250
    3af8:	54 e4       	ldi	r21, 0x44	; 68
    3afa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3afe:	dc 01       	movw	r26, r24
    3b00:	cb 01       	movw	r24, r22
    3b02:	8f 83       	std	Y+7, r24	; 0x07
    3b04:	98 87       	std	Y+8, r25	; 0x08
    3b06:	a9 87       	std	Y+9, r26	; 0x09
    3b08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b0a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b0c:	78 85       	ldd	r23, Y+8	; 0x08
    3b0e:	89 85       	ldd	r24, Y+9	; 0x09
    3b10:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b12:	20 e0       	ldi	r18, 0x00	; 0
    3b14:	30 e0       	ldi	r19, 0x00	; 0
    3b16:	40 e8       	ldi	r20, 0x80	; 128
    3b18:	5f e3       	ldi	r21, 0x3F	; 63
    3b1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b1e:	88 23       	and	r24, r24
    3b20:	2c f4       	brge	.+10     	; 0x3b2c <EEPROM_voidWritePage+0x98>
		__ticks = 1;
    3b22:	81 e0       	ldi	r24, 0x01	; 1
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	9e 83       	std	Y+6, r25	; 0x06
    3b28:	8d 83       	std	Y+5, r24	; 0x05
    3b2a:	3f c0       	rjmp	.+126    	; 0x3baa <EEPROM_voidWritePage+0x116>
	else if (__tmp > 65535)
    3b2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b2e:	78 85       	ldd	r23, Y+8	; 0x08
    3b30:	89 85       	ldd	r24, Y+9	; 0x09
    3b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b34:	20 e0       	ldi	r18, 0x00	; 0
    3b36:	3f ef       	ldi	r19, 0xFF	; 255
    3b38:	4f e7       	ldi	r20, 0x7F	; 127
    3b3a:	57 e4       	ldi	r21, 0x47	; 71
    3b3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b40:	18 16       	cp	r1, r24
    3b42:	4c f5       	brge	.+82     	; 0x3b96 <EEPROM_voidWritePage+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b44:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b46:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b48:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b4c:	20 e0       	ldi	r18, 0x00	; 0
    3b4e:	30 e0       	ldi	r19, 0x00	; 0
    3b50:	40 e2       	ldi	r20, 0x20	; 32
    3b52:	51 e4       	ldi	r21, 0x41	; 65
    3b54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b58:	dc 01       	movw	r26, r24
    3b5a:	cb 01       	movw	r24, r22
    3b5c:	bc 01       	movw	r22, r24
    3b5e:	cd 01       	movw	r24, r26
    3b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b64:	dc 01       	movw	r26, r24
    3b66:	cb 01       	movw	r24, r22
    3b68:	9e 83       	std	Y+6, r25	; 0x06
    3b6a:	8d 83       	std	Y+5, r24	; 0x05
    3b6c:	0f c0       	rjmp	.+30     	; 0x3b8c <EEPROM_voidWritePage+0xf8>
    3b6e:	88 ec       	ldi	r24, 0xC8	; 200
    3b70:	90 e0       	ldi	r25, 0x00	; 0
    3b72:	9c 83       	std	Y+4, r25	; 0x04
    3b74:	8b 83       	std	Y+3, r24	; 0x03
    3b76:	8b 81       	ldd	r24, Y+3	; 0x03
    3b78:	9c 81       	ldd	r25, Y+4	; 0x04
    3b7a:	01 97       	sbiw	r24, 0x01	; 1
    3b7c:	f1 f7       	brne	.-4      	; 0x3b7a <EEPROM_voidWritePage+0xe6>
    3b7e:	9c 83       	std	Y+4, r25	; 0x04
    3b80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b82:	8d 81       	ldd	r24, Y+5	; 0x05
    3b84:	9e 81       	ldd	r25, Y+6	; 0x06
    3b86:	01 97       	sbiw	r24, 0x01	; 1
    3b88:	9e 83       	std	Y+6, r25	; 0x06
    3b8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b8e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b90:	00 97       	sbiw	r24, 0x00	; 0
    3b92:	69 f7       	brne	.-38     	; 0x3b6e <EEPROM_voidWritePage+0xda>
    3b94:	14 c0       	rjmp	.+40     	; 0x3bbe <EEPROM_voidWritePage+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b96:	6f 81       	ldd	r22, Y+7	; 0x07
    3b98:	78 85       	ldd	r23, Y+8	; 0x08
    3b9a:	89 85       	ldd	r24, Y+9	; 0x09
    3b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ba2:	dc 01       	movw	r26, r24
    3ba4:	cb 01       	movw	r24, r22
    3ba6:	9e 83       	std	Y+6, r25	; 0x06
    3ba8:	8d 83       	std	Y+5, r24	; 0x05
    3baa:	8d 81       	ldd	r24, Y+5	; 0x05
    3bac:	9e 81       	ldd	r25, Y+6	; 0x06
    3bae:	9a 83       	std	Y+2, r25	; 0x02
    3bb0:	89 83       	std	Y+1, r24	; 0x01
    3bb2:	89 81       	ldd	r24, Y+1	; 0x01
    3bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    3bb6:	01 97       	sbiw	r24, 0x01	; 1
    3bb8:	f1 f7       	brne	.-4      	; 0x3bb6 <EEPROM_voidWritePage+0x122>
    3bba:	9a 83       	std	Y+2, r25	; 0x02
    3bbc:	89 83       	std	Y+1, r24	; 0x01
	TWI_enStartCondition();
	/* Send SLA With Write */
	TWI_enSetSlaveAddress_Write(SLAVE_ADDRESS_WRITE);
	/* Send Memory location */
	TWI_enMasterWriteData(u8LocationAddressCpy);
	for(uint8 i=0; i<length; i++){
    3bbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bc0:	8f 5f       	subi	r24, 0xFF	; 255
    3bc2:	8f 87       	std	Y+15, r24	; 0x0f
    3bc4:	9f 85       	ldd	r25, Y+15	; 0x0f
    3bc6:	8b 89       	ldd	r24, Y+19	; 0x13
    3bc8:	98 17       	cp	r25, r24
    3bca:	08 f4       	brcc	.+2      	; 0x3bce <EEPROM_voidWritePage+0x13a>
    3bcc:	7b cf       	rjmp	.-266    	; 0x3ac4 <EEPROM_voidWritePage+0x30>
		TWI_enMasterWriteData(pu8DataCpy[i]);
		_delay_ms(5);

	}

	TWI_voidStopCondition();
    3bce:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <TWI_voidStopCondition>

}
    3bd2:	63 96       	adiw	r28, 0x13	; 19
    3bd4:	0f b6       	in	r0, 0x3f	; 63
    3bd6:	f8 94       	cli
    3bd8:	de bf       	out	0x3e, r29	; 62
    3bda:	0f be       	out	0x3f, r0	; 63
    3bdc:	cd bf       	out	0x3d, r28	; 61
    3bde:	cf 91       	pop	r28
    3be0:	df 91       	pop	r29
    3be2:	08 95       	ret

00003be4 <TWI_voidMasterInit>:
#include "../BIT_Math.h"
#include "TWI_interface.h"
#include "TWI_private.h"
#include "TWI_config.h"

void TWI_voidMasterInit(void){
    3be4:	df 93       	push	r29
    3be6:	cf 93       	push	r28
    3be8:	cd b7       	in	r28, 0x3d	; 61
    3bea:	de b7       	in	r29, 0x3e	; 62
	/* Set Clock configuration  TWBR = 2 */
	TWBR = 2;
    3bec:	e0 e2       	ldi	r30, 0x20	; 32
    3bee:	f0 e0       	ldi	r31, 0x00	; 0
    3bf0:	82 e0       	ldi	r24, 0x02	; 2
    3bf2:	80 83       	st	Z, r24
	CLR_BIT(TWSR , TWSR_TWPS0);
    3bf4:	a1 e2       	ldi	r26, 0x21	; 33
    3bf6:	b0 e0       	ldi	r27, 0x00	; 0
    3bf8:	e1 e2       	ldi	r30, 0x21	; 33
    3bfa:	f0 e0       	ldi	r31, 0x00	; 0
    3bfc:	80 81       	ld	r24, Z
    3bfe:	8e 7f       	andi	r24, 0xFE	; 254
    3c00:	8c 93       	st	X, r24
	CLR_BIT(TWSR , TWSR_TWPS1);
    3c02:	a1 e2       	ldi	r26, 0x21	; 33
    3c04:	b0 e0       	ldi	r27, 0x00	; 0
    3c06:	e1 e2       	ldi	r30, 0x21	; 33
    3c08:	f0 e0       	ldi	r31, 0x00	; 0
    3c0a:	80 81       	ld	r24, Z
    3c0c:	8d 7f       	andi	r24, 0xFD	; 253
    3c0e:	8c 93       	st	X, r24

	/* Enable Acknowledge bit */
	SET_BIT(TWCR , TWCR_TWEA);
    3c10:	a6 e5       	ldi	r26, 0x56	; 86
    3c12:	b0 e0       	ldi	r27, 0x00	; 0
    3c14:	e6 e5       	ldi	r30, 0x56	; 86
    3c16:	f0 e0       	ldi	r31, 0x00	; 0
    3c18:	80 81       	ld	r24, Z
    3c1a:	80 64       	ori	r24, 0x40	; 64
    3c1c:	8c 93       	st	X, r24
	/* Set my own Address */
	TWAR = MASTER_ADDRESS << 1;
    3c1e:	e2 e2       	ldi	r30, 0x22	; 34
    3c20:	f0 e0       	ldi	r31, 0x00	; 0
    3c22:	84 e6       	ldi	r24, 0x64	; 100
    3c24:	80 83       	st	Z, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    3c26:	a6 e5       	ldi	r26, 0x56	; 86
    3c28:	b0 e0       	ldi	r27, 0x00	; 0
    3c2a:	e6 e5       	ldi	r30, 0x56	; 86
    3c2c:	f0 e0       	ldi	r31, 0x00	; 0
    3c2e:	80 81       	ld	r24, Z
    3c30:	84 60       	ori	r24, 0x04	; 4
    3c32:	8c 93       	st	X, r24

}
    3c34:	cf 91       	pop	r28
    3c36:	df 91       	pop	r29
    3c38:	08 95       	ret

00003c3a <TWI_voidSlaveInit>:
void TWI_voidSlaveInit(void){
    3c3a:	df 93       	push	r29
    3c3c:	cf 93       	push	r28
    3c3e:	cd b7       	in	r28, 0x3d	; 61
    3c40:	de b7       	in	r29, 0x3e	; 62
	/* Enable Acknowledge bit */
	SET_BIT(TWCR , TWCR_TWEA);
    3c42:	a6 e5       	ldi	r26, 0x56	; 86
    3c44:	b0 e0       	ldi	r27, 0x00	; 0
    3c46:	e6 e5       	ldi	r30, 0x56	; 86
    3c48:	f0 e0       	ldi	r31, 0x00	; 0
    3c4a:	80 81       	ld	r24, Z
    3c4c:	80 64       	ori	r24, 0x40	; 64
    3c4e:	8c 93       	st	X, r24
	/* Set my own Address */
	TWAR = SLAVE_ADDRESS << 1;
    3c50:	e2 e2       	ldi	r30, 0x22	; 34
    3c52:	f0 e0       	ldi	r31, 0x00	; 0
    3c54:	88 e2       	ldi	r24, 0x28	; 40
    3c56:	80 83       	st	Z, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    3c58:	a6 e5       	ldi	r26, 0x56	; 86
    3c5a:	b0 e0       	ldi	r27, 0x00	; 0
    3c5c:	e6 e5       	ldi	r30, 0x56	; 86
    3c5e:	f0 e0       	ldi	r31, 0x00	; 0
    3c60:	80 81       	ld	r24, Z
    3c62:	84 60       	ori	r24, 0x04	; 4
    3c64:	8c 93       	st	X, r24
}
    3c66:	cf 91       	pop	r28
    3c68:	df 91       	pop	r29
    3c6a:	08 95       	ret

00003c6c <TWI_enStartCondition>:

TWI_ErrorState_t TWI_enStartCondition(void){
    3c6c:	df 93       	push	r29
    3c6e:	cf 93       	push	r28
    3c70:	0f 92       	push	r0
    3c72:	cd b7       	in	r28, 0x3d	; 61
    3c74:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    3c76:	19 82       	std	Y+1, r1	; 0x01
	/* enable start condition */
	SET_BIT(TWCR , TWCR_TWSTA);
    3c78:	a6 e5       	ldi	r26, 0x56	; 86
    3c7a:	b0 e0       	ldi	r27, 0x00	; 0
    3c7c:	e6 e5       	ldi	r30, 0x56	; 86
    3c7e:	f0 e0       	ldi	r31, 0x00	; 0
    3c80:	80 81       	ld	r24, Z
    3c82:	80 62       	ori	r24, 0x20	; 32
    3c84:	8c 93       	st	X, r24
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    3c86:	a6 e5       	ldi	r26, 0x56	; 86
    3c88:	b0 e0       	ldi	r27, 0x00	; 0
    3c8a:	e6 e5       	ldi	r30, 0x56	; 86
    3c8c:	f0 e0       	ldi	r31, 0x00	; 0
    3c8e:	80 81       	ld	r24, Z
    3c90:	80 68       	ori	r24, 0x80	; 128
    3c92:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    3c94:	a6 e5       	ldi	r26, 0x56	; 86
    3c96:	b0 e0       	ldi	r27, 0x00	; 0
    3c98:	e6 e5       	ldi	r30, 0x56	; 86
    3c9a:	f0 e0       	ldi	r31, 0x00	; 0
    3c9c:	80 81       	ld	r24, Z
    3c9e:	84 60       	ori	r24, 0x04	; 4
    3ca0:	8c 93       	st	X, r24

	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    3ca2:	e6 e5       	ldi	r30, 0x56	; 86
    3ca4:	f0 e0       	ldi	r31, 0x00	; 0
    3ca6:	80 81       	ld	r24, Z
    3ca8:	88 23       	and	r24, r24
    3caa:	dc f7       	brge	.-10     	; 0x3ca2 <TWI_enStartCondition+0x36>

	if((TWSR & 0XF8) != START_CONDITION)
    3cac:	e1 e2       	ldi	r30, 0x21	; 33
    3cae:	f0 e0       	ldi	r31, 0x00	; 0
    3cb0:	80 81       	ld	r24, Z
    3cb2:	88 2f       	mov	r24, r24
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	88 7f       	andi	r24, 0xF8	; 248
    3cb8:	90 70       	andi	r25, 0x00	; 0
    3cba:	88 30       	cpi	r24, 0x08	; 8
    3cbc:	91 05       	cpc	r25, r1
    3cbe:	11 f0       	breq	.+4      	; 0x3cc4 <TWI_enStartCondition+0x58>
	{
		Local_ErrorState = START_CONDITION_ERR;
    3cc0:	81 e0       	ldi	r24, 0x01	; 1
    3cc2:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do Nothing */
	}

	return Local_ErrorState;
    3cc4:	89 81       	ldd	r24, Y+1	; 0x01


}
    3cc6:	0f 90       	pop	r0
    3cc8:	cf 91       	pop	r28
    3cca:	df 91       	pop	r29
    3ccc:	08 95       	ret

00003cce <TWI_enRepeatStart>:
TWI_ErrorState_t TWI_enRepeatStart(void){
    3cce:	df 93       	push	r29
    3cd0:	cf 93       	push	r28
    3cd2:	0f 92       	push	r0
    3cd4:	cd b7       	in	r28, 0x3d	; 61
    3cd6:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    3cd8:	19 82       	std	Y+1, r1	; 0x01
	/* enable start condition */
	SET_BIT(TWCR , TWCR_TWSTA);
    3cda:	a6 e5       	ldi	r26, 0x56	; 86
    3cdc:	b0 e0       	ldi	r27, 0x00	; 0
    3cde:	e6 e5       	ldi	r30, 0x56	; 86
    3ce0:	f0 e0       	ldi	r31, 0x00	; 0
    3ce2:	80 81       	ld	r24, Z
    3ce4:	80 62       	ori	r24, 0x20	; 32
    3ce6:	8c 93       	st	X, r24
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    3ce8:	a6 e5       	ldi	r26, 0x56	; 86
    3cea:	b0 e0       	ldi	r27, 0x00	; 0
    3cec:	e6 e5       	ldi	r30, 0x56	; 86
    3cee:	f0 e0       	ldi	r31, 0x00	; 0
    3cf0:	80 81       	ld	r24, Z
    3cf2:	80 68       	ori	r24, 0x80	; 128
    3cf4:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    3cf6:	a6 e5       	ldi	r26, 0x56	; 86
    3cf8:	b0 e0       	ldi	r27, 0x00	; 0
    3cfa:	e6 e5       	ldi	r30, 0x56	; 86
    3cfc:	f0 e0       	ldi	r31, 0x00	; 0
    3cfe:	80 81       	ld	r24, Z
    3d00:	84 60       	ori	r24, 0x04	; 4
    3d02:	8c 93       	st	X, r24

	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    3d04:	e6 e5       	ldi	r30, 0x56	; 86
    3d06:	f0 e0       	ldi	r31, 0x00	; 0
    3d08:	80 81       	ld	r24, Z
    3d0a:	88 23       	and	r24, r24
    3d0c:	dc f7       	brge	.-10     	; 0x3d04 <TWI_enRepeatStart+0x36>

	if((TWSR & 0XF8) != REPEATE_START_CONDITION)
    3d0e:	e1 e2       	ldi	r30, 0x21	; 33
    3d10:	f0 e0       	ldi	r31, 0x00	; 0
    3d12:	80 81       	ld	r24, Z
    3d14:	88 2f       	mov	r24, r24
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	88 7f       	andi	r24, 0xF8	; 248
    3d1a:	90 70       	andi	r25, 0x00	; 0
    3d1c:	80 31       	cpi	r24, 0x10	; 16
    3d1e:	91 05       	cpc	r25, r1
    3d20:	11 f0       	breq	.+4      	; 0x3d26 <TWI_enRepeatStart+0x58>
	{
		Local_ErrorState = REPEAT_START_ERR;
    3d22:	82 e0       	ldi	r24, 0x02	; 2
    3d24:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do Nothing */
	}

	return Local_ErrorState;
    3d26:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d28:	0f 90       	pop	r0
    3d2a:	cf 91       	pop	r28
    3d2c:	df 91       	pop	r29
    3d2e:	08 95       	ret

00003d30 <TWI_enSetSlaveAddress_Write>:
TWI_ErrorState_t TWI_enSetSlaveAddress_Write(uint8 u8SlaveAddressCpy){
    3d30:	df 93       	push	r29
    3d32:	cf 93       	push	r28
    3d34:	00 d0       	rcall	.+0      	; 0x3d36 <TWI_enSetSlaveAddress_Write+0x6>
    3d36:	cd b7       	in	r28, 0x3d	; 61
    3d38:	de b7       	in	r29, 0x3e	; 62
    3d3a:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    3d3c:	19 82       	std	Y+1, r1	; 0x01

	/* Set Slave address in TWDR register */
	TWDR = u8SlaveAddressCpy;
    3d3e:	e3 e2       	ldi	r30, 0x23	; 35
    3d40:	f0 e0       	ldi	r31, 0x00	; 0
    3d42:	8a 81       	ldd	r24, Y+2	; 0x02
    3d44:	80 83       	st	Z, r24

	/* Clear the start condition bit */
	CLR_BIT(TWCR , TWCR_TWSTA);
    3d46:	a6 e5       	ldi	r26, 0x56	; 86
    3d48:	b0 e0       	ldi	r27, 0x00	; 0
    3d4a:	e6 e5       	ldi	r30, 0x56	; 86
    3d4c:	f0 e0       	ldi	r31, 0x00	; 0
    3d4e:	80 81       	ld	r24, Z
    3d50:	8f 7d       	andi	r24, 0xDF	; 223
    3d52:	8c 93       	st	X, r24
	/* Clear bit 0 to make write operation */
	CLR_BIT(TWDR , TWDR_TWD0);
    3d54:	a3 e2       	ldi	r26, 0x23	; 35
    3d56:	b0 e0       	ldi	r27, 0x00	; 0
    3d58:	e3 e2       	ldi	r30, 0x23	; 35
    3d5a:	f0 e0       	ldi	r31, 0x00	; 0
    3d5c:	80 81       	ld	r24, Z
    3d5e:	8e 7f       	andi	r24, 0xFE	; 254
    3d60:	8c 93       	st	X, r24

	/*************************************************/
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    3d62:	a6 e5       	ldi	r26, 0x56	; 86
    3d64:	b0 e0       	ldi	r27, 0x00	; 0
    3d66:	e6 e5       	ldi	r30, 0x56	; 86
    3d68:	f0 e0       	ldi	r31, 0x00	; 0
    3d6a:	80 81       	ld	r24, Z
    3d6c:	80 68       	ori	r24, 0x80	; 128
    3d6e:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    3d70:	a6 e5       	ldi	r26, 0x56	; 86
    3d72:	b0 e0       	ldi	r27, 0x00	; 0
    3d74:	e6 e5       	ldi	r30, 0x56	; 86
    3d76:	f0 e0       	ldi	r31, 0x00	; 0
    3d78:	80 81       	ld	r24, Z
    3d7a:	84 60       	ori	r24, 0x04	; 4
    3d7c:	8c 93       	st	X, r24
	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    3d7e:	e6 e5       	ldi	r30, 0x56	; 86
    3d80:	f0 e0       	ldi	r31, 0x00	; 0
    3d82:	80 81       	ld	r24, Z
    3d84:	88 23       	and	r24, r24
    3d86:	dc f7       	brge	.-10     	; 0x3d7e <TWI_enSetSlaveAddress_Write+0x4e>

	if((TWSR & 0XF8) == SLA_WITH_W_NOACK)
    3d88:	e1 e2       	ldi	r30, 0x21	; 33
    3d8a:	f0 e0       	ldi	r31, 0x00	; 0
    3d8c:	80 81       	ld	r24, Z
    3d8e:	88 2f       	mov	r24, r24
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	88 7f       	andi	r24, 0xF8	; 248
    3d94:	90 70       	andi	r25, 0x00	; 0
    3d96:	80 32       	cpi	r24, 0x20	; 32
    3d98:	91 05       	cpc	r25, r1
    3d9a:	11 f4       	brne	.+4      	; 0x3da0 <TWI_enSetSlaveAddress_Write+0x70>
	{
		Local_ErrorState = SLA_W_NOACK_ERR;
    3d9c:	83 e0       	ldi	r24, 0x03	; 3
    3d9e:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/* Do Nothing */
	}
	return Local_ErrorState;
    3da0:	89 81       	ldd	r24, Y+1	; 0x01
}
    3da2:	0f 90       	pop	r0
    3da4:	0f 90       	pop	r0
    3da6:	cf 91       	pop	r28
    3da8:	df 91       	pop	r29
    3daa:	08 95       	ret

00003dac <TWI_enSetSlaveAddress_Read>:
TWI_ErrorState_t TWI_enSetSlaveAddress_Read(uint8 u8SlaveAddressCpy){
    3dac:	df 93       	push	r29
    3dae:	cf 93       	push	r28
    3db0:	00 d0       	rcall	.+0      	; 0x3db2 <TWI_enSetSlaveAddress_Read+0x6>
    3db2:	cd b7       	in	r28, 0x3d	; 61
    3db4:	de b7       	in	r29, 0x3e	; 62
    3db6:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    3db8:	19 82       	std	Y+1, r1	; 0x01

	/* Set Slave address in TWDR register */
	TWDR = u8SlaveAddressCpy | 1;   //first bit will be 1
    3dba:	e3 e2       	ldi	r30, 0x23	; 35
    3dbc:	f0 e0       	ldi	r31, 0x00	; 0
    3dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc0:	81 60       	ori	r24, 0x01	; 1
    3dc2:	80 83       	st	Z, r24

	/* Clear the start condition bit */
	CLR_BIT(TWCR , TWCR_TWSTA);
    3dc4:	a6 e5       	ldi	r26, 0x56	; 86
    3dc6:	b0 e0       	ldi	r27, 0x00	; 0
    3dc8:	e6 e5       	ldi	r30, 0x56	; 86
    3dca:	f0 e0       	ldi	r31, 0x00	; 0
    3dcc:	80 81       	ld	r24, Z
    3dce:	8f 7d       	andi	r24, 0xDF	; 223
    3dd0:	8c 93       	st	X, r24
	/* Set bit 0 to make Read operation */
	//SET_BIT(TWDR , TWDR_TWD0);		//already is set to 1

	/*************************************************/
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    3dd2:	a6 e5       	ldi	r26, 0x56	; 86
    3dd4:	b0 e0       	ldi	r27, 0x00	; 0
    3dd6:	e6 e5       	ldi	r30, 0x56	; 86
    3dd8:	f0 e0       	ldi	r31, 0x00	; 0
    3dda:	80 81       	ld	r24, Z
    3ddc:	80 68       	ori	r24, 0x80	; 128
    3dde:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    3de0:	a6 e5       	ldi	r26, 0x56	; 86
    3de2:	b0 e0       	ldi	r27, 0x00	; 0
    3de4:	e6 e5       	ldi	r30, 0x56	; 86
    3de6:	f0 e0       	ldi	r31, 0x00	; 0
    3de8:	80 81       	ld	r24, Z
    3dea:	84 60       	ori	r24, 0x04	; 4
    3dec:	8c 93       	st	X, r24
	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    3dee:	e6 e5       	ldi	r30, 0x56	; 86
    3df0:	f0 e0       	ldi	r31, 0x00	; 0
    3df2:	80 81       	ld	r24, Z
    3df4:	88 23       	and	r24, r24
    3df6:	dc f7       	brge	.-10     	; 0x3dee <TWI_enSetSlaveAddress_Read+0x42>

	if((TWSR & 0XF8) == SLA_WITH_R_NOACK)
    3df8:	e1 e2       	ldi	r30, 0x21	; 33
    3dfa:	f0 e0       	ldi	r31, 0x00	; 0
    3dfc:	80 81       	ld	r24, Z
    3dfe:	88 2f       	mov	r24, r24
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	88 7f       	andi	r24, 0xF8	; 248
    3e04:	90 70       	andi	r25, 0x00	; 0
    3e06:	88 33       	cpi	r24, 0x38	; 56
    3e08:	91 05       	cpc	r25, r1
    3e0a:	11 f4       	brne	.+4      	; 0x3e10 <TWI_enSetSlaveAddress_Read+0x64>
	{
		Local_ErrorState = SLA_R_NOACK_ERR;
    3e0c:	84 e0       	ldi	r24, 0x04	; 4
    3e0e:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/* Do Nothing */
	}
	return Local_ErrorState;
    3e10:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e12:	0f 90       	pop	r0
    3e14:	0f 90       	pop	r0
    3e16:	cf 91       	pop	r28
    3e18:	df 91       	pop	r29
    3e1a:	08 95       	ret

00003e1c <TWI_enMasterWriteData>:
TWI_ErrorState_t TWI_enMasterWriteData(uint8 u8DataCpy){
    3e1c:	df 93       	push	r29
    3e1e:	cf 93       	push	r28
    3e20:	00 d0       	rcall	.+0      	; 0x3e22 <TWI_enMasterWriteData+0x6>
    3e22:	cd b7       	in	r28, 0x3d	; 61
    3e24:	de b7       	in	r29, 0x3e	; 62
    3e26:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    3e28:	19 82       	std	Y+1, r1	; 0x01
	/* Write data to TWDR */
	TWDR = u8DataCpy;
    3e2a:	e3 e2       	ldi	r30, 0x23	; 35
    3e2c:	f0 e0       	ldi	r31, 0x00	; 0
    3e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e30:	80 83       	st	Z, r24

	/*************************************************/
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    3e32:	a6 e5       	ldi	r26, 0x56	; 86
    3e34:	b0 e0       	ldi	r27, 0x00	; 0
    3e36:	e6 e5       	ldi	r30, 0x56	; 86
    3e38:	f0 e0       	ldi	r31, 0x00	; 0
    3e3a:	80 81       	ld	r24, Z
    3e3c:	80 68       	ori	r24, 0x80	; 128
    3e3e:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    3e40:	a6 e5       	ldi	r26, 0x56	; 86
    3e42:	b0 e0       	ldi	r27, 0x00	; 0
    3e44:	e6 e5       	ldi	r30, 0x56	; 86
    3e46:	f0 e0       	ldi	r31, 0x00	; 0
    3e48:	80 81       	ld	r24, Z
    3e4a:	84 60       	ori	r24, 0x04	; 4
    3e4c:	8c 93       	st	X, r24
	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    3e4e:	e6 e5       	ldi	r30, 0x56	; 86
    3e50:	f0 e0       	ldi	r31, 0x00	; 0
    3e52:	80 81       	ld	r24, Z
    3e54:	88 23       	and	r24, r24
    3e56:	dc f7       	brge	.-10     	; 0x3e4e <TWI_enMasterWriteData+0x32>

	if((TWSR & 0XF8) == MASTER_SEND_DATA_NOACK)
    3e58:	e1 e2       	ldi	r30, 0x21	; 33
    3e5a:	f0 e0       	ldi	r31, 0x00	; 0
    3e5c:	80 81       	ld	r24, Z
    3e5e:	88 2f       	mov	r24, r24
    3e60:	90 e0       	ldi	r25, 0x00	; 0
    3e62:	88 7f       	andi	r24, 0xF8	; 248
    3e64:	90 70       	andi	r25, 0x00	; 0
    3e66:	80 33       	cpi	r24, 0x30	; 48
    3e68:	91 05       	cpc	r25, r1
    3e6a:	11 f4       	brne	.+4      	; 0x3e70 <TWI_enMasterWriteData+0x54>
	{
		Local_ErrorState = MASTER_SEND_DATA_ERR;
    3e6c:	85 e0       	ldi	r24, 0x05	; 5
    3e6e:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do Nothing */
	}

	return Local_ErrorState;
    3e70:	89 81       	ldd	r24, Y+1	; 0x01

}
    3e72:	0f 90       	pop	r0
    3e74:	0f 90       	pop	r0
    3e76:	cf 91       	pop	r28
    3e78:	df 91       	pop	r29
    3e7a:	08 95       	ret

00003e7c <TWI_enMasterReadData>:
TWI_ErrorState_t TWI_enMasterReadData(uint8* u8DataCpy){
    3e7c:	df 93       	push	r29
    3e7e:	cf 93       	push	r28
    3e80:	00 d0       	rcall	.+0      	; 0x3e82 <TWI_enMasterReadData+0x6>
    3e82:	0f 92       	push	r0
    3e84:	cd b7       	in	r28, 0x3d	; 61
    3e86:	de b7       	in	r29, 0x3e	; 62
    3e88:	9b 83       	std	Y+3, r25	; 0x03
    3e8a:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    3e8c:	19 82       	std	Y+1, r1	; 0x01

		/* Clear interrupt flag to start the operation */
		SET_BIT(TWCR , TWCR_TWINT);
    3e8e:	a6 e5       	ldi	r26, 0x56	; 86
    3e90:	b0 e0       	ldi	r27, 0x00	; 0
    3e92:	e6 e5       	ldi	r30, 0x56	; 86
    3e94:	f0 e0       	ldi	r31, 0x00	; 0
    3e96:	80 81       	ld	r24, Z
    3e98:	80 68       	ori	r24, 0x80	; 128
    3e9a:	8c 93       	st	X, r24
		/* Enable TWI */
		SET_BIT(TWCR , TWCR_TWEN);
    3e9c:	a6 e5       	ldi	r26, 0x56	; 86
    3e9e:	b0 e0       	ldi	r27, 0x00	; 0
    3ea0:	e6 e5       	ldi	r30, 0x56	; 86
    3ea2:	f0 e0       	ldi	r31, 0x00	; 0
    3ea4:	80 81       	ld	r24, Z
    3ea6:	84 60       	ori	r24, 0x04	; 4
    3ea8:	8c 93       	st	X, r24
		CLR_BIT(TWCR, TWCR_TWEA);
    3eaa:	a6 e5       	ldi	r26, 0x56	; 86
    3eac:	b0 e0       	ldi	r27, 0x00	; 0
    3eae:	e6 e5       	ldi	r30, 0x56	; 86
    3eb0:	f0 e0       	ldi	r31, 0x00	; 0
    3eb2:	80 81       	ld	r24, Z
    3eb4:	8f 7b       	andi	r24, 0xBF	; 191
    3eb6:	8c 93       	st	X, r24
		/*Wait until the interrupt flag us raised again  */
		while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    3eb8:	e6 e5       	ldi	r30, 0x56	; 86
    3eba:	f0 e0       	ldi	r31, 0x00	; 0
    3ebc:	80 81       	ld	r24, Z
    3ebe:	88 23       	and	r24, r24
    3ec0:	dc f7       	brge	.-10     	; 0x3eb8 <TWI_enMasterReadData+0x3c>

		if((TWSR & 0XF8) == MASTER_RECEIVE_DATA_NOACK)
    3ec2:	e1 e2       	ldi	r30, 0x21	; 33
    3ec4:	f0 e0       	ldi	r31, 0x00	; 0
    3ec6:	80 81       	ld	r24, Z
    3ec8:	88 2f       	mov	r24, r24
    3eca:	90 e0       	ldi	r25, 0x00	; 0
    3ecc:	88 7f       	andi	r24, 0xF8	; 248
    3ece:	90 70       	andi	r25, 0x00	; 0
    3ed0:	88 35       	cpi	r24, 0x58	; 88
    3ed2:	91 05       	cpc	r25, r1
    3ed4:	11 f4       	brne	.+4      	; 0x3eda <TWI_enMasterReadData+0x5e>
		{
			Local_ErrorState = MASTER_RECEIVE_DATA_ERR;
    3ed6:	86 e0       	ldi	r24, 0x06	; 6
    3ed8:	89 83       	std	Y+1, r24	; 0x01
		}
		else
		{
		}
			*u8DataCpy = TWDR;
    3eda:	e3 e2       	ldi	r30, 0x23	; 35
    3edc:	f0 e0       	ldi	r31, 0x00	; 0
    3ede:	80 81       	ld	r24, Z
    3ee0:	ea 81       	ldd	r30, Y+2	; 0x02
    3ee2:	fb 81       	ldd	r31, Y+3	; 0x03
    3ee4:	80 83       	st	Z, r24

		return Local_ErrorState;
    3ee6:	89 81       	ldd	r24, Y+1	; 0x01

}
    3ee8:	0f 90       	pop	r0
    3eea:	0f 90       	pop	r0
    3eec:	0f 90       	pop	r0
    3eee:	cf 91       	pop	r28
    3ef0:	df 91       	pop	r29
    3ef2:	08 95       	ret

00003ef4 <TWI_voidStopCondition>:

void TWI_voidStopCondition(void){
    3ef4:	df 93       	push	r29
    3ef6:	cf 93       	push	r28
    3ef8:	cd b7       	in	r28, 0x3d	; 61
    3efa:	de b7       	in	r29, 0x3e	; 62
	/* Set bit TWSTO to make stop condition */
	SET_BIT(TWCR , TWCR_TWSTO);
    3efc:	a6 e5       	ldi	r26, 0x56	; 86
    3efe:	b0 e0       	ldi	r27, 0x00	; 0
    3f00:	e6 e5       	ldi	r30, 0x56	; 86
    3f02:	f0 e0       	ldi	r31, 0x00	; 0
    3f04:	80 81       	ld	r24, Z
    3f06:	80 61       	ori	r24, 0x10	; 16
    3f08:	8c 93       	st	X, r24

	/************************************************/
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    3f0a:	a6 e5       	ldi	r26, 0x56	; 86
    3f0c:	b0 e0       	ldi	r27, 0x00	; 0
    3f0e:	e6 e5       	ldi	r30, 0x56	; 86
    3f10:	f0 e0       	ldi	r31, 0x00	; 0
    3f12:	80 81       	ld	r24, Z
    3f14:	80 68       	ori	r24, 0x80	; 128
    3f16:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    3f18:	a6 e5       	ldi	r26, 0x56	; 86
    3f1a:	b0 e0       	ldi	r27, 0x00	; 0
    3f1c:	e6 e5       	ldi	r30, 0x56	; 86
    3f1e:	f0 e0       	ldi	r31, 0x00	; 0
    3f20:	80 81       	ld	r24, Z
    3f22:	84 60       	ori	r24, 0x04	; 4
    3f24:	8c 93       	st	X, r24
}
    3f26:	cf 91       	pop	r28
    3f28:	df 91       	pop	r29
    3f2a:	08 95       	ret

00003f2c <DIO_voidInit>:
#include "DIO_private.h"
#include "DIO_config.h"


void DIO_voidInit(void)
{
    3f2c:	df 93       	push	r29
    3f2e:	cf 93       	push	r28
    3f30:	cd b7       	in	r28, 0x3d	; 61
    3f32:	de b7       	in	r29, 0x3e	; 62
	DDRA=CONCAT(DIO_PIN_NUM_A7_DIR,DIO_PIN_NUM_A6_DIR,DIO_PIN_NUM_A5_DIR,DIO_PIN_NUM_A4_DIR,DIO_PIN_NUM_A3_DIR,DIO_PIN_NUM_A2_DIR,DIO_PIN_NUM_A1_DIR,DIO_PIN_NUM_A0_DIR);
    3f34:	ea e3       	ldi	r30, 0x3A	; 58
    3f36:	f0 e0       	ldi	r31, 0x00	; 0
    3f38:	8c ef       	ldi	r24, 0xFC	; 252
    3f3a:	80 83       	st	Z, r24
	DDRB=CONCAT(DIO_PIN_NUM_B7_DIR,DIO_PIN_NUM_B6_DIR,DIO_PIN_NUM_B5_DIR,DIO_PIN_NUM_B4_DIR,DIO_PIN_NUM_B3_DIR,DIO_PIN_NUM_B2_DIR,DIO_PIN_NUM_B1_DIR,DIO_PIN_NUM_B0_DIR);
    3f3c:	e7 e3       	ldi	r30, 0x37	; 55
    3f3e:	f0 e0       	ldi	r31, 0x00	; 0
    3f40:	8b e0       	ldi	r24, 0x0B	; 11
    3f42:	80 83       	st	Z, r24
	DDRC=CONCAT(DIO_PIN_NUM_C7_DIR,DIO_PIN_NUM_C6_DIR,DIO_PIN_NUM_C5_DIR,DIO_PIN_NUM_C4_DIR,DIO_PIN_NUM_C3_DIR,DIO_PIN_NUM_C2_DIR,DIO_PIN_NUM_C1_DIR,DIO_PIN_NUM_C0_DIR);
    3f44:	e4 e3       	ldi	r30, 0x34	; 52
    3f46:	f0 e0       	ldi	r31, 0x00	; 0
    3f48:	8f ef       	ldi	r24, 0xFF	; 255
    3f4a:	80 83       	st	Z, r24
	DDRD=CONCAT(DIO_PIN_NUM_D7_DIR,DIO_PIN_NUM_D6_DIR,DIO_PIN_NUM_D5_DIR,DIO_PIN_NUM_D4_DIR,DIO_PIN_NUM_D3_DIR,DIO_PIN_NUM_D2_DIR,DIO_PIN_NUM_D1_DIR,DIO_PIN_NUM_D0_DIR);
    3f4c:	e1 e3       	ldi	r30, 0x31	; 49
    3f4e:	f0 e0       	ldi	r31, 0x00	; 0
    3f50:	82 ef       	ldi	r24, 0xF2	; 242
    3f52:	80 83       	st	Z, r24
}
    3f54:	cf 91       	pop	r28
    3f56:	df 91       	pop	r29
    3f58:	08 95       	ret

00003f5a <DIO_voidWritePin>:
void DIO_voidWritePin(uint8 u8PortCpy, uint8 u8PinCpy, uint8 u8ValueCpy)
{
    3f5a:	df 93       	push	r29
    3f5c:	cf 93       	push	r28
    3f5e:	00 d0       	rcall	.+0      	; 0x3f60 <DIO_voidWritePin+0x6>
    3f60:	00 d0       	rcall	.+0      	; 0x3f62 <DIO_voidWritePin+0x8>
    3f62:	0f 92       	push	r0
    3f64:	cd b7       	in	r28, 0x3d	; 61
    3f66:	de b7       	in	r29, 0x3e	; 62
    3f68:	89 83       	std	Y+1, r24	; 0x01
    3f6a:	6a 83       	std	Y+2, r22	; 0x02
    3f6c:	4b 83       	std	Y+3, r20	; 0x03
	switch(u8PortCpy){
    3f6e:	89 81       	ldd	r24, Y+1	; 0x01
    3f70:	28 2f       	mov	r18, r24
    3f72:	30 e0       	ldi	r19, 0x00	; 0
    3f74:	3d 83       	std	Y+5, r19	; 0x05
    3f76:	2c 83       	std	Y+4, r18	; 0x04
    3f78:	8c 81       	ldd	r24, Y+4	; 0x04
    3f7a:	9d 81       	ldd	r25, Y+5	; 0x05
    3f7c:	82 30       	cpi	r24, 0x02	; 2
    3f7e:	91 05       	cpc	r25, r1
    3f80:	09 f4       	brne	.+2      	; 0x3f84 <DIO_voidWritePin+0x2a>
    3f82:	48 c0       	rjmp	.+144    	; 0x4014 <DIO_voidWritePin+0xba>
    3f84:	2c 81       	ldd	r18, Y+4	; 0x04
    3f86:	3d 81       	ldd	r19, Y+5	; 0x05
    3f88:	23 30       	cpi	r18, 0x03	; 3
    3f8a:	31 05       	cpc	r19, r1
    3f8c:	34 f4       	brge	.+12     	; 0x3f9a <DIO_voidWritePin+0x40>
    3f8e:	8c 81       	ldd	r24, Y+4	; 0x04
    3f90:	9d 81       	ldd	r25, Y+5	; 0x05
    3f92:	81 30       	cpi	r24, 0x01	; 1
    3f94:	91 05       	cpc	r25, r1
    3f96:	71 f0       	breq	.+28     	; 0x3fb4 <DIO_voidWritePin+0x5a>
    3f98:	cb c0       	rjmp	.+406    	; 0x4130 <DIO_voidWritePin+0x1d6>
    3f9a:	2c 81       	ldd	r18, Y+4	; 0x04
    3f9c:	3d 81       	ldd	r19, Y+5	; 0x05
    3f9e:	23 30       	cpi	r18, 0x03	; 3
    3fa0:	31 05       	cpc	r19, r1
    3fa2:	09 f4       	brne	.+2      	; 0x3fa6 <DIO_voidWritePin+0x4c>
    3fa4:	67 c0       	rjmp	.+206    	; 0x4074 <DIO_voidWritePin+0x11a>
    3fa6:	8c 81       	ldd	r24, Y+4	; 0x04
    3fa8:	9d 81       	ldd	r25, Y+5	; 0x05
    3faa:	84 30       	cpi	r24, 0x04	; 4
    3fac:	91 05       	cpc	r25, r1
    3fae:	09 f4       	brne	.+2      	; 0x3fb2 <DIO_voidWritePin+0x58>
    3fb0:	91 c0       	rjmp	.+290    	; 0x40d4 <DIO_voidWritePin+0x17a>
    3fb2:	be c0       	rjmp	.+380    	; 0x4130 <DIO_voidWritePin+0x1d6>
	case PORT_A:
		if (u8ValueCpy == DIO_HIGH)
    3fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    3fb6:	81 30       	cpi	r24, 0x01	; 1
    3fb8:	a1 f4       	brne	.+40     	; 0x3fe2 <DIO_voidWritePin+0x88>
		{
			SET_BIT(PORTA, u8PinCpy);
    3fba:	ab e3       	ldi	r26, 0x3B	; 59
    3fbc:	b0 e0       	ldi	r27, 0x00	; 0
    3fbe:	eb e3       	ldi	r30, 0x3B	; 59
    3fc0:	f0 e0       	ldi	r31, 0x00	; 0
    3fc2:	80 81       	ld	r24, Z
    3fc4:	48 2f       	mov	r20, r24
    3fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc8:	28 2f       	mov	r18, r24
    3fca:	30 e0       	ldi	r19, 0x00	; 0
    3fcc:	81 e0       	ldi	r24, 0x01	; 1
    3fce:	90 e0       	ldi	r25, 0x00	; 0
    3fd0:	02 2e       	mov	r0, r18
    3fd2:	02 c0       	rjmp	.+4      	; 0x3fd8 <DIO_voidWritePin+0x7e>
    3fd4:	88 0f       	add	r24, r24
    3fd6:	99 1f       	adc	r25, r25
    3fd8:	0a 94       	dec	r0
    3fda:	e2 f7       	brpl	.-8      	; 0x3fd4 <DIO_voidWritePin+0x7a>
    3fdc:	84 2b       	or	r24, r20
    3fde:	8c 93       	st	X, r24
    3fe0:	a7 c0       	rjmp	.+334    	; 0x4130 <DIO_voidWritePin+0x1d6>
		}
		else if(u8ValueCpy == DIO_LOW)
    3fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fe4:	88 23       	and	r24, r24
    3fe6:	09 f0       	breq	.+2      	; 0x3fea <DIO_voidWritePin+0x90>
    3fe8:	a3 c0       	rjmp	.+326    	; 0x4130 <DIO_voidWritePin+0x1d6>
		{
			CLR_BIT(PORTA, u8PinCpy);
    3fea:	ab e3       	ldi	r26, 0x3B	; 59
    3fec:	b0 e0       	ldi	r27, 0x00	; 0
    3fee:	eb e3       	ldi	r30, 0x3B	; 59
    3ff0:	f0 e0       	ldi	r31, 0x00	; 0
    3ff2:	80 81       	ld	r24, Z
    3ff4:	48 2f       	mov	r20, r24
    3ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff8:	28 2f       	mov	r18, r24
    3ffa:	30 e0       	ldi	r19, 0x00	; 0
    3ffc:	81 e0       	ldi	r24, 0x01	; 1
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	02 2e       	mov	r0, r18
    4002:	02 c0       	rjmp	.+4      	; 0x4008 <DIO_voidWritePin+0xae>
    4004:	88 0f       	add	r24, r24
    4006:	99 1f       	adc	r25, r25
    4008:	0a 94       	dec	r0
    400a:	e2 f7       	brpl	.-8      	; 0x4004 <DIO_voidWritePin+0xaa>
    400c:	80 95       	com	r24
    400e:	84 23       	and	r24, r20
    4010:	8c 93       	st	X, r24
    4012:	8e c0       	rjmp	.+284    	; 0x4130 <DIO_voidWritePin+0x1d6>
		}
		break;
	case PORT_B:
		if (u8ValueCpy == DIO_HIGH)
    4014:	8b 81       	ldd	r24, Y+3	; 0x03
    4016:	81 30       	cpi	r24, 0x01	; 1
    4018:	a1 f4       	brne	.+40     	; 0x4042 <DIO_voidWritePin+0xe8>
		{
			SET_BIT(PORTB, u8PinCpy);
    401a:	a8 e3       	ldi	r26, 0x38	; 56
    401c:	b0 e0       	ldi	r27, 0x00	; 0
    401e:	e8 e3       	ldi	r30, 0x38	; 56
    4020:	f0 e0       	ldi	r31, 0x00	; 0
    4022:	80 81       	ld	r24, Z
    4024:	48 2f       	mov	r20, r24
    4026:	8a 81       	ldd	r24, Y+2	; 0x02
    4028:	28 2f       	mov	r18, r24
    402a:	30 e0       	ldi	r19, 0x00	; 0
    402c:	81 e0       	ldi	r24, 0x01	; 1
    402e:	90 e0       	ldi	r25, 0x00	; 0
    4030:	02 2e       	mov	r0, r18
    4032:	02 c0       	rjmp	.+4      	; 0x4038 <DIO_voidWritePin+0xde>
    4034:	88 0f       	add	r24, r24
    4036:	99 1f       	adc	r25, r25
    4038:	0a 94       	dec	r0
    403a:	e2 f7       	brpl	.-8      	; 0x4034 <DIO_voidWritePin+0xda>
    403c:	84 2b       	or	r24, r20
    403e:	8c 93       	st	X, r24
    4040:	77 c0       	rjmp	.+238    	; 0x4130 <DIO_voidWritePin+0x1d6>
		}
		else if(u8ValueCpy == DIO_LOW)
    4042:	8b 81       	ldd	r24, Y+3	; 0x03
    4044:	88 23       	and	r24, r24
    4046:	09 f0       	breq	.+2      	; 0x404a <DIO_voidWritePin+0xf0>
    4048:	73 c0       	rjmp	.+230    	; 0x4130 <DIO_voidWritePin+0x1d6>
		{
			CLR_BIT(PORTB, u8PinCpy);
    404a:	a8 e3       	ldi	r26, 0x38	; 56
    404c:	b0 e0       	ldi	r27, 0x00	; 0
    404e:	e8 e3       	ldi	r30, 0x38	; 56
    4050:	f0 e0       	ldi	r31, 0x00	; 0
    4052:	80 81       	ld	r24, Z
    4054:	48 2f       	mov	r20, r24
    4056:	8a 81       	ldd	r24, Y+2	; 0x02
    4058:	28 2f       	mov	r18, r24
    405a:	30 e0       	ldi	r19, 0x00	; 0
    405c:	81 e0       	ldi	r24, 0x01	; 1
    405e:	90 e0       	ldi	r25, 0x00	; 0
    4060:	02 2e       	mov	r0, r18
    4062:	02 c0       	rjmp	.+4      	; 0x4068 <DIO_voidWritePin+0x10e>
    4064:	88 0f       	add	r24, r24
    4066:	99 1f       	adc	r25, r25
    4068:	0a 94       	dec	r0
    406a:	e2 f7       	brpl	.-8      	; 0x4064 <DIO_voidWritePin+0x10a>
    406c:	80 95       	com	r24
    406e:	84 23       	and	r24, r20
    4070:	8c 93       	st	X, r24
    4072:	5e c0       	rjmp	.+188    	; 0x4130 <DIO_voidWritePin+0x1d6>
		}
		break;
	case PORT_C:
		if (u8ValueCpy == DIO_HIGH)
    4074:	8b 81       	ldd	r24, Y+3	; 0x03
    4076:	81 30       	cpi	r24, 0x01	; 1
    4078:	a1 f4       	brne	.+40     	; 0x40a2 <DIO_voidWritePin+0x148>
		{
			SET_BIT(PORTC, u8PinCpy);
    407a:	a5 e3       	ldi	r26, 0x35	; 53
    407c:	b0 e0       	ldi	r27, 0x00	; 0
    407e:	e5 e3       	ldi	r30, 0x35	; 53
    4080:	f0 e0       	ldi	r31, 0x00	; 0
    4082:	80 81       	ld	r24, Z
    4084:	48 2f       	mov	r20, r24
    4086:	8a 81       	ldd	r24, Y+2	; 0x02
    4088:	28 2f       	mov	r18, r24
    408a:	30 e0       	ldi	r19, 0x00	; 0
    408c:	81 e0       	ldi	r24, 0x01	; 1
    408e:	90 e0       	ldi	r25, 0x00	; 0
    4090:	02 2e       	mov	r0, r18
    4092:	02 c0       	rjmp	.+4      	; 0x4098 <DIO_voidWritePin+0x13e>
    4094:	88 0f       	add	r24, r24
    4096:	99 1f       	adc	r25, r25
    4098:	0a 94       	dec	r0
    409a:	e2 f7       	brpl	.-8      	; 0x4094 <DIO_voidWritePin+0x13a>
    409c:	84 2b       	or	r24, r20
    409e:	8c 93       	st	X, r24
    40a0:	47 c0       	rjmp	.+142    	; 0x4130 <DIO_voidWritePin+0x1d6>
		}
		else if(u8ValueCpy == DIO_LOW){
    40a2:	8b 81       	ldd	r24, Y+3	; 0x03
    40a4:	88 23       	and	r24, r24
    40a6:	09 f0       	breq	.+2      	; 0x40aa <DIO_voidWritePin+0x150>
    40a8:	43 c0       	rjmp	.+134    	; 0x4130 <DIO_voidWritePin+0x1d6>
			CLR_BIT(PORTC, u8PinCpy);
    40aa:	a5 e3       	ldi	r26, 0x35	; 53
    40ac:	b0 e0       	ldi	r27, 0x00	; 0
    40ae:	e5 e3       	ldi	r30, 0x35	; 53
    40b0:	f0 e0       	ldi	r31, 0x00	; 0
    40b2:	80 81       	ld	r24, Z
    40b4:	48 2f       	mov	r20, r24
    40b6:	8a 81       	ldd	r24, Y+2	; 0x02
    40b8:	28 2f       	mov	r18, r24
    40ba:	30 e0       	ldi	r19, 0x00	; 0
    40bc:	81 e0       	ldi	r24, 0x01	; 1
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	02 2e       	mov	r0, r18
    40c2:	02 c0       	rjmp	.+4      	; 0x40c8 <DIO_voidWritePin+0x16e>
    40c4:	88 0f       	add	r24, r24
    40c6:	99 1f       	adc	r25, r25
    40c8:	0a 94       	dec	r0
    40ca:	e2 f7       	brpl	.-8      	; 0x40c4 <DIO_voidWritePin+0x16a>
    40cc:	80 95       	com	r24
    40ce:	84 23       	and	r24, r20
    40d0:	8c 93       	st	X, r24
    40d2:	2e c0       	rjmp	.+92     	; 0x4130 <DIO_voidWritePin+0x1d6>
		}
		break;
	case PORT_D:
		if (u8ValueCpy == DIO_HIGH){
    40d4:	8b 81       	ldd	r24, Y+3	; 0x03
    40d6:	81 30       	cpi	r24, 0x01	; 1
    40d8:	a1 f4       	brne	.+40     	; 0x4102 <DIO_voidWritePin+0x1a8>
			SET_BIT(PORTD, u8PinCpy);
    40da:	a2 e3       	ldi	r26, 0x32	; 50
    40dc:	b0 e0       	ldi	r27, 0x00	; 0
    40de:	e2 e3       	ldi	r30, 0x32	; 50
    40e0:	f0 e0       	ldi	r31, 0x00	; 0
    40e2:	80 81       	ld	r24, Z
    40e4:	48 2f       	mov	r20, r24
    40e6:	8a 81       	ldd	r24, Y+2	; 0x02
    40e8:	28 2f       	mov	r18, r24
    40ea:	30 e0       	ldi	r19, 0x00	; 0
    40ec:	81 e0       	ldi	r24, 0x01	; 1
    40ee:	90 e0       	ldi	r25, 0x00	; 0
    40f0:	02 2e       	mov	r0, r18
    40f2:	02 c0       	rjmp	.+4      	; 0x40f8 <DIO_voidWritePin+0x19e>
    40f4:	88 0f       	add	r24, r24
    40f6:	99 1f       	adc	r25, r25
    40f8:	0a 94       	dec	r0
    40fa:	e2 f7       	brpl	.-8      	; 0x40f4 <DIO_voidWritePin+0x19a>
    40fc:	84 2b       	or	r24, r20
    40fe:	8c 93       	st	X, r24
    4100:	17 c0       	rjmp	.+46     	; 0x4130 <DIO_voidWritePin+0x1d6>
		}
		else if(u8ValueCpy == DIO_LOW){
    4102:	8b 81       	ldd	r24, Y+3	; 0x03
    4104:	88 23       	and	r24, r24
    4106:	a1 f4       	brne	.+40     	; 0x4130 <DIO_voidWritePin+0x1d6>
			CLR_BIT(PORTD, u8PinCpy);
    4108:	a2 e3       	ldi	r26, 0x32	; 50
    410a:	b0 e0       	ldi	r27, 0x00	; 0
    410c:	e2 e3       	ldi	r30, 0x32	; 50
    410e:	f0 e0       	ldi	r31, 0x00	; 0
    4110:	80 81       	ld	r24, Z
    4112:	48 2f       	mov	r20, r24
    4114:	8a 81       	ldd	r24, Y+2	; 0x02
    4116:	28 2f       	mov	r18, r24
    4118:	30 e0       	ldi	r19, 0x00	; 0
    411a:	81 e0       	ldi	r24, 0x01	; 1
    411c:	90 e0       	ldi	r25, 0x00	; 0
    411e:	02 2e       	mov	r0, r18
    4120:	02 c0       	rjmp	.+4      	; 0x4126 <DIO_voidWritePin+0x1cc>
    4122:	88 0f       	add	r24, r24
    4124:	99 1f       	adc	r25, r25
    4126:	0a 94       	dec	r0
    4128:	e2 f7       	brpl	.-8      	; 0x4122 <DIO_voidWritePin+0x1c8>
    412a:	80 95       	com	r24
    412c:	84 23       	and	r24, r20
    412e:	8c 93       	st	X, r24
		}
		break;
		}
}
    4130:	0f 90       	pop	r0
    4132:	0f 90       	pop	r0
    4134:	0f 90       	pop	r0
    4136:	0f 90       	pop	r0
    4138:	0f 90       	pop	r0
    413a:	cf 91       	pop	r28
    413c:	df 91       	pop	r29
    413e:	08 95       	ret

00004140 <DIO_u8ReadPin>:
uint8 DIO_u8ReadPin(uint8 u8PortCpy, uint8 u8PinCpy)
{
    4140:	df 93       	push	r29
    4142:	cf 93       	push	r28
    4144:	00 d0       	rcall	.+0      	; 0x4146 <DIO_u8ReadPin+0x6>
    4146:	00 d0       	rcall	.+0      	; 0x4148 <DIO_u8ReadPin+0x8>
    4148:	0f 92       	push	r0
    414a:	cd b7       	in	r28, 0x3d	; 61
    414c:	de b7       	in	r29, 0x3e	; 62
    414e:	8a 83       	std	Y+2, r24	; 0x02
    4150:	6b 83       	std	Y+3, r22	; 0x03
	uint8 u8PinVal;
	switch(u8PortCpy)
    4152:	8a 81       	ldd	r24, Y+2	; 0x02
    4154:	28 2f       	mov	r18, r24
    4156:	30 e0       	ldi	r19, 0x00	; 0
    4158:	3d 83       	std	Y+5, r19	; 0x05
    415a:	2c 83       	std	Y+4, r18	; 0x04
    415c:	4c 81       	ldd	r20, Y+4	; 0x04
    415e:	5d 81       	ldd	r21, Y+5	; 0x05
    4160:	42 30       	cpi	r20, 0x02	; 2
    4162:	51 05       	cpc	r21, r1
    4164:	41 f1       	breq	.+80     	; 0x41b6 <DIO_u8ReadPin+0x76>
    4166:	8c 81       	ldd	r24, Y+4	; 0x04
    4168:	9d 81       	ldd	r25, Y+5	; 0x05
    416a:	83 30       	cpi	r24, 0x03	; 3
    416c:	91 05       	cpc	r25, r1
    416e:	34 f4       	brge	.+12     	; 0x417c <DIO_u8ReadPin+0x3c>
    4170:	2c 81       	ldd	r18, Y+4	; 0x04
    4172:	3d 81       	ldd	r19, Y+5	; 0x05
    4174:	21 30       	cpi	r18, 0x01	; 1
    4176:	31 05       	cpc	r19, r1
    4178:	61 f0       	breq	.+24     	; 0x4192 <DIO_u8ReadPin+0x52>
    417a:	52 c0       	rjmp	.+164    	; 0x4220 <DIO_u8ReadPin+0xe0>
    417c:	4c 81       	ldd	r20, Y+4	; 0x04
    417e:	5d 81       	ldd	r21, Y+5	; 0x05
    4180:	43 30       	cpi	r20, 0x03	; 3
    4182:	51 05       	cpc	r21, r1
    4184:	51 f1       	breq	.+84     	; 0x41da <DIO_u8ReadPin+0x9a>
    4186:	8c 81       	ldd	r24, Y+4	; 0x04
    4188:	9d 81       	ldd	r25, Y+5	; 0x05
    418a:	84 30       	cpi	r24, 0x04	; 4
    418c:	91 05       	cpc	r25, r1
    418e:	b9 f1       	breq	.+110    	; 0x41fe <DIO_u8ReadPin+0xbe>
    4190:	47 c0       	rjmp	.+142    	; 0x4220 <DIO_u8ReadPin+0xe0>
	{
		case PORT_A:
			u8PinVal=GET_BIT(PINA,u8PinCpy);
    4192:	e9 e3       	ldi	r30, 0x39	; 57
    4194:	f0 e0       	ldi	r31, 0x00	; 0
    4196:	80 81       	ld	r24, Z
    4198:	28 2f       	mov	r18, r24
    419a:	30 e0       	ldi	r19, 0x00	; 0
    419c:	8b 81       	ldd	r24, Y+3	; 0x03
    419e:	88 2f       	mov	r24, r24
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	a9 01       	movw	r20, r18
    41a4:	02 c0       	rjmp	.+4      	; 0x41aa <DIO_u8ReadPin+0x6a>
    41a6:	55 95       	asr	r21
    41a8:	47 95       	ror	r20
    41aa:	8a 95       	dec	r24
    41ac:	e2 f7       	brpl	.-8      	; 0x41a6 <DIO_u8ReadPin+0x66>
    41ae:	ca 01       	movw	r24, r20
    41b0:	81 70       	andi	r24, 0x01	; 1
    41b2:	89 83       	std	Y+1, r24	; 0x01
    41b4:	35 c0       	rjmp	.+106    	; 0x4220 <DIO_u8ReadPin+0xe0>
			break;
		case PORT_B:
			u8PinVal=GET_BIT(PINB,u8PinCpy);
    41b6:	e6 e3       	ldi	r30, 0x36	; 54
    41b8:	f0 e0       	ldi	r31, 0x00	; 0
    41ba:	80 81       	ld	r24, Z
    41bc:	28 2f       	mov	r18, r24
    41be:	30 e0       	ldi	r19, 0x00	; 0
    41c0:	8b 81       	ldd	r24, Y+3	; 0x03
    41c2:	88 2f       	mov	r24, r24
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	a9 01       	movw	r20, r18
    41c8:	02 c0       	rjmp	.+4      	; 0x41ce <DIO_u8ReadPin+0x8e>
    41ca:	55 95       	asr	r21
    41cc:	47 95       	ror	r20
    41ce:	8a 95       	dec	r24
    41d0:	e2 f7       	brpl	.-8      	; 0x41ca <DIO_u8ReadPin+0x8a>
    41d2:	ca 01       	movw	r24, r20
    41d4:	81 70       	andi	r24, 0x01	; 1
    41d6:	89 83       	std	Y+1, r24	; 0x01
    41d8:	23 c0       	rjmp	.+70     	; 0x4220 <DIO_u8ReadPin+0xe0>
			break;
		case PORT_C:
			u8PinVal=GET_BIT(PINC,u8PinCpy);
    41da:	e3 e3       	ldi	r30, 0x33	; 51
    41dc:	f0 e0       	ldi	r31, 0x00	; 0
    41de:	80 81       	ld	r24, Z
    41e0:	28 2f       	mov	r18, r24
    41e2:	30 e0       	ldi	r19, 0x00	; 0
    41e4:	8b 81       	ldd	r24, Y+3	; 0x03
    41e6:	88 2f       	mov	r24, r24
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	a9 01       	movw	r20, r18
    41ec:	02 c0       	rjmp	.+4      	; 0x41f2 <DIO_u8ReadPin+0xb2>
    41ee:	55 95       	asr	r21
    41f0:	47 95       	ror	r20
    41f2:	8a 95       	dec	r24
    41f4:	e2 f7       	brpl	.-8      	; 0x41ee <DIO_u8ReadPin+0xae>
    41f6:	ca 01       	movw	r24, r20
    41f8:	81 70       	andi	r24, 0x01	; 1
    41fa:	89 83       	std	Y+1, r24	; 0x01
    41fc:	11 c0       	rjmp	.+34     	; 0x4220 <DIO_u8ReadPin+0xe0>
			break;
		case PORT_D:
			u8PinVal=GET_BIT(PIND,u8PinCpy);
    41fe:	e0 e3       	ldi	r30, 0x30	; 48
    4200:	f0 e0       	ldi	r31, 0x00	; 0
    4202:	80 81       	ld	r24, Z
    4204:	28 2f       	mov	r18, r24
    4206:	30 e0       	ldi	r19, 0x00	; 0
    4208:	8b 81       	ldd	r24, Y+3	; 0x03
    420a:	88 2f       	mov	r24, r24
    420c:	90 e0       	ldi	r25, 0x00	; 0
    420e:	a9 01       	movw	r20, r18
    4210:	02 c0       	rjmp	.+4      	; 0x4216 <DIO_u8ReadPin+0xd6>
    4212:	55 95       	asr	r21
    4214:	47 95       	ror	r20
    4216:	8a 95       	dec	r24
    4218:	e2 f7       	brpl	.-8      	; 0x4212 <DIO_u8ReadPin+0xd2>
    421a:	ca 01       	movw	r24, r20
    421c:	81 70       	andi	r24, 0x01	; 1
    421e:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return u8PinVal;
    4220:	89 81       	ldd	r24, Y+1	; 0x01
}
    4222:	0f 90       	pop	r0
    4224:	0f 90       	pop	r0
    4226:	0f 90       	pop	r0
    4228:	0f 90       	pop	r0
    422a:	0f 90       	pop	r0
    422c:	cf 91       	pop	r28
    422e:	df 91       	pop	r29
    4230:	08 95       	ret

00004232 <DIO_voidTogglePin>:

void DIO_voidTogglePin(uint8 u8PortCpy, uint8 u8PinCpy)
{
    4232:	df 93       	push	r29
    4234:	cf 93       	push	r28
    4236:	00 d0       	rcall	.+0      	; 0x4238 <DIO_voidTogglePin+0x6>
    4238:	00 d0       	rcall	.+0      	; 0x423a <DIO_voidTogglePin+0x8>
    423a:	cd b7       	in	r28, 0x3d	; 61
    423c:	de b7       	in	r29, 0x3e	; 62
    423e:	89 83       	std	Y+1, r24	; 0x01
    4240:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortCpy)
    4242:	89 81       	ldd	r24, Y+1	; 0x01
    4244:	28 2f       	mov	r18, r24
    4246:	30 e0       	ldi	r19, 0x00	; 0
    4248:	3c 83       	std	Y+4, r19	; 0x04
    424a:	2b 83       	std	Y+3, r18	; 0x03
    424c:	8b 81       	ldd	r24, Y+3	; 0x03
    424e:	9c 81       	ldd	r25, Y+4	; 0x04
    4250:	82 30       	cpi	r24, 0x02	; 2
    4252:	91 05       	cpc	r25, r1
    4254:	51 f1       	breq	.+84     	; 0x42aa <DIO_voidTogglePin+0x78>
    4256:	2b 81       	ldd	r18, Y+3	; 0x03
    4258:	3c 81       	ldd	r19, Y+4	; 0x04
    425a:	23 30       	cpi	r18, 0x03	; 3
    425c:	31 05       	cpc	r19, r1
    425e:	34 f4       	brge	.+12     	; 0x426c <DIO_voidTogglePin+0x3a>
    4260:	8b 81       	ldd	r24, Y+3	; 0x03
    4262:	9c 81       	ldd	r25, Y+4	; 0x04
    4264:	81 30       	cpi	r24, 0x01	; 1
    4266:	91 05       	cpc	r25, r1
    4268:	61 f0       	breq	.+24     	; 0x4282 <DIO_voidTogglePin+0x50>
    426a:	5a c0       	rjmp	.+180    	; 0x4320 <DIO_voidTogglePin+0xee>
    426c:	2b 81       	ldd	r18, Y+3	; 0x03
    426e:	3c 81       	ldd	r19, Y+4	; 0x04
    4270:	23 30       	cpi	r18, 0x03	; 3
    4272:	31 05       	cpc	r19, r1
    4274:	71 f1       	breq	.+92     	; 0x42d2 <DIO_voidTogglePin+0xa0>
    4276:	8b 81       	ldd	r24, Y+3	; 0x03
    4278:	9c 81       	ldd	r25, Y+4	; 0x04
    427a:	84 30       	cpi	r24, 0x04	; 4
    427c:	91 05       	cpc	r25, r1
    427e:	e9 f1       	breq	.+122    	; 0x42fa <DIO_voidTogglePin+0xc8>
    4280:	4f c0       	rjmp	.+158    	; 0x4320 <DIO_voidTogglePin+0xee>
	{
		case PORT_A:
			TOG_BIT(PORTA,u8PinCpy);
    4282:	ab e3       	ldi	r26, 0x3B	; 59
    4284:	b0 e0       	ldi	r27, 0x00	; 0
    4286:	eb e3       	ldi	r30, 0x3B	; 59
    4288:	f0 e0       	ldi	r31, 0x00	; 0
    428a:	80 81       	ld	r24, Z
    428c:	48 2f       	mov	r20, r24
    428e:	8a 81       	ldd	r24, Y+2	; 0x02
    4290:	28 2f       	mov	r18, r24
    4292:	30 e0       	ldi	r19, 0x00	; 0
    4294:	81 e0       	ldi	r24, 0x01	; 1
    4296:	90 e0       	ldi	r25, 0x00	; 0
    4298:	02 2e       	mov	r0, r18
    429a:	02 c0       	rjmp	.+4      	; 0x42a0 <DIO_voidTogglePin+0x6e>
    429c:	88 0f       	add	r24, r24
    429e:	99 1f       	adc	r25, r25
    42a0:	0a 94       	dec	r0
    42a2:	e2 f7       	brpl	.-8      	; 0x429c <DIO_voidTogglePin+0x6a>
    42a4:	84 27       	eor	r24, r20
    42a6:	8c 93       	st	X, r24
    42a8:	3b c0       	rjmp	.+118    	; 0x4320 <DIO_voidTogglePin+0xee>
			break;
		case PORT_B:
			TOG_BIT(PORTB,u8PinCpy);
    42aa:	a8 e3       	ldi	r26, 0x38	; 56
    42ac:	b0 e0       	ldi	r27, 0x00	; 0
    42ae:	e8 e3       	ldi	r30, 0x38	; 56
    42b0:	f0 e0       	ldi	r31, 0x00	; 0
    42b2:	80 81       	ld	r24, Z
    42b4:	48 2f       	mov	r20, r24
    42b6:	8a 81       	ldd	r24, Y+2	; 0x02
    42b8:	28 2f       	mov	r18, r24
    42ba:	30 e0       	ldi	r19, 0x00	; 0
    42bc:	81 e0       	ldi	r24, 0x01	; 1
    42be:	90 e0       	ldi	r25, 0x00	; 0
    42c0:	02 2e       	mov	r0, r18
    42c2:	02 c0       	rjmp	.+4      	; 0x42c8 <DIO_voidTogglePin+0x96>
    42c4:	88 0f       	add	r24, r24
    42c6:	99 1f       	adc	r25, r25
    42c8:	0a 94       	dec	r0
    42ca:	e2 f7       	brpl	.-8      	; 0x42c4 <DIO_voidTogglePin+0x92>
    42cc:	84 27       	eor	r24, r20
    42ce:	8c 93       	st	X, r24
    42d0:	27 c0       	rjmp	.+78     	; 0x4320 <DIO_voidTogglePin+0xee>
			break;
		case PORT_C:
			TOG_BIT(PORTC,u8PinCpy);
    42d2:	a5 e3       	ldi	r26, 0x35	; 53
    42d4:	b0 e0       	ldi	r27, 0x00	; 0
    42d6:	e5 e3       	ldi	r30, 0x35	; 53
    42d8:	f0 e0       	ldi	r31, 0x00	; 0
    42da:	80 81       	ld	r24, Z
    42dc:	48 2f       	mov	r20, r24
    42de:	8a 81       	ldd	r24, Y+2	; 0x02
    42e0:	28 2f       	mov	r18, r24
    42e2:	30 e0       	ldi	r19, 0x00	; 0
    42e4:	81 e0       	ldi	r24, 0x01	; 1
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	02 2e       	mov	r0, r18
    42ea:	02 c0       	rjmp	.+4      	; 0x42f0 <DIO_voidTogglePin+0xbe>
    42ec:	88 0f       	add	r24, r24
    42ee:	99 1f       	adc	r25, r25
    42f0:	0a 94       	dec	r0
    42f2:	e2 f7       	brpl	.-8      	; 0x42ec <DIO_voidTogglePin+0xba>
    42f4:	84 27       	eor	r24, r20
    42f6:	8c 93       	st	X, r24
    42f8:	13 c0       	rjmp	.+38     	; 0x4320 <DIO_voidTogglePin+0xee>
			break;
		case PORT_D:
			TOG_BIT(PORTD,u8PinCpy);
    42fa:	a2 e3       	ldi	r26, 0x32	; 50
    42fc:	b0 e0       	ldi	r27, 0x00	; 0
    42fe:	e2 e3       	ldi	r30, 0x32	; 50
    4300:	f0 e0       	ldi	r31, 0x00	; 0
    4302:	80 81       	ld	r24, Z
    4304:	48 2f       	mov	r20, r24
    4306:	8a 81       	ldd	r24, Y+2	; 0x02
    4308:	28 2f       	mov	r18, r24
    430a:	30 e0       	ldi	r19, 0x00	; 0
    430c:	81 e0       	ldi	r24, 0x01	; 1
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	02 2e       	mov	r0, r18
    4312:	02 c0       	rjmp	.+4      	; 0x4318 <DIO_voidTogglePin+0xe6>
    4314:	88 0f       	add	r24, r24
    4316:	99 1f       	adc	r25, r25
    4318:	0a 94       	dec	r0
    431a:	e2 f7       	brpl	.-8      	; 0x4314 <DIO_voidTogglePin+0xe2>
    431c:	84 27       	eor	r24, r20
    431e:	8c 93       	st	X, r24
			break;
	}

}
    4320:	0f 90       	pop	r0
    4322:	0f 90       	pop	r0
    4324:	0f 90       	pop	r0
    4326:	0f 90       	pop	r0
    4328:	cf 91       	pop	r28
    432a:	df 91       	pop	r29
    432c:	08 95       	ret

0000432e <DIO_voidWritePort>:
/* DIO_voidWritePort(PORT_A, 0x20) -> ob0010 0000-----> this means bit 0 will be 0 and bit5 will be 1 */
void DIO_voidWritePort(uint8 u8PortCpy, uint8 u8ValueCpy)
{
    432e:	df 93       	push	r29
    4330:	cf 93       	push	r28
    4332:	00 d0       	rcall	.+0      	; 0x4334 <DIO_voidWritePort+0x6>
    4334:	00 d0       	rcall	.+0      	; 0x4336 <DIO_voidWritePort+0x8>
    4336:	cd b7       	in	r28, 0x3d	; 61
    4338:	de b7       	in	r29, 0x3e	; 62
    433a:	89 83       	std	Y+1, r24	; 0x01
    433c:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortCpy){
    433e:	89 81       	ldd	r24, Y+1	; 0x01
    4340:	28 2f       	mov	r18, r24
    4342:	30 e0       	ldi	r19, 0x00	; 0
    4344:	3c 83       	std	Y+4, r19	; 0x04
    4346:	2b 83       	std	Y+3, r18	; 0x03
    4348:	8b 81       	ldd	r24, Y+3	; 0x03
    434a:	9c 81       	ldd	r25, Y+4	; 0x04
    434c:	82 30       	cpi	r24, 0x02	; 2
    434e:	91 05       	cpc	r25, r1
    4350:	d9 f0       	breq	.+54     	; 0x4388 <DIO_voidWritePort+0x5a>
    4352:	2b 81       	ldd	r18, Y+3	; 0x03
    4354:	3c 81       	ldd	r19, Y+4	; 0x04
    4356:	23 30       	cpi	r18, 0x03	; 3
    4358:	31 05       	cpc	r19, r1
    435a:	34 f4       	brge	.+12     	; 0x4368 <DIO_voidWritePort+0x3a>
    435c:	8b 81       	ldd	r24, Y+3	; 0x03
    435e:	9c 81       	ldd	r25, Y+4	; 0x04
    4360:	81 30       	cpi	r24, 0x01	; 1
    4362:	91 05       	cpc	r25, r1
    4364:	61 f0       	breq	.+24     	; 0x437e <DIO_voidWritePort+0x50>
    4366:	1e c0       	rjmp	.+60     	; 0x43a4 <DIO_voidWritePort+0x76>
    4368:	2b 81       	ldd	r18, Y+3	; 0x03
    436a:	3c 81       	ldd	r19, Y+4	; 0x04
    436c:	23 30       	cpi	r18, 0x03	; 3
    436e:	31 05       	cpc	r19, r1
    4370:	81 f0       	breq	.+32     	; 0x4392 <DIO_voidWritePort+0x64>
    4372:	8b 81       	ldd	r24, Y+3	; 0x03
    4374:	9c 81       	ldd	r25, Y+4	; 0x04
    4376:	84 30       	cpi	r24, 0x04	; 4
    4378:	91 05       	cpc	r25, r1
    437a:	81 f0       	breq	.+32     	; 0x439c <DIO_voidWritePort+0x6e>
    437c:	13 c0       	rjmp	.+38     	; 0x43a4 <DIO_voidWritePort+0x76>
	case PORT_A:
		PORTA = u8ValueCpy;
    437e:	eb e3       	ldi	r30, 0x3B	; 59
    4380:	f0 e0       	ldi	r31, 0x00	; 0
    4382:	8a 81       	ldd	r24, Y+2	; 0x02
    4384:	80 83       	st	Z, r24
    4386:	0e c0       	rjmp	.+28     	; 0x43a4 <DIO_voidWritePort+0x76>
		break;
	case PORT_B:
		PORTB = u8ValueCpy;
    4388:	e8 e3       	ldi	r30, 0x38	; 56
    438a:	f0 e0       	ldi	r31, 0x00	; 0
    438c:	8a 81       	ldd	r24, Y+2	; 0x02
    438e:	80 83       	st	Z, r24
    4390:	09 c0       	rjmp	.+18     	; 0x43a4 <DIO_voidWritePort+0x76>
		break;
	case PORT_C:
		PORTC = u8ValueCpy;
    4392:	e5 e3       	ldi	r30, 0x35	; 53
    4394:	f0 e0       	ldi	r31, 0x00	; 0
    4396:	8a 81       	ldd	r24, Y+2	; 0x02
    4398:	80 83       	st	Z, r24
    439a:	04 c0       	rjmp	.+8      	; 0x43a4 <DIO_voidWritePort+0x76>
		break;
	case PORT_D:
		PORTD = u8ValueCpy;
    439c:	e2 e3       	ldi	r30, 0x32	; 50
    439e:	f0 e0       	ldi	r31, 0x00	; 0
    43a0:	8a 81       	ldd	r24, Y+2	; 0x02
    43a2:	80 83       	st	Z, r24
		break;

	}
}
    43a4:	0f 90       	pop	r0
    43a6:	0f 90       	pop	r0
    43a8:	0f 90       	pop	r0
    43aa:	0f 90       	pop	r0
    43ac:	cf 91       	pop	r28
    43ae:	df 91       	pop	r29
    43b0:	08 95       	ret

000043b2 <DIO_voidPullUpState>:
void DIO_voidPullUpState(uint8 u8PortCpy , uint8 u8PinCpy,uint8 u8State)
{
    43b2:	df 93       	push	r29
    43b4:	cf 93       	push	r28
    43b6:	00 d0       	rcall	.+0      	; 0x43b8 <DIO_voidPullUpState+0x6>
    43b8:	00 d0       	rcall	.+0      	; 0x43ba <DIO_voidPullUpState+0x8>
    43ba:	00 d0       	rcall	.+0      	; 0x43bc <DIO_voidPullUpState+0xa>
    43bc:	cd b7       	in	r28, 0x3d	; 61
    43be:	de b7       	in	r29, 0x3e	; 62
    43c0:	8a 83       	std	Y+2, r24	; 0x02
    43c2:	6b 83       	std	Y+3, r22	; 0x03
    43c4:	4c 83       	std	Y+4, r20	; 0x04
	uint8 u8Direction ;
	switch(u8PortCpy)
    43c6:	8a 81       	ldd	r24, Y+2	; 0x02
    43c8:	28 2f       	mov	r18, r24
    43ca:	30 e0       	ldi	r19, 0x00	; 0
    43cc:	3e 83       	std	Y+6, r19	; 0x06
    43ce:	2d 83       	std	Y+5, r18	; 0x05
    43d0:	4d 81       	ldd	r20, Y+5	; 0x05
    43d2:	5e 81       	ldd	r21, Y+6	; 0x06
    43d4:	42 30       	cpi	r20, 0x02	; 2
    43d6:	51 05       	cpc	r21, r1
    43d8:	41 f1       	breq	.+80     	; 0x442a <DIO_voidPullUpState+0x78>
    43da:	8d 81       	ldd	r24, Y+5	; 0x05
    43dc:	9e 81       	ldd	r25, Y+6	; 0x06
    43de:	83 30       	cpi	r24, 0x03	; 3
    43e0:	91 05       	cpc	r25, r1
    43e2:	34 f4       	brge	.+12     	; 0x43f0 <DIO_voidPullUpState+0x3e>
    43e4:	2d 81       	ldd	r18, Y+5	; 0x05
    43e6:	3e 81       	ldd	r19, Y+6	; 0x06
    43e8:	21 30       	cpi	r18, 0x01	; 1
    43ea:	31 05       	cpc	r19, r1
    43ec:	61 f0       	breq	.+24     	; 0x4406 <DIO_voidPullUpState+0x54>
    43ee:	52 c0       	rjmp	.+164    	; 0x4494 <DIO_voidPullUpState+0xe2>
    43f0:	4d 81       	ldd	r20, Y+5	; 0x05
    43f2:	5e 81       	ldd	r21, Y+6	; 0x06
    43f4:	43 30       	cpi	r20, 0x03	; 3
    43f6:	51 05       	cpc	r21, r1
    43f8:	51 f1       	breq	.+84     	; 0x444e <DIO_voidPullUpState+0x9c>
    43fa:	8d 81       	ldd	r24, Y+5	; 0x05
    43fc:	9e 81       	ldd	r25, Y+6	; 0x06
    43fe:	84 30       	cpi	r24, 0x04	; 4
    4400:	91 05       	cpc	r25, r1
    4402:	b9 f1       	breq	.+110    	; 0x4472 <DIO_voidPullUpState+0xc0>
    4404:	47 c0       	rjmp	.+142    	; 0x4494 <DIO_voidPullUpState+0xe2>
	{
	case PORT_A :
		u8Direction=GET_BIT(DDRA,u8PinCpy);
    4406:	ea e3       	ldi	r30, 0x3A	; 58
    4408:	f0 e0       	ldi	r31, 0x00	; 0
    440a:	80 81       	ld	r24, Z
    440c:	28 2f       	mov	r18, r24
    440e:	30 e0       	ldi	r19, 0x00	; 0
    4410:	8b 81       	ldd	r24, Y+3	; 0x03
    4412:	88 2f       	mov	r24, r24
    4414:	90 e0       	ldi	r25, 0x00	; 0
    4416:	a9 01       	movw	r20, r18
    4418:	02 c0       	rjmp	.+4      	; 0x441e <DIO_voidPullUpState+0x6c>
    441a:	55 95       	asr	r21
    441c:	47 95       	ror	r20
    441e:	8a 95       	dec	r24
    4420:	e2 f7       	brpl	.-8      	; 0x441a <DIO_voidPullUpState+0x68>
    4422:	ca 01       	movw	r24, r20
    4424:	81 70       	andi	r24, 0x01	; 1
    4426:	89 83       	std	Y+1, r24	; 0x01
    4428:	35 c0       	rjmp	.+106    	; 0x4494 <DIO_voidPullUpState+0xe2>
		break;
	case PORT_B :
		u8Direction=GET_BIT(DDRB,u8PinCpy);
    442a:	e7 e3       	ldi	r30, 0x37	; 55
    442c:	f0 e0       	ldi	r31, 0x00	; 0
    442e:	80 81       	ld	r24, Z
    4430:	28 2f       	mov	r18, r24
    4432:	30 e0       	ldi	r19, 0x00	; 0
    4434:	8b 81       	ldd	r24, Y+3	; 0x03
    4436:	88 2f       	mov	r24, r24
    4438:	90 e0       	ldi	r25, 0x00	; 0
    443a:	a9 01       	movw	r20, r18
    443c:	02 c0       	rjmp	.+4      	; 0x4442 <DIO_voidPullUpState+0x90>
    443e:	55 95       	asr	r21
    4440:	47 95       	ror	r20
    4442:	8a 95       	dec	r24
    4444:	e2 f7       	brpl	.-8      	; 0x443e <DIO_voidPullUpState+0x8c>
    4446:	ca 01       	movw	r24, r20
    4448:	81 70       	andi	r24, 0x01	; 1
    444a:	89 83       	std	Y+1, r24	; 0x01
    444c:	23 c0       	rjmp	.+70     	; 0x4494 <DIO_voidPullUpState+0xe2>
		break;

	case PORT_C :
		u8Direction=GET_BIT(DDRC,u8PinCpy);
    444e:	e4 e3       	ldi	r30, 0x34	; 52
    4450:	f0 e0       	ldi	r31, 0x00	; 0
    4452:	80 81       	ld	r24, Z
    4454:	28 2f       	mov	r18, r24
    4456:	30 e0       	ldi	r19, 0x00	; 0
    4458:	8b 81       	ldd	r24, Y+3	; 0x03
    445a:	88 2f       	mov	r24, r24
    445c:	90 e0       	ldi	r25, 0x00	; 0
    445e:	a9 01       	movw	r20, r18
    4460:	02 c0       	rjmp	.+4      	; 0x4466 <DIO_voidPullUpState+0xb4>
    4462:	55 95       	asr	r21
    4464:	47 95       	ror	r20
    4466:	8a 95       	dec	r24
    4468:	e2 f7       	brpl	.-8      	; 0x4462 <DIO_voidPullUpState+0xb0>
    446a:	ca 01       	movw	r24, r20
    446c:	81 70       	andi	r24, 0x01	; 1
    446e:	89 83       	std	Y+1, r24	; 0x01
    4470:	11 c0       	rjmp	.+34     	; 0x4494 <DIO_voidPullUpState+0xe2>
		break;

	case PORT_D :
		u8Direction=GET_BIT(DDRD,u8PinCpy);
    4472:	e1 e3       	ldi	r30, 0x31	; 49
    4474:	f0 e0       	ldi	r31, 0x00	; 0
    4476:	80 81       	ld	r24, Z
    4478:	28 2f       	mov	r18, r24
    447a:	30 e0       	ldi	r19, 0x00	; 0
    447c:	8b 81       	ldd	r24, Y+3	; 0x03
    447e:	88 2f       	mov	r24, r24
    4480:	90 e0       	ldi	r25, 0x00	; 0
    4482:	a9 01       	movw	r20, r18
    4484:	02 c0       	rjmp	.+4      	; 0x448a <DIO_voidPullUpState+0xd8>
    4486:	55 95       	asr	r21
    4488:	47 95       	ror	r20
    448a:	8a 95       	dec	r24
    448c:	e2 f7       	brpl	.-8      	; 0x4486 <DIO_voidPullUpState+0xd4>
    448e:	ca 01       	movw	r24, r20
    4490:	81 70       	andi	r24, 0x01	; 1
    4492:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	if (u8Direction==DIO_INPUT)			//if zero, write zero in pin
    4494:	89 81       	ldd	r24, Y+1	; 0x01
    4496:	88 23       	and	r24, r24
    4498:	29 f4       	brne	.+10     	; 0x44a4 <DIO_voidPullUpState+0xf2>
	{
		DIO_voidWritePin(u8PortCpy,u8PinCpy,u8State);
    449a:	8a 81       	ldd	r24, Y+2	; 0x02
    449c:	6b 81       	ldd	r22, Y+3	; 0x03
    449e:	4c 81       	ldd	r20, Y+4	; 0x04
    44a0:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
	}
	else
	{
		//do nothing
	}
}
    44a4:	26 96       	adiw	r28, 0x06	; 6
    44a6:	0f b6       	in	r0, 0x3f	; 63
    44a8:	f8 94       	cli
    44aa:	de bf       	out	0x3e, r29	; 62
    44ac:	0f be       	out	0x3f, r0	; 63
    44ae:	cd bf       	out	0x3d, r28	; 61
    44b0:	cf 91       	pop	r28
    44b2:	df 91       	pop	r29
    44b4:	08 95       	ret

000044b6 <DCM_voidRotateCW>:
#include "DC_Motor_config.h"
#include "DC_Motor_interface.h"
#include "../DIO/DIO_interface.h"


void DCM_voidRotateCW(void){
    44b6:	df 93       	push	r29
    44b8:	cf 93       	push	r28
    44ba:	cd b7       	in	r28, 0x3d	; 61
    44bc:	de b7       	in	r29, 0x3e	; 62
	DIO_voidWritePin(DCM_PORT, DCM_PIN0, DIO_LOW);
    44be:	81 e0       	ldi	r24, 0x01	; 1
    44c0:	62 e0       	ldi	r22, 0x02	; 2
    44c2:	40 e0       	ldi	r20, 0x00	; 0
    44c4:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
	DIO_voidWritePin(DCM_PORT, DCM_PIN1, DIO_HIGH);
    44c8:	81 e0       	ldi	r24, 0x01	; 1
    44ca:	63 e0       	ldi	r22, 0x03	; 3
    44cc:	41 e0       	ldi	r20, 0x01	; 1
    44ce:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
}
    44d2:	cf 91       	pop	r28
    44d4:	df 91       	pop	r29
    44d6:	08 95       	ret

000044d8 <DCM_voidRotateCCW>:
void DCM_voidRotateCCW(void){
    44d8:	df 93       	push	r29
    44da:	cf 93       	push	r28
    44dc:	cd b7       	in	r28, 0x3d	; 61
    44de:	de b7       	in	r29, 0x3e	; 62
	DIO_voidWritePin(DCM_PORT, DCM_PIN0, DIO_HIGH);
    44e0:	81 e0       	ldi	r24, 0x01	; 1
    44e2:	62 e0       	ldi	r22, 0x02	; 2
    44e4:	41 e0       	ldi	r20, 0x01	; 1
    44e6:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
	DIO_voidWritePin(DCM_PORT, DCM_PIN1, DIO_LOW);
    44ea:	81 e0       	ldi	r24, 0x01	; 1
    44ec:	63 e0       	ldi	r22, 0x03	; 3
    44ee:	40 e0       	ldi	r20, 0x00	; 0
    44f0:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
}
    44f4:	cf 91       	pop	r28
    44f6:	df 91       	pop	r29
    44f8:	08 95       	ret

000044fa <DCM_voidStop>:
void DCM_voidStop(void){
    44fa:	df 93       	push	r29
    44fc:	cf 93       	push	r28
    44fe:	cd b7       	in	r28, 0x3d	; 61
    4500:	de b7       	in	r29, 0x3e	; 62
	DIO_voidWritePin(DCM_PORT, DCM_PIN0, DIO_LOW);
    4502:	81 e0       	ldi	r24, 0x01	; 1
    4504:	62 e0       	ldi	r22, 0x02	; 2
    4506:	40 e0       	ldi	r20, 0x00	; 0
    4508:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
	DIO_voidWritePin(DCM_PORT, DCM_PIN1, DIO_LOW);
    450c:	81 e0       	ldi	r24, 0x01	; 1
    450e:	63 e0       	ldi	r22, 0x03	; 3
    4510:	40 e0       	ldi	r20, 0x00	; 0
    4512:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
}
    4516:	cf 91       	pop	r28
    4518:	df 91       	pop	r29
    451a:	08 95       	ret

0000451c <ADC_Init>:
#include "ADC_register.h"

void (*ADC_CALLBACK_PTR)(void) = NULL;


void ADC_Init (void){
    451c:	df 93       	push	r29
    451e:	cf 93       	push	r28
    4520:	cd b7       	in	r28, 0x3d	; 61
    4522:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADMUX, REFS1);
    4524:	a7 e2       	ldi	r26, 0x27	; 39
    4526:	b0 e0       	ldi	r27, 0x00	; 0
    4528:	e7 e2       	ldi	r30, 0x27	; 39
    452a:	f0 e0       	ldi	r31, 0x00	; 0
    452c:	80 81       	ld	r24, Z
    452e:	8f 77       	andi	r24, 0x7F	; 127
    4530:	8c 93       	st	X, r24
	SET_BIT(ADMUX, REFS0);
    4532:	a7 e2       	ldi	r26, 0x27	; 39
    4534:	b0 e0       	ldi	r27, 0x00	; 0
    4536:	e7 e2       	ldi	r30, 0x27	; 39
    4538:	f0 e0       	ldi	r31, 0x00	; 0
    453a:	80 81       	ld	r24, Z
    453c:	80 64       	ori	r24, 0x40	; 64
    453e:	8c 93       	st	X, r24

	CLR_BIT(ADMUX, ADLAR);
    4540:	a7 e2       	ldi	r26, 0x27	; 39
    4542:	b0 e0       	ldi	r27, 0x00	; 0
    4544:	e7 e2       	ldi	r30, 0x27	; 39
    4546:	f0 e0       	ldi	r31, 0x00	; 0
    4548:	80 81       	ld	r24, Z
    454a:	8f 7d       	andi	r24, 0xDF	; 223
    454c:	8c 93       	st	X, r24

	//clock
	SET_BIT(ADCSRA, ADPS0);
    454e:	a6 e2       	ldi	r26, 0x26	; 38
    4550:	b0 e0       	ldi	r27, 0x00	; 0
    4552:	e6 e2       	ldi	r30, 0x26	; 38
    4554:	f0 e0       	ldi	r31, 0x00	; 0
    4556:	80 81       	ld	r24, Z
    4558:	81 60       	ori	r24, 0x01	; 1
    455a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS1);
    455c:	a6 e2       	ldi	r26, 0x26	; 38
    455e:	b0 e0       	ldi	r27, 0x00	; 0
    4560:	e6 e2       	ldi	r30, 0x26	; 38
    4562:	f0 e0       	ldi	r31, 0x00	; 0
    4564:	80 81       	ld	r24, Z
    4566:	82 60       	ori	r24, 0x02	; 2
    4568:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS2);
    456a:	a6 e2       	ldi	r26, 0x26	; 38
    456c:	b0 e0       	ldi	r27, 0x00	; 0
    456e:	e6 e2       	ldi	r30, 0x26	; 38
    4570:	f0 e0       	ldi	r31, 0x00	; 0
    4572:	80 81       	ld	r24, Z
    4574:	84 60       	ori	r24, 0x04	; 4
    4576:	8c 93       	st	X, r24

	SET_BIT(ADCSRA, ADEN);
    4578:	a6 e2       	ldi	r26, 0x26	; 38
    457a:	b0 e0       	ldi	r27, 0x00	; 0
    457c:	e6 e2       	ldi	r30, 0x26	; 38
    457e:	f0 e0       	ldi	r31, 0x00	; 0
    4580:	80 81       	ld	r24, Z
    4582:	80 68       	ori	r24, 0x80	; 128
    4584:	8c 93       	st	X, r24

}
    4586:	cf 91       	pop	r28
    4588:	df 91       	pop	r29
    458a:	08 95       	ret

0000458c <ADC_Read_SYNCH>:


uint16 ADC_Read_SYNCH (uint8 Channel){
    458c:	df 93       	push	r29
    458e:	cf 93       	push	r28
    4590:	0f 92       	push	r0
    4592:	cd b7       	in	r28, 0x3d	; 61
    4594:	de b7       	in	r29, 0x3e	; 62
    4596:	89 83       	std	Y+1, r24	; 0x01
	//bit masking   ADMUX = (111 00000 & 010 10101) | 000 01010 = 010 01010
	ADMUX=(ADMUX&0b11100000) | (Channel);
    4598:	a7 e2       	ldi	r26, 0x27	; 39
    459a:	b0 e0       	ldi	r27, 0x00	; 0
    459c:	e7 e2       	ldi	r30, 0x27	; 39
    459e:	f0 e0       	ldi	r31, 0x00	; 0
    45a0:	80 81       	ld	r24, Z
    45a2:	98 2f       	mov	r25, r24
    45a4:	90 7e       	andi	r25, 0xE0	; 224
    45a6:	89 81       	ldd	r24, Y+1	; 0x01
    45a8:	89 2b       	or	r24, r25
    45aa:	8c 93       	st	X, r24

	SET_BIT(ADCSRA, ADSC);				//start conversion
    45ac:	a6 e2       	ldi	r26, 0x26	; 38
    45ae:	b0 e0       	ldi	r27, 0x00	; 0
    45b0:	e6 e2       	ldi	r30, 0x26	; 38
    45b2:	f0 e0       	ldi	r31, 0x00	; 0
    45b4:	80 81       	ld	r24, Z
    45b6:	80 64       	ori	r24, 0x40	; 64
    45b8:	8c 93       	st	X, r24

	while(GET_BIT(ADCSRA, ADIF) == 0);
    45ba:	e6 e2       	ldi	r30, 0x26	; 38
    45bc:	f0 e0       	ldi	r31, 0x00	; 0
    45be:	80 81       	ld	r24, Z
    45c0:	82 95       	swap	r24
    45c2:	8f 70       	andi	r24, 0x0F	; 15
    45c4:	88 2f       	mov	r24, r24
    45c6:	90 e0       	ldi	r25, 0x00	; 0
    45c8:	81 70       	andi	r24, 0x01	; 1
    45ca:	90 70       	andi	r25, 0x00	; 0
    45cc:	00 97       	sbiw	r24, 0x00	; 0
    45ce:	a9 f3       	breq	.-22     	; 0x45ba <ADC_Read_SYNCH+0x2e>

	SET_BIT(ADCSRA, ADIF); 				//set flag
    45d0:	a6 e2       	ldi	r26, 0x26	; 38
    45d2:	b0 e0       	ldi	r27, 0x00	; 0
    45d4:	e6 e2       	ldi	r30, 0x26	; 38
    45d6:	f0 e0       	ldi	r31, 0x00	; 0
    45d8:	80 81       	ld	r24, Z
    45da:	80 61       	ori	r24, 0x10	; 16
    45dc:	8c 93       	st	X, r24
	return ADC_Reg;
    45de:	e4 e2       	ldi	r30, 0x24	; 36
    45e0:	f0 e0       	ldi	r31, 0x00	; 0
    45e2:	80 81       	ld	r24, Z
    45e4:	91 81       	ldd	r25, Z+1	; 0x01
}
    45e6:	0f 90       	pop	r0
    45e8:	cf 91       	pop	r28
    45ea:	df 91       	pop	r29
    45ec:	08 95       	ret

000045ee <ADC_Start_ASYNC>:
//-------------------------------------------------------------------------------
void ADC_Start_ASYNC (uint8 Channel)
{
    45ee:	df 93       	push	r29
    45f0:	cf 93       	push	r28
    45f2:	0f 92       	push	r0
    45f4:	cd b7       	in	r28, 0x3d	; 61
    45f6:	de b7       	in	r29, 0x3e	; 62
    45f8:	89 83       	std	Y+1, r24	; 0x01
	if (GET_BIT(ADCSRA, ADSC) == 0)
    45fa:	e6 e2       	ldi	r30, 0x26	; 38
    45fc:	f0 e0       	ldi	r31, 0x00	; 0
    45fe:	80 81       	ld	r24, Z
    4600:	82 95       	swap	r24
    4602:	86 95       	lsr	r24
    4604:	86 95       	lsr	r24
    4606:	83 70       	andi	r24, 0x03	; 3
    4608:	88 2f       	mov	r24, r24
    460a:	90 e0       	ldi	r25, 0x00	; 0
    460c:	81 70       	andi	r24, 0x01	; 1
    460e:	90 70       	andi	r25, 0x00	; 0
    4610:	00 97       	sbiw	r24, 0x00	; 0
    4612:	89 f4       	brne	.+34     	; 0x4636 <ADC_Start_ASYNC+0x48>
	{
		ADMUX = ((ADMUX & 0b11100000)|(Channel));
    4614:	a7 e2       	ldi	r26, 0x27	; 39
    4616:	b0 e0       	ldi	r27, 0x00	; 0
    4618:	e7 e2       	ldi	r30, 0x27	; 39
    461a:	f0 e0       	ldi	r31, 0x00	; 0
    461c:	80 81       	ld	r24, Z
    461e:	98 2f       	mov	r25, r24
    4620:	90 7e       	andi	r25, 0xE0	; 224
    4622:	89 81       	ldd	r24, Y+1	; 0x01
    4624:	89 2b       	or	r24, r25
    4626:	8c 93       	st	X, r24
		SET_BIT(ADCSRA, ADSC);
    4628:	a6 e2       	ldi	r26, 0x26	; 38
    462a:	b0 e0       	ldi	r27, 0x00	; 0
    462c:	e6 e2       	ldi	r30, 0x26	; 38
    462e:	f0 e0       	ldi	r31, 0x00	; 0
    4630:	80 81       	ld	r24, Z
    4632:	80 64       	ori	r24, 0x40	; 64
    4634:	8c 93       	st	X, r24
	}
}
    4636:	0f 90       	pop	r0
    4638:	cf 91       	pop	r28
    463a:	df 91       	pop	r29
    463c:	08 95       	ret

0000463e <ADC_Read_ASYNC>:
uint16 ADC_Read_ASYNC(void)
{
    463e:	df 93       	push	r29
    4640:	cf 93       	push	r28
    4642:	cd b7       	in	r28, 0x3d	; 61
    4644:	de b7       	in	r29, 0x3e	; 62
	return ADC_Reg;
    4646:	e4 e2       	ldi	r30, 0x24	; 36
    4648:	f0 e0       	ldi	r31, 0x00	; 0
    464a:	80 81       	ld	r24, Z
    464c:	91 81       	ldd	r25, Z+1	; 0x01
}
    464e:	cf 91       	pop	r28
    4650:	df 91       	pop	r29
    4652:	08 95       	ret

00004654 <ADC_void_SET_CALL_BACK>:
void ADC_void_SET_CALL_BACK(void (*ptr)(void))
{
    4654:	df 93       	push	r29
    4656:	cf 93       	push	r28
    4658:	00 d0       	rcall	.+0      	; 0x465a <ADC_void_SET_CALL_BACK+0x6>
    465a:	cd b7       	in	r28, 0x3d	; 61
    465c:	de b7       	in	r29, 0x3e	; 62
    465e:	9a 83       	std	Y+2, r25	; 0x02
    4660:	89 83       	std	Y+1, r24	; 0x01
	ADC_CALLBACK_PTR = ptr;
    4662:	89 81       	ldd	r24, Y+1	; 0x01
    4664:	9a 81       	ldd	r25, Y+2	; 0x02
    4666:	90 93 eb 00 	sts	0x00EB, r25
    466a:	80 93 ea 00 	sts	0x00EA, r24
}
    466e:	0f 90       	pop	r0
    4670:	0f 90       	pop	r0
    4672:	cf 91       	pop	r28
    4674:	df 91       	pop	r29
    4676:	08 95       	ret

00004678 <__vector_16>:

void __vector_16 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_16 (void){
    4678:	1f 92       	push	r1
    467a:	0f 92       	push	r0
    467c:	0f b6       	in	r0, 0x3f	; 63
    467e:	0f 92       	push	r0
    4680:	11 24       	eor	r1, r1
    4682:	2f 93       	push	r18
    4684:	3f 93       	push	r19
    4686:	4f 93       	push	r20
    4688:	5f 93       	push	r21
    468a:	6f 93       	push	r22
    468c:	7f 93       	push	r23
    468e:	8f 93       	push	r24
    4690:	9f 93       	push	r25
    4692:	af 93       	push	r26
    4694:	bf 93       	push	r27
    4696:	ef 93       	push	r30
    4698:	ff 93       	push	r31
    469a:	df 93       	push	r29
    469c:	cf 93       	push	r28
    469e:	cd b7       	in	r28, 0x3d	; 61
    46a0:	de b7       	in	r29, 0x3e	; 62
	ADC_CALLBACK_PTR();
    46a2:	e0 91 ea 00 	lds	r30, 0x00EA
    46a6:	f0 91 eb 00 	lds	r31, 0x00EB
    46aa:	09 95       	icall
}
    46ac:	cf 91       	pop	r28
    46ae:	df 91       	pop	r29
    46b0:	ff 91       	pop	r31
    46b2:	ef 91       	pop	r30
    46b4:	bf 91       	pop	r27
    46b6:	af 91       	pop	r26
    46b8:	9f 91       	pop	r25
    46ba:	8f 91       	pop	r24
    46bc:	7f 91       	pop	r23
    46be:	6f 91       	pop	r22
    46c0:	5f 91       	pop	r21
    46c2:	4f 91       	pop	r20
    46c4:	3f 91       	pop	r19
    46c6:	2f 91       	pop	r18
    46c8:	0f 90       	pop	r0
    46ca:	0f be       	out	0x3f, r0	; 63
    46cc:	0f 90       	pop	r0
    46ce:	1f 90       	pop	r1
    46d0:	18 95       	reti

000046d2 <main>:


void ArrivalButton(void);
void EntranceButton(void);

int main(void){
    46d2:	0f 93       	push	r16
    46d4:	1f 93       	push	r17
    46d6:	df 93       	push	r29
    46d8:	cf 93       	push	r28
    46da:	cd b7       	in	r28, 0x3d	; 61
    46dc:	de b7       	in	r29, 0x3e	; 62
    46de:	a5 97       	sbiw	r28, 0x25	; 37
    46e0:	0f b6       	in	r0, 0x3f	; 63
    46e2:	f8 94       	cli
    46e4:	de bf       	out	0x3e, r29	; 62
    46e6:	0f be       	out	0x3f, r0	; 63
    46e8:	cd bf       	out	0x3d, r28	; 61
	uint16 u16Temperature   = 0;
    46ea:	1c a2       	std	Y+36, r1	; 0x24
    46ec:	1b a2       	std	Y+35, r1	; 0x23
	uint16 u16TempAnalogSignal=0;
    46ee:	1a a2       	std	Y+34, r1	; 0x22
    46f0:	19 a2       	std	Y+33, r1	; 0x21
	uint16 u16LightAnalogSignal=0;
    46f2:	18 a2       	std	Y+32, r1	; 0x20
    46f4:	1f 8e       	std	Y+31, r1	; 0x1f

	DIO_voidInit();
    46f6:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <DIO_voidInit>
	ADC_Init();
    46fa:	0e 94 8e 22 	call	0x451c	; 0x451c <ADC_Init>
	KPD_voidInit();
    46fe:	0e 94 25 1a 	call	0x344a	; 0x344a <KPD_voidInit>
	UART_voidInit();
    4702:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_voidInit>
	LCD_voidInit_4bitMode();
    4706:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <LCD_voidInit_4bitMode>
	TWI_voidMasterInit();
    470a:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <TWI_voidMasterInit>
	EXT_INTERRUPT_VID_INIT();
    470e:	0e 94 23 1b 	call	0x3646	; 0x3646 <EXT_INTERRUPT_VID_INIT>



	DIO_voidWritePin(PORT_D, DIO_PIN_NUM_D7, DIO_LOW);
    4712:	84 e0       	ldi	r24, 0x04	; 4
    4714:	67 e0       	ldi	r22, 0x07	; 7
    4716:	40 e0       	ldi	r20, 0x00	; 0
    4718:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
	DIO_voidWritePin(PORT_B, DIO_PIN_NUM_B3, DIO_LOW);
    471c:	82 e0       	ldi	r24, 0x02	; 2
    471e:	63 e0       	ldi	r22, 0x03	; 3
    4720:	40 e0       	ldi	r20, 0x00	; 0
    4722:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>

	DIO_voidWritePin(PORT_B, DIO_PIN_NUM_B2, ENABLE_PULLUP);
    4726:	82 e0       	ldi	r24, 0x02	; 2
    4728:	62 e0       	ldi	r22, 0x02	; 2
    472a:	41 e0       	ldi	r20, 0x01	; 1
    472c:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
	DIO_voidWritePin(PORT_D, DIO_PIN_NUM_D3, ENABLE_PULLUP);
    4730:	84 e0       	ldi	r24, 0x04	; 4
    4732:	63 e0       	ldi	r22, 0x03	; 3
    4734:	41 e0       	ldi	r20, 0x01	; 1
    4736:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
//
//	}

	//*******************************************s
	// Ask owner to set password
	LCD_voidWriteString_4bitMode("Set Password:", 13);
    473a:	80 e6       	ldi	r24, 0x60	; 96
    473c:	90 e0       	ldi	r25, 0x00	; 0
    473e:	6d e0       	ldi	r22, 0x0D	; 13
    4740:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <LCD_voidWriteString_4bitMode>

	// Set password on keypad
	uint8 u8PasswordSize = sizeof(u8key)/sizeof(u8key[0]);
    4744:	85 e0       	ldi	r24, 0x05	; 5
    4746:	8e 8f       	std	Y+30, r24	; 0x1e
	for(uint8 i=0;i<u8PasswordSize; ){
    4748:	1d a2       	std	Y+37, r1	; 0x25
    474a:	83 c0       	rjmp	.+262    	; 0x4852 <main+0x180>
		u8key[i] = KPD_u8GetKey();								//get password from user
    474c:	8d a1       	ldd	r24, Y+37	; 0x25
    474e:	08 2f       	mov	r16, r24
    4750:	10 e0       	ldi	r17, 0x00	; 0
    4752:	0e 94 4a 1a 	call	0x3494	; 0x3494 <KPD_u8GetKey>
    4756:	f8 01       	movw	r30, r16
    4758:	e8 50       	subi	r30, 0x08	; 8
    475a:	ff 4f       	sbci	r31, 0xFF	; 255
    475c:	80 83       	st	Z, r24
		LCD_voidDisplayKeys(u8key, &i);							//print password on LCD
    475e:	88 ef       	ldi	r24, 0xF8	; 248
    4760:	90 e0       	ldi	r25, 0x00	; 0
    4762:	9e 01       	movw	r18, r28
    4764:	2b 5d       	subi	r18, 0xDB	; 219
    4766:	3f 4f       	sbci	r19, 0xFF	; 255
    4768:	b9 01       	movw	r22, r18
    476a:	0e 94 b8 18 	call	0x3170	; 0x3170 <LCD_voidDisplayKeys>
    476e:	80 e0       	ldi	r24, 0x00	; 0
    4770:	90 e0       	ldi	r25, 0x00	; 0
    4772:	a8 e4       	ldi	r26, 0x48	; 72
    4774:	b3 e4       	ldi	r27, 0x43	; 67
    4776:	89 8f       	std	Y+25, r24	; 0x19
    4778:	9a 8f       	std	Y+26, r25	; 0x1a
    477a:	ab 8f       	std	Y+27, r26	; 0x1b
    477c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    477e:	69 8d       	ldd	r22, Y+25	; 0x19
    4780:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4782:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4784:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4786:	20 e0       	ldi	r18, 0x00	; 0
    4788:	30 e0       	ldi	r19, 0x00	; 0
    478a:	4a ef       	ldi	r20, 0xFA	; 250
    478c:	54 e4       	ldi	r21, 0x44	; 68
    478e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4792:	dc 01       	movw	r26, r24
    4794:	cb 01       	movw	r24, r22
    4796:	8d 8b       	std	Y+21, r24	; 0x15
    4798:	9e 8b       	std	Y+22, r25	; 0x16
    479a:	af 8b       	std	Y+23, r26	; 0x17
    479c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    479e:	6d 89       	ldd	r22, Y+21	; 0x15
    47a0:	7e 89       	ldd	r23, Y+22	; 0x16
    47a2:	8f 89       	ldd	r24, Y+23	; 0x17
    47a4:	98 8d       	ldd	r25, Y+24	; 0x18
    47a6:	20 e0       	ldi	r18, 0x00	; 0
    47a8:	30 e0       	ldi	r19, 0x00	; 0
    47aa:	40 e8       	ldi	r20, 0x80	; 128
    47ac:	5f e3       	ldi	r21, 0x3F	; 63
    47ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    47b2:	88 23       	and	r24, r24
    47b4:	2c f4       	brge	.+10     	; 0x47c0 <main+0xee>
		__ticks = 1;
    47b6:	81 e0       	ldi	r24, 0x01	; 1
    47b8:	90 e0       	ldi	r25, 0x00	; 0
    47ba:	9c 8b       	std	Y+20, r25	; 0x14
    47bc:	8b 8b       	std	Y+19, r24	; 0x13
    47be:	3f c0       	rjmp	.+126    	; 0x483e <main+0x16c>
	else if (__tmp > 65535)
    47c0:	6d 89       	ldd	r22, Y+21	; 0x15
    47c2:	7e 89       	ldd	r23, Y+22	; 0x16
    47c4:	8f 89       	ldd	r24, Y+23	; 0x17
    47c6:	98 8d       	ldd	r25, Y+24	; 0x18
    47c8:	20 e0       	ldi	r18, 0x00	; 0
    47ca:	3f ef       	ldi	r19, 0xFF	; 255
    47cc:	4f e7       	ldi	r20, 0x7F	; 127
    47ce:	57 e4       	ldi	r21, 0x47	; 71
    47d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    47d4:	18 16       	cp	r1, r24
    47d6:	4c f5       	brge	.+82     	; 0x482a <main+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47d8:	69 8d       	ldd	r22, Y+25	; 0x19
    47da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    47dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    47de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    47e0:	20 e0       	ldi	r18, 0x00	; 0
    47e2:	30 e0       	ldi	r19, 0x00	; 0
    47e4:	40 e2       	ldi	r20, 0x20	; 32
    47e6:	51 e4       	ldi	r21, 0x41	; 65
    47e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47ec:	dc 01       	movw	r26, r24
    47ee:	cb 01       	movw	r24, r22
    47f0:	bc 01       	movw	r22, r24
    47f2:	cd 01       	movw	r24, r26
    47f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47f8:	dc 01       	movw	r26, r24
    47fa:	cb 01       	movw	r24, r22
    47fc:	9c 8b       	std	Y+20, r25	; 0x14
    47fe:	8b 8b       	std	Y+19, r24	; 0x13
    4800:	0f c0       	rjmp	.+30     	; 0x4820 <main+0x14e>
    4802:	88 ec       	ldi	r24, 0xC8	; 200
    4804:	90 e0       	ldi	r25, 0x00	; 0
    4806:	9a 8b       	std	Y+18, r25	; 0x12
    4808:	89 8b       	std	Y+17, r24	; 0x11
    480a:	89 89       	ldd	r24, Y+17	; 0x11
    480c:	9a 89       	ldd	r25, Y+18	; 0x12
    480e:	01 97       	sbiw	r24, 0x01	; 1
    4810:	f1 f7       	brne	.-4      	; 0x480e <main+0x13c>
    4812:	9a 8b       	std	Y+18, r25	; 0x12
    4814:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4816:	8b 89       	ldd	r24, Y+19	; 0x13
    4818:	9c 89       	ldd	r25, Y+20	; 0x14
    481a:	01 97       	sbiw	r24, 0x01	; 1
    481c:	9c 8b       	std	Y+20, r25	; 0x14
    481e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4820:	8b 89       	ldd	r24, Y+19	; 0x13
    4822:	9c 89       	ldd	r25, Y+20	; 0x14
    4824:	00 97       	sbiw	r24, 0x00	; 0
    4826:	69 f7       	brne	.-38     	; 0x4802 <main+0x130>
    4828:	14 c0       	rjmp	.+40     	; 0x4852 <main+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    482a:	6d 89       	ldd	r22, Y+21	; 0x15
    482c:	7e 89       	ldd	r23, Y+22	; 0x16
    482e:	8f 89       	ldd	r24, Y+23	; 0x17
    4830:	98 8d       	ldd	r25, Y+24	; 0x18
    4832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4836:	dc 01       	movw	r26, r24
    4838:	cb 01       	movw	r24, r22
    483a:	9c 8b       	std	Y+20, r25	; 0x14
    483c:	8b 8b       	std	Y+19, r24	; 0x13
    483e:	8b 89       	ldd	r24, Y+19	; 0x13
    4840:	9c 89       	ldd	r25, Y+20	; 0x14
    4842:	98 8b       	std	Y+16, r25	; 0x10
    4844:	8f 87       	std	Y+15, r24	; 0x0f
    4846:	8f 85       	ldd	r24, Y+15	; 0x0f
    4848:	98 89       	ldd	r25, Y+16	; 0x10
    484a:	01 97       	sbiw	r24, 0x01	; 1
    484c:	f1 f7       	brne	.-4      	; 0x484a <main+0x178>
    484e:	98 8b       	std	Y+16, r25	; 0x10
    4850:	8f 87       	std	Y+15, r24	; 0x0f
	// Ask owner to set password
	LCD_voidWriteString_4bitMode("Set Password:", 13);

	// Set password on keypad
	uint8 u8PasswordSize = sizeof(u8key)/sizeof(u8key[0]);
	for(uint8 i=0;i<u8PasswordSize; ){
    4852:	9d a1       	ldd	r25, Y+37	; 0x25
    4854:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4856:	98 17       	cp	r25, r24
    4858:	08 f4       	brcc	.+2      	; 0x485c <main+0x18a>
    485a:	78 cf       	rjmp	.-272    	; 0x474c <main+0x7a>
		LCD_voidDisplayKeys(u8key, &i);							//print password on LCD
		_delay_ms(200);
	}

	//save the password in EEPROM
	for(uint8 i=0;i<u8PasswordSize;i++){
    485c:	1d 8e       	std	Y+29, r1	; 0x1d
    485e:	0e c0       	rjmp	.+28     	; 0x487c <main+0x1aa>
		EEPROM_voidWrite(EEPROM_START_ADDRESS+i,u8key[i]);
    4860:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4862:	88 2f       	mov	r24, r24
    4864:	90 e0       	ldi	r25, 0x00	; 0
    4866:	fc 01       	movw	r30, r24
    4868:	e8 50       	subi	r30, 0x08	; 8
    486a:	ff 4f       	sbci	r31, 0xFF	; 255
    486c:	90 81       	ld	r25, Z
    486e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4870:	69 2f       	mov	r22, r25
    4872:	0e 94 b6 1c 	call	0x396c	; 0x396c <EEPROM_voidWrite>
		LCD_voidDisplayKeys(u8key, &i);							//print password on LCD
		_delay_ms(200);
	}

	//save the password in EEPROM
	for(uint8 i=0;i<u8PasswordSize;i++){
    4876:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4878:	8f 5f       	subi	r24, 0xFF	; 255
    487a:	8d 8f       	std	Y+29, r24	; 0x1d
    487c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    487e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4880:	98 17       	cp	r25, r24
    4882:	70 f3       	brcs	.-36     	; 0x4860 <main+0x18e>
		EEPROM_voidWrite(EEPROM_START_ADDRESS+i,u8key[i]);
	}
	// Print House Number
	LCD_voidSendCommand_4bitMode(lcd_Clear);
    4884:	81 e0       	ldi	r24, 0x01	; 1
    4886:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendCommand_4bitMode>
	LCD_voidGotoxy_4bitMode(6,LineOne);
    488a:	86 e0       	ldi	r24, 0x06	; 6
    488c:	61 e0       	ldi	r22, 0x01	; 1
    488e:	0e 94 81 18 	call	0x3102	; 0x3102 <LCD_voidGotoxy_4bitMode>
	LCD_voidWriteString_4bitMode("22B1", 4);
    4892:	8e e6       	ldi	r24, 0x6E	; 110
    4894:	90 e0       	ldi	r25, 0x00	; 0
    4896:	64 e0       	ldi	r22, 0x04	; 4
    4898:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <LCD_voidWriteString_4bitMode>
	LCD_voidGotoxy_4bitMode(5,LineTwo);
    489c:	85 e0       	ldi	r24, 0x05	; 5
    489e:	62 e0       	ldi	r22, 0x02	; 2
    48a0:	0e 94 81 18 	call	0x3102	; 0x3102 <LCD_voidGotoxy_4bitMode>
	LCD_voidWriteString_4bitMode("------", 6);
    48a4:	83 e7       	ldi	r24, 0x73	; 115
    48a6:	90 e0       	ldi	r25, 0x00	; 0
    48a8:	66 e0       	ldi	r22, 0x06	; 6
    48aa:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <LCD_voidWriteString_4bitMode>
    48ae:	80 e0       	ldi	r24, 0x00	; 0
    48b0:	90 e0       	ldi	r25, 0x00	; 0
    48b2:	a8 ec       	ldi	r26, 0xC8	; 200
    48b4:	b2 e4       	ldi	r27, 0x42	; 66
    48b6:	8b 87       	std	Y+11, r24	; 0x0b
    48b8:	9c 87       	std	Y+12, r25	; 0x0c
    48ba:	ad 87       	std	Y+13, r26	; 0x0d
    48bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48be:	6b 85       	ldd	r22, Y+11	; 0x0b
    48c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    48c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    48c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    48c6:	20 e0       	ldi	r18, 0x00	; 0
    48c8:	30 e0       	ldi	r19, 0x00	; 0
    48ca:	4a ef       	ldi	r20, 0xFA	; 250
    48cc:	54 e4       	ldi	r21, 0x44	; 68
    48ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48d2:	dc 01       	movw	r26, r24
    48d4:	cb 01       	movw	r24, r22
    48d6:	8f 83       	std	Y+7, r24	; 0x07
    48d8:	98 87       	std	Y+8, r25	; 0x08
    48da:	a9 87       	std	Y+9, r26	; 0x09
    48dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    48de:	6f 81       	ldd	r22, Y+7	; 0x07
    48e0:	78 85       	ldd	r23, Y+8	; 0x08
    48e2:	89 85       	ldd	r24, Y+9	; 0x09
    48e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    48e6:	20 e0       	ldi	r18, 0x00	; 0
    48e8:	30 e0       	ldi	r19, 0x00	; 0
    48ea:	40 e8       	ldi	r20, 0x80	; 128
    48ec:	5f e3       	ldi	r21, 0x3F	; 63
    48ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    48f2:	88 23       	and	r24, r24
    48f4:	2c f4       	brge	.+10     	; 0x4900 <main+0x22e>
		__ticks = 1;
    48f6:	81 e0       	ldi	r24, 0x01	; 1
    48f8:	90 e0       	ldi	r25, 0x00	; 0
    48fa:	9e 83       	std	Y+6, r25	; 0x06
    48fc:	8d 83       	std	Y+5, r24	; 0x05
    48fe:	3f c0       	rjmp	.+126    	; 0x497e <main+0x2ac>
	else if (__tmp > 65535)
    4900:	6f 81       	ldd	r22, Y+7	; 0x07
    4902:	78 85       	ldd	r23, Y+8	; 0x08
    4904:	89 85       	ldd	r24, Y+9	; 0x09
    4906:	9a 85       	ldd	r25, Y+10	; 0x0a
    4908:	20 e0       	ldi	r18, 0x00	; 0
    490a:	3f ef       	ldi	r19, 0xFF	; 255
    490c:	4f e7       	ldi	r20, 0x7F	; 127
    490e:	57 e4       	ldi	r21, 0x47	; 71
    4910:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4914:	18 16       	cp	r1, r24
    4916:	4c f5       	brge	.+82     	; 0x496a <main+0x298>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4918:	6b 85       	ldd	r22, Y+11	; 0x0b
    491a:	7c 85       	ldd	r23, Y+12	; 0x0c
    491c:	8d 85       	ldd	r24, Y+13	; 0x0d
    491e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4920:	20 e0       	ldi	r18, 0x00	; 0
    4922:	30 e0       	ldi	r19, 0x00	; 0
    4924:	40 e2       	ldi	r20, 0x20	; 32
    4926:	51 e4       	ldi	r21, 0x41	; 65
    4928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    492c:	dc 01       	movw	r26, r24
    492e:	cb 01       	movw	r24, r22
    4930:	bc 01       	movw	r22, r24
    4932:	cd 01       	movw	r24, r26
    4934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4938:	dc 01       	movw	r26, r24
    493a:	cb 01       	movw	r24, r22
    493c:	9e 83       	std	Y+6, r25	; 0x06
    493e:	8d 83       	std	Y+5, r24	; 0x05
    4940:	0f c0       	rjmp	.+30     	; 0x4960 <main+0x28e>
    4942:	88 ec       	ldi	r24, 0xC8	; 200
    4944:	90 e0       	ldi	r25, 0x00	; 0
    4946:	9c 83       	std	Y+4, r25	; 0x04
    4948:	8b 83       	std	Y+3, r24	; 0x03
    494a:	8b 81       	ldd	r24, Y+3	; 0x03
    494c:	9c 81       	ldd	r25, Y+4	; 0x04
    494e:	01 97       	sbiw	r24, 0x01	; 1
    4950:	f1 f7       	brne	.-4      	; 0x494e <main+0x27c>
    4952:	9c 83       	std	Y+4, r25	; 0x04
    4954:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4956:	8d 81       	ldd	r24, Y+5	; 0x05
    4958:	9e 81       	ldd	r25, Y+6	; 0x06
    495a:	01 97       	sbiw	r24, 0x01	; 1
    495c:	9e 83       	std	Y+6, r25	; 0x06
    495e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4960:	8d 81       	ldd	r24, Y+5	; 0x05
    4962:	9e 81       	ldd	r25, Y+6	; 0x06
    4964:	00 97       	sbiw	r24, 0x00	; 0
    4966:	69 f7       	brne	.-38     	; 0x4942 <main+0x270>
    4968:	14 c0       	rjmp	.+40     	; 0x4992 <main+0x2c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    496a:	6f 81       	ldd	r22, Y+7	; 0x07
    496c:	78 85       	ldd	r23, Y+8	; 0x08
    496e:	89 85       	ldd	r24, Y+9	; 0x09
    4970:	9a 85       	ldd	r25, Y+10	; 0x0a
    4972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4976:	dc 01       	movw	r26, r24
    4978:	cb 01       	movw	r24, r22
    497a:	9e 83       	std	Y+6, r25	; 0x06
    497c:	8d 83       	std	Y+5, r24	; 0x05
    497e:	8d 81       	ldd	r24, Y+5	; 0x05
    4980:	9e 81       	ldd	r25, Y+6	; 0x06
    4982:	9a 83       	std	Y+2, r25	; 0x02
    4984:	89 83       	std	Y+1, r24	; 0x01
    4986:	89 81       	ldd	r24, Y+1	; 0x01
    4988:	9a 81       	ldd	r25, Y+2	; 0x02
    498a:	01 97       	sbiw	r24, 0x01	; 1
    498c:	f1 f7       	brne	.-4      	; 0x498a <main+0x2b8>
    498e:	9a 83       	std	Y+2, r25	; 0x02
    4990:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

	//Fire an interrupt if the renter pressed the arrival button
	EXT_INTERRUPT_VID_ENABLE(EXT2);
    4992:	82 e0       	ldi	r24, 0x02	; 2
    4994:	0e 94 4d 1b 	call	0x369a	; 0x369a <EXT_INTERRUPT_VID_ENABLE>
	EXT2_VID_SET_CALL_BACK(ArrivalButton);
    4998:	86 e4       	ldi	r24, 0x46	; 70
    499a:	95 e2       	ldi	r25, 0x25	; 37
    499c:	0e 94 df 1b 	call	0x37be	; 0x37be <EXT2_VID_SET_CALL_BACK>

	//fire an interrupt if the renter pressed the entrance button
	EXT_INTERRUPT_VID_ENABLE(EXT1);
    49a0:	81 e0       	ldi	r24, 0x01	; 1
    49a2:	0e 94 4d 1b 	call	0x369a	; 0x369a <EXT_INTERRUPT_VID_ENABLE>
	EXT1_VID_SET_CALL_BACK(EntranceButton);
    49a6:	87 e1       	ldi	r24, 0x17	; 23
    49a8:	9b e2       	ldi	r25, 0x2B	; 43
    49aa:	0e 94 cd 1b 	call	0x379a	; 0x379a <EXT1_VID_SET_CALL_BACK>

	Global_Interrupt_Enable();
    49ae:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <Global_Interrupt_Enable>

	while(1){
		if(u8WelcomeInFlag){
    49b2:	80 91 0c 01 	lds	r24, 0x010C
    49b6:	88 23       	and	r24, r24
    49b8:	e1 f3       	breq	.-8      	; 0x49b2 <main+0x2e0>
			//VENTILATION SYSTEM
			//--------------------
			//	ADC_Start_ASYNC(Channel_A1);
			u16TempAnalogSignal = ((uint32)(ADC_Read_SYNCH(Channel_A1))*(REFERNCE_VOLTAGE))/(ADC_RESOLUTION);
    49ba:	81 e0       	ldi	r24, 0x01	; 1
    49bc:	0e 94 c6 22 	call	0x458c	; 0x458c <ADC_Read_SYNCH>
    49c0:	cc 01       	movw	r24, r24
    49c2:	a0 e0       	ldi	r26, 0x00	; 0
    49c4:	b0 e0       	ldi	r27, 0x00	; 0
    49c6:	28 e8       	ldi	r18, 0x88	; 136
    49c8:	33 e1       	ldi	r19, 0x13	; 19
    49ca:	40 e0       	ldi	r20, 0x00	; 0
    49cc:	50 e0       	ldi	r21, 0x00	; 0
    49ce:	bc 01       	movw	r22, r24
    49d0:	cd 01       	movw	r24, r26
    49d2:	0e 94 bb 2b 	call	0x5776	; 0x5776 <__mulsi3>
    49d6:	dc 01       	movw	r26, r24
    49d8:	cb 01       	movw	r24, r22
    49da:	07 2e       	mov	r0, r23
    49dc:	7a e0       	ldi	r23, 0x0A	; 10
    49de:	b6 95       	lsr	r27
    49e0:	a7 95       	ror	r26
    49e2:	97 95       	ror	r25
    49e4:	87 95       	ror	r24
    49e6:	7a 95       	dec	r23
    49e8:	d1 f7       	brne	.-12     	; 0x49de <main+0x30c>
    49ea:	70 2d       	mov	r23, r0
    49ec:	9a a3       	std	Y+34, r25	; 0x22
    49ee:	89 a3       	std	Y+33, r24	; 0x21
			u16Temperature = u16TempAnalogSignal / LM1300_CONVERSION;
    49f0:	89 a1       	ldd	r24, Y+33	; 0x21
    49f2:	9a a1       	ldd	r25, Y+34	; 0x22
    49f4:	2a e0       	ldi	r18, 0x0A	; 10
    49f6:	30 e0       	ldi	r19, 0x00	; 0
    49f8:	b9 01       	movw	r22, r18
    49fa:	0e 94 da 2b 	call	0x57b4	; 0x57b4 <__udivmodhi4>
    49fe:	cb 01       	movw	r24, r22
    4a00:	9c a3       	std	Y+36, r25	; 0x24
    4a02:	8b a3       	std	Y+35, r24	; 0x23

			// Turn On the Fan in case the potentiometer (Temperature) > 25c
			if(u16Temperature>= 250){
    4a04:	8b a1       	ldd	r24, Y+35	; 0x23
    4a06:	9c a1       	ldd	r25, Y+36	; 0x24
    4a08:	8a 3f       	cpi	r24, 0xFA	; 250
    4a0a:	91 05       	cpc	r25, r1
    4a0c:	18 f0       	brcs	.+6      	; 0x4a14 <main+0x342>
				DCM_voidRotateCCW();		//DC motor using PWM ON (fan)
    4a0e:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <DCM_voidRotateCCW>
    4a12:	02 c0       	rjmp	.+4      	; 0x4a18 <main+0x346>
			}
			else{
				DCM_voidStop();				//shut the fan off in case of working
    4a14:	0e 94 7d 22 	call	0x44fa	; 0x44fa <DCM_voidStop>
			}

			//LIGHTNING SYSTEM
			//--------------------
			u16LightAnalogSignal = ((uint32)(ADC_Read_SYNCH(Channel_A0))*(REFERNCE_VOLTAGE))/(ADC_RESOLUTION);
    4a18:	80 e0       	ldi	r24, 0x00	; 0
    4a1a:	0e 94 c6 22 	call	0x458c	; 0x458c <ADC_Read_SYNCH>
    4a1e:	cc 01       	movw	r24, r24
    4a20:	a0 e0       	ldi	r26, 0x00	; 0
    4a22:	b0 e0       	ldi	r27, 0x00	; 0
    4a24:	28 e8       	ldi	r18, 0x88	; 136
    4a26:	33 e1       	ldi	r19, 0x13	; 19
    4a28:	40 e0       	ldi	r20, 0x00	; 0
    4a2a:	50 e0       	ldi	r21, 0x00	; 0
    4a2c:	bc 01       	movw	r22, r24
    4a2e:	cd 01       	movw	r24, r26
    4a30:	0e 94 bb 2b 	call	0x5776	; 0x5776 <__mulsi3>
    4a34:	dc 01       	movw	r26, r24
    4a36:	cb 01       	movw	r24, r22
    4a38:	07 2e       	mov	r0, r23
    4a3a:	7a e0       	ldi	r23, 0x0A	; 10
    4a3c:	b6 95       	lsr	r27
    4a3e:	a7 95       	ror	r26
    4a40:	97 95       	ror	r25
    4a42:	87 95       	ror	r24
    4a44:	7a 95       	dec	r23
    4a46:	d1 f7       	brne	.-12     	; 0x4a3c <main+0x36a>
    4a48:	70 2d       	mov	r23, r0
    4a4a:	98 a3       	std	Y+32, r25	; 0x20
    4a4c:	8f 8f       	std	Y+31, r24	; 0x1f
			u16LightAnalogSignal = ((uint32)(u16LightAnalogSignal) * (255)) / (REFERNCE_VOLTAGE);
    4a4e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4a50:	98 a1       	ldd	r25, Y+32	; 0x20
    4a52:	cc 01       	movw	r24, r24
    4a54:	a0 e0       	ldi	r26, 0x00	; 0
    4a56:	b0 e0       	ldi	r27, 0x00	; 0
    4a58:	2f ef       	ldi	r18, 0xFF	; 255
    4a5a:	30 e0       	ldi	r19, 0x00	; 0
    4a5c:	40 e0       	ldi	r20, 0x00	; 0
    4a5e:	50 e0       	ldi	r21, 0x00	; 0
    4a60:	bc 01       	movw	r22, r24
    4a62:	cd 01       	movw	r24, r26
    4a64:	0e 94 bb 2b 	call	0x5776	; 0x5776 <__mulsi3>
    4a68:	dc 01       	movw	r26, r24
    4a6a:	cb 01       	movw	r24, r22
    4a6c:	28 e8       	ldi	r18, 0x88	; 136
    4a6e:	33 e1       	ldi	r19, 0x13	; 19
    4a70:	40 e0       	ldi	r20, 0x00	; 0
    4a72:	50 e0       	ldi	r21, 0x00	; 0
    4a74:	bc 01       	movw	r22, r24
    4a76:	cd 01       	movw	r24, r26
    4a78:	0e 94 ee 2b 	call	0x57dc	; 0x57dc <__udivmodsi4>
    4a7c:	da 01       	movw	r26, r20
    4a7e:	c9 01       	movw	r24, r18
    4a80:	98 a3       	std	Y+32, r25	; 0x20
    4a82:	8f 8f       	std	Y+31, r24	; 0x1f
			TIMER0_voidSetOCRValue(u16LightAnalogSignal);
    4a84:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4a86:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <TIMER0_voidSetOCRValue>
    4a8a:	93 cf       	rjmp	.-218    	; 0x49b2 <main+0x2e0>

00004a8c <ArrivalButton>:
		else{
			//do nth
		}
	}
}
void ArrivalButton(){
    4a8c:	0f 93       	push	r16
    4a8e:	1f 93       	push	r17
    4a90:	df 93       	push	r29
    4a92:	cf 93       	push	r28
    4a94:	cd b7       	in	r28, 0x3d	; 61
    4a96:	de b7       	in	r29, 0x3e	; 62
    4a98:	c5 57       	subi	r28, 0x75	; 117
    4a9a:	d0 40       	sbci	r29, 0x00	; 0
    4a9c:	0f b6       	in	r0, 0x3f	; 63
    4a9e:	f8 94       	cli
    4aa0:	de bf       	out	0x3e, r29	; 62
    4aa2:	0f be       	out	0x3f, r0	; 63
    4aa4:	cd bf       	out	0x3d, r28	; 61
    4aa6:	fe 01       	movw	r30, r28
    4aa8:	e3 59       	subi	r30, 0x93	; 147
    4aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    4aac:	80 e0       	ldi	r24, 0x00	; 0
    4aae:	90 e0       	ldi	r25, 0x00	; 0
    4ab0:	aa e7       	ldi	r26, 0x7A	; 122
    4ab2:	b4 e4       	ldi	r27, 0x44	; 68
    4ab4:	80 83       	st	Z, r24
    4ab6:	91 83       	std	Z+1, r25	; 0x01
    4ab8:	a2 83       	std	Z+2, r26	; 0x02
    4aba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4abc:	8e 01       	movw	r16, r28
    4abe:	07 59       	subi	r16, 0x97	; 151
    4ac0:	1f 4f       	sbci	r17, 0xFF	; 255
    4ac2:	fe 01       	movw	r30, r28
    4ac4:	e3 59       	subi	r30, 0x93	; 147
    4ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac8:	60 81       	ld	r22, Z
    4aca:	71 81       	ldd	r23, Z+1	; 0x01
    4acc:	82 81       	ldd	r24, Z+2	; 0x02
    4ace:	93 81       	ldd	r25, Z+3	; 0x03
    4ad0:	20 e0       	ldi	r18, 0x00	; 0
    4ad2:	30 e0       	ldi	r19, 0x00	; 0
    4ad4:	4a ef       	ldi	r20, 0xFA	; 250
    4ad6:	54 e4       	ldi	r21, 0x44	; 68
    4ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4adc:	dc 01       	movw	r26, r24
    4ade:	cb 01       	movw	r24, r22
    4ae0:	f8 01       	movw	r30, r16
    4ae2:	80 83       	st	Z, r24
    4ae4:	91 83       	std	Z+1, r25	; 0x01
    4ae6:	a2 83       	std	Z+2, r26	; 0x02
    4ae8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4aea:	fe 01       	movw	r30, r28
    4aec:	e7 59       	subi	r30, 0x97	; 151
    4aee:	ff 4f       	sbci	r31, 0xFF	; 255
    4af0:	60 81       	ld	r22, Z
    4af2:	71 81       	ldd	r23, Z+1	; 0x01
    4af4:	82 81       	ldd	r24, Z+2	; 0x02
    4af6:	93 81       	ldd	r25, Z+3	; 0x03
    4af8:	20 e0       	ldi	r18, 0x00	; 0
    4afa:	30 e0       	ldi	r19, 0x00	; 0
    4afc:	40 e8       	ldi	r20, 0x80	; 128
    4afe:	5f e3       	ldi	r21, 0x3F	; 63
    4b00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b04:	88 23       	and	r24, r24
    4b06:	44 f4       	brge	.+16     	; 0x4b18 <ArrivalButton+0x8c>
		__ticks = 1;
    4b08:	fe 01       	movw	r30, r28
    4b0a:	e9 59       	subi	r30, 0x99	; 153
    4b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b0e:	81 e0       	ldi	r24, 0x01	; 1
    4b10:	90 e0       	ldi	r25, 0x00	; 0
    4b12:	91 83       	std	Z+1, r25	; 0x01
    4b14:	80 83       	st	Z, r24
    4b16:	64 c0       	rjmp	.+200    	; 0x4be0 <ArrivalButton+0x154>
	else if (__tmp > 65535)
    4b18:	fe 01       	movw	r30, r28
    4b1a:	e7 59       	subi	r30, 0x97	; 151
    4b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b1e:	60 81       	ld	r22, Z
    4b20:	71 81       	ldd	r23, Z+1	; 0x01
    4b22:	82 81       	ldd	r24, Z+2	; 0x02
    4b24:	93 81       	ldd	r25, Z+3	; 0x03
    4b26:	20 e0       	ldi	r18, 0x00	; 0
    4b28:	3f ef       	ldi	r19, 0xFF	; 255
    4b2a:	4f e7       	ldi	r20, 0x7F	; 127
    4b2c:	57 e4       	ldi	r21, 0x47	; 71
    4b2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b32:	18 16       	cp	r1, r24
    4b34:	0c f0       	brlt	.+2      	; 0x4b38 <ArrivalButton+0xac>
    4b36:	43 c0       	rjmp	.+134    	; 0x4bbe <ArrivalButton+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b38:	fe 01       	movw	r30, r28
    4b3a:	e3 59       	subi	r30, 0x93	; 147
    4b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b3e:	60 81       	ld	r22, Z
    4b40:	71 81       	ldd	r23, Z+1	; 0x01
    4b42:	82 81       	ldd	r24, Z+2	; 0x02
    4b44:	93 81       	ldd	r25, Z+3	; 0x03
    4b46:	20 e0       	ldi	r18, 0x00	; 0
    4b48:	30 e0       	ldi	r19, 0x00	; 0
    4b4a:	40 e2       	ldi	r20, 0x20	; 32
    4b4c:	51 e4       	ldi	r21, 0x41	; 65
    4b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b52:	dc 01       	movw	r26, r24
    4b54:	cb 01       	movw	r24, r22
    4b56:	8e 01       	movw	r16, r28
    4b58:	09 59       	subi	r16, 0x99	; 153
    4b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    4b5c:	bc 01       	movw	r22, r24
    4b5e:	cd 01       	movw	r24, r26
    4b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b64:	dc 01       	movw	r26, r24
    4b66:	cb 01       	movw	r24, r22
    4b68:	f8 01       	movw	r30, r16
    4b6a:	91 83       	std	Z+1, r25	; 0x01
    4b6c:	80 83       	st	Z, r24
    4b6e:	1f c0       	rjmp	.+62     	; 0x4bae <ArrivalButton+0x122>
    4b70:	fe 01       	movw	r30, r28
    4b72:	eb 59       	subi	r30, 0x9B	; 155
    4b74:	ff 4f       	sbci	r31, 0xFF	; 255
    4b76:	88 ec       	ldi	r24, 0xC8	; 200
    4b78:	90 e0       	ldi	r25, 0x00	; 0
    4b7a:	91 83       	std	Z+1, r25	; 0x01
    4b7c:	80 83       	st	Z, r24
    4b7e:	fe 01       	movw	r30, r28
    4b80:	eb 59       	subi	r30, 0x9B	; 155
    4b82:	ff 4f       	sbci	r31, 0xFF	; 255
    4b84:	80 81       	ld	r24, Z
    4b86:	91 81       	ldd	r25, Z+1	; 0x01
    4b88:	01 97       	sbiw	r24, 0x01	; 1
    4b8a:	f1 f7       	brne	.-4      	; 0x4b88 <ArrivalButton+0xfc>
    4b8c:	fe 01       	movw	r30, r28
    4b8e:	eb 59       	subi	r30, 0x9B	; 155
    4b90:	ff 4f       	sbci	r31, 0xFF	; 255
    4b92:	91 83       	std	Z+1, r25	; 0x01
    4b94:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b96:	de 01       	movw	r26, r28
    4b98:	a9 59       	subi	r26, 0x99	; 153
    4b9a:	bf 4f       	sbci	r27, 0xFF	; 255
    4b9c:	fe 01       	movw	r30, r28
    4b9e:	e9 59       	subi	r30, 0x99	; 153
    4ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba2:	80 81       	ld	r24, Z
    4ba4:	91 81       	ldd	r25, Z+1	; 0x01
    4ba6:	01 97       	sbiw	r24, 0x01	; 1
    4ba8:	11 96       	adiw	r26, 0x01	; 1
    4baa:	9c 93       	st	X, r25
    4bac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bae:	fe 01       	movw	r30, r28
    4bb0:	e9 59       	subi	r30, 0x99	; 153
    4bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb4:	80 81       	ld	r24, Z
    4bb6:	91 81       	ldd	r25, Z+1	; 0x01
    4bb8:	00 97       	sbiw	r24, 0x00	; 0
    4bba:	d1 f6       	brne	.-76     	; 0x4b70 <ArrivalButton+0xe4>
    4bbc:	27 c0       	rjmp	.+78     	; 0x4c0c <ArrivalButton+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bbe:	8e 01       	movw	r16, r28
    4bc0:	09 59       	subi	r16, 0x99	; 153
    4bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    4bc4:	fe 01       	movw	r30, r28
    4bc6:	e7 59       	subi	r30, 0x97	; 151
    4bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    4bca:	60 81       	ld	r22, Z
    4bcc:	71 81       	ldd	r23, Z+1	; 0x01
    4bce:	82 81       	ldd	r24, Z+2	; 0x02
    4bd0:	93 81       	ldd	r25, Z+3	; 0x03
    4bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bd6:	dc 01       	movw	r26, r24
    4bd8:	cb 01       	movw	r24, r22
    4bda:	f8 01       	movw	r30, r16
    4bdc:	91 83       	std	Z+1, r25	; 0x01
    4bde:	80 83       	st	Z, r24
    4be0:	de 01       	movw	r26, r28
    4be2:	ad 59       	subi	r26, 0x9D	; 157
    4be4:	bf 4f       	sbci	r27, 0xFF	; 255
    4be6:	fe 01       	movw	r30, r28
    4be8:	e9 59       	subi	r30, 0x99	; 153
    4bea:	ff 4f       	sbci	r31, 0xFF	; 255
    4bec:	80 81       	ld	r24, Z
    4bee:	91 81       	ldd	r25, Z+1	; 0x01
    4bf0:	8d 93       	st	X+, r24
    4bf2:	9c 93       	st	X, r25
    4bf4:	fe 01       	movw	r30, r28
    4bf6:	ed 59       	subi	r30, 0x9D	; 157
    4bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    4bfa:	80 81       	ld	r24, Z
    4bfc:	91 81       	ldd	r25, Z+1	; 0x01
    4bfe:	01 97       	sbiw	r24, 0x01	; 1
    4c00:	f1 f7       	brne	.-4      	; 0x4bfe <ArrivalButton+0x172>
    4c02:	fe 01       	movw	r30, r28
    4c04:	ed 59       	subi	r30, 0x9D	; 157
    4c06:	ff 4f       	sbci	r31, 0xFF	; 255
    4c08:	91 83       	std	Z+1, r25	; 0x01
    4c0a:	80 83       	st	Z, r24
	_delay_ms(1000);
	uint8 u8ErrorDetected=0;
    4c0c:	fe 01       	movw	r30, r28
    4c0e:	ec 58       	subi	r30, 0x8C	; 140
    4c10:	ff 4f       	sbci	r31, 0xFF	; 255
    4c12:	10 82       	st	Z, r1
	uint8 u8PasswordSize = sizeof(u8InputPassword)/sizeof(u8InputPassword[0]);
    4c14:	fe 01       	movw	r30, r28
    4c16:	ed 58       	subi	r30, 0x8D	; 141
    4c18:	ff 4f       	sbci	r31, 0xFF	; 255
    4c1a:	85 e0       	ldi	r24, 0x05	; 5
    4c1c:	80 83       	st	Z, r24

	//Enable timer0 to save power
	TIM1_voidInit();
    4c1e:	0e 94 0f 07 	call	0xe1e	; 0xe1e <TIM1_voidInit>
	TIM1_voidSetIcuRegValue(20000);
    4c22:	80 e2       	ldi	r24, 0x20	; 32
    4c24:	9e e4       	ldi	r25, 0x4E	; 78
    4c26:	0e 94 cb 08 	call	0x1196	; 0x1196 <TIM1_voidSetIcuRegValue>
	TIM1_voidEnable(TIMER1_PRESCALER_8);
    4c2a:	82 e0       	ldi	r24, 0x02	; 2
    4c2c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <TIM1_voidEnable>

	//welcome message then ask renter to enter password
	LCD_voidSendCommand_4bitMode(lcd_Clear);
    4c30:	81 e0       	ldi	r24, 0x01	; 1
    4c32:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendCommand_4bitMode>
	LCD_voidGotoxy_4bitMode(5, LineOne);
    4c36:	85 e0       	ldi	r24, 0x05	; 5
    4c38:	61 e0       	ldi	r22, 0x01	; 1
    4c3a:	0e 94 81 18 	call	0x3102	; 0x3102 <LCD_voidGotoxy_4bitMode>
	LCD_voidWriteString_4bitMode("WELCOME", 7);
    4c3e:	8a e7       	ldi	r24, 0x7A	; 122
    4c40:	90 e0       	ldi	r25, 0x00	; 0
    4c42:	67 e0       	ldi	r22, 0x07	; 7
    4c44:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <LCD_voidWriteString_4bitMode>
    4c48:	fe 01       	movw	r30, r28
    4c4a:	e1 5a       	subi	r30, 0xA1	; 161
    4c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c4e:	80 e0       	ldi	r24, 0x00	; 0
    4c50:	90 e8       	ldi	r25, 0x80	; 128
    4c52:	ab eb       	ldi	r26, 0xBB	; 187
    4c54:	b4 e4       	ldi	r27, 0x44	; 68
    4c56:	80 83       	st	Z, r24
    4c58:	91 83       	std	Z+1, r25	; 0x01
    4c5a:	a2 83       	std	Z+2, r26	; 0x02
    4c5c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c5e:	8e 01       	movw	r16, r28
    4c60:	05 5a       	subi	r16, 0xA5	; 165
    4c62:	1f 4f       	sbci	r17, 0xFF	; 255
    4c64:	fe 01       	movw	r30, r28
    4c66:	e1 5a       	subi	r30, 0xA1	; 161
    4c68:	ff 4f       	sbci	r31, 0xFF	; 255
    4c6a:	60 81       	ld	r22, Z
    4c6c:	71 81       	ldd	r23, Z+1	; 0x01
    4c6e:	82 81       	ldd	r24, Z+2	; 0x02
    4c70:	93 81       	ldd	r25, Z+3	; 0x03
    4c72:	20 e0       	ldi	r18, 0x00	; 0
    4c74:	30 e0       	ldi	r19, 0x00	; 0
    4c76:	4a ef       	ldi	r20, 0xFA	; 250
    4c78:	54 e4       	ldi	r21, 0x44	; 68
    4c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c7e:	dc 01       	movw	r26, r24
    4c80:	cb 01       	movw	r24, r22
    4c82:	f8 01       	movw	r30, r16
    4c84:	80 83       	st	Z, r24
    4c86:	91 83       	std	Z+1, r25	; 0x01
    4c88:	a2 83       	std	Z+2, r26	; 0x02
    4c8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c8c:	fe 01       	movw	r30, r28
    4c8e:	e5 5a       	subi	r30, 0xA5	; 165
    4c90:	ff 4f       	sbci	r31, 0xFF	; 255
    4c92:	60 81       	ld	r22, Z
    4c94:	71 81       	ldd	r23, Z+1	; 0x01
    4c96:	82 81       	ldd	r24, Z+2	; 0x02
    4c98:	93 81       	ldd	r25, Z+3	; 0x03
    4c9a:	20 e0       	ldi	r18, 0x00	; 0
    4c9c:	30 e0       	ldi	r19, 0x00	; 0
    4c9e:	40 e8       	ldi	r20, 0x80	; 128
    4ca0:	5f e3       	ldi	r21, 0x3F	; 63
    4ca2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4ca6:	88 23       	and	r24, r24
    4ca8:	44 f4       	brge	.+16     	; 0x4cba <ArrivalButton+0x22e>
		__ticks = 1;
    4caa:	fe 01       	movw	r30, r28
    4cac:	e7 5a       	subi	r30, 0xA7	; 167
    4cae:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb0:	81 e0       	ldi	r24, 0x01	; 1
    4cb2:	90 e0       	ldi	r25, 0x00	; 0
    4cb4:	91 83       	std	Z+1, r25	; 0x01
    4cb6:	80 83       	st	Z, r24
    4cb8:	64 c0       	rjmp	.+200    	; 0x4d82 <ArrivalButton+0x2f6>
	else if (__tmp > 65535)
    4cba:	fe 01       	movw	r30, r28
    4cbc:	e5 5a       	subi	r30, 0xA5	; 165
    4cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc0:	60 81       	ld	r22, Z
    4cc2:	71 81       	ldd	r23, Z+1	; 0x01
    4cc4:	82 81       	ldd	r24, Z+2	; 0x02
    4cc6:	93 81       	ldd	r25, Z+3	; 0x03
    4cc8:	20 e0       	ldi	r18, 0x00	; 0
    4cca:	3f ef       	ldi	r19, 0xFF	; 255
    4ccc:	4f e7       	ldi	r20, 0x7F	; 127
    4cce:	57 e4       	ldi	r21, 0x47	; 71
    4cd0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4cd4:	18 16       	cp	r1, r24
    4cd6:	0c f0       	brlt	.+2      	; 0x4cda <ArrivalButton+0x24e>
    4cd8:	43 c0       	rjmp	.+134    	; 0x4d60 <ArrivalButton+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cda:	fe 01       	movw	r30, r28
    4cdc:	e1 5a       	subi	r30, 0xA1	; 161
    4cde:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce0:	60 81       	ld	r22, Z
    4ce2:	71 81       	ldd	r23, Z+1	; 0x01
    4ce4:	82 81       	ldd	r24, Z+2	; 0x02
    4ce6:	93 81       	ldd	r25, Z+3	; 0x03
    4ce8:	20 e0       	ldi	r18, 0x00	; 0
    4cea:	30 e0       	ldi	r19, 0x00	; 0
    4cec:	40 e2       	ldi	r20, 0x20	; 32
    4cee:	51 e4       	ldi	r21, 0x41	; 65
    4cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cf4:	dc 01       	movw	r26, r24
    4cf6:	cb 01       	movw	r24, r22
    4cf8:	8e 01       	movw	r16, r28
    4cfa:	07 5a       	subi	r16, 0xA7	; 167
    4cfc:	1f 4f       	sbci	r17, 0xFF	; 255
    4cfe:	bc 01       	movw	r22, r24
    4d00:	cd 01       	movw	r24, r26
    4d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d06:	dc 01       	movw	r26, r24
    4d08:	cb 01       	movw	r24, r22
    4d0a:	f8 01       	movw	r30, r16
    4d0c:	91 83       	std	Z+1, r25	; 0x01
    4d0e:	80 83       	st	Z, r24
    4d10:	1f c0       	rjmp	.+62     	; 0x4d50 <ArrivalButton+0x2c4>
    4d12:	fe 01       	movw	r30, r28
    4d14:	e9 5a       	subi	r30, 0xA9	; 169
    4d16:	ff 4f       	sbci	r31, 0xFF	; 255
    4d18:	88 ec       	ldi	r24, 0xC8	; 200
    4d1a:	90 e0       	ldi	r25, 0x00	; 0
    4d1c:	91 83       	std	Z+1, r25	; 0x01
    4d1e:	80 83       	st	Z, r24
    4d20:	fe 01       	movw	r30, r28
    4d22:	e9 5a       	subi	r30, 0xA9	; 169
    4d24:	ff 4f       	sbci	r31, 0xFF	; 255
    4d26:	80 81       	ld	r24, Z
    4d28:	91 81       	ldd	r25, Z+1	; 0x01
    4d2a:	01 97       	sbiw	r24, 0x01	; 1
    4d2c:	f1 f7       	brne	.-4      	; 0x4d2a <ArrivalButton+0x29e>
    4d2e:	fe 01       	movw	r30, r28
    4d30:	e9 5a       	subi	r30, 0xA9	; 169
    4d32:	ff 4f       	sbci	r31, 0xFF	; 255
    4d34:	91 83       	std	Z+1, r25	; 0x01
    4d36:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d38:	de 01       	movw	r26, r28
    4d3a:	a7 5a       	subi	r26, 0xA7	; 167
    4d3c:	bf 4f       	sbci	r27, 0xFF	; 255
    4d3e:	fe 01       	movw	r30, r28
    4d40:	e7 5a       	subi	r30, 0xA7	; 167
    4d42:	ff 4f       	sbci	r31, 0xFF	; 255
    4d44:	80 81       	ld	r24, Z
    4d46:	91 81       	ldd	r25, Z+1	; 0x01
    4d48:	01 97       	sbiw	r24, 0x01	; 1
    4d4a:	11 96       	adiw	r26, 0x01	; 1
    4d4c:	9c 93       	st	X, r25
    4d4e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d50:	fe 01       	movw	r30, r28
    4d52:	e7 5a       	subi	r30, 0xA7	; 167
    4d54:	ff 4f       	sbci	r31, 0xFF	; 255
    4d56:	80 81       	ld	r24, Z
    4d58:	91 81       	ldd	r25, Z+1	; 0x01
    4d5a:	00 97       	sbiw	r24, 0x00	; 0
    4d5c:	d1 f6       	brne	.-76     	; 0x4d12 <ArrivalButton+0x286>
    4d5e:	55 c3       	rjmp	.+1706   	; 0x540a <ArrivalButton+0x97e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d60:	8e 01       	movw	r16, r28
    4d62:	07 5a       	subi	r16, 0xA7	; 167
    4d64:	1f 4f       	sbci	r17, 0xFF	; 255
    4d66:	fe 01       	movw	r30, r28
    4d68:	e5 5a       	subi	r30, 0xA5	; 165
    4d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d6c:	60 81       	ld	r22, Z
    4d6e:	71 81       	ldd	r23, Z+1	; 0x01
    4d70:	82 81       	ldd	r24, Z+2	; 0x02
    4d72:	93 81       	ldd	r25, Z+3	; 0x03
    4d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d78:	dc 01       	movw	r26, r24
    4d7a:	cb 01       	movw	r24, r22
    4d7c:	f8 01       	movw	r30, r16
    4d7e:	91 83       	std	Z+1, r25	; 0x01
    4d80:	80 83       	st	Z, r24
    4d82:	de 01       	movw	r26, r28
    4d84:	ab 5a       	subi	r26, 0xAB	; 171
    4d86:	bf 4f       	sbci	r27, 0xFF	; 255
    4d88:	fe 01       	movw	r30, r28
    4d8a:	e7 5a       	subi	r30, 0xA7	; 167
    4d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8e:	80 81       	ld	r24, Z
    4d90:	91 81       	ldd	r25, Z+1	; 0x01
    4d92:	11 96       	adiw	r26, 0x01	; 1
    4d94:	9c 93       	st	X, r25
    4d96:	8e 93       	st	-X, r24
    4d98:	fe 01       	movw	r30, r28
    4d9a:	eb 5a       	subi	r30, 0xAB	; 171
    4d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d9e:	80 81       	ld	r24, Z
    4da0:	91 81       	ldd	r25, Z+1	; 0x01
    4da2:	01 97       	sbiw	r24, 0x01	; 1
    4da4:	f1 f7       	brne	.-4      	; 0x4da2 <ArrivalButton+0x316>
    4da6:	fe 01       	movw	r30, r28
    4da8:	eb 5a       	subi	r30, 0xAB	; 171
    4daa:	ff 4f       	sbci	r31, 0xFF	; 255
    4dac:	91 83       	std	Z+1, r25	; 0x01
    4dae:	80 83       	st	Z, r24
    4db0:	2c c3       	rjmp	.+1624   	; 0x540a <ArrivalButton+0x97e>
	_delay_ms(1500);

	while(u8ErrorDetected <2){
		LCD_voidSendCommand_4bitMode(lcd_Clear);
    4db2:	81 e0       	ldi	r24, 0x01	; 1
    4db4:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendCommand_4bitMode>
		LCD_voidWriteString_4bitMode("Enter Password:", 15);
    4db8:	82 e8       	ldi	r24, 0x82	; 130
    4dba:	90 e0       	ldi	r25, 0x00	; 0
    4dbc:	6f e0       	ldi	r22, 0x0F	; 15
    4dbe:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <LCD_voidWriteString_4bitMode>
		LCD_voidGotoxy_4bitMode(0,LineTwo);
    4dc2:	80 e0       	ldi	r24, 0x00	; 0
    4dc4:	62 e0       	ldi	r22, 0x02	; 2
    4dc6:	0e 94 81 18 	call	0x3102	; 0x3102 <LCD_voidGotoxy_4bitMode>

		// Enter password on keypad
		for(uint8 i=0;i<u8PasswordSize;){
    4dca:	fe 01       	movw	r30, r28
    4dcc:	eb 58       	subi	r30, 0x8B	; 139
    4dce:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd0:	10 82       	st	Z, r1
    4dd2:	cf c0       	rjmp	.+414    	; 0x4f72 <ArrivalButton+0x4e6>
			LCD_voidGotoxy_4bitMode(i, LineTwo);
    4dd4:	fe 01       	movw	r30, r28
    4dd6:	eb 58       	subi	r30, 0x8B	; 139
    4dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dda:	80 81       	ld	r24, Z
    4ddc:	62 e0       	ldi	r22, 0x02	; 2
    4dde:	0e 94 81 18 	call	0x3102	; 0x3102 <LCD_voidGotoxy_4bitMode>
			u8InputPassword[i] = KPD_u8GetKey();
    4de2:	fe 01       	movw	r30, r28
    4de4:	eb 58       	subi	r30, 0x8B	; 139
    4de6:	ff 4f       	sbci	r31, 0xFF	; 255
    4de8:	80 81       	ld	r24, Z
    4dea:	08 2f       	mov	r16, r24
    4dec:	10 e0       	ldi	r17, 0x00	; 0
    4dee:	0e 94 4a 1a 	call	0x3494	; 0x3494 <KPD_u8GetKey>
    4df2:	f8 01       	movw	r30, r16
    4df4:	e9 5f       	subi	r30, 0xF9	; 249
    4df6:	fe 4f       	sbci	r31, 0xFE	; 254
    4df8:	80 83       	st	Z, r24
			LCD_voidDisplayKeys(u8InputPassword, &i);  				//print password on LCD
    4dfa:	87 e0       	ldi	r24, 0x07	; 7
    4dfc:	91 e0       	ldi	r25, 0x01	; 1
    4dfe:	9e 01       	movw	r18, r28
    4e00:	2b 58       	subi	r18, 0x8B	; 139
    4e02:	3f 4f       	sbci	r19, 0xFF	; 255
    4e04:	b9 01       	movw	r22, r18
    4e06:	0e 94 b8 18 	call	0x3170	; 0x3170 <LCD_voidDisplayKeys>
    4e0a:	fe 01       	movw	r30, r28
    4e0c:	ef 5a       	subi	r30, 0xAF	; 175
    4e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e10:	80 e0       	ldi	r24, 0x00	; 0
    4e12:	90 e0       	ldi	r25, 0x00	; 0
    4e14:	a8 e4       	ldi	r26, 0x48	; 72
    4e16:	b3 e4       	ldi	r27, 0x43	; 67
    4e18:	80 83       	st	Z, r24
    4e1a:	91 83       	std	Z+1, r25	; 0x01
    4e1c:	a2 83       	std	Z+2, r26	; 0x02
    4e1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e20:	8e 01       	movw	r16, r28
    4e22:	03 5b       	subi	r16, 0xB3	; 179
    4e24:	1f 4f       	sbci	r17, 0xFF	; 255
    4e26:	fe 01       	movw	r30, r28
    4e28:	ef 5a       	subi	r30, 0xAF	; 175
    4e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e2c:	60 81       	ld	r22, Z
    4e2e:	71 81       	ldd	r23, Z+1	; 0x01
    4e30:	82 81       	ldd	r24, Z+2	; 0x02
    4e32:	93 81       	ldd	r25, Z+3	; 0x03
    4e34:	20 e0       	ldi	r18, 0x00	; 0
    4e36:	30 e0       	ldi	r19, 0x00	; 0
    4e38:	4a ef       	ldi	r20, 0xFA	; 250
    4e3a:	54 e4       	ldi	r21, 0x44	; 68
    4e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e40:	dc 01       	movw	r26, r24
    4e42:	cb 01       	movw	r24, r22
    4e44:	f8 01       	movw	r30, r16
    4e46:	80 83       	st	Z, r24
    4e48:	91 83       	std	Z+1, r25	; 0x01
    4e4a:	a2 83       	std	Z+2, r26	; 0x02
    4e4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e4e:	fe 01       	movw	r30, r28
    4e50:	e3 5b       	subi	r30, 0xB3	; 179
    4e52:	ff 4f       	sbci	r31, 0xFF	; 255
    4e54:	60 81       	ld	r22, Z
    4e56:	71 81       	ldd	r23, Z+1	; 0x01
    4e58:	82 81       	ldd	r24, Z+2	; 0x02
    4e5a:	93 81       	ldd	r25, Z+3	; 0x03
    4e5c:	20 e0       	ldi	r18, 0x00	; 0
    4e5e:	30 e0       	ldi	r19, 0x00	; 0
    4e60:	40 e8       	ldi	r20, 0x80	; 128
    4e62:	5f e3       	ldi	r21, 0x3F	; 63
    4e64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e68:	88 23       	and	r24, r24
    4e6a:	44 f4       	brge	.+16     	; 0x4e7c <ArrivalButton+0x3f0>
		__ticks = 1;
    4e6c:	fe 01       	movw	r30, r28
    4e6e:	e5 5b       	subi	r30, 0xB5	; 181
    4e70:	ff 4f       	sbci	r31, 0xFF	; 255
    4e72:	81 e0       	ldi	r24, 0x01	; 1
    4e74:	90 e0       	ldi	r25, 0x00	; 0
    4e76:	91 83       	std	Z+1, r25	; 0x01
    4e78:	80 83       	st	Z, r24
    4e7a:	64 c0       	rjmp	.+200    	; 0x4f44 <ArrivalButton+0x4b8>
	else if (__tmp > 65535)
    4e7c:	fe 01       	movw	r30, r28
    4e7e:	e3 5b       	subi	r30, 0xB3	; 179
    4e80:	ff 4f       	sbci	r31, 0xFF	; 255
    4e82:	60 81       	ld	r22, Z
    4e84:	71 81       	ldd	r23, Z+1	; 0x01
    4e86:	82 81       	ldd	r24, Z+2	; 0x02
    4e88:	93 81       	ldd	r25, Z+3	; 0x03
    4e8a:	20 e0       	ldi	r18, 0x00	; 0
    4e8c:	3f ef       	ldi	r19, 0xFF	; 255
    4e8e:	4f e7       	ldi	r20, 0x7F	; 127
    4e90:	57 e4       	ldi	r21, 0x47	; 71
    4e92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4e96:	18 16       	cp	r1, r24
    4e98:	0c f0       	brlt	.+2      	; 0x4e9c <ArrivalButton+0x410>
    4e9a:	43 c0       	rjmp	.+134    	; 0x4f22 <ArrivalButton+0x496>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e9c:	fe 01       	movw	r30, r28
    4e9e:	ef 5a       	subi	r30, 0xAF	; 175
    4ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea2:	60 81       	ld	r22, Z
    4ea4:	71 81       	ldd	r23, Z+1	; 0x01
    4ea6:	82 81       	ldd	r24, Z+2	; 0x02
    4ea8:	93 81       	ldd	r25, Z+3	; 0x03
    4eaa:	20 e0       	ldi	r18, 0x00	; 0
    4eac:	30 e0       	ldi	r19, 0x00	; 0
    4eae:	40 e2       	ldi	r20, 0x20	; 32
    4eb0:	51 e4       	ldi	r21, 0x41	; 65
    4eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eb6:	dc 01       	movw	r26, r24
    4eb8:	cb 01       	movw	r24, r22
    4eba:	8e 01       	movw	r16, r28
    4ebc:	05 5b       	subi	r16, 0xB5	; 181
    4ebe:	1f 4f       	sbci	r17, 0xFF	; 255
    4ec0:	bc 01       	movw	r22, r24
    4ec2:	cd 01       	movw	r24, r26
    4ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ec8:	dc 01       	movw	r26, r24
    4eca:	cb 01       	movw	r24, r22
    4ecc:	f8 01       	movw	r30, r16
    4ece:	91 83       	std	Z+1, r25	; 0x01
    4ed0:	80 83       	st	Z, r24
    4ed2:	1f c0       	rjmp	.+62     	; 0x4f12 <ArrivalButton+0x486>
    4ed4:	fe 01       	movw	r30, r28
    4ed6:	e7 5b       	subi	r30, 0xB7	; 183
    4ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eda:	88 ec       	ldi	r24, 0xC8	; 200
    4edc:	90 e0       	ldi	r25, 0x00	; 0
    4ede:	91 83       	std	Z+1, r25	; 0x01
    4ee0:	80 83       	st	Z, r24
    4ee2:	fe 01       	movw	r30, r28
    4ee4:	e7 5b       	subi	r30, 0xB7	; 183
    4ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee8:	80 81       	ld	r24, Z
    4eea:	91 81       	ldd	r25, Z+1	; 0x01
    4eec:	01 97       	sbiw	r24, 0x01	; 1
    4eee:	f1 f7       	brne	.-4      	; 0x4eec <ArrivalButton+0x460>
    4ef0:	fe 01       	movw	r30, r28
    4ef2:	e7 5b       	subi	r30, 0xB7	; 183
    4ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef6:	91 83       	std	Z+1, r25	; 0x01
    4ef8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4efa:	de 01       	movw	r26, r28
    4efc:	a5 5b       	subi	r26, 0xB5	; 181
    4efe:	bf 4f       	sbci	r27, 0xFF	; 255
    4f00:	fe 01       	movw	r30, r28
    4f02:	e5 5b       	subi	r30, 0xB5	; 181
    4f04:	ff 4f       	sbci	r31, 0xFF	; 255
    4f06:	80 81       	ld	r24, Z
    4f08:	91 81       	ldd	r25, Z+1	; 0x01
    4f0a:	01 97       	sbiw	r24, 0x01	; 1
    4f0c:	11 96       	adiw	r26, 0x01	; 1
    4f0e:	9c 93       	st	X, r25
    4f10:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f12:	fe 01       	movw	r30, r28
    4f14:	e5 5b       	subi	r30, 0xB5	; 181
    4f16:	ff 4f       	sbci	r31, 0xFF	; 255
    4f18:	80 81       	ld	r24, Z
    4f1a:	91 81       	ldd	r25, Z+1	; 0x01
    4f1c:	00 97       	sbiw	r24, 0x00	; 0
    4f1e:	d1 f6       	brne	.-76     	; 0x4ed4 <ArrivalButton+0x448>
    4f20:	28 c0       	rjmp	.+80     	; 0x4f72 <ArrivalButton+0x4e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f22:	8e 01       	movw	r16, r28
    4f24:	05 5b       	subi	r16, 0xB5	; 181
    4f26:	1f 4f       	sbci	r17, 0xFF	; 255
    4f28:	fe 01       	movw	r30, r28
    4f2a:	e3 5b       	subi	r30, 0xB3	; 179
    4f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f2e:	60 81       	ld	r22, Z
    4f30:	71 81       	ldd	r23, Z+1	; 0x01
    4f32:	82 81       	ldd	r24, Z+2	; 0x02
    4f34:	93 81       	ldd	r25, Z+3	; 0x03
    4f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f3a:	dc 01       	movw	r26, r24
    4f3c:	cb 01       	movw	r24, r22
    4f3e:	f8 01       	movw	r30, r16
    4f40:	91 83       	std	Z+1, r25	; 0x01
    4f42:	80 83       	st	Z, r24
    4f44:	de 01       	movw	r26, r28
    4f46:	a9 5b       	subi	r26, 0xB9	; 185
    4f48:	bf 4f       	sbci	r27, 0xFF	; 255
    4f4a:	fe 01       	movw	r30, r28
    4f4c:	e5 5b       	subi	r30, 0xB5	; 181
    4f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f50:	80 81       	ld	r24, Z
    4f52:	91 81       	ldd	r25, Z+1	; 0x01
    4f54:	11 96       	adiw	r26, 0x01	; 1
    4f56:	9c 93       	st	X, r25
    4f58:	8e 93       	st	-X, r24
    4f5a:	fe 01       	movw	r30, r28
    4f5c:	e9 5b       	subi	r30, 0xB9	; 185
    4f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f60:	80 81       	ld	r24, Z
    4f62:	91 81       	ldd	r25, Z+1	; 0x01
    4f64:	01 97       	sbiw	r24, 0x01	; 1
    4f66:	f1 f7       	brne	.-4      	; 0x4f64 <ArrivalButton+0x4d8>
    4f68:	fe 01       	movw	r30, r28
    4f6a:	e9 5b       	subi	r30, 0xB9	; 185
    4f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f6e:	91 83       	std	Z+1, r25	; 0x01
    4f70:	80 83       	st	Z, r24
		LCD_voidSendCommand_4bitMode(lcd_Clear);
		LCD_voidWriteString_4bitMode("Enter Password:", 15);
		LCD_voidGotoxy_4bitMode(0,LineTwo);

		// Enter password on keypad
		for(uint8 i=0;i<u8PasswordSize;){
    4f72:	fe 01       	movw	r30, r28
    4f74:	eb 58       	subi	r30, 0x8B	; 139
    4f76:	ff 4f       	sbci	r31, 0xFF	; 255
    4f78:	90 81       	ld	r25, Z
    4f7a:	fe 01       	movw	r30, r28
    4f7c:	ed 58       	subi	r30, 0x8D	; 141
    4f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f80:	80 81       	ld	r24, Z
    4f82:	98 17       	cp	r25, r24
    4f84:	08 f4       	brcc	.+2      	; 0x4f88 <ArrivalButton+0x4fc>
    4f86:	26 cf       	rjmp	.-436    	; 0x4dd4 <ArrivalButton+0x348>
			LCD_voidDisplayKeys(u8InputPassword, &i);  				//print password on LCD
			_delay_ms(200);
		}

		//error detection
		for(uint8 i=0; i<u8PasswordSize; i++){
    4f88:	fe 01       	movw	r30, r28
    4f8a:	ee 58       	subi	r30, 0x8E	; 142
    4f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f8e:	10 82       	st	Z, r1
    4f90:	3b c0       	rjmp	.+118    	; 0x5008 <ArrivalButton+0x57c>
			EEPROM_voidRead(EEPROM_START_ADDRESS+i, &u8EEPROMData[i]);
    4f92:	fe 01       	movw	r30, r28
    4f94:	ee 58       	subi	r30, 0x8E	; 142
    4f96:	ff 4f       	sbci	r31, 0xFF	; 255
    4f98:	80 81       	ld	r24, Z
    4f9a:	88 2f       	mov	r24, r24
    4f9c:	90 e0       	ldi	r25, 0x00	; 0
    4f9e:	9c 01       	movw	r18, r24
    4fa0:	2e 5e       	subi	r18, 0xEE	; 238
    4fa2:	3e 4f       	sbci	r19, 0xFE	; 254
    4fa4:	fe 01       	movw	r30, r28
    4fa6:	ee 58       	subi	r30, 0x8E	; 142
    4fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    4faa:	80 81       	ld	r24, Z
    4fac:	b9 01       	movw	r22, r18
    4fae:	0e 94 94 1c 	call	0x3928	; 0x3928 <EEPROM_voidRead>
			u8Error[i] = PASS_u8ComparePassword(u8EEPROMData[i], u8InputPassword[i]);
    4fb2:	fe 01       	movw	r30, r28
    4fb4:	ee 58       	subi	r30, 0x8E	; 142
    4fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb8:	80 81       	ld	r24, Z
    4fba:	08 2f       	mov	r16, r24
    4fbc:	10 e0       	ldi	r17, 0x00	; 0
    4fbe:	fe 01       	movw	r30, r28
    4fc0:	ee 58       	subi	r30, 0x8E	; 142
    4fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4fc4:	80 81       	ld	r24, Z
    4fc6:	88 2f       	mov	r24, r24
    4fc8:	90 e0       	ldi	r25, 0x00	; 0
    4fca:	fc 01       	movw	r30, r24
    4fcc:	ee 5e       	subi	r30, 0xEE	; 238
    4fce:	fe 4f       	sbci	r31, 0xFE	; 254
    4fd0:	20 81       	ld	r18, Z
    4fd2:	fe 01       	movw	r30, r28
    4fd4:	ee 58       	subi	r30, 0x8E	; 142
    4fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd8:	80 81       	ld	r24, Z
    4fda:	88 2f       	mov	r24, r24
    4fdc:	90 e0       	ldi	r25, 0x00	; 0
    4fde:	fc 01       	movw	r30, r24
    4fe0:	e9 5f       	subi	r30, 0xF9	; 249
    4fe2:	fe 4f       	sbci	r31, 0xFE	; 254
    4fe4:	90 81       	ld	r25, Z
    4fe6:	82 2f       	mov	r24, r18
    4fe8:	69 2f       	mov	r22, r25
    4fea:	0e 94 ad 0b 	call	0x175a	; 0x175a <PASS_u8ComparePassword>
    4fee:	f8 01       	movw	r30, r16
    4ff0:	e3 5f       	subi	r30, 0xF3	; 243
    4ff2:	fe 4f       	sbci	r31, 0xFE	; 254
    4ff4:	80 83       	st	Z, r24
			LCD_voidDisplayKeys(u8InputPassword, &i);  				//print password on LCD
			_delay_ms(200);
		}

		//error detection
		for(uint8 i=0; i<u8PasswordSize; i++){
    4ff6:	de 01       	movw	r26, r28
    4ff8:	ae 58       	subi	r26, 0x8E	; 142
    4ffa:	bf 4f       	sbci	r27, 0xFF	; 255
    4ffc:	fe 01       	movw	r30, r28
    4ffe:	ee 58       	subi	r30, 0x8E	; 142
    5000:	ff 4f       	sbci	r31, 0xFF	; 255
    5002:	80 81       	ld	r24, Z
    5004:	8f 5f       	subi	r24, 0xFF	; 255
    5006:	8c 93       	st	X, r24
    5008:	fe 01       	movw	r30, r28
    500a:	ee 58       	subi	r30, 0x8E	; 142
    500c:	ff 4f       	sbci	r31, 0xFF	; 255
    500e:	de 01       	movw	r26, r28
    5010:	ad 58       	subi	r26, 0x8D	; 141
    5012:	bf 4f       	sbci	r27, 0xFF	; 255
    5014:	90 81       	ld	r25, Z
    5016:	8c 91       	ld	r24, X
    5018:	98 17       	cp	r25, r24
    501a:	08 f4       	brcc	.+2      	; 0x501e <ArrivalButton+0x592>
    501c:	ba cf       	rjmp	.-140    	; 0x4f92 <ArrivalButton+0x506>
		}



		//incorrect passwordu8EEPROMData
		for(uint8 i =0; i<5;i++){
    501e:	fe 01       	movw	r30, r28
    5020:	ef 58       	subi	r30, 0x8F	; 143
    5022:	ff 4f       	sbci	r31, 0xFF	; 255
    5024:	10 82       	st	Z, r1
    5026:	23 c0       	rjmp	.+70     	; 0x506e <ArrivalButton+0x5e2>
			if(u8Error[i]==1){
    5028:	fe 01       	movw	r30, r28
    502a:	ef 58       	subi	r30, 0x8F	; 143
    502c:	ff 4f       	sbci	r31, 0xFF	; 255
    502e:	80 81       	ld	r24, Z
    5030:	88 2f       	mov	r24, r24
    5032:	90 e0       	ldi	r25, 0x00	; 0
    5034:	fc 01       	movw	r30, r24
    5036:	e3 5f       	subi	r30, 0xF3	; 243
    5038:	fe 4f       	sbci	r31, 0xFE	; 254
    503a:	80 81       	ld	r24, Z
    503c:	81 30       	cpi	r24, 0x01	; 1
    503e:	51 f4       	brne	.+20     	; 0x5054 <ArrivalButton+0x5c8>
				u8ErrorDetected++;
    5040:	de 01       	movw	r26, r28
    5042:	ac 58       	subi	r26, 0x8C	; 140
    5044:	bf 4f       	sbci	r27, 0xFF	; 255
    5046:	fe 01       	movw	r30, r28
    5048:	ec 58       	subi	r30, 0x8C	; 140
    504a:	ff 4f       	sbci	r31, 0xFF	; 255
    504c:	80 81       	ld	r24, Z
    504e:	8f 5f       	subi	r24, 0xFF	; 255
    5050:	8c 93       	st	X, r24
    5052:	13 c0       	rjmp	.+38     	; 0x507a <ArrivalButton+0x5ee>
				break;
			}
			else {
				u8ErrorDetected=0;
    5054:	fe 01       	movw	r30, r28
    5056:	ec 58       	subi	r30, 0x8C	; 140
    5058:	ff 4f       	sbci	r31, 0xFF	; 255
    505a:	10 82       	st	Z, r1
		}



		//incorrect passwordu8EEPROMData
		for(uint8 i =0; i<5;i++){
    505c:	de 01       	movw	r26, r28
    505e:	af 58       	subi	r26, 0x8F	; 143
    5060:	bf 4f       	sbci	r27, 0xFF	; 255
    5062:	fe 01       	movw	r30, r28
    5064:	ef 58       	subi	r30, 0x8F	; 143
    5066:	ff 4f       	sbci	r31, 0xFF	; 255
    5068:	80 81       	ld	r24, Z
    506a:	8f 5f       	subi	r24, 0xFF	; 255
    506c:	8c 93       	st	X, r24
    506e:	fe 01       	movw	r30, r28
    5070:	ef 58       	subi	r30, 0x8F	; 143
    5072:	ff 4f       	sbci	r31, 0xFF	; 255
    5074:	80 81       	ld	r24, Z
    5076:	85 30       	cpi	r24, 0x05	; 5
    5078:	b8 f2       	brcs	.-82     	; 0x5028 <ArrivalButton+0x59c>
			}
			else {
				u8ErrorDetected=0;
			}
		}
		if(u8ErrorDetected){
    507a:	fe 01       	movw	r30, r28
    507c:	ec 58       	subi	r30, 0x8C	; 140
    507e:	ff 4f       	sbci	r31, 0xFF	; 255
    5080:	80 81       	ld	r24, Z
    5082:	88 23       	and	r24, r24
    5084:	09 f4       	brne	.+2      	; 0x5088 <ArrivalButton+0x5fc>
    5086:	95 c0       	rjmp	.+298    	; 0x51b2 <ArrivalButton+0x726>
			LCD_voidSendCommand_4bitMode(lcd_Clear);
    5088:	81 e0       	ldi	r24, 0x01	; 1
    508a:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendCommand_4bitMode>
			LCD_voidGotoxy_4bitMode(0, LineOne);
    508e:	80 e0       	ldi	r24, 0x00	; 0
    5090:	61 e0       	ldi	r22, 0x01	; 1
    5092:	0e 94 81 18 	call	0x3102	; 0x3102 <LCD_voidGotoxy_4bitMode>
			LCD_voidWriteString_4bitMode("Wrong! Try Again", 16);
    5096:	82 e9       	ldi	r24, 0x92	; 146
    5098:	90 e0       	ldi	r25, 0x00	; 0
    509a:	60 e1       	ldi	r22, 0x10	; 16
    509c:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <LCD_voidWriteString_4bitMode>
			UART_voidSendDataSynch(5);					// Count number of trials up
    50a0:	85 e0       	ldi	r24, 0x05	; 5
    50a2:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <UART_voidSendDataSynch>
    50a6:	fe 01       	movw	r30, r28
    50a8:	ed 5b       	subi	r30, 0xBD	; 189
    50aa:	ff 4f       	sbci	r31, 0xFF	; 255
    50ac:	80 e0       	ldi	r24, 0x00	; 0
    50ae:	90 e0       	ldi	r25, 0x00	; 0
    50b0:	aa ef       	ldi	r26, 0xFA	; 250
    50b2:	b3 e4       	ldi	r27, 0x43	; 67
    50b4:	80 83       	st	Z, r24
    50b6:	91 83       	std	Z+1, r25	; 0x01
    50b8:	a2 83       	std	Z+2, r26	; 0x02
    50ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50bc:	8e 01       	movw	r16, r28
    50be:	01 5c       	subi	r16, 0xC1	; 193
    50c0:	1f 4f       	sbci	r17, 0xFF	; 255
    50c2:	fe 01       	movw	r30, r28
    50c4:	ed 5b       	subi	r30, 0xBD	; 189
    50c6:	ff 4f       	sbci	r31, 0xFF	; 255
    50c8:	60 81       	ld	r22, Z
    50ca:	71 81       	ldd	r23, Z+1	; 0x01
    50cc:	82 81       	ldd	r24, Z+2	; 0x02
    50ce:	93 81       	ldd	r25, Z+3	; 0x03
    50d0:	20 e0       	ldi	r18, 0x00	; 0
    50d2:	30 e0       	ldi	r19, 0x00	; 0
    50d4:	4a ef       	ldi	r20, 0xFA	; 250
    50d6:	54 e4       	ldi	r21, 0x44	; 68
    50d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50dc:	dc 01       	movw	r26, r24
    50de:	cb 01       	movw	r24, r22
    50e0:	f8 01       	movw	r30, r16
    50e2:	80 83       	st	Z, r24
    50e4:	91 83       	std	Z+1, r25	; 0x01
    50e6:	a2 83       	std	Z+2, r26	; 0x02
    50e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    50ea:	fe 01       	movw	r30, r28
    50ec:	ff 96       	adiw	r30, 0x3f	; 63
    50ee:	60 81       	ld	r22, Z
    50f0:	71 81       	ldd	r23, Z+1	; 0x01
    50f2:	82 81       	ldd	r24, Z+2	; 0x02
    50f4:	93 81       	ldd	r25, Z+3	; 0x03
    50f6:	20 e0       	ldi	r18, 0x00	; 0
    50f8:	30 e0       	ldi	r19, 0x00	; 0
    50fa:	40 e8       	ldi	r20, 0x80	; 128
    50fc:	5f e3       	ldi	r21, 0x3F	; 63
    50fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5102:	88 23       	and	r24, r24
    5104:	2c f4       	brge	.+10     	; 0x5110 <ArrivalButton+0x684>
		__ticks = 1;
    5106:	81 e0       	ldi	r24, 0x01	; 1
    5108:	90 e0       	ldi	r25, 0x00	; 0
    510a:	9e af       	std	Y+62, r25	; 0x3e
    510c:	8d af       	std	Y+61, r24	; 0x3d
    510e:	46 c0       	rjmp	.+140    	; 0x519c <ArrivalButton+0x710>
	else if (__tmp > 65535)
    5110:	fe 01       	movw	r30, r28
    5112:	ff 96       	adiw	r30, 0x3f	; 63
    5114:	60 81       	ld	r22, Z
    5116:	71 81       	ldd	r23, Z+1	; 0x01
    5118:	82 81       	ldd	r24, Z+2	; 0x02
    511a:	93 81       	ldd	r25, Z+3	; 0x03
    511c:	20 e0       	ldi	r18, 0x00	; 0
    511e:	3f ef       	ldi	r19, 0xFF	; 255
    5120:	4f e7       	ldi	r20, 0x7F	; 127
    5122:	57 e4       	ldi	r21, 0x47	; 71
    5124:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5128:	18 16       	cp	r1, r24
    512a:	64 f5       	brge	.+88     	; 0x5184 <ArrivalButton+0x6f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    512c:	fe 01       	movw	r30, r28
    512e:	ed 5b       	subi	r30, 0xBD	; 189
    5130:	ff 4f       	sbci	r31, 0xFF	; 255
    5132:	60 81       	ld	r22, Z
    5134:	71 81       	ldd	r23, Z+1	; 0x01
    5136:	82 81       	ldd	r24, Z+2	; 0x02
    5138:	93 81       	ldd	r25, Z+3	; 0x03
    513a:	20 e0       	ldi	r18, 0x00	; 0
    513c:	30 e0       	ldi	r19, 0x00	; 0
    513e:	40 e2       	ldi	r20, 0x20	; 32
    5140:	51 e4       	ldi	r21, 0x41	; 65
    5142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5146:	dc 01       	movw	r26, r24
    5148:	cb 01       	movw	r24, r22
    514a:	bc 01       	movw	r22, r24
    514c:	cd 01       	movw	r24, r26
    514e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5152:	dc 01       	movw	r26, r24
    5154:	cb 01       	movw	r24, r22
    5156:	9e af       	std	Y+62, r25	; 0x3e
    5158:	8d af       	std	Y+61, r24	; 0x3d
    515a:	0f c0       	rjmp	.+30     	; 0x517a <ArrivalButton+0x6ee>
    515c:	88 ec       	ldi	r24, 0xC8	; 200
    515e:	90 e0       	ldi	r25, 0x00	; 0
    5160:	9c af       	std	Y+60, r25	; 0x3c
    5162:	8b af       	std	Y+59, r24	; 0x3b
    5164:	8b ad       	ldd	r24, Y+59	; 0x3b
    5166:	9c ad       	ldd	r25, Y+60	; 0x3c
    5168:	01 97       	sbiw	r24, 0x01	; 1
    516a:	f1 f7       	brne	.-4      	; 0x5168 <ArrivalButton+0x6dc>
    516c:	9c af       	std	Y+60, r25	; 0x3c
    516e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5170:	8d ad       	ldd	r24, Y+61	; 0x3d
    5172:	9e ad       	ldd	r25, Y+62	; 0x3e
    5174:	01 97       	sbiw	r24, 0x01	; 1
    5176:	9e af       	std	Y+62, r25	; 0x3e
    5178:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    517a:	8d ad       	ldd	r24, Y+61	; 0x3d
    517c:	9e ad       	ldd	r25, Y+62	; 0x3e
    517e:	00 97       	sbiw	r24, 0x00	; 0
    5180:	69 f7       	brne	.-38     	; 0x515c <ArrivalButton+0x6d0>
    5182:	43 c1       	rjmp	.+646    	; 0x540a <ArrivalButton+0x97e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5184:	fe 01       	movw	r30, r28
    5186:	ff 96       	adiw	r30, 0x3f	; 63
    5188:	60 81       	ld	r22, Z
    518a:	71 81       	ldd	r23, Z+1	; 0x01
    518c:	82 81       	ldd	r24, Z+2	; 0x02
    518e:	93 81       	ldd	r25, Z+3	; 0x03
    5190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5194:	dc 01       	movw	r26, r24
    5196:	cb 01       	movw	r24, r22
    5198:	9e af       	std	Y+62, r25	; 0x3e
    519a:	8d af       	std	Y+61, r24	; 0x3d
    519c:	8d ad       	ldd	r24, Y+61	; 0x3d
    519e:	9e ad       	ldd	r25, Y+62	; 0x3e
    51a0:	9a af       	std	Y+58, r25	; 0x3a
    51a2:	89 af       	std	Y+57, r24	; 0x39
    51a4:	89 ad       	ldd	r24, Y+57	; 0x39
    51a6:	9a ad       	ldd	r25, Y+58	; 0x3a
    51a8:	01 97       	sbiw	r24, 0x01	; 1
    51aa:	f1 f7       	brne	.-4      	; 0x51a8 <ArrivalButton+0x71c>
    51ac:	9a af       	std	Y+58, r25	; 0x3a
    51ae:	89 af       	std	Y+57, r24	; 0x39
    51b0:	2c c1       	rjmp	.+600    	; 0x540a <ArrivalButton+0x97e>
			_delay_ms(500);
		}

		else{
			LCD_voidSendCommand_4bitMode(lcd_Clear);
    51b2:	81 e0       	ldi	r24, 0x01	; 1
    51b4:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendCommand_4bitMode>
			LCD_voidGotoxy_4bitMode(0, LineOne);
    51b8:	80 e0       	ldi	r24, 0x00	; 0
    51ba:	61 e0       	ldi	r22, 0x01	; 1
    51bc:	0e 94 81 18 	call	0x3102	; 0x3102 <LCD_voidGotoxy_4bitMode>
			LCD_voidWriteString_4bitMode("****CORRECT****", 16);
    51c0:	83 ea       	ldi	r24, 0xA3	; 163
    51c2:	90 e0       	ldi	r25, 0x00	; 0
    51c4:	60 e1       	ldi	r22, 0x10	; 16
    51c6:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <LCD_voidWriteString_4bitMode>
    51ca:	80 e0       	ldi	r24, 0x00	; 0
    51cc:	90 e0       	ldi	r25, 0x00	; 0
    51ce:	aa ef       	ldi	r26, 0xFA	; 250
    51d0:	b3 e4       	ldi	r27, 0x43	; 67
    51d2:	8d ab       	std	Y+53, r24	; 0x35
    51d4:	9e ab       	std	Y+54, r25	; 0x36
    51d6:	af ab       	std	Y+55, r26	; 0x37
    51d8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51da:	6d a9       	ldd	r22, Y+53	; 0x35
    51dc:	7e a9       	ldd	r23, Y+54	; 0x36
    51de:	8f a9       	ldd	r24, Y+55	; 0x37
    51e0:	98 ad       	ldd	r25, Y+56	; 0x38
    51e2:	20 e0       	ldi	r18, 0x00	; 0
    51e4:	30 e0       	ldi	r19, 0x00	; 0
    51e6:	4a ef       	ldi	r20, 0xFA	; 250
    51e8:	54 e4       	ldi	r21, 0x44	; 68
    51ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51ee:	dc 01       	movw	r26, r24
    51f0:	cb 01       	movw	r24, r22
    51f2:	89 ab       	std	Y+49, r24	; 0x31
    51f4:	9a ab       	std	Y+50, r25	; 0x32
    51f6:	ab ab       	std	Y+51, r26	; 0x33
    51f8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    51fa:	69 a9       	ldd	r22, Y+49	; 0x31
    51fc:	7a a9       	ldd	r23, Y+50	; 0x32
    51fe:	8b a9       	ldd	r24, Y+51	; 0x33
    5200:	9c a9       	ldd	r25, Y+52	; 0x34
    5202:	20 e0       	ldi	r18, 0x00	; 0
    5204:	30 e0       	ldi	r19, 0x00	; 0
    5206:	40 e8       	ldi	r20, 0x80	; 128
    5208:	5f e3       	ldi	r21, 0x3F	; 63
    520a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    520e:	88 23       	and	r24, r24
    5210:	2c f4       	brge	.+10     	; 0x521c <ArrivalButton+0x790>
		__ticks = 1;
    5212:	81 e0       	ldi	r24, 0x01	; 1
    5214:	90 e0       	ldi	r25, 0x00	; 0
    5216:	98 ab       	std	Y+48, r25	; 0x30
    5218:	8f a7       	std	Y+47, r24	; 0x2f
    521a:	3f c0       	rjmp	.+126    	; 0x529a <ArrivalButton+0x80e>
	else if (__tmp > 65535)
    521c:	69 a9       	ldd	r22, Y+49	; 0x31
    521e:	7a a9       	ldd	r23, Y+50	; 0x32
    5220:	8b a9       	ldd	r24, Y+51	; 0x33
    5222:	9c a9       	ldd	r25, Y+52	; 0x34
    5224:	20 e0       	ldi	r18, 0x00	; 0
    5226:	3f ef       	ldi	r19, 0xFF	; 255
    5228:	4f e7       	ldi	r20, 0x7F	; 127
    522a:	57 e4       	ldi	r21, 0x47	; 71
    522c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5230:	18 16       	cp	r1, r24
    5232:	4c f5       	brge	.+82     	; 0x5286 <ArrivalButton+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5234:	6d a9       	ldd	r22, Y+53	; 0x35
    5236:	7e a9       	ldd	r23, Y+54	; 0x36
    5238:	8f a9       	ldd	r24, Y+55	; 0x37
    523a:	98 ad       	ldd	r25, Y+56	; 0x38
    523c:	20 e0       	ldi	r18, 0x00	; 0
    523e:	30 e0       	ldi	r19, 0x00	; 0
    5240:	40 e2       	ldi	r20, 0x20	; 32
    5242:	51 e4       	ldi	r21, 0x41	; 65
    5244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5248:	dc 01       	movw	r26, r24
    524a:	cb 01       	movw	r24, r22
    524c:	bc 01       	movw	r22, r24
    524e:	cd 01       	movw	r24, r26
    5250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5254:	dc 01       	movw	r26, r24
    5256:	cb 01       	movw	r24, r22
    5258:	98 ab       	std	Y+48, r25	; 0x30
    525a:	8f a7       	std	Y+47, r24	; 0x2f
    525c:	0f c0       	rjmp	.+30     	; 0x527c <ArrivalButton+0x7f0>
    525e:	88 ec       	ldi	r24, 0xC8	; 200
    5260:	90 e0       	ldi	r25, 0x00	; 0
    5262:	9e a7       	std	Y+46, r25	; 0x2e
    5264:	8d a7       	std	Y+45, r24	; 0x2d
    5266:	8d a5       	ldd	r24, Y+45	; 0x2d
    5268:	9e a5       	ldd	r25, Y+46	; 0x2e
    526a:	01 97       	sbiw	r24, 0x01	; 1
    526c:	f1 f7       	brne	.-4      	; 0x526a <ArrivalButton+0x7de>
    526e:	9e a7       	std	Y+46, r25	; 0x2e
    5270:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5272:	8f a5       	ldd	r24, Y+47	; 0x2f
    5274:	98 a9       	ldd	r25, Y+48	; 0x30
    5276:	01 97       	sbiw	r24, 0x01	; 1
    5278:	98 ab       	std	Y+48, r25	; 0x30
    527a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    527c:	8f a5       	ldd	r24, Y+47	; 0x2f
    527e:	98 a9       	ldd	r25, Y+48	; 0x30
    5280:	00 97       	sbiw	r24, 0x00	; 0
    5282:	69 f7       	brne	.-38     	; 0x525e <ArrivalButton+0x7d2>
    5284:	14 c0       	rjmp	.+40     	; 0x52ae <ArrivalButton+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5286:	69 a9       	ldd	r22, Y+49	; 0x31
    5288:	7a a9       	ldd	r23, Y+50	; 0x32
    528a:	8b a9       	ldd	r24, Y+51	; 0x33
    528c:	9c a9       	ldd	r25, Y+52	; 0x34
    528e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5292:	dc 01       	movw	r26, r24
    5294:	cb 01       	movw	r24, r22
    5296:	98 ab       	std	Y+48, r25	; 0x30
    5298:	8f a7       	std	Y+47, r24	; 0x2f
    529a:	8f a5       	ldd	r24, Y+47	; 0x2f
    529c:	98 a9       	ldd	r25, Y+48	; 0x30
    529e:	9c a7       	std	Y+44, r25	; 0x2c
    52a0:	8b a7       	std	Y+43, r24	; 0x2b
    52a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    52a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    52a6:	01 97       	sbiw	r24, 0x01	; 1
    52a8:	f1 f7       	brne	.-4      	; 0x52a6 <ArrivalButton+0x81a>
    52aa:	9c a7       	std	Y+44, r25	; 0x2c
    52ac:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(500);
			//u8ErrorCounts=0
			UART_voidSendDataSynch(10);
    52ae:	8a e0       	ldi	r24, 0x0A	; 10
    52b0:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <UART_voidSendDataSynch>
			LCD_voidSendCommand_4bitMode(lcd_Clear);
    52b4:	81 e0       	ldi	r24, 0x01	; 1
    52b6:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendCommand_4bitMode>
			LCD_voidGotoxy_4bitMode(3, LineOne);
    52ba:	83 e0       	ldi	r24, 0x03	; 3
    52bc:	61 e0       	ldi	r22, 0x01	; 1
    52be:	0e 94 81 18 	call	0x3102	; 0x3102 <LCD_voidGotoxy_4bitMode>
			LCD_voidWriteString_4bitMode("WELCOME IN", 11);
    52c2:	83 eb       	ldi	r24, 0xB3	; 179
    52c4:	90 e0       	ldi	r25, 0x00	; 0
    52c6:	6b e0       	ldi	r22, 0x0B	; 11
    52c8:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <LCD_voidWriteString_4bitMode>
			u8WelcomeInFlag =1;
    52cc:	81 e0       	ldi	r24, 0x01	; 1
    52ce:	80 93 0c 01 	sts	0x010C, r24

			for (u16ServoCounter = 750 ; u16ServoCounter<1624; u16ServoCounter++)		// Open the door
    52d2:	8e ee       	ldi	r24, 0xEE	; 238
    52d4:	92 e0       	ldi	r25, 0x02	; 2
    52d6:	90 93 ed 00 	sts	0x00ED, r25
    52da:	80 93 ec 00 	sts	0x00EC, r24
    52de:	81 c0       	rjmp	.+258    	; 0x53e2 <ArrivalButton+0x956>
			{
				TIM1_voidSetCmpARegValue(u16ServoCounter);           //OCR1A
    52e0:	80 91 ec 00 	lds	r24, 0x00EC
    52e4:	90 91 ed 00 	lds	r25, 0x00ED
    52e8:	0e 94 9d 08 	call	0x113a	; 0x113a <TIM1_voidSetCmpARegValue>
    52ec:	80 e0       	ldi	r24, 0x00	; 0
    52ee:	90 e0       	ldi	r25, 0x00	; 0
    52f0:	a0 e2       	ldi	r26, 0x20	; 32
    52f2:	b1 e4       	ldi	r27, 0x41	; 65
    52f4:	8f a3       	std	Y+39, r24	; 0x27
    52f6:	98 a7       	std	Y+40, r25	; 0x28
    52f8:	a9 a7       	std	Y+41, r26	; 0x29
    52fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52fc:	6f a1       	ldd	r22, Y+39	; 0x27
    52fe:	78 a5       	ldd	r23, Y+40	; 0x28
    5300:	89 a5       	ldd	r24, Y+41	; 0x29
    5302:	9a a5       	ldd	r25, Y+42	; 0x2a
    5304:	20 e0       	ldi	r18, 0x00	; 0
    5306:	30 e0       	ldi	r19, 0x00	; 0
    5308:	4a ef       	ldi	r20, 0xFA	; 250
    530a:	54 e4       	ldi	r21, 0x44	; 68
    530c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5310:	dc 01       	movw	r26, r24
    5312:	cb 01       	movw	r24, r22
    5314:	8b a3       	std	Y+35, r24	; 0x23
    5316:	9c a3       	std	Y+36, r25	; 0x24
    5318:	ad a3       	std	Y+37, r26	; 0x25
    531a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    531c:	6b a1       	ldd	r22, Y+35	; 0x23
    531e:	7c a1       	ldd	r23, Y+36	; 0x24
    5320:	8d a1       	ldd	r24, Y+37	; 0x25
    5322:	9e a1       	ldd	r25, Y+38	; 0x26
    5324:	20 e0       	ldi	r18, 0x00	; 0
    5326:	30 e0       	ldi	r19, 0x00	; 0
    5328:	40 e8       	ldi	r20, 0x80	; 128
    532a:	5f e3       	ldi	r21, 0x3F	; 63
    532c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5330:	88 23       	and	r24, r24
    5332:	2c f4       	brge	.+10     	; 0x533e <ArrivalButton+0x8b2>
		__ticks = 1;
    5334:	81 e0       	ldi	r24, 0x01	; 1
    5336:	90 e0       	ldi	r25, 0x00	; 0
    5338:	9a a3       	std	Y+34, r25	; 0x22
    533a:	89 a3       	std	Y+33, r24	; 0x21
    533c:	3f c0       	rjmp	.+126    	; 0x53bc <ArrivalButton+0x930>
	else if (__tmp > 65535)
    533e:	6b a1       	ldd	r22, Y+35	; 0x23
    5340:	7c a1       	ldd	r23, Y+36	; 0x24
    5342:	8d a1       	ldd	r24, Y+37	; 0x25
    5344:	9e a1       	ldd	r25, Y+38	; 0x26
    5346:	20 e0       	ldi	r18, 0x00	; 0
    5348:	3f ef       	ldi	r19, 0xFF	; 255
    534a:	4f e7       	ldi	r20, 0x7F	; 127
    534c:	57 e4       	ldi	r21, 0x47	; 71
    534e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5352:	18 16       	cp	r1, r24
    5354:	4c f5       	brge	.+82     	; 0x53a8 <ArrivalButton+0x91c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5356:	6f a1       	ldd	r22, Y+39	; 0x27
    5358:	78 a5       	ldd	r23, Y+40	; 0x28
    535a:	89 a5       	ldd	r24, Y+41	; 0x29
    535c:	9a a5       	ldd	r25, Y+42	; 0x2a
    535e:	20 e0       	ldi	r18, 0x00	; 0
    5360:	30 e0       	ldi	r19, 0x00	; 0
    5362:	40 e2       	ldi	r20, 0x20	; 32
    5364:	51 e4       	ldi	r21, 0x41	; 65
    5366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    536a:	dc 01       	movw	r26, r24
    536c:	cb 01       	movw	r24, r22
    536e:	bc 01       	movw	r22, r24
    5370:	cd 01       	movw	r24, r26
    5372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5376:	dc 01       	movw	r26, r24
    5378:	cb 01       	movw	r24, r22
    537a:	9a a3       	std	Y+34, r25	; 0x22
    537c:	89 a3       	std	Y+33, r24	; 0x21
    537e:	0f c0       	rjmp	.+30     	; 0x539e <ArrivalButton+0x912>
    5380:	88 ec       	ldi	r24, 0xC8	; 200
    5382:	90 e0       	ldi	r25, 0x00	; 0
    5384:	98 a3       	std	Y+32, r25	; 0x20
    5386:	8f 8f       	std	Y+31, r24	; 0x1f
    5388:	8f 8d       	ldd	r24, Y+31	; 0x1f
    538a:	98 a1       	ldd	r25, Y+32	; 0x20
    538c:	01 97       	sbiw	r24, 0x01	; 1
    538e:	f1 f7       	brne	.-4      	; 0x538c <ArrivalButton+0x900>
    5390:	98 a3       	std	Y+32, r25	; 0x20
    5392:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5394:	89 a1       	ldd	r24, Y+33	; 0x21
    5396:	9a a1       	ldd	r25, Y+34	; 0x22
    5398:	01 97       	sbiw	r24, 0x01	; 1
    539a:	9a a3       	std	Y+34, r25	; 0x22
    539c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    539e:	89 a1       	ldd	r24, Y+33	; 0x21
    53a0:	9a a1       	ldd	r25, Y+34	; 0x22
    53a2:	00 97       	sbiw	r24, 0x00	; 0
    53a4:	69 f7       	brne	.-38     	; 0x5380 <ArrivalButton+0x8f4>
    53a6:	14 c0       	rjmp	.+40     	; 0x53d0 <ArrivalButton+0x944>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53a8:	6b a1       	ldd	r22, Y+35	; 0x23
    53aa:	7c a1       	ldd	r23, Y+36	; 0x24
    53ac:	8d a1       	ldd	r24, Y+37	; 0x25
    53ae:	9e a1       	ldd	r25, Y+38	; 0x26
    53b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53b4:	dc 01       	movw	r26, r24
    53b6:	cb 01       	movw	r24, r22
    53b8:	9a a3       	std	Y+34, r25	; 0x22
    53ba:	89 a3       	std	Y+33, r24	; 0x21
    53bc:	89 a1       	ldd	r24, Y+33	; 0x21
    53be:	9a a1       	ldd	r25, Y+34	; 0x22
    53c0:	9e 8f       	std	Y+30, r25	; 0x1e
    53c2:	8d 8f       	std	Y+29, r24	; 0x1d
    53c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    53c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    53c8:	01 97       	sbiw	r24, 0x01	; 1
    53ca:	f1 f7       	brne	.-4      	; 0x53c8 <ArrivalButton+0x93c>
    53cc:	9e 8f       	std	Y+30, r25	; 0x1e
    53ce:	8d 8f       	std	Y+29, r24	; 0x1d
			LCD_voidSendCommand_4bitMode(lcd_Clear);
			LCD_voidGotoxy_4bitMode(3, LineOne);
			LCD_voidWriteString_4bitMode("WELCOME IN", 11);
			u8WelcomeInFlag =1;

			for (u16ServoCounter = 750 ; u16ServoCounter<1624; u16ServoCounter++)		// Open the door
    53d0:	80 91 ec 00 	lds	r24, 0x00EC
    53d4:	90 91 ed 00 	lds	r25, 0x00ED
    53d8:	01 96       	adiw	r24, 0x01	; 1
    53da:	90 93 ed 00 	sts	0x00ED, r25
    53de:	80 93 ec 00 	sts	0x00EC, r24
    53e2:	80 91 ec 00 	lds	r24, 0x00EC
    53e6:	90 91 ed 00 	lds	r25, 0x00ED
    53ea:	f6 e0       	ldi	r31, 0x06	; 6
    53ec:	88 35       	cpi	r24, 0x58	; 88
    53ee:	9f 07       	cpc	r25, r31
    53f0:	08 f4       	brcc	.+2      	; 0x53f4 <ArrivalButton+0x968>
    53f2:	76 cf       	rjmp	.-276    	; 0x52e0 <ArrivalButton+0x854>
			{
				TIM1_voidSetCmpARegValue(u16ServoCounter);           //OCR1A
				_delay_ms(10);
			}
			DIO_voidWritePin(PORT_D, DIO_PIN_NUM_D7, DIO_HIGH);  						//Turn On the lights
    53f4:	84 e0       	ldi	r24, 0x04	; 4
    53f6:	67 e0       	ldi	r22, 0x07	; 7
    53f8:	41 e0       	ldi	r20, 0x01	; 1
    53fa:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
			DIO_voidWritePin(PORT_B, DIO_PIN_NUM_B3, DIO_HIGH);
    53fe:	82 e0       	ldi	r24, 0x02	; 2
    5400:	63 e0       	ldi	r22, 0x03	; 3
    5402:	41 e0       	ldi	r20, 0x01	; 1
    5404:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <DIO_voidWritePin>
    5408:	07 c0       	rjmp	.+14     	; 0x5418 <ArrivalButton+0x98c>
	LCD_voidSendCommand_4bitMode(lcd_Clear);
	LCD_voidGotoxy_4bitMode(5, LineOne);
	LCD_voidWriteString_4bitMode("WELCOME", 7);
	_delay_ms(1500);

	while(u8ErrorDetected <2){
    540a:	fe 01       	movw	r30, r28
    540c:	ec 58       	subi	r30, 0x8C	; 140
    540e:	ff 4f       	sbci	r31, 0xFF	; 255
    5410:	80 81       	ld	r24, Z
    5412:	82 30       	cpi	r24, 0x02	; 2
    5414:	08 f4       	brcc	.+2      	; 0x5418 <ArrivalButton+0x98c>
    5416:	cd cc       	rjmp	.-1638   	; 0x4db2 <ArrivalButton+0x326>
			DIO_voidWritePin(PORT_B, DIO_PIN_NUM_B3, DIO_HIGH);
			break;
		}
	}

	if(u8ErrorDetected>=2){
    5418:	fe 01       	movw	r30, r28
    541a:	ec 58       	subi	r30, 0x8C	; 140
    541c:	ff 4f       	sbci	r31, 0xFF	; 255
    541e:	80 81       	ld	r24, Z
    5420:	82 30       	cpi	r24, 0x02	; 2
    5422:	08 f4       	brcc	.+2      	; 0x5426 <ArrivalButton+0x99a>
    5424:	81 c0       	rjmp	.+258    	; 0x5528 <ArrivalButton+0xa9c>
		UART_voidSendDataSynch(3);
    5426:	83 e0       	ldi	r24, 0x03	; 3
    5428:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <UART_voidSendDataSynch>
		LCD_voidSendCommand_4bitMode(lcd_Clear);
    542c:	81 e0       	ldi	r24, 0x01	; 1
    542e:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendCommand_4bitMode>
		LCD_voidGotoxy_4bitMode(4, LineOne);
    5432:	84 e0       	ldi	r24, 0x04	; 4
    5434:	61 e0       	ldi	r22, 0x01	; 1
    5436:	0e 94 81 18 	call	0x3102	; 0x3102 <LCD_voidGotoxy_4bitMode>
		LCD_voidWriteString_4bitMode("INTRUDER", 8);
    543a:	8e eb       	ldi	r24, 0xBE	; 190
    543c:	90 e0       	ldi	r25, 0x00	; 0
    543e:	68 e0       	ldi	r22, 0x08	; 8
    5440:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <LCD_voidWriteString_4bitMode>
    5444:	80 e0       	ldi	r24, 0x00	; 0
    5446:	90 e4       	ldi	r25, 0x40	; 64
    5448:	ac e9       	ldi	r26, 0x9C	; 156
    544a:	b5 e4       	ldi	r27, 0x45	; 69
    544c:	89 8f       	std	Y+25, r24	; 0x19
    544e:	9a 8f       	std	Y+26, r25	; 0x1a
    5450:	ab 8f       	std	Y+27, r26	; 0x1b
    5452:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5454:	69 8d       	ldd	r22, Y+25	; 0x19
    5456:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5458:	8b 8d       	ldd	r24, Y+27	; 0x1b
    545a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    545c:	20 e0       	ldi	r18, 0x00	; 0
    545e:	30 e0       	ldi	r19, 0x00	; 0
    5460:	4a ef       	ldi	r20, 0xFA	; 250
    5462:	54 e4       	ldi	r21, 0x44	; 68
    5464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5468:	dc 01       	movw	r26, r24
    546a:	cb 01       	movw	r24, r22
    546c:	8d 8b       	std	Y+21, r24	; 0x15
    546e:	9e 8b       	std	Y+22, r25	; 0x16
    5470:	af 8b       	std	Y+23, r26	; 0x17
    5472:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5474:	6d 89       	ldd	r22, Y+21	; 0x15
    5476:	7e 89       	ldd	r23, Y+22	; 0x16
    5478:	8f 89       	ldd	r24, Y+23	; 0x17
    547a:	98 8d       	ldd	r25, Y+24	; 0x18
    547c:	20 e0       	ldi	r18, 0x00	; 0
    547e:	30 e0       	ldi	r19, 0x00	; 0
    5480:	40 e8       	ldi	r20, 0x80	; 128
    5482:	5f e3       	ldi	r21, 0x3F	; 63
    5484:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5488:	88 23       	and	r24, r24
    548a:	2c f4       	brge	.+10     	; 0x5496 <ArrivalButton+0xa0a>
		__ticks = 1;
    548c:	81 e0       	ldi	r24, 0x01	; 1
    548e:	90 e0       	ldi	r25, 0x00	; 0
    5490:	9c 8b       	std	Y+20, r25	; 0x14
    5492:	8b 8b       	std	Y+19, r24	; 0x13
    5494:	3f c0       	rjmp	.+126    	; 0x5514 <ArrivalButton+0xa88>
	else if (__tmp > 65535)
    5496:	6d 89       	ldd	r22, Y+21	; 0x15
    5498:	7e 89       	ldd	r23, Y+22	; 0x16
    549a:	8f 89       	ldd	r24, Y+23	; 0x17
    549c:	98 8d       	ldd	r25, Y+24	; 0x18
    549e:	20 e0       	ldi	r18, 0x00	; 0
    54a0:	3f ef       	ldi	r19, 0xFF	; 255
    54a2:	4f e7       	ldi	r20, 0x7F	; 127
    54a4:	57 e4       	ldi	r21, 0x47	; 71
    54a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    54aa:	18 16       	cp	r1, r24
    54ac:	4c f5       	brge	.+82     	; 0x5500 <ArrivalButton+0xa74>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54ae:	69 8d       	ldd	r22, Y+25	; 0x19
    54b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    54b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    54b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    54b6:	20 e0       	ldi	r18, 0x00	; 0
    54b8:	30 e0       	ldi	r19, 0x00	; 0
    54ba:	40 e2       	ldi	r20, 0x20	; 32
    54bc:	51 e4       	ldi	r21, 0x41	; 65
    54be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54c2:	dc 01       	movw	r26, r24
    54c4:	cb 01       	movw	r24, r22
    54c6:	bc 01       	movw	r22, r24
    54c8:	cd 01       	movw	r24, r26
    54ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54ce:	dc 01       	movw	r26, r24
    54d0:	cb 01       	movw	r24, r22
    54d2:	9c 8b       	std	Y+20, r25	; 0x14
    54d4:	8b 8b       	std	Y+19, r24	; 0x13
    54d6:	0f c0       	rjmp	.+30     	; 0x54f6 <ArrivalButton+0xa6a>
    54d8:	88 ec       	ldi	r24, 0xC8	; 200
    54da:	90 e0       	ldi	r25, 0x00	; 0
    54dc:	9a 8b       	std	Y+18, r25	; 0x12
    54de:	89 8b       	std	Y+17, r24	; 0x11
    54e0:	89 89       	ldd	r24, Y+17	; 0x11
    54e2:	9a 89       	ldd	r25, Y+18	; 0x12
    54e4:	01 97       	sbiw	r24, 0x01	; 1
    54e6:	f1 f7       	brne	.-4      	; 0x54e4 <ArrivalButton+0xa58>
    54e8:	9a 8b       	std	Y+18, r25	; 0x12
    54ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54ec:	8b 89       	ldd	r24, Y+19	; 0x13
    54ee:	9c 89       	ldd	r25, Y+20	; 0x14
    54f0:	01 97       	sbiw	r24, 0x01	; 1
    54f2:	9c 8b       	std	Y+20, r25	; 0x14
    54f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54f6:	8b 89       	ldd	r24, Y+19	; 0x13
    54f8:	9c 89       	ldd	r25, Y+20	; 0x14
    54fa:	00 97       	sbiw	r24, 0x00	; 0
    54fc:	69 f7       	brne	.-38     	; 0x54d8 <ArrivalButton+0xa4c>
    54fe:	14 c0       	rjmp	.+40     	; 0x5528 <ArrivalButton+0xa9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5500:	6d 89       	ldd	r22, Y+21	; 0x15
    5502:	7e 89       	ldd	r23, Y+22	; 0x16
    5504:	8f 89       	ldd	r24, Y+23	; 0x17
    5506:	98 8d       	ldd	r25, Y+24	; 0x18
    5508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    550c:	dc 01       	movw	r26, r24
    550e:	cb 01       	movw	r24, r22
    5510:	9c 8b       	std	Y+20, r25	; 0x14
    5512:	8b 8b       	std	Y+19, r24	; 0x13
    5514:	8b 89       	ldd	r24, Y+19	; 0x13
    5516:	9c 89       	ldd	r25, Y+20	; 0x14
    5518:	98 8b       	std	Y+16, r25	; 0x10
    551a:	8f 87       	std	Y+15, r24	; 0x0f
    551c:	8f 85       	ldd	r24, Y+15	; 0x0f
    551e:	98 89       	ldd	r25, Y+16	; 0x10
    5520:	01 97       	sbiw	r24, 0x01	; 1
    5522:	f1 f7       	brne	.-4      	; 0x5520 <ArrivalButton+0xa94>
    5524:	98 8b       	std	Y+16, r25	; 0x10
    5526:	8f 87       	std	Y+15, r24	; 0x0f
	}
	else{

	}
	//Enable timer0 to save power
	TIMER0_voidInit();
    5528:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TIMER0_voidInit>
	TIMER0_voidEnable(TIMER0_PRESCALER_8);
    552c:	82 e0       	ldi	r24, 0x02	; 2
    552e:	0e 94 ff 09 	call	0x13fe	; 0x13fe <TIMER0_voidEnable>
    5532:	80 e0       	ldi	r24, 0x00	; 0
    5534:	90 e0       	ldi	r25, 0x00	; 0
    5536:	aa e7       	ldi	r26, 0x7A	; 122
    5538:	b4 e4       	ldi	r27, 0x44	; 68
    553a:	8b 87       	std	Y+11, r24	; 0x0b
    553c:	9c 87       	std	Y+12, r25	; 0x0c
    553e:	ad 87       	std	Y+13, r26	; 0x0d
    5540:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5542:	6b 85       	ldd	r22, Y+11	; 0x0b
    5544:	7c 85       	ldd	r23, Y+12	; 0x0c
    5546:	8d 85       	ldd	r24, Y+13	; 0x0d
    5548:	9e 85       	ldd	r25, Y+14	; 0x0e
    554a:	20 e0       	ldi	r18, 0x00	; 0
    554c:	30 e0       	ldi	r19, 0x00	; 0
    554e:	4a ef       	ldi	r20, 0xFA	; 250
    5550:	54 e4       	ldi	r21, 0x44	; 68
    5552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5556:	dc 01       	movw	r26, r24
    5558:	cb 01       	movw	r24, r22
    555a:	8f 83       	std	Y+7, r24	; 0x07
    555c:	98 87       	std	Y+8, r25	; 0x08
    555e:	a9 87       	std	Y+9, r26	; 0x09
    5560:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5562:	6f 81       	ldd	r22, Y+7	; 0x07
    5564:	78 85       	ldd	r23, Y+8	; 0x08
    5566:	89 85       	ldd	r24, Y+9	; 0x09
    5568:	9a 85       	ldd	r25, Y+10	; 0x0a
    556a:	20 e0       	ldi	r18, 0x00	; 0
    556c:	30 e0       	ldi	r19, 0x00	; 0
    556e:	40 e8       	ldi	r20, 0x80	; 128
    5570:	5f e3       	ldi	r21, 0x3F	; 63
    5572:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5576:	88 23       	and	r24, r24
    5578:	2c f4       	brge	.+10     	; 0x5584 <ArrivalButton+0xaf8>
		__ticks = 1;
    557a:	81 e0       	ldi	r24, 0x01	; 1
    557c:	90 e0       	ldi	r25, 0x00	; 0
    557e:	9e 83       	std	Y+6, r25	; 0x06
    5580:	8d 83       	std	Y+5, r24	; 0x05
    5582:	3f c0       	rjmp	.+126    	; 0x5602 <ArrivalButton+0xb76>
	else if (__tmp > 65535)
    5584:	6f 81       	ldd	r22, Y+7	; 0x07
    5586:	78 85       	ldd	r23, Y+8	; 0x08
    5588:	89 85       	ldd	r24, Y+9	; 0x09
    558a:	9a 85       	ldd	r25, Y+10	; 0x0a
    558c:	20 e0       	ldi	r18, 0x00	; 0
    558e:	3f ef       	ldi	r19, 0xFF	; 255
    5590:	4f e7       	ldi	r20, 0x7F	; 127
    5592:	57 e4       	ldi	r21, 0x47	; 71
    5594:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5598:	18 16       	cp	r1, r24
    559a:	4c f5       	brge	.+82     	; 0x55ee <ArrivalButton+0xb62>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    559c:	6b 85       	ldd	r22, Y+11	; 0x0b
    559e:	7c 85       	ldd	r23, Y+12	; 0x0c
    55a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    55a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    55a4:	20 e0       	ldi	r18, 0x00	; 0
    55a6:	30 e0       	ldi	r19, 0x00	; 0
    55a8:	40 e2       	ldi	r20, 0x20	; 32
    55aa:	51 e4       	ldi	r21, 0x41	; 65
    55ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55b0:	dc 01       	movw	r26, r24
    55b2:	cb 01       	movw	r24, r22
    55b4:	bc 01       	movw	r22, r24
    55b6:	cd 01       	movw	r24, r26
    55b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55bc:	dc 01       	movw	r26, r24
    55be:	cb 01       	movw	r24, r22
    55c0:	9e 83       	std	Y+6, r25	; 0x06
    55c2:	8d 83       	std	Y+5, r24	; 0x05
    55c4:	0f c0       	rjmp	.+30     	; 0x55e4 <ArrivalButton+0xb58>
    55c6:	88 ec       	ldi	r24, 0xC8	; 200
    55c8:	90 e0       	ldi	r25, 0x00	; 0
    55ca:	9c 83       	std	Y+4, r25	; 0x04
    55cc:	8b 83       	std	Y+3, r24	; 0x03
    55ce:	8b 81       	ldd	r24, Y+3	; 0x03
    55d0:	9c 81       	ldd	r25, Y+4	; 0x04
    55d2:	01 97       	sbiw	r24, 0x01	; 1
    55d4:	f1 f7       	brne	.-4      	; 0x55d2 <ArrivalButton+0xb46>
    55d6:	9c 83       	std	Y+4, r25	; 0x04
    55d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55da:	8d 81       	ldd	r24, Y+5	; 0x05
    55dc:	9e 81       	ldd	r25, Y+6	; 0x06
    55de:	01 97       	sbiw	r24, 0x01	; 1
    55e0:	9e 83       	std	Y+6, r25	; 0x06
    55e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55e4:	8d 81       	ldd	r24, Y+5	; 0x05
    55e6:	9e 81       	ldd	r25, Y+6	; 0x06
    55e8:	00 97       	sbiw	r24, 0x00	; 0
    55ea:	69 f7       	brne	.-38     	; 0x55c6 <ArrivalButton+0xb3a>
    55ec:	14 c0       	rjmp	.+40     	; 0x5616 <ArrivalButton+0xb8a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55ee:	6f 81       	ldd	r22, Y+7	; 0x07
    55f0:	78 85       	ldd	r23, Y+8	; 0x08
    55f2:	89 85       	ldd	r24, Y+9	; 0x09
    55f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    55f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55fa:	dc 01       	movw	r26, r24
    55fc:	cb 01       	movw	r24, r22
    55fe:	9e 83       	std	Y+6, r25	; 0x06
    5600:	8d 83       	std	Y+5, r24	; 0x05
    5602:	8d 81       	ldd	r24, Y+5	; 0x05
    5604:	9e 81       	ldd	r25, Y+6	; 0x06
    5606:	9a 83       	std	Y+2, r25	; 0x02
    5608:	89 83       	std	Y+1, r24	; 0x01
    560a:	89 81       	ldd	r24, Y+1	; 0x01
    560c:	9a 81       	ldd	r25, Y+2	; 0x02
    560e:	01 97       	sbiw	r24, 0x01	; 1
    5610:	f1 f7       	brne	.-4      	; 0x560e <ArrivalButton+0xb82>
    5612:	9a 83       	std	Y+2, r25	; 0x02
    5614:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

}
    5616:	cb 58       	subi	r28, 0x8B	; 139
    5618:	df 4f       	sbci	r29, 0xFF	; 255
    561a:	0f b6       	in	r0, 0x3f	; 63
    561c:	f8 94       	cli
    561e:	de bf       	out	0x3e, r29	; 62
    5620:	0f be       	out	0x3f, r0	; 63
    5622:	cd bf       	out	0x3d, r28	; 61
    5624:	cf 91       	pop	r28
    5626:	df 91       	pop	r29
    5628:	1f 91       	pop	r17
    562a:	0f 91       	pop	r16
    562c:	08 95       	ret

0000562e <EntranceButton>:


void EntranceButton(void){
    562e:	df 93       	push	r29
    5630:	cf 93       	push	r28
    5632:	cd b7       	in	r28, 0x3d	; 61
    5634:	de b7       	in	r29, 0x3e	; 62
    5636:	2e 97       	sbiw	r28, 0x0e	; 14
    5638:	0f b6       	in	r0, 0x3f	; 63
    563a:	f8 94       	cli
    563c:	de bf       	out	0x3e, r29	; 62
    563e:	0f be       	out	0x3f, r0	; 63
    5640:	cd bf       	out	0x3d, r28	; 61
	for (u16ServoCounter =1624; u16ServoCounter>750;u16ServoCounter--)			// Close the door
    5642:	88 e5       	ldi	r24, 0x58	; 88
    5644:	96 e0       	ldi	r25, 0x06	; 6
    5646:	90 93 ed 00 	sts	0x00ED, r25
    564a:	80 93 ec 00 	sts	0x00EC, r24
    564e:	81 c0       	rjmp	.+258    	; 0x5752 <EntranceButton+0x124>
	{
		TIM1_voidSetCmpARegValue(u16ServoCounter);
    5650:	80 91 ec 00 	lds	r24, 0x00EC
    5654:	90 91 ed 00 	lds	r25, 0x00ED
    5658:	0e 94 9d 08 	call	0x113a	; 0x113a <TIM1_voidSetCmpARegValue>
    565c:	80 e0       	ldi	r24, 0x00	; 0
    565e:	90 e0       	ldi	r25, 0x00	; 0
    5660:	a0 e2       	ldi	r26, 0x20	; 32
    5662:	b1 e4       	ldi	r27, 0x41	; 65
    5664:	8b 87       	std	Y+11, r24	; 0x0b
    5666:	9c 87       	std	Y+12, r25	; 0x0c
    5668:	ad 87       	std	Y+13, r26	; 0x0d
    566a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    566c:	6b 85       	ldd	r22, Y+11	; 0x0b
    566e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5670:	8d 85       	ldd	r24, Y+13	; 0x0d
    5672:	9e 85       	ldd	r25, Y+14	; 0x0e
    5674:	20 e0       	ldi	r18, 0x00	; 0
    5676:	30 e0       	ldi	r19, 0x00	; 0
    5678:	4a ef       	ldi	r20, 0xFA	; 250
    567a:	54 e4       	ldi	r21, 0x44	; 68
    567c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5680:	dc 01       	movw	r26, r24
    5682:	cb 01       	movw	r24, r22
    5684:	8f 83       	std	Y+7, r24	; 0x07
    5686:	98 87       	std	Y+8, r25	; 0x08
    5688:	a9 87       	std	Y+9, r26	; 0x09
    568a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    568c:	6f 81       	ldd	r22, Y+7	; 0x07
    568e:	78 85       	ldd	r23, Y+8	; 0x08
    5690:	89 85       	ldd	r24, Y+9	; 0x09
    5692:	9a 85       	ldd	r25, Y+10	; 0x0a
    5694:	20 e0       	ldi	r18, 0x00	; 0
    5696:	30 e0       	ldi	r19, 0x00	; 0
    5698:	40 e8       	ldi	r20, 0x80	; 128
    569a:	5f e3       	ldi	r21, 0x3F	; 63
    569c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    56a0:	88 23       	and	r24, r24
    56a2:	2c f4       	brge	.+10     	; 0x56ae <EntranceButton+0x80>
		__ticks = 1;
    56a4:	81 e0       	ldi	r24, 0x01	; 1
    56a6:	90 e0       	ldi	r25, 0x00	; 0
    56a8:	9e 83       	std	Y+6, r25	; 0x06
    56aa:	8d 83       	std	Y+5, r24	; 0x05
    56ac:	3f c0       	rjmp	.+126    	; 0x572c <EntranceButton+0xfe>
	else if (__tmp > 65535)
    56ae:	6f 81       	ldd	r22, Y+7	; 0x07
    56b0:	78 85       	ldd	r23, Y+8	; 0x08
    56b2:	89 85       	ldd	r24, Y+9	; 0x09
    56b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    56b6:	20 e0       	ldi	r18, 0x00	; 0
    56b8:	3f ef       	ldi	r19, 0xFF	; 255
    56ba:	4f e7       	ldi	r20, 0x7F	; 127
    56bc:	57 e4       	ldi	r21, 0x47	; 71
    56be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    56c2:	18 16       	cp	r1, r24
    56c4:	4c f5       	brge	.+82     	; 0x5718 <EntranceButton+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    56c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    56ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    56cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    56ce:	20 e0       	ldi	r18, 0x00	; 0
    56d0:	30 e0       	ldi	r19, 0x00	; 0
    56d2:	40 e2       	ldi	r20, 0x20	; 32
    56d4:	51 e4       	ldi	r21, 0x41	; 65
    56d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56da:	dc 01       	movw	r26, r24
    56dc:	cb 01       	movw	r24, r22
    56de:	bc 01       	movw	r22, r24
    56e0:	cd 01       	movw	r24, r26
    56e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56e6:	dc 01       	movw	r26, r24
    56e8:	cb 01       	movw	r24, r22
    56ea:	9e 83       	std	Y+6, r25	; 0x06
    56ec:	8d 83       	std	Y+5, r24	; 0x05
    56ee:	0f c0       	rjmp	.+30     	; 0x570e <EntranceButton+0xe0>
    56f0:	88 ec       	ldi	r24, 0xC8	; 200
    56f2:	90 e0       	ldi	r25, 0x00	; 0
    56f4:	9c 83       	std	Y+4, r25	; 0x04
    56f6:	8b 83       	std	Y+3, r24	; 0x03
    56f8:	8b 81       	ldd	r24, Y+3	; 0x03
    56fa:	9c 81       	ldd	r25, Y+4	; 0x04
    56fc:	01 97       	sbiw	r24, 0x01	; 1
    56fe:	f1 f7       	brne	.-4      	; 0x56fc <EntranceButton+0xce>
    5700:	9c 83       	std	Y+4, r25	; 0x04
    5702:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5704:	8d 81       	ldd	r24, Y+5	; 0x05
    5706:	9e 81       	ldd	r25, Y+6	; 0x06
    5708:	01 97       	sbiw	r24, 0x01	; 1
    570a:	9e 83       	std	Y+6, r25	; 0x06
    570c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    570e:	8d 81       	ldd	r24, Y+5	; 0x05
    5710:	9e 81       	ldd	r25, Y+6	; 0x06
    5712:	00 97       	sbiw	r24, 0x00	; 0
    5714:	69 f7       	brne	.-38     	; 0x56f0 <EntranceButton+0xc2>
    5716:	14 c0       	rjmp	.+40     	; 0x5740 <EntranceButton+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5718:	6f 81       	ldd	r22, Y+7	; 0x07
    571a:	78 85       	ldd	r23, Y+8	; 0x08
    571c:	89 85       	ldd	r24, Y+9	; 0x09
    571e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5724:	dc 01       	movw	r26, r24
    5726:	cb 01       	movw	r24, r22
    5728:	9e 83       	std	Y+6, r25	; 0x06
    572a:	8d 83       	std	Y+5, r24	; 0x05
    572c:	8d 81       	ldd	r24, Y+5	; 0x05
    572e:	9e 81       	ldd	r25, Y+6	; 0x06
    5730:	9a 83       	std	Y+2, r25	; 0x02
    5732:	89 83       	std	Y+1, r24	; 0x01
    5734:	89 81       	ldd	r24, Y+1	; 0x01
    5736:	9a 81       	ldd	r25, Y+2	; 0x02
    5738:	01 97       	sbiw	r24, 0x01	; 1
    573a:	f1 f7       	brne	.-4      	; 0x5738 <EntranceButton+0x10a>
    573c:	9a 83       	std	Y+2, r25	; 0x02
    573e:	89 83       	std	Y+1, r24	; 0x01

}


void EntranceButton(void){
	for (u16ServoCounter =1624; u16ServoCounter>750;u16ServoCounter--)			// Close the door
    5740:	80 91 ec 00 	lds	r24, 0x00EC
    5744:	90 91 ed 00 	lds	r25, 0x00ED
    5748:	01 97       	sbiw	r24, 0x01	; 1
    574a:	90 93 ed 00 	sts	0x00ED, r25
    574e:	80 93 ec 00 	sts	0x00EC, r24
    5752:	80 91 ec 00 	lds	r24, 0x00EC
    5756:	90 91 ed 00 	lds	r25, 0x00ED
    575a:	22 e0       	ldi	r18, 0x02	; 2
    575c:	8f 3e       	cpi	r24, 0xEF	; 239
    575e:	92 07       	cpc	r25, r18
    5760:	08 f0       	brcs	.+2      	; 0x5764 <EntranceButton+0x136>
    5762:	76 cf       	rjmp	.-276    	; 0x5650 <EntranceButton+0x22>
	{
		TIM1_voidSetCmpARegValue(u16ServoCounter);
		_delay_ms(10);
	}
}
    5764:	2e 96       	adiw	r28, 0x0e	; 14
    5766:	0f b6       	in	r0, 0x3f	; 63
    5768:	f8 94       	cli
    576a:	de bf       	out	0x3e, r29	; 62
    576c:	0f be       	out	0x3f, r0	; 63
    576e:	cd bf       	out	0x3d, r28	; 61
    5770:	cf 91       	pop	r28
    5772:	df 91       	pop	r29
    5774:	08 95       	ret

00005776 <__mulsi3>:
    5776:	62 9f       	mul	r22, r18
    5778:	d0 01       	movw	r26, r0
    577a:	73 9f       	mul	r23, r19
    577c:	f0 01       	movw	r30, r0
    577e:	82 9f       	mul	r24, r18
    5780:	e0 0d       	add	r30, r0
    5782:	f1 1d       	adc	r31, r1
    5784:	64 9f       	mul	r22, r20
    5786:	e0 0d       	add	r30, r0
    5788:	f1 1d       	adc	r31, r1
    578a:	92 9f       	mul	r25, r18
    578c:	f0 0d       	add	r31, r0
    578e:	83 9f       	mul	r24, r19
    5790:	f0 0d       	add	r31, r0
    5792:	74 9f       	mul	r23, r20
    5794:	f0 0d       	add	r31, r0
    5796:	65 9f       	mul	r22, r21
    5798:	f0 0d       	add	r31, r0
    579a:	99 27       	eor	r25, r25
    579c:	72 9f       	mul	r23, r18
    579e:	b0 0d       	add	r27, r0
    57a0:	e1 1d       	adc	r30, r1
    57a2:	f9 1f       	adc	r31, r25
    57a4:	63 9f       	mul	r22, r19
    57a6:	b0 0d       	add	r27, r0
    57a8:	e1 1d       	adc	r30, r1
    57aa:	f9 1f       	adc	r31, r25
    57ac:	bd 01       	movw	r22, r26
    57ae:	cf 01       	movw	r24, r30
    57b0:	11 24       	eor	r1, r1
    57b2:	08 95       	ret

000057b4 <__udivmodhi4>:
    57b4:	aa 1b       	sub	r26, r26
    57b6:	bb 1b       	sub	r27, r27
    57b8:	51 e1       	ldi	r21, 0x11	; 17
    57ba:	07 c0       	rjmp	.+14     	; 0x57ca <__udivmodhi4_ep>

000057bc <__udivmodhi4_loop>:
    57bc:	aa 1f       	adc	r26, r26
    57be:	bb 1f       	adc	r27, r27
    57c0:	a6 17       	cp	r26, r22
    57c2:	b7 07       	cpc	r27, r23
    57c4:	10 f0       	brcs	.+4      	; 0x57ca <__udivmodhi4_ep>
    57c6:	a6 1b       	sub	r26, r22
    57c8:	b7 0b       	sbc	r27, r23

000057ca <__udivmodhi4_ep>:
    57ca:	88 1f       	adc	r24, r24
    57cc:	99 1f       	adc	r25, r25
    57ce:	5a 95       	dec	r21
    57d0:	a9 f7       	brne	.-22     	; 0x57bc <__udivmodhi4_loop>
    57d2:	80 95       	com	r24
    57d4:	90 95       	com	r25
    57d6:	bc 01       	movw	r22, r24
    57d8:	cd 01       	movw	r24, r26
    57da:	08 95       	ret

000057dc <__udivmodsi4>:
    57dc:	a1 e2       	ldi	r26, 0x21	; 33
    57de:	1a 2e       	mov	r1, r26
    57e0:	aa 1b       	sub	r26, r26
    57e2:	bb 1b       	sub	r27, r27
    57e4:	fd 01       	movw	r30, r26
    57e6:	0d c0       	rjmp	.+26     	; 0x5802 <__udivmodsi4_ep>

000057e8 <__udivmodsi4_loop>:
    57e8:	aa 1f       	adc	r26, r26
    57ea:	bb 1f       	adc	r27, r27
    57ec:	ee 1f       	adc	r30, r30
    57ee:	ff 1f       	adc	r31, r31
    57f0:	a2 17       	cp	r26, r18
    57f2:	b3 07       	cpc	r27, r19
    57f4:	e4 07       	cpc	r30, r20
    57f6:	f5 07       	cpc	r31, r21
    57f8:	20 f0       	brcs	.+8      	; 0x5802 <__udivmodsi4_ep>
    57fa:	a2 1b       	sub	r26, r18
    57fc:	b3 0b       	sbc	r27, r19
    57fe:	e4 0b       	sbc	r30, r20
    5800:	f5 0b       	sbc	r31, r21

00005802 <__udivmodsi4_ep>:
    5802:	66 1f       	adc	r22, r22
    5804:	77 1f       	adc	r23, r23
    5806:	88 1f       	adc	r24, r24
    5808:	99 1f       	adc	r25, r25
    580a:	1a 94       	dec	r1
    580c:	69 f7       	brne	.-38     	; 0x57e8 <__udivmodsi4_loop>
    580e:	60 95       	com	r22
    5810:	70 95       	com	r23
    5812:	80 95       	com	r24
    5814:	90 95       	com	r25
    5816:	9b 01       	movw	r18, r22
    5818:	ac 01       	movw	r20, r24
    581a:	bd 01       	movw	r22, r26
    581c:	cf 01       	movw	r24, r30
    581e:	08 95       	ret

00005820 <__prologue_saves__>:
    5820:	2f 92       	push	r2
    5822:	3f 92       	push	r3
    5824:	4f 92       	push	r4
    5826:	5f 92       	push	r5
    5828:	6f 92       	push	r6
    582a:	7f 92       	push	r7
    582c:	8f 92       	push	r8
    582e:	9f 92       	push	r9
    5830:	af 92       	push	r10
    5832:	bf 92       	push	r11
    5834:	cf 92       	push	r12
    5836:	df 92       	push	r13
    5838:	ef 92       	push	r14
    583a:	ff 92       	push	r15
    583c:	0f 93       	push	r16
    583e:	1f 93       	push	r17
    5840:	cf 93       	push	r28
    5842:	df 93       	push	r29
    5844:	cd b7       	in	r28, 0x3d	; 61
    5846:	de b7       	in	r29, 0x3e	; 62
    5848:	ca 1b       	sub	r28, r26
    584a:	db 0b       	sbc	r29, r27
    584c:	0f b6       	in	r0, 0x3f	; 63
    584e:	f8 94       	cli
    5850:	de bf       	out	0x3e, r29	; 62
    5852:	0f be       	out	0x3f, r0	; 63
    5854:	cd bf       	out	0x3d, r28	; 61
    5856:	09 94       	ijmp

00005858 <__epilogue_restores__>:
    5858:	2a 88       	ldd	r2, Y+18	; 0x12
    585a:	39 88       	ldd	r3, Y+17	; 0x11
    585c:	48 88       	ldd	r4, Y+16	; 0x10
    585e:	5f 84       	ldd	r5, Y+15	; 0x0f
    5860:	6e 84       	ldd	r6, Y+14	; 0x0e
    5862:	7d 84       	ldd	r7, Y+13	; 0x0d
    5864:	8c 84       	ldd	r8, Y+12	; 0x0c
    5866:	9b 84       	ldd	r9, Y+11	; 0x0b
    5868:	aa 84       	ldd	r10, Y+10	; 0x0a
    586a:	b9 84       	ldd	r11, Y+9	; 0x09
    586c:	c8 84       	ldd	r12, Y+8	; 0x08
    586e:	df 80       	ldd	r13, Y+7	; 0x07
    5870:	ee 80       	ldd	r14, Y+6	; 0x06
    5872:	fd 80       	ldd	r15, Y+5	; 0x05
    5874:	0c 81       	ldd	r16, Y+4	; 0x04
    5876:	1b 81       	ldd	r17, Y+3	; 0x03
    5878:	aa 81       	ldd	r26, Y+2	; 0x02
    587a:	b9 81       	ldd	r27, Y+1	; 0x01
    587c:	ce 0f       	add	r28, r30
    587e:	d1 1d       	adc	r29, r1
    5880:	0f b6       	in	r0, 0x3f	; 63
    5882:	f8 94       	cli
    5884:	de bf       	out	0x3e, r29	; 62
    5886:	0f be       	out	0x3f, r0	; 63
    5888:	cd bf       	out	0x3d, r28	; 61
    588a:	ed 01       	movw	r28, r26
    588c:	08 95       	ret

0000588e <_exit>:
    588e:	f8 94       	cli

00005890 <__stop_program>:
    5890:	ff cf       	rjmp	.-2      	; 0x5890 <__stop_program>
