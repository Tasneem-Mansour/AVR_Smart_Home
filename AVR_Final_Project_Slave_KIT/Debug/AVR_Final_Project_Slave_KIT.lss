
AVR_Final_Project_Slave_KIT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004000  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00004000  00004094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800096  00800096  000040ca  2**0
                  ALLOC
  3 .stab         000038a0  00000000  00000000  000040cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000114d  00000000  00000000  0000796c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00008ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00008c19  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000aded  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000beee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000ce70  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000cff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000d2b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000db40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__vector_1>
       8:	0c 94 28 1b 	jmp	0x3650	; 0x3650 <__vector_2>
       c:	0c 94 55 1b 	jmp	0x36aa	; 0x36aa <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 64 07 	jmp	0xec8	; 0xec8 <__vector_13>
      38:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__vector_14>
      3c:	0c 94 7f 07 	jmp	0xefe	; 0xefe <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 39       	cpi	r26, 0x9E	; 158
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <main>
      8a:	0c 94 fe 1f 	jmp	0x3ffc	; 0x3ffc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c7 1f 	jmp	0x3f8e	; 0x3f8e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d3 1f 	jmp	0x3fa6	; 0x3fa6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ef 1f 	jmp	0x3fde	; 0x3fde <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d3 1f 	jmp	0x3fa6	; 0x3fa6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ef 1f 	jmp	0x3fde	; 0x3fde <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c7 1f 	jmp	0x3f8e	; 0x3f8e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cf 1f 	jmp	0x3f9e	; 0x3f9e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 eb 1f 	jmp	0x3fd6	; 0x3fd6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d3 1f 	jmp	0x3fa6	; 0x3fa6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ef 1f 	jmp	0x3fde	; 0x3fde <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d3 1f 	jmp	0x3fa6	; 0x3fa6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ef 1f 	jmp	0x3fde	; 0x3fde <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d3 1f 	jmp	0x3fa6	; 0x3fa6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ef 1f 	jmp	0x3fde	; 0x3fde <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d7 1f 	jmp	0x3fae	; 0x3fae <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 f3 1f 	jmp	0x3fe6	; 0x3fe6 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <UART_voidInit>:
#include "util/delay.h"

volatile uint8 u8Global_Data;
volatile uint8 u8Global_Receive;

void UART_voidInit(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	uint8 u8Local_temp = 0;
     ca8:	19 82       	std	Y+1, r1	; 0x01

	/* enable RXCIE, RX Complete Interrupt Enable */
	SET_BIT(UCSRB, UCSRB_RXCIE);
     caa:	aa e2       	ldi	r26, 0x2A	; 42
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	ea e2       	ldi	r30, 0x2A	; 42
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	80 68       	ori	r24, 0x80	; 128
     cb6:	8c 93       	st	X, r24
	/* Enable UDRIE, Data Register Empty Interrupt Enable */
	SET_BIT(UCSRB, UCSRB_UDRIE);
     cb8:	aa e2       	ldi	r26, 0x2A	; 42
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	ea e2       	ldi	r30, 0x2A	; 42
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	80 62       	ori	r24, 0x20	; 32
     cc4:	8c 93       	st	X, r24

	/* Select 8-bit data (character size) */
	CLR_BIT(UCSRB, UCSRB_UCSZ2);
     cc6:	aa e2       	ldi	r26, 0x2A	; 42
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	ea e2       	ldi	r30, 0x2A	; 42
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	8b 7f       	andi	r24, 0xFB	; 251
     cd2:	8c 93       	st	X, r24

	/*************** Select UCSRC register ********************/
	SET_BIT(u8Local_temp, UCSRC_URSEL);
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	80 68       	ori	r24, 0x80	; 128
     cd8:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(u8Local_temp, UCSRC_UCSZ0);
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	82 60       	ori	r24, 0x02	; 2
     cde:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(u8Local_temp, UCSRC_UCSZ1);
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	84 60       	ori	r24, 0x04	; 4
     ce4:	89 83       	std	Y+1, r24	; 0x01

	/* Select UART mode */
	CLR_BIT(u8Local_temp, UCSRC_UMSEL);     //Asynchronous Operation
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	8f 7b       	andi	r24, 0xBF	; 191
     cea:	89 83       	std	Y+1, r24	; 0x01
	/* Select parity mode */				//disable parity bits
	CLR_BIT(u8Local_temp, UCSRC_UPM0);
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	8f 7e       	andi	r24, 0xEF	; 239
     cf0:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(u8Local_temp, UCSRC_UPM1);
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	8f 7d       	andi	r24, 0xDF	; 223
     cf6:	89 83       	std	Y+1, r24	; 0x01
	/* Select stop bit */
	CLR_BIT(u8Local_temp, UCSRC_USBS);      //1 stop bit
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	87 7f       	andi	r24, 0xF7	; 247
     cfc:	89 83       	std	Y+1, r24	; 0x01
	/**********************************************************/

	/* Select BaudRate = 9600 */
	UBRRL = BAUD_RATE;
     cfe:	e9 e2       	ldi	r30, 0x29	; 41
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	83 e3       	ldi	r24, 0x33	; 51
     d04:	80 83       	st	Z, r24

	/* Enable RXEN */
	SET_BIT(UCSRB, UCSRB_RXEN);
     d06:	aa e2       	ldi	r26, 0x2A	; 42
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	ea e2       	ldi	r30, 0x2A	; 42
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	80 61       	ori	r24, 0x10	; 16
     d12:	8c 93       	st	X, r24
	/* Enable TXEN */
	SET_BIT(UCSRB, UCSRB_TXEN);
     d14:	aa e2       	ldi	r26, 0x2A	; 42
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	ea e2       	ldi	r30, 0x2A	; 42
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	88 60       	ori	r24, 0x08	; 8
     d20:	8c 93       	st	X, r24

	/**********************************************************/
	UCSRC = u8Local_temp;
     d22:	e0 e4       	ldi	r30, 0x40	; 64
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	89 81       	ldd	r24, Y+1	; 0x01
     d28:	80 83       	st	Z, r24
}
     d2a:	0f 90       	pop	r0
     d2c:	cf 91       	pop	r28
     d2e:	df 91       	pop	r29
     d30:	08 95       	ret

00000d32 <UART_voidSendDataAsynch>:

void UART_voidSendDataAsynch(const uint8 u8DataCpy){
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	0f 92       	push	r0
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	89 83       	std	Y+1, r24	; 0x01
	u8Global_Data = u8DataCpy;
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	80 93 9d 00 	sts	0x009D, r24
	//UDR = u8DataCpy
}
     d44:	0f 90       	pop	r0
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <UART_voidSendDataSynch>:
void UART_voidSendDataSynch(const uint8 u8DataCpy){
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	0f 92       	push	r0
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	89 83       	std	Y+1, r24	; 0x01
	while ((UCSRA & 0x20) == 0x00);
     d58:	eb e2       	ldi	r30, 0x2B	; 43
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	88 2f       	mov	r24, r24
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	80 72       	andi	r24, 0x20	; 32
     d64:	90 70       	andi	r25, 0x00	; 0
     d66:	00 97       	sbiw	r24, 0x00	; 0
     d68:	b9 f3       	breq	.-18     	; 0xd58 <UART_voidSendDataSynch+0xc>
	UDR = u8DataCpy;
     d6a:	ec e2       	ldi	r30, 0x2C	; 44
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	80 83       	st	Z, r24
}
     d72:	0f 90       	pop	r0
     d74:	cf 91       	pop	r28
     d76:	df 91       	pop	r29
     d78:	08 95       	ret

00000d7a <UART_u8ReceiveData>:

uint8 UART_u8ReceiveData(void){
     d7a:	df 93       	push	r29
     d7c:	cf 93       	push	r28
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62

//	uint8 Result;
	// Wait until Reception Complete
	while((UCSRA & 0x80) == 0x00);
     d82:	eb e2       	ldi	r30, 0x2B	; 43
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	88 23       	and	r24, r24
     d8a:	dc f7       	brge	.-10     	; 0xd82 <UART_u8ReceiveData+0x8>
//	Result = UDR;
	return UDR;
     d8c:	ec e2       	ldi	r30, 0x2C	; 44
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z


}
     d92:	cf 91       	pop	r28
     d94:	df 91       	pop	r29
     d96:	08 95       	ret

00000d98 <UART_voidSendstring>:
void UART_voidSendstring(uint8 *ptr)
{
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	60 97       	sbiw	r28, 0x10	; 16
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	cd bf       	out	0x3d, r28	; 61
     dac:	98 8b       	std	Y+16, r25	; 0x10
     dae:	8f 87       	std	Y+15, r24	; 0x0f
     db0:	7c c0       	rjmp	.+248    	; 0xeaa <UART_voidSendstring+0x112>
	while(*ptr!=0)
	{
		UART_voidSendDataSynch(*ptr);
     db2:	ef 85       	ldd	r30, Y+15	; 0x0f
     db4:	f8 89       	ldd	r31, Y+16	; 0x10
     db6:	80 81       	ld	r24, Z
     db8:	0e 94 a6 06 	call	0xd4c	; 0xd4c <UART_voidSendDataSynch>
		ptr++;
     dbc:	8f 85       	ldd	r24, Y+15	; 0x0f
     dbe:	98 89       	ldd	r25, Y+16	; 0x10
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	98 8b       	std	Y+16, r25	; 0x10
     dc4:	8f 87       	std	Y+15, r24	; 0x0f
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	a8 ec       	ldi	r26, 0xC8	; 200
     dcc:	b2 e4       	ldi	r27, 0x42	; 66
     dce:	8b 87       	std	Y+11, r24	; 0x0b
     dd0:	9c 87       	std	Y+12, r25	; 0x0c
     dd2:	ad 87       	std	Y+13, r26	; 0x0d
     dd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dd6:	6b 85       	ldd	r22, Y+11	; 0x0b
     dd8:	7c 85       	ldd	r23, Y+12	; 0x0c
     dda:	8d 85       	ldd	r24, Y+13	; 0x0d
     ddc:	9e 85       	ldd	r25, Y+14	; 0x0e
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	4a ef       	ldi	r20, 0xFA	; 250
     de4:	54 e4       	ldi	r21, 0x44	; 68
     de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dea:	dc 01       	movw	r26, r24
     dec:	cb 01       	movw	r24, r22
     dee:	8f 83       	std	Y+7, r24	; 0x07
     df0:	98 87       	std	Y+8, r25	; 0x08
     df2:	a9 87       	std	Y+9, r26	; 0x09
     df4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     df6:	6f 81       	ldd	r22, Y+7	; 0x07
     df8:	78 85       	ldd	r23, Y+8	; 0x08
     dfa:	89 85       	ldd	r24, Y+9	; 0x09
     dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	40 e8       	ldi	r20, 0x80	; 128
     e04:	5f e3       	ldi	r21, 0x3F	; 63
     e06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e0a:	88 23       	and	r24, r24
     e0c:	2c f4       	brge	.+10     	; 0xe18 <UART_voidSendstring+0x80>
		__ticks = 1;
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	9e 83       	std	Y+6, r25	; 0x06
     e14:	8d 83       	std	Y+5, r24	; 0x05
     e16:	3f c0       	rjmp	.+126    	; 0xe96 <UART_voidSendstring+0xfe>
	else if (__tmp > 65535)
     e18:	6f 81       	ldd	r22, Y+7	; 0x07
     e1a:	78 85       	ldd	r23, Y+8	; 0x08
     e1c:	89 85       	ldd	r24, Y+9	; 0x09
     e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	3f ef       	ldi	r19, 0xFF	; 255
     e24:	4f e7       	ldi	r20, 0x7F	; 127
     e26:	57 e4       	ldi	r21, 0x47	; 71
     e28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e2c:	18 16       	cp	r1, r24
     e2e:	4c f5       	brge	.+82     	; 0xe82 <UART_voidSendstring+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e30:	6b 85       	ldd	r22, Y+11	; 0x0b
     e32:	7c 85       	ldd	r23, Y+12	; 0x0c
     e34:	8d 85       	ldd	r24, Y+13	; 0x0d
     e36:	9e 85       	ldd	r25, Y+14	; 0x0e
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e2       	ldi	r20, 0x20	; 32
     e3e:	51 e4       	ldi	r21, 0x41	; 65
     e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	bc 01       	movw	r22, r24
     e4a:	cd 01       	movw	r24, r26
     e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	9e 83       	std	Y+6, r25	; 0x06
     e56:	8d 83       	std	Y+5, r24	; 0x05
     e58:	0f c0       	rjmp	.+30     	; 0xe78 <UART_voidSendstring+0xe0>
     e5a:	88 ec       	ldi	r24, 0xC8	; 200
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	9c 83       	std	Y+4, r25	; 0x04
     e60:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	9c 81       	ldd	r25, Y+4	; 0x04
     e66:	01 97       	sbiw	r24, 0x01	; 1
     e68:	f1 f7       	brne	.-4      	; 0xe66 <UART_voidSendstring+0xce>
     e6a:	9c 83       	std	Y+4, r25	; 0x04
     e6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e6e:	8d 81       	ldd	r24, Y+5	; 0x05
     e70:	9e 81       	ldd	r25, Y+6	; 0x06
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	9e 83       	std	Y+6, r25	; 0x06
     e76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e78:	8d 81       	ldd	r24, Y+5	; 0x05
     e7a:	9e 81       	ldd	r25, Y+6	; 0x06
     e7c:	00 97       	sbiw	r24, 0x00	; 0
     e7e:	69 f7       	brne	.-38     	; 0xe5a <UART_voidSendstring+0xc2>
     e80:	14 c0       	rjmp	.+40     	; 0xeaa <UART_voidSendstring+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e82:	6f 81       	ldd	r22, Y+7	; 0x07
     e84:	78 85       	ldd	r23, Y+8	; 0x08
     e86:	89 85       	ldd	r24, Y+9	; 0x09
     e88:	9a 85       	ldd	r25, Y+10	; 0x0a
     e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	9e 83       	std	Y+6, r25	; 0x06
     e94:	8d 83       	std	Y+5, r24	; 0x05
     e96:	8d 81       	ldd	r24, Y+5	; 0x05
     e98:	9e 81       	ldd	r25, Y+6	; 0x06
     e9a:	9a 83       	std	Y+2, r25	; 0x02
     e9c:	89 83       	std	Y+1, r24	; 0x01
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	9a 81       	ldd	r25, Y+2	; 0x02
     ea2:	01 97       	sbiw	r24, 0x01	; 1
     ea4:	f1 f7       	brne	.-4      	; 0xea2 <UART_voidSendstring+0x10a>
     ea6:	9a 83       	std	Y+2, r25	; 0x02
     ea8:	89 83       	std	Y+1, r24	; 0x01


}
void UART_voidSendstring(uint8 *ptr)
{
	while(*ptr!=0)
     eaa:	ef 85       	ldd	r30, Y+15	; 0x0f
     eac:	f8 89       	ldd	r31, Y+16	; 0x10
     eae:	80 81       	ld	r24, Z
     eb0:	88 23       	and	r24, r24
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <UART_voidSendstring+0x11e>
     eb4:	7e cf       	rjmp	.-260    	; 0xdb2 <UART_voidSendstring+0x1a>
	{
		UART_voidSendDataSynch(*ptr);
		ptr++;
		_delay_ms(100);
	}
}
     eb6:	60 96       	adiw	r28, 0x10	; 16
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	de bf       	out	0x3e, r29	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	cd bf       	out	0x3d, r28	; 61
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	08 95       	ret

00000ec8 <__vector_13>:

// __attribute__ -> communicate with LINKER, to not to optimize it
//  USART, RXC, Rx Complete
void __vector_13 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_13 (void)
{
     ec8:	1f 92       	push	r1
     eca:	0f 92       	push	r0
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	0f 92       	push	r0
     ed0:	11 24       	eor	r1, r1
     ed2:	8f 93       	push	r24
     ed4:	ef 93       	push	r30
     ed6:	ff 93       	push	r31
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
	UDR = u8Global_Data;
     ee0:	ec e2       	ldi	r30, 0x2C	; 44
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 91 9d 00 	lds	r24, 0x009D
     ee8:	80 83       	st	Z, r24
}
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	ff 91       	pop	r31
     ef0:	ef 91       	pop	r30
     ef2:	8f 91       	pop	r24
     ef4:	0f 90       	pop	r0
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	0f 90       	pop	r0
     efa:	1f 90       	pop	r1
     efc:	18 95       	reti

00000efe <__vector_15>:

//USART, TXC, Tx Complete
void __vector_15 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_15 (void)
{
     efe:	1f 92       	push	r1
     f00:	0f 92       	push	r0
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	0f 92       	push	r0
     f06:	11 24       	eor	r1, r1
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62

}
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	0f 90       	pop	r0
     f1a:	1f 90       	pop	r1
     f1c:	18 95       	reti

00000f1e <__vector_14>:

//USART, UDRE, Data Register Empty
void __vector_14 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_14 (void)
{
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	0f 92       	push	r0
     f26:	11 24       	eor	r1, r1
     f28:	2f 93       	push	r18
     f2a:	3f 93       	push	r19
     f2c:	4f 93       	push	r20
     f2e:	5f 93       	push	r21
     f30:	6f 93       	push	r22
     f32:	7f 93       	push	r23
     f34:	8f 93       	push	r24
     f36:	9f 93       	push	r25
     f38:	af 93       	push	r26
     f3a:	bf 93       	push	r27
     f3c:	ef 93       	push	r30
     f3e:	ff 93       	push	r31
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
	UART_voidSendDataAsynch(u8Global_Data);
     f48:	80 91 9d 00 	lds	r24, 0x009D
     f4c:	0e 94 99 06 	call	0xd32	; 0xd32 <UART_voidSendDataAsynch>
}
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	ff 91       	pop	r31
     f56:	ef 91       	pop	r30
     f58:	bf 91       	pop	r27
     f5a:	af 91       	pop	r26
     f5c:	9f 91       	pop	r25
     f5e:	8f 91       	pop	r24
     f60:	7f 91       	pop	r23
     f62:	6f 91       	pop	r22
     f64:	5f 91       	pop	r21
     f66:	4f 91       	pop	r20
     f68:	3f 91       	pop	r19
     f6a:	2f 91       	pop	r18
     f6c:	0f 90       	pop	r0
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	0f 90       	pop	r0
     f72:	1f 90       	pop	r1
     f74:	18 95       	reti

00000f76 <SPI_voidMasterInit>:
#include "SPI_interface.h"
#include "SPI_private.h"
#include "SPI_config.h"


void SPI_voidMasterInit(void){
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
	/******Select data order*******/						  // default
	CLR_BIT(SPCR, SPCR_DORD);
     f7e:	ad e2       	ldi	r26, 0x2D	; 45
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	ed e2       	ldi	r30, 0x2D	; 45
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	8f 7d       	andi	r24, 0xDF	; 223
     f8a:	8c 93       	st	X, r24
	/******Select master******/
	SET_BIT(SPCR, SPCR_MSTR);
     f8c:	ad e2       	ldi	r26, 0x2D	; 45
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	ed e2       	ldi	r30, 0x2D	; 45
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	80 61       	ori	r24, 0x10	; 16
     f98:	8c 93       	st	X, r24
	/******Clock Polarity -> leading edge -> rising ******/	  // default
	CLR_BIT(SPCR, SPCR_CPOL);
     f9a:	ad e2       	ldi	r26, 0x2D	; 45
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	ed e2       	ldi	r30, 0x2D	; 45
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	87 7f       	andi	r24, 0xF7	; 247
     fa6:	8c 93       	st	X, r24
	/******Clock Phase    -> sample first ******/			  // default
	CLR_BIT(SPCR, SPCR_CPHA);
     fa8:	ad e2       	ldi	r26, 0x2D	; 45
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	ed e2       	ldi	r30, 0x2D	; 45
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	8b 7f       	andi	r24, 0xFB	; 251
     fb4:	8c 93       	st	X, r24
	/******Select SPI clock rate******/
	SET_BIT(SPCR, SPCR_SPR0);
     fb6:	ad e2       	ldi	r26, 0x2D	; 45
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	ed e2       	ldi	r30, 0x2D	; 45
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	81 60       	ori	r24, 0x01	; 1
     fc2:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPCR_SPR1);
     fc4:	ad e2       	ldi	r26, 0x2D	; 45
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	ed e2       	ldi	r30, 0x2D	; 45
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	8d 7f       	andi	r24, 0xFD	; 253
     fd0:	8c 93       	st	X, r24
	CLR_BIT(SPSR, SPSR_SPI2X);
     fd2:	ae e2       	ldi	r26, 0x2E	; 46
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	ee e2       	ldi	r30, 0x2E	; 46
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	8e 7f       	andi	r24, 0xFE	; 254
     fde:	8c 93       	st	X, r24

	/******Enable SPI******/
	SET_BIT(SPCR, SPCR_SPE);
     fe0:	ad e2       	ldi	r26, 0x2D	; 45
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	ed e2       	ldi	r30, 0x2D	; 45
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	80 64       	ori	r24, 0x40	; 64
     fec:	8c 93       	st	X, r24
}
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <SPI_voidSlaveInit>:
void SPI_voidSlaveInit(void){
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
	/******Select data order******/
	CLR_BIT(SPCR, SPCR_DORD);								  // default
     ffc:	ad e2       	ldi	r26, 0x2D	; 45
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	ed e2       	ldi	r30, 0x2D	; 45
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	8f 7d       	andi	r24, 0xDF	; 223
    1008:	8c 93       	st	X, r24
	/******Select slave******/
	CLR_BIT(SPCR, SPCR_MSTR);
    100a:	ad e2       	ldi	r26, 0x2D	; 45
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	ed e2       	ldi	r30, 0x2D	; 45
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	8f 7e       	andi	r24, 0xEF	; 239
    1016:	8c 93       	st	X, r24
	/******Clock Polarity -> leading edge -> rising ******/   // default
	CLR_BIT(SPCR, SPCR_CPOL);
    1018:	ad e2       	ldi	r26, 0x2D	; 45
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	ed e2       	ldi	r30, 0x2D	; 45
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	87 7f       	andi	r24, 0xF7	; 247
    1024:	8c 93       	st	X, r24
	/******Clock Phase    -> sample first ******/             // default
	CLR_BIT(SPCR, SPCR_CPHA);
    1026:	ad e2       	ldi	r26, 0x2D	; 45
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	ed e2       	ldi	r30, 0x2D	; 45
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	8b 7f       	andi	r24, 0xFB	; 251
    1032:	8c 93       	st	X, r24

	/******Enable SPI******/
	SET_BIT(SPCR, SPCR_SPE);
    1034:	ad e2       	ldi	r26, 0x2D	; 45
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	ed e2       	ldi	r30, 0x2D	; 45
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	80 64       	ori	r24, 0x40	; 64
    1040:	8c 93       	st	X, r24
}
    1042:	cf 91       	pop	r28
    1044:	df 91       	pop	r29
    1046:	08 95       	ret

00001048 <SPI_u8TransceiverDataSynch>:

uint8 SPI_u8TransceiverDataSynch(uint8 u8DataCpy){
    1048:	df 93       	push	r29
    104a:	cf 93       	push	r28
    104c:	0f 92       	push	r0
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	89 83       	std	Y+1, r24	; 0x01
	/*****Send Data****/
	SPDR = u8DataCpy;
    1054:	ef e2       	ldi	r30, 0x2F	; 47
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	80 83       	st	Z, r24
	/*****wait until data received****/
	while(GET_BIT(SPSR, SPSR_SPIF)==0);
    105c:	ee e2       	ldi	r30, 0x2E	; 46
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	88 23       	and	r24, r24
    1064:	dc f7       	brge	.-10     	; 0x105c <SPI_u8TransceiverDataSynch+0x14>

	return SPDR;
    1066:	ef e2       	ldi	r30, 0x2F	; 47
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
}
    106c:	0f 90       	pop	r0
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <LCD_voidInit>:
#include "../DIO/DIO_interface.h"
#include "LCD_interface.h"
//#include "../Password/Password_interface.h"
#include "util/delay.h"

void LCD_voidInit(void){
    1074:	0f 93       	push	r16
    1076:	1f 93       	push	r17
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	c4 55       	subi	r28, 0x54	; 84
    1082:	d0 40       	sbci	r29, 0x00	; 0
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	cd bf       	out	0x3d, r28	; 61
	/* Pin Direction*/
	DIO_voidWritePort(lcd_DATAPORT   , DIO_OUTPUT);
    108e:	84 e0       	ldi	r24, 0x04	; 4
    1090:	61 e0       	ldi	r22, 0x01	; 1
    1092:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <DIO_voidWritePort>
	DIO_voidWritePin (lcd_CONTROLPORT, lcd_RSPIN, DIO_OUTPUT);
    1096:	83 e0       	ldi	r24, 0x03	; 3
    1098:	62 e0       	ldi	r22, 0x02	; 2
    109a:	41 e0       	ldi	r20, 0x01	; 1
    109c:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>
	//DIO_voidWritePin (lcd_CONTROLPORT, lcd_RWPIN, DIO_OUTPUT);
	DIO_voidWritePin (lcd_CONTROLPORT, lcd_EPIN , DIO_OUTPUT);
    10a0:	83 e0       	ldi	r24, 0x03	; 3
    10a2:	63 e0       	ldi	r22, 0x03	; 3
    10a4:	41 e0       	ldi	r20, 0x01	; 1
    10a6:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>
	/* Make Enable Low*/
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    10aa:	83 e0       	ldi	r24, 0x03	; 3
    10ac:	63 e0       	ldi	r22, 0x03	; 3
    10ae:	40 e0       	ldi	r20, 0x00	; 0
    10b0:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>
    10b4:	fe 01       	movw	r30, r28
    10b6:	ef 5a       	subi	r30, 0xAF	; 175
    10b8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	a0 ef       	ldi	r26, 0xF0	; 240
    10c0:	b1 e4       	ldi	r27, 0x41	; 65
    10c2:	80 83       	st	Z, r24
    10c4:	91 83       	std	Z+1, r25	; 0x01
    10c6:	a2 83       	std	Z+2, r26	; 0x02
    10c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ca:	8e 01       	movw	r16, r28
    10cc:	03 5b       	subi	r16, 0xB3	; 179
    10ce:	1f 4f       	sbci	r17, 0xFF	; 255
    10d0:	fe 01       	movw	r30, r28
    10d2:	ef 5a       	subi	r30, 0xAF	; 175
    10d4:	ff 4f       	sbci	r31, 0xFF	; 255
    10d6:	60 81       	ld	r22, Z
    10d8:	71 81       	ldd	r23, Z+1	; 0x01
    10da:	82 81       	ldd	r24, Z+2	; 0x02
    10dc:	93 81       	ldd	r25, Z+3	; 0x03
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	4a ef       	ldi	r20, 0xFA	; 250
    10e4:	54 e4       	ldi	r21, 0x44	; 68
    10e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	f8 01       	movw	r30, r16
    10f0:	80 83       	st	Z, r24
    10f2:	91 83       	std	Z+1, r25	; 0x01
    10f4:	a2 83       	std	Z+2, r26	; 0x02
    10f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10f8:	fe 01       	movw	r30, r28
    10fa:	e3 5b       	subi	r30, 0xB3	; 179
    10fc:	ff 4f       	sbci	r31, 0xFF	; 255
    10fe:	60 81       	ld	r22, Z
    1100:	71 81       	ldd	r23, Z+1	; 0x01
    1102:	82 81       	ldd	r24, Z+2	; 0x02
    1104:	93 81       	ldd	r25, Z+3	; 0x03
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	40 e8       	ldi	r20, 0x80	; 128
    110c:	5f e3       	ldi	r21, 0x3F	; 63
    110e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1112:	88 23       	and	r24, r24
    1114:	44 f4       	brge	.+16     	; 0x1126 <LCD_voidInit+0xb2>
		__ticks = 1;
    1116:	fe 01       	movw	r30, r28
    1118:	e5 5b       	subi	r30, 0xB5	; 181
    111a:	ff 4f       	sbci	r31, 0xFF	; 255
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	91 83       	std	Z+1, r25	; 0x01
    1122:	80 83       	st	Z, r24
    1124:	64 c0       	rjmp	.+200    	; 0x11ee <LCD_voidInit+0x17a>
	else if (__tmp > 65535)
    1126:	fe 01       	movw	r30, r28
    1128:	e3 5b       	subi	r30, 0xB3	; 179
    112a:	ff 4f       	sbci	r31, 0xFF	; 255
    112c:	60 81       	ld	r22, Z
    112e:	71 81       	ldd	r23, Z+1	; 0x01
    1130:	82 81       	ldd	r24, Z+2	; 0x02
    1132:	93 81       	ldd	r25, Z+3	; 0x03
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	3f ef       	ldi	r19, 0xFF	; 255
    1138:	4f e7       	ldi	r20, 0x7F	; 127
    113a:	57 e4       	ldi	r21, 0x47	; 71
    113c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1140:	18 16       	cp	r1, r24
    1142:	0c f0       	brlt	.+2      	; 0x1146 <LCD_voidInit+0xd2>
    1144:	43 c0       	rjmp	.+134    	; 0x11cc <LCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1146:	fe 01       	movw	r30, r28
    1148:	ef 5a       	subi	r30, 0xAF	; 175
    114a:	ff 4f       	sbci	r31, 0xFF	; 255
    114c:	60 81       	ld	r22, Z
    114e:	71 81       	ldd	r23, Z+1	; 0x01
    1150:	82 81       	ldd	r24, Z+2	; 0x02
    1152:	93 81       	ldd	r25, Z+3	; 0x03
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e2       	ldi	r20, 0x20	; 32
    115a:	51 e4       	ldi	r21, 0x41	; 65
    115c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	8e 01       	movw	r16, r28
    1166:	05 5b       	subi	r16, 0xB5	; 181
    1168:	1f 4f       	sbci	r17, 0xFF	; 255
    116a:	bc 01       	movw	r22, r24
    116c:	cd 01       	movw	r24, r26
    116e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1172:	dc 01       	movw	r26, r24
    1174:	cb 01       	movw	r24, r22
    1176:	f8 01       	movw	r30, r16
    1178:	91 83       	std	Z+1, r25	; 0x01
    117a:	80 83       	st	Z, r24
    117c:	1f c0       	rjmp	.+62     	; 0x11bc <LCD_voidInit+0x148>
    117e:	fe 01       	movw	r30, r28
    1180:	e7 5b       	subi	r30, 0xB7	; 183
    1182:	ff 4f       	sbci	r31, 0xFF	; 255
    1184:	88 ec       	ldi	r24, 0xC8	; 200
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	91 83       	std	Z+1, r25	; 0x01
    118a:	80 83       	st	Z, r24
    118c:	fe 01       	movw	r30, r28
    118e:	e7 5b       	subi	r30, 0xB7	; 183
    1190:	ff 4f       	sbci	r31, 0xFF	; 255
    1192:	80 81       	ld	r24, Z
    1194:	91 81       	ldd	r25, Z+1	; 0x01
    1196:	01 97       	sbiw	r24, 0x01	; 1
    1198:	f1 f7       	brne	.-4      	; 0x1196 <LCD_voidInit+0x122>
    119a:	fe 01       	movw	r30, r28
    119c:	e7 5b       	subi	r30, 0xB7	; 183
    119e:	ff 4f       	sbci	r31, 0xFF	; 255
    11a0:	91 83       	std	Z+1, r25	; 0x01
    11a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a4:	de 01       	movw	r26, r28
    11a6:	a5 5b       	subi	r26, 0xB5	; 181
    11a8:	bf 4f       	sbci	r27, 0xFF	; 255
    11aa:	fe 01       	movw	r30, r28
    11ac:	e5 5b       	subi	r30, 0xB5	; 181
    11ae:	ff 4f       	sbci	r31, 0xFF	; 255
    11b0:	80 81       	ld	r24, Z
    11b2:	91 81       	ldd	r25, Z+1	; 0x01
    11b4:	01 97       	sbiw	r24, 0x01	; 1
    11b6:	11 96       	adiw	r26, 0x01	; 1
    11b8:	9c 93       	st	X, r25
    11ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11bc:	fe 01       	movw	r30, r28
    11be:	e5 5b       	subi	r30, 0xB5	; 181
    11c0:	ff 4f       	sbci	r31, 0xFF	; 255
    11c2:	80 81       	ld	r24, Z
    11c4:	91 81       	ldd	r25, Z+1	; 0x01
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	d1 f6       	brne	.-76     	; 0x117e <LCD_voidInit+0x10a>
    11ca:	27 c0       	rjmp	.+78     	; 0x121a <LCD_voidInit+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11cc:	8e 01       	movw	r16, r28
    11ce:	05 5b       	subi	r16, 0xB5	; 181
    11d0:	1f 4f       	sbci	r17, 0xFF	; 255
    11d2:	fe 01       	movw	r30, r28
    11d4:	e3 5b       	subi	r30, 0xB3	; 179
    11d6:	ff 4f       	sbci	r31, 0xFF	; 255
    11d8:	60 81       	ld	r22, Z
    11da:	71 81       	ldd	r23, Z+1	; 0x01
    11dc:	82 81       	ldd	r24, Z+2	; 0x02
    11de:	93 81       	ldd	r25, Z+3	; 0x03
    11e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	f8 01       	movw	r30, r16
    11ea:	91 83       	std	Z+1, r25	; 0x01
    11ec:	80 83       	st	Z, r24
    11ee:	de 01       	movw	r26, r28
    11f0:	a9 5b       	subi	r26, 0xB9	; 185
    11f2:	bf 4f       	sbci	r27, 0xFF	; 255
    11f4:	fe 01       	movw	r30, r28
    11f6:	e5 5b       	subi	r30, 0xB5	; 181
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	80 81       	ld	r24, Z
    11fc:	91 81       	ldd	r25, Z+1	; 0x01
    11fe:	8d 93       	st	X+, r24
    1200:	9c 93       	st	X, r25
    1202:	fe 01       	movw	r30, r28
    1204:	e9 5b       	subi	r30, 0xB9	; 185
    1206:	ff 4f       	sbci	r31, 0xFF	; 255
    1208:	80 81       	ld	r24, Z
    120a:	91 81       	ldd	r25, Z+1	; 0x01
    120c:	01 97       	sbiw	r24, 0x01	; 1
    120e:	f1 f7       	brne	.-4      	; 0x120c <LCD_voidInit+0x198>
    1210:	fe 01       	movw	r30, r28
    1212:	e9 5b       	subi	r30, 0xB9	; 185
    1214:	ff 4f       	sbci	r31, 0xFF	; 255
    1216:	91 83       	std	Z+1, r25	; 0x01
    1218:	80 83       	st	Z, r24

	_delay_ms(30);
	LCD_voidSendCommand(lcd_Home);
    121a:	82 e0       	ldi	r24, 0x02	; 2
    121c:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCommand>
    1220:	fe 01       	movw	r30, r28
    1222:	ed 5b       	subi	r30, 0xBD	; 189
    1224:	ff 4f       	sbci	r31, 0xFF	; 255
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	a0 ea       	ldi	r26, 0xA0	; 160
    122c:	b0 e4       	ldi	r27, 0x40	; 64
    122e:	80 83       	st	Z, r24
    1230:	91 83       	std	Z+1, r25	; 0x01
    1232:	a2 83       	std	Z+2, r26	; 0x02
    1234:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1236:	8e 01       	movw	r16, r28
    1238:	01 5c       	subi	r16, 0xC1	; 193
    123a:	1f 4f       	sbci	r17, 0xFF	; 255
    123c:	fe 01       	movw	r30, r28
    123e:	ed 5b       	subi	r30, 0xBD	; 189
    1240:	ff 4f       	sbci	r31, 0xFF	; 255
    1242:	60 81       	ld	r22, Z
    1244:	71 81       	ldd	r23, Z+1	; 0x01
    1246:	82 81       	ldd	r24, Z+2	; 0x02
    1248:	93 81       	ldd	r25, Z+3	; 0x03
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	4a ef       	ldi	r20, 0xFA	; 250
    1250:	54 e4       	ldi	r21, 0x44	; 68
    1252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1256:	dc 01       	movw	r26, r24
    1258:	cb 01       	movw	r24, r22
    125a:	f8 01       	movw	r30, r16
    125c:	80 83       	st	Z, r24
    125e:	91 83       	std	Z+1, r25	; 0x01
    1260:	a2 83       	std	Z+2, r26	; 0x02
    1262:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1264:	fe 01       	movw	r30, r28
    1266:	ff 96       	adiw	r30, 0x3f	; 63
    1268:	60 81       	ld	r22, Z
    126a:	71 81       	ldd	r23, Z+1	; 0x01
    126c:	82 81       	ldd	r24, Z+2	; 0x02
    126e:	93 81       	ldd	r25, Z+3	; 0x03
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	40 e8       	ldi	r20, 0x80	; 128
    1276:	5f e3       	ldi	r21, 0x3F	; 63
    1278:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    127c:	88 23       	and	r24, r24
    127e:	2c f4       	brge	.+10     	; 0x128a <LCD_voidInit+0x216>
		__ticks = 1;
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	9e af       	std	Y+62, r25	; 0x3e
    1286:	8d af       	std	Y+61, r24	; 0x3d
    1288:	46 c0       	rjmp	.+140    	; 0x1316 <LCD_voidInit+0x2a2>
	else if (__tmp > 65535)
    128a:	fe 01       	movw	r30, r28
    128c:	ff 96       	adiw	r30, 0x3f	; 63
    128e:	60 81       	ld	r22, Z
    1290:	71 81       	ldd	r23, Z+1	; 0x01
    1292:	82 81       	ldd	r24, Z+2	; 0x02
    1294:	93 81       	ldd	r25, Z+3	; 0x03
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	3f ef       	ldi	r19, 0xFF	; 255
    129a:	4f e7       	ldi	r20, 0x7F	; 127
    129c:	57 e4       	ldi	r21, 0x47	; 71
    129e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12a2:	18 16       	cp	r1, r24
    12a4:	64 f5       	brge	.+88     	; 0x12fe <LCD_voidInit+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12a6:	fe 01       	movw	r30, r28
    12a8:	ed 5b       	subi	r30, 0xBD	; 189
    12aa:	ff 4f       	sbci	r31, 0xFF	; 255
    12ac:	60 81       	ld	r22, Z
    12ae:	71 81       	ldd	r23, Z+1	; 0x01
    12b0:	82 81       	ldd	r24, Z+2	; 0x02
    12b2:	93 81       	ldd	r25, Z+3	; 0x03
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	40 e2       	ldi	r20, 0x20	; 32
    12ba:	51 e4       	ldi	r21, 0x41	; 65
    12bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	bc 01       	movw	r22, r24
    12c6:	cd 01       	movw	r24, r26
    12c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12cc:	dc 01       	movw	r26, r24
    12ce:	cb 01       	movw	r24, r22
    12d0:	9e af       	std	Y+62, r25	; 0x3e
    12d2:	8d af       	std	Y+61, r24	; 0x3d
    12d4:	0f c0       	rjmp	.+30     	; 0x12f4 <LCD_voidInit+0x280>
    12d6:	88 ec       	ldi	r24, 0xC8	; 200
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	9c af       	std	Y+60, r25	; 0x3c
    12dc:	8b af       	std	Y+59, r24	; 0x3b
    12de:	8b ad       	ldd	r24, Y+59	; 0x3b
    12e0:	9c ad       	ldd	r25, Y+60	; 0x3c
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	f1 f7       	brne	.-4      	; 0x12e2 <LCD_voidInit+0x26e>
    12e6:	9c af       	std	Y+60, r25	; 0x3c
    12e8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    12ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    12ee:	01 97       	sbiw	r24, 0x01	; 1
    12f0:	9e af       	std	Y+62, r25	; 0x3e
    12f2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    12f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	69 f7       	brne	.-38     	; 0x12d6 <LCD_voidInit+0x262>
    12fc:	16 c0       	rjmp	.+44     	; 0x132a <LCD_voidInit+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12fe:	fe 01       	movw	r30, r28
    1300:	ff 96       	adiw	r30, 0x3f	; 63
    1302:	60 81       	ld	r22, Z
    1304:	71 81       	ldd	r23, Z+1	; 0x01
    1306:	82 81       	ldd	r24, Z+2	; 0x02
    1308:	93 81       	ldd	r25, Z+3	; 0x03
    130a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	9e af       	std	Y+62, r25	; 0x3e
    1314:	8d af       	std	Y+61, r24	; 0x3d
    1316:	8d ad       	ldd	r24, Y+61	; 0x3d
    1318:	9e ad       	ldd	r25, Y+62	; 0x3e
    131a:	9a af       	std	Y+58, r25	; 0x3a
    131c:	89 af       	std	Y+57, r24	; 0x39
    131e:	89 ad       	ldd	r24, Y+57	; 0x39
    1320:	9a ad       	ldd	r25, Y+58	; 0x3a
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	f1 f7       	brne	.-4      	; 0x1322 <LCD_voidInit+0x2ae>
    1326:	9a af       	std	Y+58, r25	; 0x3a
    1328:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);
	LCD_voidSendCommand(lcd_FunctionSet8bit);
    132a:	88 e3       	ldi	r24, 0x38	; 56
    132c:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCommand>
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	a0 ea       	ldi	r26, 0xA0	; 160
    1336:	b0 e4       	ldi	r27, 0x40	; 64
    1338:	8d ab       	std	Y+53, r24	; 0x35
    133a:	9e ab       	std	Y+54, r25	; 0x36
    133c:	af ab       	std	Y+55, r26	; 0x37
    133e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1340:	6d a9       	ldd	r22, Y+53	; 0x35
    1342:	7e a9       	ldd	r23, Y+54	; 0x36
    1344:	8f a9       	ldd	r24, Y+55	; 0x37
    1346:	98 ad       	ldd	r25, Y+56	; 0x38
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	4a ef       	ldi	r20, 0xFA	; 250
    134e:	54 e4       	ldi	r21, 0x44	; 68
    1350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	89 ab       	std	Y+49, r24	; 0x31
    135a:	9a ab       	std	Y+50, r25	; 0x32
    135c:	ab ab       	std	Y+51, r26	; 0x33
    135e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1360:	69 a9       	ldd	r22, Y+49	; 0x31
    1362:	7a a9       	ldd	r23, Y+50	; 0x32
    1364:	8b a9       	ldd	r24, Y+51	; 0x33
    1366:	9c a9       	ldd	r25, Y+52	; 0x34
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 e8       	ldi	r20, 0x80	; 128
    136e:	5f e3       	ldi	r21, 0x3F	; 63
    1370:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1374:	88 23       	and	r24, r24
    1376:	2c f4       	brge	.+10     	; 0x1382 <LCD_voidInit+0x30e>
		__ticks = 1;
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	98 ab       	std	Y+48, r25	; 0x30
    137e:	8f a7       	std	Y+47, r24	; 0x2f
    1380:	3f c0       	rjmp	.+126    	; 0x1400 <LCD_voidInit+0x38c>
	else if (__tmp > 65535)
    1382:	69 a9       	ldd	r22, Y+49	; 0x31
    1384:	7a a9       	ldd	r23, Y+50	; 0x32
    1386:	8b a9       	ldd	r24, Y+51	; 0x33
    1388:	9c a9       	ldd	r25, Y+52	; 0x34
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	3f ef       	ldi	r19, 0xFF	; 255
    138e:	4f e7       	ldi	r20, 0x7F	; 127
    1390:	57 e4       	ldi	r21, 0x47	; 71
    1392:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1396:	18 16       	cp	r1, r24
    1398:	4c f5       	brge	.+82     	; 0x13ec <LCD_voidInit+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    139a:	6d a9       	ldd	r22, Y+53	; 0x35
    139c:	7e a9       	ldd	r23, Y+54	; 0x36
    139e:	8f a9       	ldd	r24, Y+55	; 0x37
    13a0:	98 ad       	ldd	r25, Y+56	; 0x38
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	40 e2       	ldi	r20, 0x20	; 32
    13a8:	51 e4       	ldi	r21, 0x41	; 65
    13aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	bc 01       	movw	r22, r24
    13b4:	cd 01       	movw	r24, r26
    13b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	98 ab       	std	Y+48, r25	; 0x30
    13c0:	8f a7       	std	Y+47, r24	; 0x2f
    13c2:	0f c0       	rjmp	.+30     	; 0x13e2 <LCD_voidInit+0x36e>
    13c4:	88 ec       	ldi	r24, 0xC8	; 200
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	9e a7       	std	Y+46, r25	; 0x2e
    13ca:	8d a7       	std	Y+45, r24	; 0x2d
    13cc:	8d a5       	ldd	r24, Y+45	; 0x2d
    13ce:	9e a5       	ldd	r25, Y+46	; 0x2e
    13d0:	01 97       	sbiw	r24, 0x01	; 1
    13d2:	f1 f7       	brne	.-4      	; 0x13d0 <LCD_voidInit+0x35c>
    13d4:	9e a7       	std	Y+46, r25	; 0x2e
    13d6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    13da:	98 a9       	ldd	r25, Y+48	; 0x30
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	98 ab       	std	Y+48, r25	; 0x30
    13e0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    13e4:	98 a9       	ldd	r25, Y+48	; 0x30
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	69 f7       	brne	.-38     	; 0x13c4 <LCD_voidInit+0x350>
    13ea:	14 c0       	rjmp	.+40     	; 0x1414 <LCD_voidInit+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ec:	69 a9       	ldd	r22, Y+49	; 0x31
    13ee:	7a a9       	ldd	r23, Y+50	; 0x32
    13f0:	8b a9       	ldd	r24, Y+51	; 0x33
    13f2:	9c a9       	ldd	r25, Y+52	; 0x34
    13f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	98 ab       	std	Y+48, r25	; 0x30
    13fe:	8f a7       	std	Y+47, r24	; 0x2f
    1400:	8f a5       	ldd	r24, Y+47	; 0x2f
    1402:	98 a9       	ldd	r25, Y+48	; 0x30
    1404:	9c a7       	std	Y+44, r25	; 0x2c
    1406:	8b a7       	std	Y+43, r24	; 0x2b
    1408:	8b a5       	ldd	r24, Y+43	; 0x2b
    140a:	9c a5       	ldd	r25, Y+44	; 0x2c
    140c:	01 97       	sbiw	r24, 0x01	; 1
    140e:	f1 f7       	brne	.-4      	; 0x140c <LCD_voidInit+0x398>
    1410:	9c a7       	std	Y+44, r25	; 0x2c
    1412:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	LCD_voidSendCommand(lcd_DisplayOn);
    1414:	8c e0       	ldi	r24, 0x0C	; 12
    1416:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCommand>
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	a0 ea       	ldi	r26, 0xA0	; 160
    1420:	b0 e4       	ldi	r27, 0x40	; 64
    1422:	8f a3       	std	Y+39, r24	; 0x27
    1424:	98 a7       	std	Y+40, r25	; 0x28
    1426:	a9 a7       	std	Y+41, r26	; 0x29
    1428:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    142a:	6f a1       	ldd	r22, Y+39	; 0x27
    142c:	78 a5       	ldd	r23, Y+40	; 0x28
    142e:	89 a5       	ldd	r24, Y+41	; 0x29
    1430:	9a a5       	ldd	r25, Y+42	; 0x2a
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	4a ef       	ldi	r20, 0xFA	; 250
    1438:	54 e4       	ldi	r21, 0x44	; 68
    143a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	8b a3       	std	Y+35, r24	; 0x23
    1444:	9c a3       	std	Y+36, r25	; 0x24
    1446:	ad a3       	std	Y+37, r26	; 0x25
    1448:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    144a:	6b a1       	ldd	r22, Y+35	; 0x23
    144c:	7c a1       	ldd	r23, Y+36	; 0x24
    144e:	8d a1       	ldd	r24, Y+37	; 0x25
    1450:	9e a1       	ldd	r25, Y+38	; 0x26
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	40 e8       	ldi	r20, 0x80	; 128
    1458:	5f e3       	ldi	r21, 0x3F	; 63
    145a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    145e:	88 23       	and	r24, r24
    1460:	2c f4       	brge	.+10     	; 0x146c <LCD_voidInit+0x3f8>
		__ticks = 1;
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	9a a3       	std	Y+34, r25	; 0x22
    1468:	89 a3       	std	Y+33, r24	; 0x21
    146a:	3f c0       	rjmp	.+126    	; 0x14ea <LCD_voidInit+0x476>
	else if (__tmp > 65535)
    146c:	6b a1       	ldd	r22, Y+35	; 0x23
    146e:	7c a1       	ldd	r23, Y+36	; 0x24
    1470:	8d a1       	ldd	r24, Y+37	; 0x25
    1472:	9e a1       	ldd	r25, Y+38	; 0x26
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	3f ef       	ldi	r19, 0xFF	; 255
    1478:	4f e7       	ldi	r20, 0x7F	; 127
    147a:	57 e4       	ldi	r21, 0x47	; 71
    147c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1480:	18 16       	cp	r1, r24
    1482:	4c f5       	brge	.+82     	; 0x14d6 <LCD_voidInit+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1484:	6f a1       	ldd	r22, Y+39	; 0x27
    1486:	78 a5       	ldd	r23, Y+40	; 0x28
    1488:	89 a5       	ldd	r24, Y+41	; 0x29
    148a:	9a a5       	ldd	r25, Y+42	; 0x2a
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	40 e2       	ldi	r20, 0x20	; 32
    1492:	51 e4       	ldi	r21, 0x41	; 65
    1494:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1498:	dc 01       	movw	r26, r24
    149a:	cb 01       	movw	r24, r22
    149c:	bc 01       	movw	r22, r24
    149e:	cd 01       	movw	r24, r26
    14a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	9a a3       	std	Y+34, r25	; 0x22
    14aa:	89 a3       	std	Y+33, r24	; 0x21
    14ac:	0f c0       	rjmp	.+30     	; 0x14cc <LCD_voidInit+0x458>
    14ae:	88 ec       	ldi	r24, 0xC8	; 200
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	98 a3       	std	Y+32, r25	; 0x20
    14b4:	8f 8f       	std	Y+31, r24	; 0x1f
    14b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14b8:	98 a1       	ldd	r25, Y+32	; 0x20
    14ba:	01 97       	sbiw	r24, 0x01	; 1
    14bc:	f1 f7       	brne	.-4      	; 0x14ba <LCD_voidInit+0x446>
    14be:	98 a3       	std	Y+32, r25	; 0x20
    14c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c2:	89 a1       	ldd	r24, Y+33	; 0x21
    14c4:	9a a1       	ldd	r25, Y+34	; 0x22
    14c6:	01 97       	sbiw	r24, 0x01	; 1
    14c8:	9a a3       	std	Y+34, r25	; 0x22
    14ca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14cc:	89 a1       	ldd	r24, Y+33	; 0x21
    14ce:	9a a1       	ldd	r25, Y+34	; 0x22
    14d0:	00 97       	sbiw	r24, 0x00	; 0
    14d2:	69 f7       	brne	.-38     	; 0x14ae <LCD_voidInit+0x43a>
    14d4:	14 c0       	rjmp	.+40     	; 0x14fe <LCD_voidInit+0x48a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d6:	6b a1       	ldd	r22, Y+35	; 0x23
    14d8:	7c a1       	ldd	r23, Y+36	; 0x24
    14da:	8d a1       	ldd	r24, Y+37	; 0x25
    14dc:	9e a1       	ldd	r25, Y+38	; 0x26
    14de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	9a a3       	std	Y+34, r25	; 0x22
    14e8:	89 a3       	std	Y+33, r24	; 0x21
    14ea:	89 a1       	ldd	r24, Y+33	; 0x21
    14ec:	9a a1       	ldd	r25, Y+34	; 0x22
    14ee:	9e 8f       	std	Y+30, r25	; 0x1e
    14f0:	8d 8f       	std	Y+29, r24	; 0x1d
    14f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14f6:	01 97       	sbiw	r24, 0x01	; 1
    14f8:	f1 f7       	brne	.-4      	; 0x14f6 <LCD_voidInit+0x482>
    14fa:	9e 8f       	std	Y+30, r25	; 0x1e
    14fc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand(lcd_Clear);
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCommand>
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	a0 ea       	ldi	r26, 0xA0	; 160
    150a:	b0 e4       	ldi	r27, 0x40	; 64
    150c:	89 8f       	std	Y+25, r24	; 0x19
    150e:	9a 8f       	std	Y+26, r25	; 0x1a
    1510:	ab 8f       	std	Y+27, r26	; 0x1b
    1512:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1514:	69 8d       	ldd	r22, Y+25	; 0x19
    1516:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1518:	8b 8d       	ldd	r24, Y+27	; 0x1b
    151a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	4a ef       	ldi	r20, 0xFA	; 250
    1522:	54 e4       	ldi	r21, 0x44	; 68
    1524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	8d 8b       	std	Y+21, r24	; 0x15
    152e:	9e 8b       	std	Y+22, r25	; 0x16
    1530:	af 8b       	std	Y+23, r26	; 0x17
    1532:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1534:	6d 89       	ldd	r22, Y+21	; 0x15
    1536:	7e 89       	ldd	r23, Y+22	; 0x16
    1538:	8f 89       	ldd	r24, Y+23	; 0x17
    153a:	98 8d       	ldd	r25, Y+24	; 0x18
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	40 e8       	ldi	r20, 0x80	; 128
    1542:	5f e3       	ldi	r21, 0x3F	; 63
    1544:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1548:	88 23       	and	r24, r24
    154a:	2c f4       	brge	.+10     	; 0x1556 <LCD_voidInit+0x4e2>
		__ticks = 1;
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	9c 8b       	std	Y+20, r25	; 0x14
    1552:	8b 8b       	std	Y+19, r24	; 0x13
    1554:	3f c0       	rjmp	.+126    	; 0x15d4 <LCD_voidInit+0x560>
	else if (__tmp > 65535)
    1556:	6d 89       	ldd	r22, Y+21	; 0x15
    1558:	7e 89       	ldd	r23, Y+22	; 0x16
    155a:	8f 89       	ldd	r24, Y+23	; 0x17
    155c:	98 8d       	ldd	r25, Y+24	; 0x18
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	3f ef       	ldi	r19, 0xFF	; 255
    1562:	4f e7       	ldi	r20, 0x7F	; 127
    1564:	57 e4       	ldi	r21, 0x47	; 71
    1566:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    156a:	18 16       	cp	r1, r24
    156c:	4c f5       	brge	.+82     	; 0x15c0 <LCD_voidInit+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    156e:	69 8d       	ldd	r22, Y+25	; 0x19
    1570:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1572:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1574:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	40 e2       	ldi	r20, 0x20	; 32
    157c:	51 e4       	ldi	r21, 0x41	; 65
    157e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	bc 01       	movw	r22, r24
    1588:	cd 01       	movw	r24, r26
    158a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	9c 8b       	std	Y+20, r25	; 0x14
    1594:	8b 8b       	std	Y+19, r24	; 0x13
    1596:	0f c0       	rjmp	.+30     	; 0x15b6 <LCD_voidInit+0x542>
    1598:	88 ec       	ldi	r24, 0xC8	; 200
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	9a 8b       	std	Y+18, r25	; 0x12
    159e:	89 8b       	std	Y+17, r24	; 0x11
    15a0:	89 89       	ldd	r24, Y+17	; 0x11
    15a2:	9a 89       	ldd	r25, Y+18	; 0x12
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	f1 f7       	brne	.-4      	; 0x15a4 <LCD_voidInit+0x530>
    15a8:	9a 8b       	std	Y+18, r25	; 0x12
    15aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ac:	8b 89       	ldd	r24, Y+19	; 0x13
    15ae:	9c 89       	ldd	r25, Y+20	; 0x14
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	9c 8b       	std	Y+20, r25	; 0x14
    15b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b6:	8b 89       	ldd	r24, Y+19	; 0x13
    15b8:	9c 89       	ldd	r25, Y+20	; 0x14
    15ba:	00 97       	sbiw	r24, 0x00	; 0
    15bc:	69 f7       	brne	.-38     	; 0x1598 <LCD_voidInit+0x524>
    15be:	14 c0       	rjmp	.+40     	; 0x15e8 <LCD_voidInit+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c0:	6d 89       	ldd	r22, Y+21	; 0x15
    15c2:	7e 89       	ldd	r23, Y+22	; 0x16
    15c4:	8f 89       	ldd	r24, Y+23	; 0x17
    15c6:	98 8d       	ldd	r25, Y+24	; 0x18
    15c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	9c 8b       	std	Y+20, r25	; 0x14
    15d2:	8b 8b       	std	Y+19, r24	; 0x13
    15d4:	8b 89       	ldd	r24, Y+19	; 0x13
    15d6:	9c 89       	ldd	r25, Y+20	; 0x14
    15d8:	98 8b       	std	Y+16, r25	; 0x10
    15da:	8f 87       	std	Y+15, r24	; 0x0f
    15dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    15de:	98 89       	ldd	r25, Y+16	; 0x10
    15e0:	01 97       	sbiw	r24, 0x01	; 1
    15e2:	f1 f7       	brne	.-4      	; 0x15e0 <LCD_voidInit+0x56c>
    15e4:	98 8b       	std	Y+16, r25	; 0x10
    15e6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	LCD_voidSendCommand(lcd_EntryMode);
    15e8:	86 e0       	ldi	r24, 0x06	; 6
    15ea:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCommand>
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	a0 ea       	ldi	r26, 0xA0	; 160
    15f4:	b0 e4       	ldi	r27, 0x40	; 64
    15f6:	8b 87       	std	Y+11, r24	; 0x0b
    15f8:	9c 87       	std	Y+12, r25	; 0x0c
    15fa:	ad 87       	std	Y+13, r26	; 0x0d
    15fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1600:	7c 85       	ldd	r23, Y+12	; 0x0c
    1602:	8d 85       	ldd	r24, Y+13	; 0x0d
    1604:	9e 85       	ldd	r25, Y+14	; 0x0e
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	4a ef       	ldi	r20, 0xFA	; 250
    160c:	54 e4       	ldi	r21, 0x44	; 68
    160e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	8f 83       	std	Y+7, r24	; 0x07
    1618:	98 87       	std	Y+8, r25	; 0x08
    161a:	a9 87       	std	Y+9, r26	; 0x09
    161c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    161e:	6f 81       	ldd	r22, Y+7	; 0x07
    1620:	78 85       	ldd	r23, Y+8	; 0x08
    1622:	89 85       	ldd	r24, Y+9	; 0x09
    1624:	9a 85       	ldd	r25, Y+10	; 0x0a
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e8       	ldi	r20, 0x80	; 128
    162c:	5f e3       	ldi	r21, 0x3F	; 63
    162e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1632:	88 23       	and	r24, r24
    1634:	2c f4       	brge	.+10     	; 0x1640 <LCD_voidInit+0x5cc>
		__ticks = 1;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	9e 83       	std	Y+6, r25	; 0x06
    163c:	8d 83       	std	Y+5, r24	; 0x05
    163e:	3f c0       	rjmp	.+126    	; 0x16be <LCD_voidInit+0x64a>
	else if (__tmp > 65535)
    1640:	6f 81       	ldd	r22, Y+7	; 0x07
    1642:	78 85       	ldd	r23, Y+8	; 0x08
    1644:	89 85       	ldd	r24, Y+9	; 0x09
    1646:	9a 85       	ldd	r25, Y+10	; 0x0a
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	3f ef       	ldi	r19, 0xFF	; 255
    164c:	4f e7       	ldi	r20, 0x7F	; 127
    164e:	57 e4       	ldi	r21, 0x47	; 71
    1650:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1654:	18 16       	cp	r1, r24
    1656:	4c f5       	brge	.+82     	; 0x16aa <LCD_voidInit+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1658:	6b 85       	ldd	r22, Y+11	; 0x0b
    165a:	7c 85       	ldd	r23, Y+12	; 0x0c
    165c:	8d 85       	ldd	r24, Y+13	; 0x0d
    165e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	40 e2       	ldi	r20, 0x20	; 32
    1666:	51 e4       	ldi	r21, 0x41	; 65
    1668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	bc 01       	movw	r22, r24
    1672:	cd 01       	movw	r24, r26
    1674:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	9e 83       	std	Y+6, r25	; 0x06
    167e:	8d 83       	std	Y+5, r24	; 0x05
    1680:	0f c0       	rjmp	.+30     	; 0x16a0 <LCD_voidInit+0x62c>
    1682:	88 ec       	ldi	r24, 0xC8	; 200
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	9c 83       	std	Y+4, r25	; 0x04
    1688:	8b 83       	std	Y+3, r24	; 0x03
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	9c 81       	ldd	r25, Y+4	; 0x04
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	f1 f7       	brne	.-4      	; 0x168e <LCD_voidInit+0x61a>
    1692:	9c 83       	std	Y+4, r25	; 0x04
    1694:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1696:	8d 81       	ldd	r24, Y+5	; 0x05
    1698:	9e 81       	ldd	r25, Y+6	; 0x06
    169a:	01 97       	sbiw	r24, 0x01	; 1
    169c:	9e 83       	std	Y+6, r25	; 0x06
    169e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a0:	8d 81       	ldd	r24, Y+5	; 0x05
    16a2:	9e 81       	ldd	r25, Y+6	; 0x06
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	69 f7       	brne	.-38     	; 0x1682 <LCD_voidInit+0x60e>
    16a8:	14 c0       	rjmp	.+40     	; 0x16d2 <LCD_voidInit+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16aa:	6f 81       	ldd	r22, Y+7	; 0x07
    16ac:	78 85       	ldd	r23, Y+8	; 0x08
    16ae:	89 85       	ldd	r24, Y+9	; 0x09
    16b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	9e 83       	std	Y+6, r25	; 0x06
    16bc:	8d 83       	std	Y+5, r24	; 0x05
    16be:	8d 81       	ldd	r24, Y+5	; 0x05
    16c0:	9e 81       	ldd	r25, Y+6	; 0x06
    16c2:	9a 83       	std	Y+2, r25	; 0x02
    16c4:	89 83       	std	Y+1, r24	; 0x01
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	f1 f7       	brne	.-4      	; 0x16ca <LCD_voidInit+0x656>
    16ce:	9a 83       	std	Y+2, r25	; 0x02
    16d0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    16d2:	cc 5a       	subi	r28, 0xAC	; 172
    16d4:	df 4f       	sbci	r29, 0xFF	; 255
    16d6:	0f b6       	in	r0, 0x3f	; 63
    16d8:	f8 94       	cli
    16da:	de bf       	out	0x3e, r29	; 62
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	cd bf       	out	0x3d, r28	; 61
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	1f 91       	pop	r17
    16e6:	0f 91       	pop	r16
    16e8:	08 95       	ret

000016ea <LCD_voidInit_4bitMode>:
void LCD_voidInit_4bitMode(void){
    16ea:	0f 93       	push	r16
    16ec:	1f 93       	push	r17
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
    16f6:	c4 55       	subi	r28, 0x54	; 84
    16f8:	d0 40       	sbci	r29, 0x00	; 0
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	f8 94       	cli
    16fe:	de bf       	out	0x3e, r29	; 62
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	cd bf       	out	0x3d, r28	; 61
	/* Pin Direction*/
	DIO_voidWritePort(lcd_DATAPORT, DIO_LOW);
    1704:	84 e0       	ldi	r24, 0x04	; 4
    1706:	60 e0       	ldi	r22, 0x00	; 0
    1708:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <DIO_voidWritePort>
	DIO_voidWritePin (lcd_DATAPORT, DIO_PIN_NUM_D4, DIO_OUTPUT);
    170c:	84 e0       	ldi	r24, 0x04	; 4
    170e:	64 e0       	ldi	r22, 0x04	; 4
    1710:	41 e0       	ldi	r20, 0x01	; 1
    1712:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>
	DIO_voidWritePin (lcd_DATAPORT, DIO_PIN_NUM_D5, DIO_OUTPUT);
    1716:	84 e0       	ldi	r24, 0x04	; 4
    1718:	65 e0       	ldi	r22, 0x05	; 5
    171a:	41 e0       	ldi	r20, 0x01	; 1
    171c:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>
	DIO_voidWritePin (lcd_DATAPORT, DIO_PIN_NUM_D6, DIO_OUTPUT);
    1720:	84 e0       	ldi	r24, 0x04	; 4
    1722:	66 e0       	ldi	r22, 0x06	; 6
    1724:	41 e0       	ldi	r20, 0x01	; 1
    1726:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>
	DIO_voidWritePin (lcd_DATAPORT, DIO_PIN_NUM_D7, DIO_OUTPUT);
    172a:	84 e0       	ldi	r24, 0x04	; 4
    172c:	67 e0       	ldi	r22, 0x07	; 7
    172e:	41 e0       	ldi	r20, 0x01	; 1
    1730:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>

	DIO_voidWritePin (lcd_CONTROLPORT, lcd_RSPIN, DIO_OUTPUT);
    1734:	83 e0       	ldi	r24, 0x03	; 3
    1736:	62 e0       	ldi	r22, 0x02	; 2
    1738:	41 e0       	ldi	r20, 0x01	; 1
    173a:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>
	//DIO_voidWritePin (lcd_CONTROLPORT, lcd_RWPIN, DIO_OUTPUT);
	DIO_voidWritePin (lcd_CONTROLPORT, lcd_EPIN , DIO_OUTPUT);
    173e:	83 e0       	ldi	r24, 0x03	; 3
    1740:	63 e0       	ldi	r22, 0x03	; 3
    1742:	41 e0       	ldi	r20, 0x01	; 1
    1744:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>
	/* Make Enable Low*/
	DIO_voidWritePin (lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    1748:	83 e0       	ldi	r24, 0x03	; 3
    174a:	63 e0       	ldi	r22, 0x03	; 3
    174c:	40 e0       	ldi	r20, 0x00	; 0
    174e:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>
    1752:	fe 01       	movw	r30, r28
    1754:	ef 5a       	subi	r30, 0xAF	; 175
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	a8 e4       	ldi	r26, 0x48	; 72
    175e:	b2 e4       	ldi	r27, 0x42	; 66
    1760:	80 83       	st	Z, r24
    1762:	91 83       	std	Z+1, r25	; 0x01
    1764:	a2 83       	std	Z+2, r26	; 0x02
    1766:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1768:	8e 01       	movw	r16, r28
    176a:	03 5b       	subi	r16, 0xB3	; 179
    176c:	1f 4f       	sbci	r17, 0xFF	; 255
    176e:	fe 01       	movw	r30, r28
    1770:	ef 5a       	subi	r30, 0xAF	; 175
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	60 81       	ld	r22, Z
    1776:	71 81       	ldd	r23, Z+1	; 0x01
    1778:	82 81       	ldd	r24, Z+2	; 0x02
    177a:	93 81       	ldd	r25, Z+3	; 0x03
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	4a ef       	ldi	r20, 0xFA	; 250
    1782:	54 e4       	ldi	r21, 0x44	; 68
    1784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	f8 01       	movw	r30, r16
    178e:	80 83       	st	Z, r24
    1790:	91 83       	std	Z+1, r25	; 0x01
    1792:	a2 83       	std	Z+2, r26	; 0x02
    1794:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1796:	fe 01       	movw	r30, r28
    1798:	e3 5b       	subi	r30, 0xB3	; 179
    179a:	ff 4f       	sbci	r31, 0xFF	; 255
    179c:	60 81       	ld	r22, Z
    179e:	71 81       	ldd	r23, Z+1	; 0x01
    17a0:	82 81       	ldd	r24, Z+2	; 0x02
    17a2:	93 81       	ldd	r25, Z+3	; 0x03
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e8       	ldi	r20, 0x80	; 128
    17aa:	5f e3       	ldi	r21, 0x3F	; 63
    17ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17b0:	88 23       	and	r24, r24
    17b2:	44 f4       	brge	.+16     	; 0x17c4 <LCD_voidInit_4bitMode+0xda>
		__ticks = 1;
    17b4:	fe 01       	movw	r30, r28
    17b6:	e5 5b       	subi	r30, 0xB5	; 181
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	91 83       	std	Z+1, r25	; 0x01
    17c0:	80 83       	st	Z, r24
    17c2:	64 c0       	rjmp	.+200    	; 0x188c <LCD_voidInit_4bitMode+0x1a2>
	else if (__tmp > 65535)
    17c4:	fe 01       	movw	r30, r28
    17c6:	e3 5b       	subi	r30, 0xB3	; 179
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	60 81       	ld	r22, Z
    17cc:	71 81       	ldd	r23, Z+1	; 0x01
    17ce:	82 81       	ldd	r24, Z+2	; 0x02
    17d0:	93 81       	ldd	r25, Z+3	; 0x03
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	3f ef       	ldi	r19, 0xFF	; 255
    17d6:	4f e7       	ldi	r20, 0x7F	; 127
    17d8:	57 e4       	ldi	r21, 0x47	; 71
    17da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17de:	18 16       	cp	r1, r24
    17e0:	0c f0       	brlt	.+2      	; 0x17e4 <LCD_voidInit_4bitMode+0xfa>
    17e2:	43 c0       	rjmp	.+134    	; 0x186a <LCD_voidInit_4bitMode+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e4:	fe 01       	movw	r30, r28
    17e6:	ef 5a       	subi	r30, 0xAF	; 175
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	60 81       	ld	r22, Z
    17ec:	71 81       	ldd	r23, Z+1	; 0x01
    17ee:	82 81       	ldd	r24, Z+2	; 0x02
    17f0:	93 81       	ldd	r25, Z+3	; 0x03
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	40 e2       	ldi	r20, 0x20	; 32
    17f8:	51 e4       	ldi	r21, 0x41	; 65
    17fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	8e 01       	movw	r16, r28
    1804:	05 5b       	subi	r16, 0xB5	; 181
    1806:	1f 4f       	sbci	r17, 0xFF	; 255
    1808:	bc 01       	movw	r22, r24
    180a:	cd 01       	movw	r24, r26
    180c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	f8 01       	movw	r30, r16
    1816:	91 83       	std	Z+1, r25	; 0x01
    1818:	80 83       	st	Z, r24
    181a:	1f c0       	rjmp	.+62     	; 0x185a <LCD_voidInit_4bitMode+0x170>
    181c:	fe 01       	movw	r30, r28
    181e:	e7 5b       	subi	r30, 0xB7	; 183
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	88 ec       	ldi	r24, 0xC8	; 200
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	91 83       	std	Z+1, r25	; 0x01
    1828:	80 83       	st	Z, r24
    182a:	fe 01       	movw	r30, r28
    182c:	e7 5b       	subi	r30, 0xB7	; 183
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	80 81       	ld	r24, Z
    1832:	91 81       	ldd	r25, Z+1	; 0x01
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	f1 f7       	brne	.-4      	; 0x1834 <LCD_voidInit_4bitMode+0x14a>
    1838:	fe 01       	movw	r30, r28
    183a:	e7 5b       	subi	r30, 0xB7	; 183
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	91 83       	std	Z+1, r25	; 0x01
    1840:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1842:	de 01       	movw	r26, r28
    1844:	a5 5b       	subi	r26, 0xB5	; 181
    1846:	bf 4f       	sbci	r27, 0xFF	; 255
    1848:	fe 01       	movw	r30, r28
    184a:	e5 5b       	subi	r30, 0xB5	; 181
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	80 81       	ld	r24, Z
    1850:	91 81       	ldd	r25, Z+1	; 0x01
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	11 96       	adiw	r26, 0x01	; 1
    1856:	9c 93       	st	X, r25
    1858:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185a:	fe 01       	movw	r30, r28
    185c:	e5 5b       	subi	r30, 0xB5	; 181
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	80 81       	ld	r24, Z
    1862:	91 81       	ldd	r25, Z+1	; 0x01
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	d1 f6       	brne	.-76     	; 0x181c <LCD_voidInit_4bitMode+0x132>
    1868:	27 c0       	rjmp	.+78     	; 0x18b8 <LCD_voidInit_4bitMode+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186a:	8e 01       	movw	r16, r28
    186c:	05 5b       	subi	r16, 0xB5	; 181
    186e:	1f 4f       	sbci	r17, 0xFF	; 255
    1870:	fe 01       	movw	r30, r28
    1872:	e3 5b       	subi	r30, 0xB3	; 179
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	60 81       	ld	r22, Z
    1878:	71 81       	ldd	r23, Z+1	; 0x01
    187a:	82 81       	ldd	r24, Z+2	; 0x02
    187c:	93 81       	ldd	r25, Z+3	; 0x03
    187e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	f8 01       	movw	r30, r16
    1888:	91 83       	std	Z+1, r25	; 0x01
    188a:	80 83       	st	Z, r24
    188c:	de 01       	movw	r26, r28
    188e:	a9 5b       	subi	r26, 0xB9	; 185
    1890:	bf 4f       	sbci	r27, 0xFF	; 255
    1892:	fe 01       	movw	r30, r28
    1894:	e5 5b       	subi	r30, 0xB5	; 181
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	80 81       	ld	r24, Z
    189a:	91 81       	ldd	r25, Z+1	; 0x01
    189c:	8d 93       	st	X+, r24
    189e:	9c 93       	st	X, r25
    18a0:	fe 01       	movw	r30, r28
    18a2:	e9 5b       	subi	r30, 0xB9	; 185
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	80 81       	ld	r24, Z
    18a8:	91 81       	ldd	r25, Z+1	; 0x01
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	f1 f7       	brne	.-4      	; 0x18aa <LCD_voidInit_4bitMode+0x1c0>
    18ae:	fe 01       	movw	r30, r28
    18b0:	e9 5b       	subi	r30, 0xB9	; 185
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	91 83       	std	Z+1, r25	; 0x01
    18b6:	80 83       	st	Z, r24

	_delay_ms(50);
	LCD_voidSendCommand_4bitMode(lcd_Home);
    18b8:	82 e0       	ldi	r24, 0x02	; 2
    18ba:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_voidSendCommand_4bitMode>
    18be:	fe 01       	movw	r30, r28
    18c0:	ed 5b       	subi	r30, 0xBD	; 189
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	a0 ea       	ldi	r26, 0xA0	; 160
    18ca:	b0 e4       	ldi	r27, 0x40	; 64
    18cc:	80 83       	st	Z, r24
    18ce:	91 83       	std	Z+1, r25	; 0x01
    18d0:	a2 83       	std	Z+2, r26	; 0x02
    18d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d4:	8e 01       	movw	r16, r28
    18d6:	01 5c       	subi	r16, 0xC1	; 193
    18d8:	1f 4f       	sbci	r17, 0xFF	; 255
    18da:	fe 01       	movw	r30, r28
    18dc:	ed 5b       	subi	r30, 0xBD	; 189
    18de:	ff 4f       	sbci	r31, 0xFF	; 255
    18e0:	60 81       	ld	r22, Z
    18e2:	71 81       	ldd	r23, Z+1	; 0x01
    18e4:	82 81       	ldd	r24, Z+2	; 0x02
    18e6:	93 81       	ldd	r25, Z+3	; 0x03
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	4a ef       	ldi	r20, 0xFA	; 250
    18ee:	54 e4       	ldi	r21, 0x44	; 68
    18f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	f8 01       	movw	r30, r16
    18fa:	80 83       	st	Z, r24
    18fc:	91 83       	std	Z+1, r25	; 0x01
    18fe:	a2 83       	std	Z+2, r26	; 0x02
    1900:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1902:	fe 01       	movw	r30, r28
    1904:	ff 96       	adiw	r30, 0x3f	; 63
    1906:	60 81       	ld	r22, Z
    1908:	71 81       	ldd	r23, Z+1	; 0x01
    190a:	82 81       	ldd	r24, Z+2	; 0x02
    190c:	93 81       	ldd	r25, Z+3	; 0x03
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	40 e8       	ldi	r20, 0x80	; 128
    1914:	5f e3       	ldi	r21, 0x3F	; 63
    1916:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    191a:	88 23       	and	r24, r24
    191c:	2c f4       	brge	.+10     	; 0x1928 <LCD_voidInit_4bitMode+0x23e>
		__ticks = 1;
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	9e af       	std	Y+62, r25	; 0x3e
    1924:	8d af       	std	Y+61, r24	; 0x3d
    1926:	46 c0       	rjmp	.+140    	; 0x19b4 <LCD_voidInit_4bitMode+0x2ca>
	else if (__tmp > 65535)
    1928:	fe 01       	movw	r30, r28
    192a:	ff 96       	adiw	r30, 0x3f	; 63
    192c:	60 81       	ld	r22, Z
    192e:	71 81       	ldd	r23, Z+1	; 0x01
    1930:	82 81       	ldd	r24, Z+2	; 0x02
    1932:	93 81       	ldd	r25, Z+3	; 0x03
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	3f ef       	ldi	r19, 0xFF	; 255
    1938:	4f e7       	ldi	r20, 0x7F	; 127
    193a:	57 e4       	ldi	r21, 0x47	; 71
    193c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1940:	18 16       	cp	r1, r24
    1942:	64 f5       	brge	.+88     	; 0x199c <LCD_voidInit_4bitMode+0x2b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1944:	fe 01       	movw	r30, r28
    1946:	ed 5b       	subi	r30, 0xBD	; 189
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	60 81       	ld	r22, Z
    194c:	71 81       	ldd	r23, Z+1	; 0x01
    194e:	82 81       	ldd	r24, Z+2	; 0x02
    1950:	93 81       	ldd	r25, Z+3	; 0x03
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	40 e2       	ldi	r20, 0x20	; 32
    1958:	51 e4       	ldi	r21, 0x41	; 65
    195a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	bc 01       	movw	r22, r24
    1964:	cd 01       	movw	r24, r26
    1966:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	9e af       	std	Y+62, r25	; 0x3e
    1970:	8d af       	std	Y+61, r24	; 0x3d
    1972:	0f c0       	rjmp	.+30     	; 0x1992 <LCD_voidInit_4bitMode+0x2a8>
    1974:	88 ec       	ldi	r24, 0xC8	; 200
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	9c af       	std	Y+60, r25	; 0x3c
    197a:	8b af       	std	Y+59, r24	; 0x3b
    197c:	8b ad       	ldd	r24, Y+59	; 0x3b
    197e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	f1 f7       	brne	.-4      	; 0x1980 <LCD_voidInit_4bitMode+0x296>
    1984:	9c af       	std	Y+60, r25	; 0x3c
    1986:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1988:	8d ad       	ldd	r24, Y+61	; 0x3d
    198a:	9e ad       	ldd	r25, Y+62	; 0x3e
    198c:	01 97       	sbiw	r24, 0x01	; 1
    198e:	9e af       	std	Y+62, r25	; 0x3e
    1990:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1992:	8d ad       	ldd	r24, Y+61	; 0x3d
    1994:	9e ad       	ldd	r25, Y+62	; 0x3e
    1996:	00 97       	sbiw	r24, 0x00	; 0
    1998:	69 f7       	brne	.-38     	; 0x1974 <LCD_voidInit_4bitMode+0x28a>
    199a:	16 c0       	rjmp	.+44     	; 0x19c8 <LCD_voidInit_4bitMode+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    199c:	fe 01       	movw	r30, r28
    199e:	ff 96       	adiw	r30, 0x3f	; 63
    19a0:	60 81       	ld	r22, Z
    19a2:	71 81       	ldd	r23, Z+1	; 0x01
    19a4:	82 81       	ldd	r24, Z+2	; 0x02
    19a6:	93 81       	ldd	r25, Z+3	; 0x03
    19a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	9e af       	std	Y+62, r25	; 0x3e
    19b2:	8d af       	std	Y+61, r24	; 0x3d
    19b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    19b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    19b8:	9a af       	std	Y+58, r25	; 0x3a
    19ba:	89 af       	std	Y+57, r24	; 0x39
    19bc:	89 ad       	ldd	r24, Y+57	; 0x39
    19be:	9a ad       	ldd	r25, Y+58	; 0x3a
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	f1 f7       	brne	.-4      	; 0x19c0 <LCD_voidInit_4bitMode+0x2d6>
    19c4:	9a af       	std	Y+58, r25	; 0x3a
    19c6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);
	LCD_voidSendCommand_4bitMode(lcd_FunctionSet4bit);
    19c8:	88 e2       	ldi	r24, 0x28	; 40
    19ca:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_voidSendCommand_4bitMode>
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	a0 ea       	ldi	r26, 0xA0	; 160
    19d4:	b0 e4       	ldi	r27, 0x40	; 64
    19d6:	8d ab       	std	Y+53, r24	; 0x35
    19d8:	9e ab       	std	Y+54, r25	; 0x36
    19da:	af ab       	std	Y+55, r26	; 0x37
    19dc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19de:	6d a9       	ldd	r22, Y+53	; 0x35
    19e0:	7e a9       	ldd	r23, Y+54	; 0x36
    19e2:	8f a9       	ldd	r24, Y+55	; 0x37
    19e4:	98 ad       	ldd	r25, Y+56	; 0x38
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	4a ef       	ldi	r20, 0xFA	; 250
    19ec:	54 e4       	ldi	r21, 0x44	; 68
    19ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	89 ab       	std	Y+49, r24	; 0x31
    19f8:	9a ab       	std	Y+50, r25	; 0x32
    19fa:	ab ab       	std	Y+51, r26	; 0x33
    19fc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1a00:	7a a9       	ldd	r23, Y+50	; 0x32
    1a02:	8b a9       	ldd	r24, Y+51	; 0x33
    1a04:	9c a9       	ldd	r25, Y+52	; 0x34
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e8       	ldi	r20, 0x80	; 128
    1a0c:	5f e3       	ldi	r21, 0x3F	; 63
    1a0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a12:	88 23       	and	r24, r24
    1a14:	2c f4       	brge	.+10     	; 0x1a20 <LCD_voidInit_4bitMode+0x336>
		__ticks = 1;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	98 ab       	std	Y+48, r25	; 0x30
    1a1c:	8f a7       	std	Y+47, r24	; 0x2f
    1a1e:	3f c0       	rjmp	.+126    	; 0x1a9e <LCD_voidInit_4bitMode+0x3b4>
	else if (__tmp > 65535)
    1a20:	69 a9       	ldd	r22, Y+49	; 0x31
    1a22:	7a a9       	ldd	r23, Y+50	; 0x32
    1a24:	8b a9       	ldd	r24, Y+51	; 0x33
    1a26:	9c a9       	ldd	r25, Y+52	; 0x34
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	3f ef       	ldi	r19, 0xFF	; 255
    1a2c:	4f e7       	ldi	r20, 0x7F	; 127
    1a2e:	57 e4       	ldi	r21, 0x47	; 71
    1a30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a34:	18 16       	cp	r1, r24
    1a36:	4c f5       	brge	.+82     	; 0x1a8a <LCD_voidInit_4bitMode+0x3a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a38:	6d a9       	ldd	r22, Y+53	; 0x35
    1a3a:	7e a9       	ldd	r23, Y+54	; 0x36
    1a3c:	8f a9       	ldd	r24, Y+55	; 0x37
    1a3e:	98 ad       	ldd	r25, Y+56	; 0x38
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e2       	ldi	r20, 0x20	; 32
    1a46:	51 e4       	ldi	r21, 0x41	; 65
    1a48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	bc 01       	movw	r22, r24
    1a52:	cd 01       	movw	r24, r26
    1a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	98 ab       	std	Y+48, r25	; 0x30
    1a5e:	8f a7       	std	Y+47, r24	; 0x2f
    1a60:	0f c0       	rjmp	.+30     	; 0x1a80 <LCD_voidInit_4bitMode+0x396>
    1a62:	88 ec       	ldi	r24, 0xC8	; 200
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	9e a7       	std	Y+46, r25	; 0x2e
    1a68:	8d a7       	std	Y+45, r24	; 0x2d
    1a6a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a6c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <LCD_voidInit_4bitMode+0x384>
    1a72:	9e a7       	std	Y+46, r25	; 0x2e
    1a74:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a76:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a78:	98 a9       	ldd	r25, Y+48	; 0x30
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	98 ab       	std	Y+48, r25	; 0x30
    1a7e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a80:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a82:	98 a9       	ldd	r25, Y+48	; 0x30
    1a84:	00 97       	sbiw	r24, 0x00	; 0
    1a86:	69 f7       	brne	.-38     	; 0x1a62 <LCD_voidInit_4bitMode+0x378>
    1a88:	14 c0       	rjmp	.+40     	; 0x1ab2 <LCD_voidInit_4bitMode+0x3c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8a:	69 a9       	ldd	r22, Y+49	; 0x31
    1a8c:	7a a9       	ldd	r23, Y+50	; 0x32
    1a8e:	8b a9       	ldd	r24, Y+51	; 0x33
    1a90:	9c a9       	ldd	r25, Y+52	; 0x34
    1a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	98 ab       	std	Y+48, r25	; 0x30
    1a9c:	8f a7       	std	Y+47, r24	; 0x2f
    1a9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aa0:	98 a9       	ldd	r25, Y+48	; 0x30
    1aa2:	9c a7       	std	Y+44, r25	; 0x2c
    1aa4:	8b a7       	std	Y+43, r24	; 0x2b
    1aa6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1aa8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	f1 f7       	brne	.-4      	; 0x1aaa <LCD_voidInit_4bitMode+0x3c0>
    1aae:	9c a7       	std	Y+44, r25	; 0x2c
    1ab0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	LCD_voidSendCommand_4bitMode(lcd_DisplayOn);
    1ab2:	8c e0       	ldi	r24, 0x0C	; 12
    1ab4:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_voidSendCommand_4bitMode>
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	a0 ea       	ldi	r26, 0xA0	; 160
    1abe:	b0 e4       	ldi	r27, 0x40	; 64
    1ac0:	8f a3       	std	Y+39, r24	; 0x27
    1ac2:	98 a7       	std	Y+40, r25	; 0x28
    1ac4:	a9 a7       	std	Y+41, r26	; 0x29
    1ac6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac8:	6f a1       	ldd	r22, Y+39	; 0x27
    1aca:	78 a5       	ldd	r23, Y+40	; 0x28
    1acc:	89 a5       	ldd	r24, Y+41	; 0x29
    1ace:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	4a ef       	ldi	r20, 0xFA	; 250
    1ad6:	54 e4       	ldi	r21, 0x44	; 68
    1ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	8b a3       	std	Y+35, r24	; 0x23
    1ae2:	9c a3       	std	Y+36, r25	; 0x24
    1ae4:	ad a3       	std	Y+37, r26	; 0x25
    1ae6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ae8:	6b a1       	ldd	r22, Y+35	; 0x23
    1aea:	7c a1       	ldd	r23, Y+36	; 0x24
    1aec:	8d a1       	ldd	r24, Y+37	; 0x25
    1aee:	9e a1       	ldd	r25, Y+38	; 0x26
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e8       	ldi	r20, 0x80	; 128
    1af6:	5f e3       	ldi	r21, 0x3F	; 63
    1af8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1afc:	88 23       	and	r24, r24
    1afe:	2c f4       	brge	.+10     	; 0x1b0a <LCD_voidInit_4bitMode+0x420>
		__ticks = 1;
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	9a a3       	std	Y+34, r25	; 0x22
    1b06:	89 a3       	std	Y+33, r24	; 0x21
    1b08:	3f c0       	rjmp	.+126    	; 0x1b88 <LCD_voidInit_4bitMode+0x49e>
	else if (__tmp > 65535)
    1b0a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b0c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b0e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b10:	9e a1       	ldd	r25, Y+38	; 0x26
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	3f ef       	ldi	r19, 0xFF	; 255
    1b16:	4f e7       	ldi	r20, 0x7F	; 127
    1b18:	57 e4       	ldi	r21, 0x47	; 71
    1b1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b1e:	18 16       	cp	r1, r24
    1b20:	4c f5       	brge	.+82     	; 0x1b74 <LCD_voidInit_4bitMode+0x48a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b22:	6f a1       	ldd	r22, Y+39	; 0x27
    1b24:	78 a5       	ldd	r23, Y+40	; 0x28
    1b26:	89 a5       	ldd	r24, Y+41	; 0x29
    1b28:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	40 e2       	ldi	r20, 0x20	; 32
    1b30:	51 e4       	ldi	r21, 0x41	; 65
    1b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	bc 01       	movw	r22, r24
    1b3c:	cd 01       	movw	r24, r26
    1b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	9a a3       	std	Y+34, r25	; 0x22
    1b48:	89 a3       	std	Y+33, r24	; 0x21
    1b4a:	0f c0       	rjmp	.+30     	; 0x1b6a <LCD_voidInit_4bitMode+0x480>
    1b4c:	88 ec       	ldi	r24, 0xC8	; 200
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	98 a3       	std	Y+32, r25	; 0x20
    1b52:	8f 8f       	std	Y+31, r24	; 0x1f
    1b54:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b56:	98 a1       	ldd	r25, Y+32	; 0x20
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	f1 f7       	brne	.-4      	; 0x1b58 <LCD_voidInit_4bitMode+0x46e>
    1b5c:	98 a3       	std	Y+32, r25	; 0x20
    1b5e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b60:	89 a1       	ldd	r24, Y+33	; 0x21
    1b62:	9a a1       	ldd	r25, Y+34	; 0x22
    1b64:	01 97       	sbiw	r24, 0x01	; 1
    1b66:	9a a3       	std	Y+34, r25	; 0x22
    1b68:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b6e:	00 97       	sbiw	r24, 0x00	; 0
    1b70:	69 f7       	brne	.-38     	; 0x1b4c <LCD_voidInit_4bitMode+0x462>
    1b72:	14 c0       	rjmp	.+40     	; 0x1b9c <LCD_voidInit_4bitMode+0x4b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b74:	6b a1       	ldd	r22, Y+35	; 0x23
    1b76:	7c a1       	ldd	r23, Y+36	; 0x24
    1b78:	8d a1       	ldd	r24, Y+37	; 0x25
    1b7a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	9a a3       	std	Y+34, r25	; 0x22
    1b86:	89 a3       	std	Y+33, r24	; 0x21
    1b88:	89 a1       	ldd	r24, Y+33	; 0x21
    1b8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b8c:	9e 8f       	std	Y+30, r25	; 0x1e
    1b8e:	8d 8f       	std	Y+29, r24	; 0x1d
    1b90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b92:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <LCD_voidInit_4bitMode+0x4aa>
    1b98:	9e 8f       	std	Y+30, r25	; 0x1e
    1b9a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand_4bitMode(lcd_Clear);
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_voidSendCommand_4bitMode>
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	a0 ea       	ldi	r26, 0xA0	; 160
    1ba8:	b0 e4       	ldi	r27, 0x40	; 64
    1baa:	89 8f       	std	Y+25, r24	; 0x19
    1bac:	9a 8f       	std	Y+26, r25	; 0x1a
    1bae:	ab 8f       	std	Y+27, r26	; 0x1b
    1bb0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb2:	69 8d       	ldd	r22, Y+25	; 0x19
    1bb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	4a ef       	ldi	r20, 0xFA	; 250
    1bc0:	54 e4       	ldi	r21, 0x44	; 68
    1bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	8d 8b       	std	Y+21, r24	; 0x15
    1bcc:	9e 8b       	std	Y+22, r25	; 0x16
    1bce:	af 8b       	std	Y+23, r26	; 0x17
    1bd0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1bd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1bd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	40 e8       	ldi	r20, 0x80	; 128
    1be0:	5f e3       	ldi	r21, 0x3F	; 63
    1be2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1be6:	88 23       	and	r24, r24
    1be8:	2c f4       	brge	.+10     	; 0x1bf4 <LCD_voidInit_4bitMode+0x50a>
		__ticks = 1;
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	9c 8b       	std	Y+20, r25	; 0x14
    1bf0:	8b 8b       	std	Y+19, r24	; 0x13
    1bf2:	3f c0       	rjmp	.+126    	; 0x1c72 <LCD_voidInit_4bitMode+0x588>
	else if (__tmp > 65535)
    1bf4:	6d 89       	ldd	r22, Y+21	; 0x15
    1bf6:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf8:	8f 89       	ldd	r24, Y+23	; 0x17
    1bfa:	98 8d       	ldd	r25, Y+24	; 0x18
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	3f ef       	ldi	r19, 0xFF	; 255
    1c00:	4f e7       	ldi	r20, 0x7F	; 127
    1c02:	57 e4       	ldi	r21, 0x47	; 71
    1c04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c08:	18 16       	cp	r1, r24
    1c0a:	4c f5       	brge	.+82     	; 0x1c5e <LCD_voidInit_4bitMode+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	40 e2       	ldi	r20, 0x20	; 32
    1c1a:	51 e4       	ldi	r21, 0x41	; 65
    1c1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	bc 01       	movw	r22, r24
    1c26:	cd 01       	movw	r24, r26
    1c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	9c 8b       	std	Y+20, r25	; 0x14
    1c32:	8b 8b       	std	Y+19, r24	; 0x13
    1c34:	0f c0       	rjmp	.+30     	; 0x1c54 <LCD_voidInit_4bitMode+0x56a>
    1c36:	88 ec       	ldi	r24, 0xC8	; 200
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	9a 8b       	std	Y+18, r25	; 0x12
    1c3c:	89 8b       	std	Y+17, r24	; 0x11
    1c3e:	89 89       	ldd	r24, Y+17	; 0x11
    1c40:	9a 89       	ldd	r25, Y+18	; 0x12
    1c42:	01 97       	sbiw	r24, 0x01	; 1
    1c44:	f1 f7       	brne	.-4      	; 0x1c42 <LCD_voidInit_4bitMode+0x558>
    1c46:	9a 8b       	std	Y+18, r25	; 0x12
    1c48:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	9c 8b       	std	Y+20, r25	; 0x14
    1c52:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c54:	8b 89       	ldd	r24, Y+19	; 0x13
    1c56:	9c 89       	ldd	r25, Y+20	; 0x14
    1c58:	00 97       	sbiw	r24, 0x00	; 0
    1c5a:	69 f7       	brne	.-38     	; 0x1c36 <LCD_voidInit_4bitMode+0x54c>
    1c5c:	14 c0       	rjmp	.+40     	; 0x1c86 <LCD_voidInit_4bitMode+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c60:	7e 89       	ldd	r23, Y+22	; 0x16
    1c62:	8f 89       	ldd	r24, Y+23	; 0x17
    1c64:	98 8d       	ldd	r25, Y+24	; 0x18
    1c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	9c 8b       	std	Y+20, r25	; 0x14
    1c70:	8b 8b       	std	Y+19, r24	; 0x13
    1c72:	8b 89       	ldd	r24, Y+19	; 0x13
    1c74:	9c 89       	ldd	r25, Y+20	; 0x14
    1c76:	98 8b       	std	Y+16, r25	; 0x10
    1c78:	8f 87       	std	Y+15, r24	; 0x0f
    1c7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c7c:	98 89       	ldd	r25, Y+16	; 0x10
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	f1 f7       	brne	.-4      	; 0x1c7e <LCD_voidInit_4bitMode+0x594>
    1c82:	98 8b       	std	Y+16, r25	; 0x10
    1c84:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	LCD_voidSendCommand_4bitMode(lcd_EntryMode);
    1c86:	86 e0       	ldi	r24, 0x06	; 6
    1c88:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_voidSendCommand_4bitMode>
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	a0 ea       	ldi	r26, 0xA0	; 160
    1c92:	b0 e4       	ldi	r27, 0x40	; 64
    1c94:	8b 87       	std	Y+11, r24	; 0x0b
    1c96:	9c 87       	std	Y+12, r25	; 0x0c
    1c98:	ad 87       	std	Y+13, r26	; 0x0d
    1c9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	4a ef       	ldi	r20, 0xFA	; 250
    1caa:	54 e4       	ldi	r21, 0x44	; 68
    1cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	8f 83       	std	Y+7, r24	; 0x07
    1cb6:	98 87       	std	Y+8, r25	; 0x08
    1cb8:	a9 87       	std	Y+9, r26	; 0x09
    1cba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cbe:	78 85       	ldd	r23, Y+8	; 0x08
    1cc0:	89 85       	ldd	r24, Y+9	; 0x09
    1cc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e8       	ldi	r20, 0x80	; 128
    1cca:	5f e3       	ldi	r21, 0x3F	; 63
    1ccc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cd0:	88 23       	and	r24, r24
    1cd2:	2c f4       	brge	.+10     	; 0x1cde <LCD_voidInit_4bitMode+0x5f4>
		__ticks = 1;
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	9e 83       	std	Y+6, r25	; 0x06
    1cda:	8d 83       	std	Y+5, r24	; 0x05
    1cdc:	3f c0       	rjmp	.+126    	; 0x1d5c <LCD_voidInit_4bitMode+0x672>
	else if (__tmp > 65535)
    1cde:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce0:	78 85       	ldd	r23, Y+8	; 0x08
    1ce2:	89 85       	ldd	r24, Y+9	; 0x09
    1ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	3f ef       	ldi	r19, 0xFF	; 255
    1cea:	4f e7       	ldi	r20, 0x7F	; 127
    1cec:	57 e4       	ldi	r21, 0x47	; 71
    1cee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cf2:	18 16       	cp	r1, r24
    1cf4:	4c f5       	brge	.+82     	; 0x1d48 <LCD_voidInit_4bitMode+0x65e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e2       	ldi	r20, 0x20	; 32
    1d04:	51 e4       	ldi	r21, 0x41	; 65
    1d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	bc 01       	movw	r22, r24
    1d10:	cd 01       	movw	r24, r26
    1d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	9e 83       	std	Y+6, r25	; 0x06
    1d1c:	8d 83       	std	Y+5, r24	; 0x05
    1d1e:	0f c0       	rjmp	.+30     	; 0x1d3e <LCD_voidInit_4bitMode+0x654>
    1d20:	88 ec       	ldi	r24, 0xC8	; 200
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	9c 83       	std	Y+4, r25	; 0x04
    1d26:	8b 83       	std	Y+3, r24	; 0x03
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	f1 f7       	brne	.-4      	; 0x1d2c <LCD_voidInit_4bitMode+0x642>
    1d30:	9c 83       	std	Y+4, r25	; 0x04
    1d32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d34:	8d 81       	ldd	r24, Y+5	; 0x05
    1d36:	9e 81       	ldd	r25, Y+6	; 0x06
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	9e 83       	std	Y+6, r25	; 0x06
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d40:	9e 81       	ldd	r25, Y+6	; 0x06
    1d42:	00 97       	sbiw	r24, 0x00	; 0
    1d44:	69 f7       	brne	.-38     	; 0x1d20 <LCD_voidInit_4bitMode+0x636>
    1d46:	14 c0       	rjmp	.+40     	; 0x1d70 <LCD_voidInit_4bitMode+0x686>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d48:	6f 81       	ldd	r22, Y+7	; 0x07
    1d4a:	78 85       	ldd	r23, Y+8	; 0x08
    1d4c:	89 85       	ldd	r24, Y+9	; 0x09
    1d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	9e 83       	std	Y+6, r25	; 0x06
    1d5a:	8d 83       	std	Y+5, r24	; 0x05
    1d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d60:	9a 83       	std	Y+2, r25	; 0x02
    1d62:	89 83       	std	Y+1, r24	; 0x01
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	9a 81       	ldd	r25, Y+2	; 0x02
    1d68:	01 97       	sbiw	r24, 0x01	; 1
    1d6a:	f1 f7       	brne	.-4      	; 0x1d68 <LCD_voidInit_4bitMode+0x67e>
    1d6c:	9a 83       	std	Y+2, r25	; 0x02
    1d6e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    1d70:	cc 5a       	subi	r28, 0xAC	; 172
    1d72:	df 4f       	sbci	r29, 0xFF	; 255
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	f8 94       	cli
    1d78:	de bf       	out	0x3e, r29	; 62
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	cd bf       	out	0x3d, r28	; 61
    1d7e:	cf 91       	pop	r28
    1d80:	df 91       	pop	r29
    1d82:	1f 91       	pop	r17
    1d84:	0f 91       	pop	r16
    1d86:	08 95       	ret

00001d88 <LCD_voidSendCommand>:
void LCD_voidSendCommand(uint8 u8CmdCpy){
    1d88:	df 93       	push	r29
    1d8a:	cf 93       	push	r28
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
    1d90:	2f 97       	sbiw	r28, 0x0f	; 15
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	f8 94       	cli
    1d96:	de bf       	out	0x3e, r29	; 62
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	cd bf       	out	0x3d, r28	; 61
    1d9c:	8f 87       	std	Y+15, r24	; 0x0f
	/* Command(0) or Data(1) */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_RSPIN, DIO_LOW);
    1d9e:	83 e0       	ldi	r24, 0x03	; 3
    1da0:	62 e0       	ldi	r22, 0x02	; 2
    1da2:	40 e0       	ldi	r20, 0x00	; 0
    1da4:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>
	/* Read(1) or Write(0) */
	//DIO_voidWritePin(lcd_CONTROLPORT, lcd_RWPIN, DIO_LOW);
	/* Write Commands on Data Pins*/
	DIO_voidWritePort(lcd_DATAPORT, u8CmdCpy);
    1da8:	84 e0       	ldi	r24, 0x04	; 4
    1daa:	6f 85       	ldd	r22, Y+15	; 0x0f
    1dac:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <DIO_voidWritePort>
	/* Enable Sequence */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    1db0:	83 e0       	ldi	r24, 0x03	; 3
    1db2:	63 e0       	ldi	r22, 0x03	; 3
    1db4:	41 e0       	ldi	r20, 0x01	; 1
    1db6:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	a0 ea       	ldi	r26, 0xA0	; 160
    1dc0:	b0 e4       	ldi	r27, 0x40	; 64
    1dc2:	8b 87       	std	Y+11, r24	; 0x0b
    1dc4:	9c 87       	std	Y+12, r25	; 0x0c
    1dc6:	ad 87       	std	Y+13, r26	; 0x0d
    1dc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	4a ef       	ldi	r20, 0xFA	; 250
    1dd8:	54 e4       	ldi	r21, 0x44	; 68
    1dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	8f 83       	std	Y+7, r24	; 0x07
    1de4:	98 87       	std	Y+8, r25	; 0x08
    1de6:	a9 87       	std	Y+9, r26	; 0x09
    1de8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dea:	6f 81       	ldd	r22, Y+7	; 0x07
    1dec:	78 85       	ldd	r23, Y+8	; 0x08
    1dee:	89 85       	ldd	r24, Y+9	; 0x09
    1df0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e8       	ldi	r20, 0x80	; 128
    1df8:	5f e3       	ldi	r21, 0x3F	; 63
    1dfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dfe:	88 23       	and	r24, r24
    1e00:	2c f4       	brge	.+10     	; 0x1e0c <LCD_voidSendCommand+0x84>
		__ticks = 1;
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	9e 83       	std	Y+6, r25	; 0x06
    1e08:	8d 83       	std	Y+5, r24	; 0x05
    1e0a:	3f c0       	rjmp	.+126    	; 0x1e8a <LCD_voidSendCommand+0x102>
	else if (__tmp > 65535)
    1e0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e0e:	78 85       	ldd	r23, Y+8	; 0x08
    1e10:	89 85       	ldd	r24, Y+9	; 0x09
    1e12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	3f ef       	ldi	r19, 0xFF	; 255
    1e18:	4f e7       	ldi	r20, 0x7F	; 127
    1e1a:	57 e4       	ldi	r21, 0x47	; 71
    1e1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e20:	18 16       	cp	r1, r24
    1e22:	4c f5       	brge	.+82     	; 0x1e76 <LCD_voidSendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	40 e2       	ldi	r20, 0x20	; 32
    1e32:	51 e4       	ldi	r21, 0x41	; 65
    1e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	bc 01       	movw	r22, r24
    1e3e:	cd 01       	movw	r24, r26
    1e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	9e 83       	std	Y+6, r25	; 0x06
    1e4a:	8d 83       	std	Y+5, r24	; 0x05
    1e4c:	0f c0       	rjmp	.+30     	; 0x1e6c <LCD_voidSendCommand+0xe4>
    1e4e:	88 ec       	ldi	r24, 0xC8	; 200
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	9c 83       	std	Y+4, r25	; 0x04
    1e54:	8b 83       	std	Y+3, r24	; 0x03
    1e56:	8b 81       	ldd	r24, Y+3	; 0x03
    1e58:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	f1 f7       	brne	.-4      	; 0x1e5a <LCD_voidSendCommand+0xd2>
    1e5e:	9c 83       	std	Y+4, r25	; 0x04
    1e60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e62:	8d 81       	ldd	r24, Y+5	; 0x05
    1e64:	9e 81       	ldd	r25, Y+6	; 0x06
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	9e 83       	std	Y+6, r25	; 0x06
    1e6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e70:	00 97       	sbiw	r24, 0x00	; 0
    1e72:	69 f7       	brne	.-38     	; 0x1e4e <LCD_voidSendCommand+0xc6>
    1e74:	14 c0       	rjmp	.+40     	; 0x1e9e <LCD_voidSendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e76:	6f 81       	ldd	r22, Y+7	; 0x07
    1e78:	78 85       	ldd	r23, Y+8	; 0x08
    1e7a:	89 85       	ldd	r24, Y+9	; 0x09
    1e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	9e 83       	std	Y+6, r25	; 0x06
    1e88:	8d 83       	std	Y+5, r24	; 0x05
    1e8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8e:	9a 83       	std	Y+2, r25	; 0x02
    1e90:	89 83       	std	Y+1, r24	; 0x01
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	9a 81       	ldd	r25, Y+2	; 0x02
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	f1 f7       	brne	.-4      	; 0x1e96 <LCD_voidSendCommand+0x10e>
    1e9a:	9a 83       	std	Y+2, r25	; 0x02
    1e9c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    1e9e:	83 e0       	ldi	r24, 0x03	; 3
    1ea0:	63 e0       	ldi	r22, 0x03	; 3
    1ea2:	40 e0       	ldi	r20, 0x00	; 0
    1ea4:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>
}
    1ea8:	2f 96       	adiw	r28, 0x0f	; 15
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <LCD_voidSendCommand_4bitMode>:

void LCD_voidSendCommand_4bitMode(uint8 u8CmdCpy){
    1eba:	0f 93       	push	r16
    1ebc:	1f 93       	push	r17
    1ebe:	df 93       	push	r29
    1ec0:	cf 93       	push	r28
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	c1 56       	subi	r28, 0x61	; 97
    1ec8:	d0 40       	sbci	r29, 0x00	; 0
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	f8 94       	cli
    1ece:	de bf       	out	0x3e, r29	; 62
    1ed0:	0f be       	out	0x3f, r0	; 63
    1ed2:	cd bf       	out	0x3d, r28	; 61
    1ed4:	fe 01       	movw	r30, r28
    1ed6:	ef 59       	subi	r30, 0x9F	; 159
    1ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eda:	80 83       	st	Z, r24
    /* Send Higher nibble of command */
    DIO_voidWritePort(lcd_DATAPORT, (lcd_DATAPORT & 0x0F) | (u8CmdCpy & 0xF0));
    1edc:	fe 01       	movw	r30, r28
    1ede:	ef 59       	subi	r30, 0x9F	; 159
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	80 81       	ld	r24, Z
    1ee4:	80 7f       	andi	r24, 0xF0	; 240
    1ee6:	84 60       	ori	r24, 0x04	; 4
    1ee8:	98 2f       	mov	r25, r24
    1eea:	84 e0       	ldi	r24, 0x04	; 4
    1eec:	69 2f       	mov	r22, r25
    1eee:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <DIO_voidWritePort>
    /* Command(0) or Data(1) */
    DIO_voidWritePin(lcd_CONTROLPORT, lcd_RSPIN, DIO_LOW);
    1ef2:	83 e0       	ldi	r24, 0x03	; 3
    1ef4:	62 e0       	ldi	r22, 0x02	; 2
    1ef6:	40 e0       	ldi	r20, 0x00	; 0
    1ef8:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>
    /* Read(1) or Write(0) */
    //DIO_voidWritePin(lcd_CONTROLPORT, lcd_RWPIN, DIO_LOW);

    /* Enable Sequence */
    DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    1efc:	83 e0       	ldi	r24, 0x03	; 3
    1efe:	63 e0       	ldi	r22, 0x03	; 3
    1f00:	41 e0       	ldi	r20, 0x01	; 1
    1f02:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>
    1f06:	fe 01       	movw	r30, r28
    1f08:	e3 5a       	subi	r30, 0xA3	; 163
    1f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	a0 ea       	ldi	r26, 0xA0	; 160
    1f12:	b0 e4       	ldi	r27, 0x40	; 64
    1f14:	80 83       	st	Z, r24
    1f16:	91 83       	std	Z+1, r25	; 0x01
    1f18:	a2 83       	std	Z+2, r26	; 0x02
    1f1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f1c:	8e 01       	movw	r16, r28
    1f1e:	07 5a       	subi	r16, 0xA7	; 167
    1f20:	1f 4f       	sbci	r17, 0xFF	; 255
    1f22:	fe 01       	movw	r30, r28
    1f24:	e3 5a       	subi	r30, 0xA3	; 163
    1f26:	ff 4f       	sbci	r31, 0xFF	; 255
    1f28:	60 81       	ld	r22, Z
    1f2a:	71 81       	ldd	r23, Z+1	; 0x01
    1f2c:	82 81       	ldd	r24, Z+2	; 0x02
    1f2e:	93 81       	ldd	r25, Z+3	; 0x03
    1f30:	2b ea       	ldi	r18, 0xAB	; 171
    1f32:	3a ea       	ldi	r19, 0xAA	; 170
    1f34:	4a e2       	ldi	r20, 0x2A	; 42
    1f36:	50 e4       	ldi	r21, 0x40	; 64
    1f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	f8 01       	movw	r30, r16
    1f42:	80 83       	st	Z, r24
    1f44:	91 83       	std	Z+1, r25	; 0x01
    1f46:	a2 83       	std	Z+2, r26	; 0x02
    1f48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	e7 5a       	subi	r30, 0xA7	; 167
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	60 81       	ld	r22, Z
    1f52:	71 81       	ldd	r23, Z+1	; 0x01
    1f54:	82 81       	ldd	r24, Z+2	; 0x02
    1f56:	93 81       	ldd	r25, Z+3	; 0x03
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e8       	ldi	r20, 0x80	; 128
    1f5e:	5f e3       	ldi	r21, 0x3F	; 63
    1f60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f64:	88 23       	and	r24, r24
    1f66:	34 f4       	brge	.+12     	; 0x1f74 <LCD_voidSendCommand_4bitMode+0xba>
		__ticks = 1;
    1f68:	fe 01       	movw	r30, r28
    1f6a:	e8 5a       	subi	r30, 0xA8	; 168
    1f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	80 83       	st	Z, r24
    1f72:	e0 c0       	rjmp	.+448    	; 0x2134 <LCD_voidSendCommand_4bitMode+0x27a>
	else if (__tmp > 255)
    1f74:	fe 01       	movw	r30, r28
    1f76:	e7 5a       	subi	r30, 0xA7	; 167
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	60 81       	ld	r22, Z
    1f7c:	71 81       	ldd	r23, Z+1	; 0x01
    1f7e:	82 81       	ldd	r24, Z+2	; 0x02
    1f80:	93 81       	ldd	r25, Z+3	; 0x03
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	4f e7       	ldi	r20, 0x7F	; 127
    1f88:	53 e4       	ldi	r21, 0x43	; 67
    1f8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f8e:	18 16       	cp	r1, r24
    1f90:	0c f0       	brlt	.+2      	; 0x1f94 <LCD_voidSendCommand_4bitMode+0xda>
    1f92:	c0 c0       	rjmp	.+384    	; 0x2114 <LCD_voidSendCommand_4bitMode+0x25a>
	{
		_delay_ms(__us / 1000.0);
    1f94:	fe 01       	movw	r30, r28
    1f96:	e3 5a       	subi	r30, 0xA3	; 163
    1f98:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9a:	60 81       	ld	r22, Z
    1f9c:	71 81       	ldd	r23, Z+1	; 0x01
    1f9e:	82 81       	ldd	r24, Z+2	; 0x02
    1fa0:	93 81       	ldd	r25, Z+3	; 0x03
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	4a e7       	ldi	r20, 0x7A	; 122
    1fa8:	54 e4       	ldi	r21, 0x44	; 68
    1faa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	fe 01       	movw	r30, r28
    1fb4:	ec 5a       	subi	r30, 0xAC	; 172
    1fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb8:	80 83       	st	Z, r24
    1fba:	91 83       	std	Z+1, r25	; 0x01
    1fbc:	a2 83       	std	Z+2, r26	; 0x02
    1fbe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc0:	8e 01       	movw	r16, r28
    1fc2:	00 5b       	subi	r16, 0xB0	; 176
    1fc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	ec 5a       	subi	r30, 0xAC	; 172
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	60 81       	ld	r22, Z
    1fce:	71 81       	ldd	r23, Z+1	; 0x01
    1fd0:	82 81       	ldd	r24, Z+2	; 0x02
    1fd2:	93 81       	ldd	r25, Z+3	; 0x03
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	4a ef       	ldi	r20, 0xFA	; 250
    1fda:	54 e4       	ldi	r21, 0x44	; 68
    1fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	f8 01       	movw	r30, r16
    1fe6:	80 83       	st	Z, r24
    1fe8:	91 83       	std	Z+1, r25	; 0x01
    1fea:	a2 83       	std	Z+2, r26	; 0x02
    1fec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fee:	fe 01       	movw	r30, r28
    1ff0:	e0 5b       	subi	r30, 0xB0	; 176
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	60 81       	ld	r22, Z
    1ff6:	71 81       	ldd	r23, Z+1	; 0x01
    1ff8:	82 81       	ldd	r24, Z+2	; 0x02
    1ffa:	93 81       	ldd	r25, Z+3	; 0x03
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	40 e8       	ldi	r20, 0x80	; 128
    2002:	5f e3       	ldi	r21, 0x3F	; 63
    2004:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2008:	88 23       	and	r24, r24
    200a:	44 f4       	brge	.+16     	; 0x201c <LCD_voidSendCommand_4bitMode+0x162>
		__ticks = 1;
    200c:	fe 01       	movw	r30, r28
    200e:	e2 5b       	subi	r30, 0xB2	; 178
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	91 83       	std	Z+1, r25	; 0x01
    2018:	80 83       	st	Z, r24
    201a:	64 c0       	rjmp	.+200    	; 0x20e4 <LCD_voidSendCommand_4bitMode+0x22a>
	else if (__tmp > 65535)
    201c:	fe 01       	movw	r30, r28
    201e:	e0 5b       	subi	r30, 0xB0	; 176
    2020:	ff 4f       	sbci	r31, 0xFF	; 255
    2022:	60 81       	ld	r22, Z
    2024:	71 81       	ldd	r23, Z+1	; 0x01
    2026:	82 81       	ldd	r24, Z+2	; 0x02
    2028:	93 81       	ldd	r25, Z+3	; 0x03
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	3f ef       	ldi	r19, 0xFF	; 255
    202e:	4f e7       	ldi	r20, 0x7F	; 127
    2030:	57 e4       	ldi	r21, 0x47	; 71
    2032:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2036:	18 16       	cp	r1, r24
    2038:	0c f0       	brlt	.+2      	; 0x203c <LCD_voidSendCommand_4bitMode+0x182>
    203a:	43 c0       	rjmp	.+134    	; 0x20c2 <LCD_voidSendCommand_4bitMode+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    203c:	fe 01       	movw	r30, r28
    203e:	ec 5a       	subi	r30, 0xAC	; 172
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	60 81       	ld	r22, Z
    2044:	71 81       	ldd	r23, Z+1	; 0x01
    2046:	82 81       	ldd	r24, Z+2	; 0x02
    2048:	93 81       	ldd	r25, Z+3	; 0x03
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	40 e2       	ldi	r20, 0x20	; 32
    2050:	51 e4       	ldi	r21, 0x41	; 65
    2052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	8e 01       	movw	r16, r28
    205c:	02 5b       	subi	r16, 0xB2	; 178
    205e:	1f 4f       	sbci	r17, 0xFF	; 255
    2060:	bc 01       	movw	r22, r24
    2062:	cd 01       	movw	r24, r26
    2064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	f8 01       	movw	r30, r16
    206e:	91 83       	std	Z+1, r25	; 0x01
    2070:	80 83       	st	Z, r24
    2072:	1f c0       	rjmp	.+62     	; 0x20b2 <LCD_voidSendCommand_4bitMode+0x1f8>
    2074:	fe 01       	movw	r30, r28
    2076:	e4 5b       	subi	r30, 0xB4	; 180
    2078:	ff 4f       	sbci	r31, 0xFF	; 255
    207a:	88 ec       	ldi	r24, 0xC8	; 200
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	91 83       	std	Z+1, r25	; 0x01
    2080:	80 83       	st	Z, r24
    2082:	fe 01       	movw	r30, r28
    2084:	e4 5b       	subi	r30, 0xB4	; 180
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	80 81       	ld	r24, Z
    208a:	91 81       	ldd	r25, Z+1	; 0x01
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	f1 f7       	brne	.-4      	; 0x208c <LCD_voidSendCommand_4bitMode+0x1d2>
    2090:	fe 01       	movw	r30, r28
    2092:	e4 5b       	subi	r30, 0xB4	; 180
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	91 83       	std	Z+1, r25	; 0x01
    2098:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    209a:	de 01       	movw	r26, r28
    209c:	a2 5b       	subi	r26, 0xB2	; 178
    209e:	bf 4f       	sbci	r27, 0xFF	; 255
    20a0:	fe 01       	movw	r30, r28
    20a2:	e2 5b       	subi	r30, 0xB2	; 178
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	80 81       	ld	r24, Z
    20a8:	91 81       	ldd	r25, Z+1	; 0x01
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	11 96       	adiw	r26, 0x01	; 1
    20ae:	9c 93       	st	X, r25
    20b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b2:	fe 01       	movw	r30, r28
    20b4:	e2 5b       	subi	r30, 0xB2	; 178
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	80 81       	ld	r24, Z
    20ba:	91 81       	ldd	r25, Z+1	; 0x01
    20bc:	00 97       	sbiw	r24, 0x00	; 0
    20be:	d1 f6       	brne	.-76     	; 0x2074 <LCD_voidSendCommand_4bitMode+0x1ba>
    20c0:	4b c0       	rjmp	.+150    	; 0x2158 <LCD_voidSendCommand_4bitMode+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c2:	8e 01       	movw	r16, r28
    20c4:	02 5b       	subi	r16, 0xB2	; 178
    20c6:	1f 4f       	sbci	r17, 0xFF	; 255
    20c8:	fe 01       	movw	r30, r28
    20ca:	e0 5b       	subi	r30, 0xB0	; 176
    20cc:	ff 4f       	sbci	r31, 0xFF	; 255
    20ce:	60 81       	ld	r22, Z
    20d0:	71 81       	ldd	r23, Z+1	; 0x01
    20d2:	82 81       	ldd	r24, Z+2	; 0x02
    20d4:	93 81       	ldd	r25, Z+3	; 0x03
    20d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	f8 01       	movw	r30, r16
    20e0:	91 83       	std	Z+1, r25	; 0x01
    20e2:	80 83       	st	Z, r24
    20e4:	de 01       	movw	r26, r28
    20e6:	a6 5b       	subi	r26, 0xB6	; 182
    20e8:	bf 4f       	sbci	r27, 0xFF	; 255
    20ea:	fe 01       	movw	r30, r28
    20ec:	e2 5b       	subi	r30, 0xB2	; 178
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	80 81       	ld	r24, Z
    20f2:	91 81       	ldd	r25, Z+1	; 0x01
    20f4:	11 96       	adiw	r26, 0x01	; 1
    20f6:	9c 93       	st	X, r25
    20f8:	8e 93       	st	-X, r24
    20fa:	fe 01       	movw	r30, r28
    20fc:	e6 5b       	subi	r30, 0xB6	; 182
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	80 81       	ld	r24, Z
    2102:	91 81       	ldd	r25, Z+1	; 0x01
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	f1 f7       	brne	.-4      	; 0x2104 <LCD_voidSendCommand_4bitMode+0x24a>
    2108:	fe 01       	movw	r30, r28
    210a:	e6 5b       	subi	r30, 0xB6	; 182
    210c:	ff 4f       	sbci	r31, 0xFF	; 255
    210e:	91 83       	std	Z+1, r25	; 0x01
    2110:	80 83       	st	Z, r24
    2112:	22 c0       	rjmp	.+68     	; 0x2158 <LCD_voidSendCommand_4bitMode+0x29e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2114:	8e 01       	movw	r16, r28
    2116:	08 5a       	subi	r16, 0xA8	; 168
    2118:	1f 4f       	sbci	r17, 0xFF	; 255
    211a:	fe 01       	movw	r30, r28
    211c:	e7 5a       	subi	r30, 0xA7	; 167
    211e:	ff 4f       	sbci	r31, 0xFF	; 255
    2120:	60 81       	ld	r22, Z
    2122:	71 81       	ldd	r23, Z+1	; 0x01
    2124:	82 81       	ldd	r24, Z+2	; 0x02
    2126:	93 81       	ldd	r25, Z+3	; 0x03
    2128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	f8 01       	movw	r30, r16
    2132:	80 83       	st	Z, r24
    2134:	de 01       	movw	r26, r28
    2136:	a7 5b       	subi	r26, 0xB7	; 183
    2138:	bf 4f       	sbci	r27, 0xFF	; 255
    213a:	fe 01       	movw	r30, r28
    213c:	e8 5a       	subi	r30, 0xA8	; 168
    213e:	ff 4f       	sbci	r31, 0xFF	; 255
    2140:	80 81       	ld	r24, Z
    2142:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2144:	fe 01       	movw	r30, r28
    2146:	e7 5b       	subi	r30, 0xB7	; 183
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	80 81       	ld	r24, Z
    214c:	8a 95       	dec	r24
    214e:	f1 f7       	brne	.-4      	; 0x214c <LCD_voidSendCommand_4bitMode+0x292>
    2150:	fe 01       	movw	r30, r28
    2152:	e7 5b       	subi	r30, 0xB7	; 183
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	80 83       	st	Z, r24
    _delay_us(5);
    DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    2158:	83 e0       	ldi	r24, 0x03	; 3
    215a:	63 e0       	ldi	r22, 0x03	; 3
    215c:	40 e0       	ldi	r20, 0x00	; 0
    215e:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>
    2162:	fe 01       	movw	r30, r28
    2164:	eb 5b       	subi	r30, 0xBB	; 187
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	a8 e4       	ldi	r26, 0x48	; 72
    216e:	b3 e4       	ldi	r27, 0x43	; 67
    2170:	80 83       	st	Z, r24
    2172:	91 83       	std	Z+1, r25	; 0x01
    2174:	a2 83       	std	Z+2, r26	; 0x02
    2176:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2178:	8e 01       	movw	r16, r28
    217a:	0f 5b       	subi	r16, 0xBF	; 191
    217c:	1f 4f       	sbci	r17, 0xFF	; 255
    217e:	fe 01       	movw	r30, r28
    2180:	eb 5b       	subi	r30, 0xBB	; 187
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	60 81       	ld	r22, Z
    2186:	71 81       	ldd	r23, Z+1	; 0x01
    2188:	82 81       	ldd	r24, Z+2	; 0x02
    218a:	93 81       	ldd	r25, Z+3	; 0x03
    218c:	2b ea       	ldi	r18, 0xAB	; 171
    218e:	3a ea       	ldi	r19, 0xAA	; 170
    2190:	4a e2       	ldi	r20, 0x2A	; 42
    2192:	50 e4       	ldi	r21, 0x40	; 64
    2194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	f8 01       	movw	r30, r16
    219e:	80 83       	st	Z, r24
    21a0:	91 83       	std	Z+1, r25	; 0x01
    21a2:	a2 83       	std	Z+2, r26	; 0x02
    21a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21a6:	fe 01       	movw	r30, r28
    21a8:	ef 5b       	subi	r30, 0xBF	; 191
    21aa:	ff 4f       	sbci	r31, 0xFF	; 255
    21ac:	60 81       	ld	r22, Z
    21ae:	71 81       	ldd	r23, Z+1	; 0x01
    21b0:	82 81       	ldd	r24, Z+2	; 0x02
    21b2:	93 81       	ldd	r25, Z+3	; 0x03
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	40 e8       	ldi	r20, 0x80	; 128
    21ba:	5f e3       	ldi	r21, 0x3F	; 63
    21bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21c0:	88 23       	and	r24, r24
    21c2:	34 f4       	brge	.+12     	; 0x21d0 <LCD_voidSendCommand_4bitMode+0x316>
		__ticks = 1;
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	fe 01       	movw	r30, r28
    21c8:	e0 5c       	subi	r30, 0xC0	; 192
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	80 83       	st	Z, r24
    21ce:	9d c0       	rjmp	.+314    	; 0x230a <LCD_voidSendCommand_4bitMode+0x450>
	else if (__tmp > 255)
    21d0:	fe 01       	movw	r30, r28
    21d2:	ef 5b       	subi	r30, 0xBF	; 191
    21d4:	ff 4f       	sbci	r31, 0xFF	; 255
    21d6:	60 81       	ld	r22, Z
    21d8:	71 81       	ldd	r23, Z+1	; 0x01
    21da:	82 81       	ldd	r24, Z+2	; 0x02
    21dc:	93 81       	ldd	r25, Z+3	; 0x03
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	4f e7       	ldi	r20, 0x7F	; 127
    21e4:	53 e4       	ldi	r21, 0x43	; 67
    21e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21ea:	18 16       	cp	r1, r24
    21ec:	0c f0       	brlt	.+2      	; 0x21f0 <LCD_voidSendCommand_4bitMode+0x336>
    21ee:	7e c0       	rjmp	.+252    	; 0x22ec <LCD_voidSendCommand_4bitMode+0x432>
	{
		_delay_ms(__us / 1000.0);
    21f0:	fe 01       	movw	r30, r28
    21f2:	eb 5b       	subi	r30, 0xBB	; 187
    21f4:	ff 4f       	sbci	r31, 0xFF	; 255
    21f6:	60 81       	ld	r22, Z
    21f8:	71 81       	ldd	r23, Z+1	; 0x01
    21fa:	82 81       	ldd	r24, Z+2	; 0x02
    21fc:	93 81       	ldd	r25, Z+3	; 0x03
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	4a e7       	ldi	r20, 0x7A	; 122
    2204:	54 e4       	ldi	r21, 0x44	; 68
    2206:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	8c af       	std	Y+60, r24	; 0x3c
    2210:	9d af       	std	Y+61, r25	; 0x3d
    2212:	ae af       	std	Y+62, r26	; 0x3e
    2214:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2216:	6c ad       	ldd	r22, Y+60	; 0x3c
    2218:	7d ad       	ldd	r23, Y+61	; 0x3d
    221a:	8e ad       	ldd	r24, Y+62	; 0x3e
    221c:	9f ad       	ldd	r25, Y+63	; 0x3f
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	4a ef       	ldi	r20, 0xFA	; 250
    2224:	54 e4       	ldi	r21, 0x44	; 68
    2226:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	88 af       	std	Y+56, r24	; 0x38
    2230:	99 af       	std	Y+57, r25	; 0x39
    2232:	aa af       	std	Y+58, r26	; 0x3a
    2234:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2236:	68 ad       	ldd	r22, Y+56	; 0x38
    2238:	79 ad       	ldd	r23, Y+57	; 0x39
    223a:	8a ad       	ldd	r24, Y+58	; 0x3a
    223c:	9b ad       	ldd	r25, Y+59	; 0x3b
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	40 e8       	ldi	r20, 0x80	; 128
    2244:	5f e3       	ldi	r21, 0x3F	; 63
    2246:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    224a:	88 23       	and	r24, r24
    224c:	2c f4       	brge	.+10     	; 0x2258 <LCD_voidSendCommand_4bitMode+0x39e>
		__ticks = 1;
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	9f ab       	std	Y+55, r25	; 0x37
    2254:	8e ab       	std	Y+54, r24	; 0x36
    2256:	3f c0       	rjmp	.+126    	; 0x22d6 <LCD_voidSendCommand_4bitMode+0x41c>
	else if (__tmp > 65535)
    2258:	68 ad       	ldd	r22, Y+56	; 0x38
    225a:	79 ad       	ldd	r23, Y+57	; 0x39
    225c:	8a ad       	ldd	r24, Y+58	; 0x3a
    225e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	3f ef       	ldi	r19, 0xFF	; 255
    2264:	4f e7       	ldi	r20, 0x7F	; 127
    2266:	57 e4       	ldi	r21, 0x47	; 71
    2268:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    226c:	18 16       	cp	r1, r24
    226e:	4c f5       	brge	.+82     	; 0x22c2 <LCD_voidSendCommand_4bitMode+0x408>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2270:	6c ad       	ldd	r22, Y+60	; 0x3c
    2272:	7d ad       	ldd	r23, Y+61	; 0x3d
    2274:	8e ad       	ldd	r24, Y+62	; 0x3e
    2276:	9f ad       	ldd	r25, Y+63	; 0x3f
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	40 e2       	ldi	r20, 0x20	; 32
    227e:	51 e4       	ldi	r21, 0x41	; 65
    2280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	bc 01       	movw	r22, r24
    228a:	cd 01       	movw	r24, r26
    228c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	9f ab       	std	Y+55, r25	; 0x37
    2296:	8e ab       	std	Y+54, r24	; 0x36
    2298:	0f c0       	rjmp	.+30     	; 0x22b8 <LCD_voidSendCommand_4bitMode+0x3fe>
    229a:	88 ec       	ldi	r24, 0xC8	; 200
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	9d ab       	std	Y+53, r25	; 0x35
    22a0:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22a2:	8c a9       	ldd	r24, Y+52	; 0x34
    22a4:	9d a9       	ldd	r25, Y+53	; 0x35
    22a6:	01 97       	sbiw	r24, 0x01	; 1
    22a8:	f1 f7       	brne	.-4      	; 0x22a6 <LCD_voidSendCommand_4bitMode+0x3ec>
    22aa:	9d ab       	std	Y+53, r25	; 0x35
    22ac:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ae:	8e a9       	ldd	r24, Y+54	; 0x36
    22b0:	9f a9       	ldd	r25, Y+55	; 0x37
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	9f ab       	std	Y+55, r25	; 0x37
    22b6:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b8:	8e a9       	ldd	r24, Y+54	; 0x36
    22ba:	9f a9       	ldd	r25, Y+55	; 0x37
    22bc:	00 97       	sbiw	r24, 0x00	; 0
    22be:	69 f7       	brne	.-38     	; 0x229a <LCD_voidSendCommand_4bitMode+0x3e0>
    22c0:	2d c0       	rjmp	.+90     	; 0x231c <LCD_voidSendCommand_4bitMode+0x462>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c2:	68 ad       	ldd	r22, Y+56	; 0x38
    22c4:	79 ad       	ldd	r23, Y+57	; 0x39
    22c6:	8a ad       	ldd	r24, Y+58	; 0x3a
    22c8:	9b ad       	ldd	r25, Y+59	; 0x3b
    22ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	9f ab       	std	Y+55, r25	; 0x37
    22d4:	8e ab       	std	Y+54, r24	; 0x36
    22d6:	8e a9       	ldd	r24, Y+54	; 0x36
    22d8:	9f a9       	ldd	r25, Y+55	; 0x37
    22da:	9b ab       	std	Y+51, r25	; 0x33
    22dc:	8a ab       	std	Y+50, r24	; 0x32
    22de:	8a a9       	ldd	r24, Y+50	; 0x32
    22e0:	9b a9       	ldd	r25, Y+51	; 0x33
    22e2:	01 97       	sbiw	r24, 0x01	; 1
    22e4:	f1 f7       	brne	.-4      	; 0x22e2 <LCD_voidSendCommand_4bitMode+0x428>
    22e6:	9b ab       	std	Y+51, r25	; 0x33
    22e8:	8a ab       	std	Y+50, r24	; 0x32
    22ea:	18 c0       	rjmp	.+48     	; 0x231c <LCD_voidSendCommand_4bitMode+0x462>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22ec:	fe 01       	movw	r30, r28
    22ee:	ef 5b       	subi	r30, 0xBF	; 191
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	60 81       	ld	r22, Z
    22f4:	71 81       	ldd	r23, Z+1	; 0x01
    22f6:	82 81       	ldd	r24, Z+2	; 0x02
    22f8:	93 81       	ldd	r25, Z+3	; 0x03
    22fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	fe 01       	movw	r30, r28
    2304:	e0 5c       	subi	r30, 0xC0	; 192
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	80 83       	st	Z, r24
    230a:	fe 01       	movw	r30, r28
    230c:	e0 5c       	subi	r30, 0xC0	; 192
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	80 81       	ld	r24, Z
    2312:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2314:	89 a9       	ldd	r24, Y+49	; 0x31
    2316:	8a 95       	dec	r24
    2318:	f1 f7       	brne	.-4      	; 0x2316 <LCD_voidSendCommand_4bitMode+0x45c>
    231a:	89 ab       	std	Y+49, r24	; 0x31
    _delay_us(200);

    /* Send Lower nibble of command */
    DIO_voidWritePort(lcd_DATAPORT, (lcd_DATAPORT & 0x0F) | (u8CmdCpy <<4));
    231c:	fe 01       	movw	r30, r28
    231e:	ef 59       	subi	r30, 0x9F	; 159
    2320:	ff 4f       	sbci	r31, 0xFF	; 255
    2322:	80 81       	ld	r24, Z
    2324:	88 2f       	mov	r24, r24
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	82 95       	swap	r24
    232a:	92 95       	swap	r25
    232c:	90 7f       	andi	r25, 0xF0	; 240
    232e:	98 27       	eor	r25, r24
    2330:	80 7f       	andi	r24, 0xF0	; 240
    2332:	98 27       	eor	r25, r24
    2334:	84 60       	ori	r24, 0x04	; 4
    2336:	98 2f       	mov	r25, r24
    2338:	84 e0       	ldi	r24, 0x04	; 4
    233a:	69 2f       	mov	r22, r25
    233c:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <DIO_voidWritePort>
    /* Enable Sequence */
    DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    2340:	83 e0       	ldi	r24, 0x03	; 3
    2342:	63 e0       	ldi	r22, 0x03	; 3
    2344:	41 e0       	ldi	r20, 0x01	; 1
    2346:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	a0 ea       	ldi	r26, 0xA0	; 160
    2350:	b0 e4       	ldi	r27, 0x40	; 64
    2352:	8d a7       	std	Y+45, r24	; 0x2d
    2354:	9e a7       	std	Y+46, r25	; 0x2e
    2356:	af a7       	std	Y+47, r26	; 0x2f
    2358:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    235a:	6d a5       	ldd	r22, Y+45	; 0x2d
    235c:	7e a5       	ldd	r23, Y+46	; 0x2e
    235e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2360:	98 a9       	ldd	r25, Y+48	; 0x30
    2362:	2b ea       	ldi	r18, 0xAB	; 171
    2364:	3a ea       	ldi	r19, 0xAA	; 170
    2366:	4a e2       	ldi	r20, 0x2A	; 42
    2368:	50 e4       	ldi	r21, 0x40	; 64
    236a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	89 a7       	std	Y+41, r24	; 0x29
    2374:	9a a7       	std	Y+42, r25	; 0x2a
    2376:	ab a7       	std	Y+43, r26	; 0x2b
    2378:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    237a:	69 a5       	ldd	r22, Y+41	; 0x29
    237c:	7a a5       	ldd	r23, Y+42	; 0x2a
    237e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2380:	9c a5       	ldd	r25, Y+44	; 0x2c
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	40 e8       	ldi	r20, 0x80	; 128
    2388:	5f e3       	ldi	r21, 0x3F	; 63
    238a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    238e:	88 23       	and	r24, r24
    2390:	1c f4       	brge	.+6      	; 0x2398 <LCD_voidSendCommand_4bitMode+0x4de>
		__ticks = 1;
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	88 a7       	std	Y+40, r24	; 0x28
    2396:	91 c0       	rjmp	.+290    	; 0x24ba <LCD_voidSendCommand_4bitMode+0x600>
	else if (__tmp > 255)
    2398:	69 a5       	ldd	r22, Y+41	; 0x29
    239a:	7a a5       	ldd	r23, Y+42	; 0x2a
    239c:	8b a5       	ldd	r24, Y+43	; 0x2b
    239e:	9c a5       	ldd	r25, Y+44	; 0x2c
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	4f e7       	ldi	r20, 0x7F	; 127
    23a6:	53 e4       	ldi	r21, 0x43	; 67
    23a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ac:	18 16       	cp	r1, r24
    23ae:	0c f0       	brlt	.+2      	; 0x23b2 <LCD_voidSendCommand_4bitMode+0x4f8>
    23b0:	7b c0       	rjmp	.+246    	; 0x24a8 <LCD_voidSendCommand_4bitMode+0x5ee>
	{
		_delay_ms(__us / 1000.0);
    23b2:	6d a5       	ldd	r22, Y+45	; 0x2d
    23b4:	7e a5       	ldd	r23, Y+46	; 0x2e
    23b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    23b8:	98 a9       	ldd	r25, Y+48	; 0x30
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	4a e7       	ldi	r20, 0x7A	; 122
    23c0:	54 e4       	ldi	r21, 0x44	; 68
    23c2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	8c a3       	std	Y+36, r24	; 0x24
    23cc:	9d a3       	std	Y+37, r25	; 0x25
    23ce:	ae a3       	std	Y+38, r26	; 0x26
    23d0:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d2:	6c a1       	ldd	r22, Y+36	; 0x24
    23d4:	7d a1       	ldd	r23, Y+37	; 0x25
    23d6:	8e a1       	ldd	r24, Y+38	; 0x26
    23d8:	9f a1       	ldd	r25, Y+39	; 0x27
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	4a ef       	ldi	r20, 0xFA	; 250
    23e0:	54 e4       	ldi	r21, 0x44	; 68
    23e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	88 a3       	std	Y+32, r24	; 0x20
    23ec:	99 a3       	std	Y+33, r25	; 0x21
    23ee:	aa a3       	std	Y+34, r26	; 0x22
    23f0:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    23f2:	68 a1       	ldd	r22, Y+32	; 0x20
    23f4:	79 a1       	ldd	r23, Y+33	; 0x21
    23f6:	8a a1       	ldd	r24, Y+34	; 0x22
    23f8:	9b a1       	ldd	r25, Y+35	; 0x23
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e8       	ldi	r20, 0x80	; 128
    2400:	5f e3       	ldi	r21, 0x3F	; 63
    2402:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2406:	88 23       	and	r24, r24
    2408:	2c f4       	brge	.+10     	; 0x2414 <LCD_voidSendCommand_4bitMode+0x55a>
		__ticks = 1;
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	9f 8f       	std	Y+31, r25	; 0x1f
    2410:	8e 8f       	std	Y+30, r24	; 0x1e
    2412:	3f c0       	rjmp	.+126    	; 0x2492 <LCD_voidSendCommand_4bitMode+0x5d8>
	else if (__tmp > 65535)
    2414:	68 a1       	ldd	r22, Y+32	; 0x20
    2416:	79 a1       	ldd	r23, Y+33	; 0x21
    2418:	8a a1       	ldd	r24, Y+34	; 0x22
    241a:	9b a1       	ldd	r25, Y+35	; 0x23
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	3f ef       	ldi	r19, 0xFF	; 255
    2420:	4f e7       	ldi	r20, 0x7F	; 127
    2422:	57 e4       	ldi	r21, 0x47	; 71
    2424:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2428:	18 16       	cp	r1, r24
    242a:	4c f5       	brge	.+82     	; 0x247e <LCD_voidSendCommand_4bitMode+0x5c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    242c:	6c a1       	ldd	r22, Y+36	; 0x24
    242e:	7d a1       	ldd	r23, Y+37	; 0x25
    2430:	8e a1       	ldd	r24, Y+38	; 0x26
    2432:	9f a1       	ldd	r25, Y+39	; 0x27
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e2       	ldi	r20, 0x20	; 32
    243a:	51 e4       	ldi	r21, 0x41	; 65
    243c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	bc 01       	movw	r22, r24
    2446:	cd 01       	movw	r24, r26
    2448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	9f 8f       	std	Y+31, r25	; 0x1f
    2452:	8e 8f       	std	Y+30, r24	; 0x1e
    2454:	0f c0       	rjmp	.+30     	; 0x2474 <LCD_voidSendCommand_4bitMode+0x5ba>
    2456:	88 ec       	ldi	r24, 0xC8	; 200
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	9d 8f       	std	Y+29, r25	; 0x1d
    245c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    245e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2460:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	f1 f7       	brne	.-4      	; 0x2462 <LCD_voidSendCommand_4bitMode+0x5a8>
    2466:	9d 8f       	std	Y+29, r25	; 0x1d
    2468:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    246a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    246c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	9f 8f       	std	Y+31, r25	; 0x1f
    2472:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2474:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2476:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2478:	00 97       	sbiw	r24, 0x00	; 0
    247a:	69 f7       	brne	.-38     	; 0x2456 <LCD_voidSendCommand_4bitMode+0x59c>
    247c:	24 c0       	rjmp	.+72     	; 0x24c6 <LCD_voidSendCommand_4bitMode+0x60c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    247e:	68 a1       	ldd	r22, Y+32	; 0x20
    2480:	79 a1       	ldd	r23, Y+33	; 0x21
    2482:	8a a1       	ldd	r24, Y+34	; 0x22
    2484:	9b a1       	ldd	r25, Y+35	; 0x23
    2486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	9f 8f       	std	Y+31, r25	; 0x1f
    2490:	8e 8f       	std	Y+30, r24	; 0x1e
    2492:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2494:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2496:	9b 8f       	std	Y+27, r25	; 0x1b
    2498:	8a 8f       	std	Y+26, r24	; 0x1a
    249a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    249c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	f1 f7       	brne	.-4      	; 0x249e <LCD_voidSendCommand_4bitMode+0x5e4>
    24a2:	9b 8f       	std	Y+27, r25	; 0x1b
    24a4:	8a 8f       	std	Y+26, r24	; 0x1a
    24a6:	0f c0       	rjmp	.+30     	; 0x24c6 <LCD_voidSendCommand_4bitMode+0x60c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24a8:	69 a5       	ldd	r22, Y+41	; 0x29
    24aa:	7a a5       	ldd	r23, Y+42	; 0x2a
    24ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    24ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    24b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	88 a7       	std	Y+40, r24	; 0x28
    24ba:	88 a5       	ldd	r24, Y+40	; 0x28
    24bc:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24be:	89 8d       	ldd	r24, Y+25	; 0x19
    24c0:	8a 95       	dec	r24
    24c2:	f1 f7       	brne	.-4      	; 0x24c0 <LCD_voidSendCommand_4bitMode+0x606>
    24c4:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(5);
    DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    24c6:	83 e0       	ldi	r24, 0x03	; 3
    24c8:	63 e0       	ldi	r22, 0x03	; 3
    24ca:	40 e0       	ldi	r20, 0x00	; 0
    24cc:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	a0 ea       	ldi	r26, 0xA0	; 160
    24d6:	b0 e4       	ldi	r27, 0x40	; 64
    24d8:	8d 8b       	std	Y+21, r24	; 0x15
    24da:	9e 8b       	std	Y+22, r25	; 0x16
    24dc:	af 8b       	std	Y+23, r26	; 0x17
    24de:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24e0:	6d 89       	ldd	r22, Y+21	; 0x15
    24e2:	7e 89       	ldd	r23, Y+22	; 0x16
    24e4:	8f 89       	ldd	r24, Y+23	; 0x17
    24e6:	98 8d       	ldd	r25, Y+24	; 0x18
    24e8:	2b ea       	ldi	r18, 0xAB	; 171
    24ea:	3a ea       	ldi	r19, 0xAA	; 170
    24ec:	4a e2       	ldi	r20, 0x2A	; 42
    24ee:	50 e4       	ldi	r21, 0x40	; 64
    24f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	89 8b       	std	Y+17, r24	; 0x11
    24fa:	9a 8b       	std	Y+18, r25	; 0x12
    24fc:	ab 8b       	std	Y+19, r26	; 0x13
    24fe:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2500:	69 89       	ldd	r22, Y+17	; 0x11
    2502:	7a 89       	ldd	r23, Y+18	; 0x12
    2504:	8b 89       	ldd	r24, Y+19	; 0x13
    2506:	9c 89       	ldd	r25, Y+20	; 0x14
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 e8       	ldi	r20, 0x80	; 128
    250e:	5f e3       	ldi	r21, 0x3F	; 63
    2510:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2514:	88 23       	and	r24, r24
    2516:	1c f4       	brge	.+6      	; 0x251e <LCD_voidSendCommand_4bitMode+0x664>
		__ticks = 1;
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	88 8b       	std	Y+16, r24	; 0x10
    251c:	91 c0       	rjmp	.+290    	; 0x2640 <LCD_voidSendCommand_4bitMode+0x786>
	else if (__tmp > 255)
    251e:	69 89       	ldd	r22, Y+17	; 0x11
    2520:	7a 89       	ldd	r23, Y+18	; 0x12
    2522:	8b 89       	ldd	r24, Y+19	; 0x13
    2524:	9c 89       	ldd	r25, Y+20	; 0x14
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	4f e7       	ldi	r20, 0x7F	; 127
    252c:	53 e4       	ldi	r21, 0x43	; 67
    252e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2532:	18 16       	cp	r1, r24
    2534:	0c f0       	brlt	.+2      	; 0x2538 <LCD_voidSendCommand_4bitMode+0x67e>
    2536:	7b c0       	rjmp	.+246    	; 0x262e <LCD_voidSendCommand_4bitMode+0x774>
	{
		_delay_ms(__us / 1000.0);
    2538:	6d 89       	ldd	r22, Y+21	; 0x15
    253a:	7e 89       	ldd	r23, Y+22	; 0x16
    253c:	8f 89       	ldd	r24, Y+23	; 0x17
    253e:	98 8d       	ldd	r25, Y+24	; 0x18
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	4a e7       	ldi	r20, 0x7A	; 122
    2546:	54 e4       	ldi	r21, 0x44	; 68
    2548:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	8c 87       	std	Y+12, r24	; 0x0c
    2552:	9d 87       	std	Y+13, r25	; 0x0d
    2554:	ae 87       	std	Y+14, r26	; 0x0e
    2556:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2558:	6c 85       	ldd	r22, Y+12	; 0x0c
    255a:	7d 85       	ldd	r23, Y+13	; 0x0d
    255c:	8e 85       	ldd	r24, Y+14	; 0x0e
    255e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	4a ef       	ldi	r20, 0xFA	; 250
    2566:	54 e4       	ldi	r21, 0x44	; 68
    2568:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	88 87       	std	Y+8, r24	; 0x08
    2572:	99 87       	std	Y+9, r25	; 0x09
    2574:	aa 87       	std	Y+10, r26	; 0x0a
    2576:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2578:	68 85       	ldd	r22, Y+8	; 0x08
    257a:	79 85       	ldd	r23, Y+9	; 0x09
    257c:	8a 85       	ldd	r24, Y+10	; 0x0a
    257e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	40 e8       	ldi	r20, 0x80	; 128
    2586:	5f e3       	ldi	r21, 0x3F	; 63
    2588:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    258c:	88 23       	and	r24, r24
    258e:	2c f4       	brge	.+10     	; 0x259a <LCD_voidSendCommand_4bitMode+0x6e0>
		__ticks = 1;
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	9f 83       	std	Y+7, r25	; 0x07
    2596:	8e 83       	std	Y+6, r24	; 0x06
    2598:	3f c0       	rjmp	.+126    	; 0x2618 <LCD_voidSendCommand_4bitMode+0x75e>
	else if (__tmp > 65535)
    259a:	68 85       	ldd	r22, Y+8	; 0x08
    259c:	79 85       	ldd	r23, Y+9	; 0x09
    259e:	8a 85       	ldd	r24, Y+10	; 0x0a
    25a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	3f ef       	ldi	r19, 0xFF	; 255
    25a6:	4f e7       	ldi	r20, 0x7F	; 127
    25a8:	57 e4       	ldi	r21, 0x47	; 71
    25aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25ae:	18 16       	cp	r1, r24
    25b0:	4c f5       	brge	.+82     	; 0x2604 <LCD_voidSendCommand_4bitMode+0x74a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b2:	6c 85       	ldd	r22, Y+12	; 0x0c
    25b4:	7d 85       	ldd	r23, Y+13	; 0x0d
    25b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    25b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	40 e2       	ldi	r20, 0x20	; 32
    25c0:	51 e4       	ldi	r21, 0x41	; 65
    25c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	bc 01       	movw	r22, r24
    25cc:	cd 01       	movw	r24, r26
    25ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	9f 83       	std	Y+7, r25	; 0x07
    25d8:	8e 83       	std	Y+6, r24	; 0x06
    25da:	0f c0       	rjmp	.+30     	; 0x25fa <LCD_voidSendCommand_4bitMode+0x740>
    25dc:	88 ec       	ldi	r24, 0xC8	; 200
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	9d 83       	std	Y+5, r25	; 0x05
    25e2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25e4:	8c 81       	ldd	r24, Y+4	; 0x04
    25e6:	9d 81       	ldd	r25, Y+5	; 0x05
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	f1 f7       	brne	.-4      	; 0x25e8 <LCD_voidSendCommand_4bitMode+0x72e>
    25ec:	9d 83       	std	Y+5, r25	; 0x05
    25ee:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f0:	8e 81       	ldd	r24, Y+6	; 0x06
    25f2:	9f 81       	ldd	r25, Y+7	; 0x07
    25f4:	01 97       	sbiw	r24, 0x01	; 1
    25f6:	9f 83       	std	Y+7, r25	; 0x07
    25f8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fa:	8e 81       	ldd	r24, Y+6	; 0x06
    25fc:	9f 81       	ldd	r25, Y+7	; 0x07
    25fe:	00 97       	sbiw	r24, 0x00	; 0
    2600:	69 f7       	brne	.-38     	; 0x25dc <LCD_voidSendCommand_4bitMode+0x722>
    2602:	24 c0       	rjmp	.+72     	; 0x264c <LCD_voidSendCommand_4bitMode+0x792>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2604:	68 85       	ldd	r22, Y+8	; 0x08
    2606:	79 85       	ldd	r23, Y+9	; 0x09
    2608:	8a 85       	ldd	r24, Y+10	; 0x0a
    260a:	9b 85       	ldd	r25, Y+11	; 0x0b
    260c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	9f 83       	std	Y+7, r25	; 0x07
    2616:	8e 83       	std	Y+6, r24	; 0x06
    2618:	8e 81       	ldd	r24, Y+6	; 0x06
    261a:	9f 81       	ldd	r25, Y+7	; 0x07
    261c:	9b 83       	std	Y+3, r25	; 0x03
    261e:	8a 83       	std	Y+2, r24	; 0x02
    2620:	8a 81       	ldd	r24, Y+2	; 0x02
    2622:	9b 81       	ldd	r25, Y+3	; 0x03
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	f1 f7       	brne	.-4      	; 0x2624 <LCD_voidSendCommand_4bitMode+0x76a>
    2628:	9b 83       	std	Y+3, r25	; 0x03
    262a:	8a 83       	std	Y+2, r24	; 0x02
    262c:	0f c0       	rjmp	.+30     	; 0x264c <LCD_voidSendCommand_4bitMode+0x792>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    262e:	69 89       	ldd	r22, Y+17	; 0x11
    2630:	7a 89       	ldd	r23, Y+18	; 0x12
    2632:	8b 89       	ldd	r24, Y+19	; 0x13
    2634:	9c 89       	ldd	r25, Y+20	; 0x14
    2636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	88 8b       	std	Y+16, r24	; 0x10
    2640:	88 89       	ldd	r24, Y+16	; 0x10
    2642:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2644:	89 81       	ldd	r24, Y+1	; 0x01
    2646:	8a 95       	dec	r24
    2648:	f1 f7       	brne	.-4      	; 0x2646 <LCD_voidSendCommand_4bitMode+0x78c>
    264a:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(5);
}
    264c:	cf 59       	subi	r28, 0x9F	; 159
    264e:	df 4f       	sbci	r29, 0xFF	; 255
    2650:	0f b6       	in	r0, 0x3f	; 63
    2652:	f8 94       	cli
    2654:	de bf       	out	0x3e, r29	; 62
    2656:	0f be       	out	0x3f, r0	; 63
    2658:	cd bf       	out	0x3d, r28	; 61
    265a:	cf 91       	pop	r28
    265c:	df 91       	pop	r29
    265e:	1f 91       	pop	r17
    2660:	0f 91       	pop	r16
    2662:	08 95       	ret

00002664 <LCD_voidWriteCharctr>:


void LCD_voidWriteCharctr(uint8 u8DataCpy){		//LCD_voidWriteCharctr('A')
    2664:	df 93       	push	r29
    2666:	cf 93       	push	r28
    2668:	cd b7       	in	r28, 0x3d	; 61
    266a:	de b7       	in	r29, 0x3e	; 62
    266c:	2f 97       	sbiw	r28, 0x0f	; 15
    266e:	0f b6       	in	r0, 0x3f	; 63
    2670:	f8 94       	cli
    2672:	de bf       	out	0x3e, r29	; 62
    2674:	0f be       	out	0x3f, r0	; 63
    2676:	cd bf       	out	0x3d, r28	; 61
    2678:	8f 87       	std	Y+15, r24	; 0x0f
	/* Command(0) or Data(1) */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_RSPIN, DIO_HIGH);
    267a:	83 e0       	ldi	r24, 0x03	; 3
    267c:	62 e0       	ldi	r22, 0x02	; 2
    267e:	41 e0       	ldi	r20, 0x01	; 1
    2680:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>
	/* Read(1) or Write(0) */
	//DIO_voidWritePin(lcd_CONTROLPORT, lcd_RWPIN, DIO_LOW);
	/* Write Data on Data Pins*/
	DIO_voidWritePort(lcd_DATAPORT, u8DataCpy);
    2684:	84 e0       	ldi	r24, 0x04	; 4
    2686:	6f 85       	ldd	r22, Y+15	; 0x0f
    2688:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <DIO_voidWritePort>
	/* Enable Sequence */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    268c:	83 e0       	ldi	r24, 0x03	; 3
    268e:	63 e0       	ldi	r22, 0x03	; 3
    2690:	41 e0       	ldi	r20, 0x01	; 1
    2692:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	a0 ea       	ldi	r26, 0xA0	; 160
    269c:	b0 e4       	ldi	r27, 0x40	; 64
    269e:	8b 87       	std	Y+11, r24	; 0x0b
    26a0:	9c 87       	std	Y+12, r25	; 0x0c
    26a2:	ad 87       	std	Y+13, r26	; 0x0d
    26a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	4a ef       	ldi	r20, 0xFA	; 250
    26b4:	54 e4       	ldi	r21, 0x44	; 68
    26b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	8f 83       	std	Y+7, r24	; 0x07
    26c0:	98 87       	std	Y+8, r25	; 0x08
    26c2:	a9 87       	std	Y+9, r26	; 0x09
    26c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26c6:	6f 81       	ldd	r22, Y+7	; 0x07
    26c8:	78 85       	ldd	r23, Y+8	; 0x08
    26ca:	89 85       	ldd	r24, Y+9	; 0x09
    26cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	40 e8       	ldi	r20, 0x80	; 128
    26d4:	5f e3       	ldi	r21, 0x3F	; 63
    26d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26da:	88 23       	and	r24, r24
    26dc:	2c f4       	brge	.+10     	; 0x26e8 <LCD_voidWriteCharctr+0x84>
		__ticks = 1;
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	9e 83       	std	Y+6, r25	; 0x06
    26e4:	8d 83       	std	Y+5, r24	; 0x05
    26e6:	3f c0       	rjmp	.+126    	; 0x2766 <LCD_voidWriteCharctr+0x102>
	else if (__tmp > 65535)
    26e8:	6f 81       	ldd	r22, Y+7	; 0x07
    26ea:	78 85       	ldd	r23, Y+8	; 0x08
    26ec:	89 85       	ldd	r24, Y+9	; 0x09
    26ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	3f ef       	ldi	r19, 0xFF	; 255
    26f4:	4f e7       	ldi	r20, 0x7F	; 127
    26f6:	57 e4       	ldi	r21, 0x47	; 71
    26f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26fc:	18 16       	cp	r1, r24
    26fe:	4c f5       	brge	.+82     	; 0x2752 <LCD_voidWriteCharctr+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2700:	6b 85       	ldd	r22, Y+11	; 0x0b
    2702:	7c 85       	ldd	r23, Y+12	; 0x0c
    2704:	8d 85       	ldd	r24, Y+13	; 0x0d
    2706:	9e 85       	ldd	r25, Y+14	; 0x0e
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	40 e2       	ldi	r20, 0x20	; 32
    270e:	51 e4       	ldi	r21, 0x41	; 65
    2710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	bc 01       	movw	r22, r24
    271a:	cd 01       	movw	r24, r26
    271c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2720:	dc 01       	movw	r26, r24
    2722:	cb 01       	movw	r24, r22
    2724:	9e 83       	std	Y+6, r25	; 0x06
    2726:	8d 83       	std	Y+5, r24	; 0x05
    2728:	0f c0       	rjmp	.+30     	; 0x2748 <LCD_voidWriteCharctr+0xe4>
    272a:	88 ec       	ldi	r24, 0xC8	; 200
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	9c 83       	std	Y+4, r25	; 0x04
    2730:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2732:	8b 81       	ldd	r24, Y+3	; 0x03
    2734:	9c 81       	ldd	r25, Y+4	; 0x04
    2736:	01 97       	sbiw	r24, 0x01	; 1
    2738:	f1 f7       	brne	.-4      	; 0x2736 <LCD_voidWriteCharctr+0xd2>
    273a:	9c 83       	std	Y+4, r25	; 0x04
    273c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    273e:	8d 81       	ldd	r24, Y+5	; 0x05
    2740:	9e 81       	ldd	r25, Y+6	; 0x06
    2742:	01 97       	sbiw	r24, 0x01	; 1
    2744:	9e 83       	std	Y+6, r25	; 0x06
    2746:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2748:	8d 81       	ldd	r24, Y+5	; 0x05
    274a:	9e 81       	ldd	r25, Y+6	; 0x06
    274c:	00 97       	sbiw	r24, 0x00	; 0
    274e:	69 f7       	brne	.-38     	; 0x272a <LCD_voidWriteCharctr+0xc6>
    2750:	14 c0       	rjmp	.+40     	; 0x277a <LCD_voidWriteCharctr+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2752:	6f 81       	ldd	r22, Y+7	; 0x07
    2754:	78 85       	ldd	r23, Y+8	; 0x08
    2756:	89 85       	ldd	r24, Y+9	; 0x09
    2758:	9a 85       	ldd	r25, Y+10	; 0x0a
    275a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	9e 83       	std	Y+6, r25	; 0x06
    2764:	8d 83       	std	Y+5, r24	; 0x05
    2766:	8d 81       	ldd	r24, Y+5	; 0x05
    2768:	9e 81       	ldd	r25, Y+6	; 0x06
    276a:	9a 83       	std	Y+2, r25	; 0x02
    276c:	89 83       	std	Y+1, r24	; 0x01
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	9a 81       	ldd	r25, Y+2	; 0x02
    2772:	01 97       	sbiw	r24, 0x01	; 1
    2774:	f1 f7       	brne	.-4      	; 0x2772 <LCD_voidWriteCharctr+0x10e>
    2776:	9a 83       	std	Y+2, r25	; 0x02
    2778:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    277a:	83 e0       	ldi	r24, 0x03	; 3
    277c:	63 e0       	ldi	r22, 0x03	; 3
    277e:	40 e0       	ldi	r20, 0x00	; 0
    2780:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>

}
    2784:	2f 96       	adiw	r28, 0x0f	; 15
    2786:	0f b6       	in	r0, 0x3f	; 63
    2788:	f8 94       	cli
    278a:	de bf       	out	0x3e, r29	; 62
    278c:	0f be       	out	0x3f, r0	; 63
    278e:	cd bf       	out	0x3d, r28	; 61
    2790:	cf 91       	pop	r28
    2792:	df 91       	pop	r29
    2794:	08 95       	ret

00002796 <LCD_voidWriteCharctr_4bitMode>:
void LCD_voidWriteCharctr_4bitMode(uint8 u8DataCpy){		//LCD_voidWriteCharctr('A')
    2796:	0f 93       	push	r16
    2798:	1f 93       	push	r17
    279a:	df 93       	push	r29
    279c:	cf 93       	push	r28
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
    27a2:	c1 56       	subi	r28, 0x61	; 97
    27a4:	d0 40       	sbci	r29, 0x00	; 0
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	f8 94       	cli
    27aa:	de bf       	out	0x3e, r29	; 62
    27ac:	0f be       	out	0x3f, r0	; 63
    27ae:	cd bf       	out	0x3d, r28	; 61
    27b0:	fe 01       	movw	r30, r28
    27b2:	ef 59       	subi	r30, 0x9F	; 159
    27b4:	ff 4f       	sbci	r31, 0xFF	; 255
    27b6:	80 83       	st	Z, r24
	/* Command(0) or Data(1) */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_RSPIN, DIO_HIGH);
    27b8:	83 e0       	ldi	r24, 0x03	; 3
    27ba:	62 e0       	ldi	r22, 0x02	; 2
    27bc:	41 e0       	ldi	r20, 0x01	; 1
    27be:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>
	/* Read(1) or Write(0) */
	//DIO_voidWritePin(lcd_CONTROLPORT, lcd_RWPIN, DIO_LOW);
	/* Write Data on Data Pins, sending upper nibble*/
	DIO_voidWritePort(lcd_DATAPORT, (lcd_DATAPORT & 0x0F) | (u8DataCpy & 0xF0));
    27c2:	fe 01       	movw	r30, r28
    27c4:	ef 59       	subi	r30, 0x9F	; 159
    27c6:	ff 4f       	sbci	r31, 0xFF	; 255
    27c8:	80 81       	ld	r24, Z
    27ca:	80 7f       	andi	r24, 0xF0	; 240
    27cc:	84 60       	ori	r24, 0x04	; 4
    27ce:	98 2f       	mov	r25, r24
    27d0:	84 e0       	ldi	r24, 0x04	; 4
    27d2:	69 2f       	mov	r22, r25
    27d4:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <DIO_voidWritePort>
	/* Enable Sequence */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    27d8:	83 e0       	ldi	r24, 0x03	; 3
    27da:	63 e0       	ldi	r22, 0x03	; 3
    27dc:	41 e0       	ldi	r20, 0x01	; 1
    27de:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>
    27e2:	fe 01       	movw	r30, r28
    27e4:	e3 5a       	subi	r30, 0xA3	; 163
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	a0 ea       	ldi	r26, 0xA0	; 160
    27ee:	b0 e4       	ldi	r27, 0x40	; 64
    27f0:	80 83       	st	Z, r24
    27f2:	91 83       	std	Z+1, r25	; 0x01
    27f4:	a2 83       	std	Z+2, r26	; 0x02
    27f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    27f8:	8e 01       	movw	r16, r28
    27fa:	07 5a       	subi	r16, 0xA7	; 167
    27fc:	1f 4f       	sbci	r17, 0xFF	; 255
    27fe:	fe 01       	movw	r30, r28
    2800:	e3 5a       	subi	r30, 0xA3	; 163
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	60 81       	ld	r22, Z
    2806:	71 81       	ldd	r23, Z+1	; 0x01
    2808:	82 81       	ldd	r24, Z+2	; 0x02
    280a:	93 81       	ldd	r25, Z+3	; 0x03
    280c:	2b ea       	ldi	r18, 0xAB	; 171
    280e:	3a ea       	ldi	r19, 0xAA	; 170
    2810:	4a e2       	ldi	r20, 0x2A	; 42
    2812:	50 e4       	ldi	r21, 0x40	; 64
    2814:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	f8 01       	movw	r30, r16
    281e:	80 83       	st	Z, r24
    2820:	91 83       	std	Z+1, r25	; 0x01
    2822:	a2 83       	std	Z+2, r26	; 0x02
    2824:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2826:	fe 01       	movw	r30, r28
    2828:	e7 5a       	subi	r30, 0xA7	; 167
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	60 81       	ld	r22, Z
    282e:	71 81       	ldd	r23, Z+1	; 0x01
    2830:	82 81       	ldd	r24, Z+2	; 0x02
    2832:	93 81       	ldd	r25, Z+3	; 0x03
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	40 e8       	ldi	r20, 0x80	; 128
    283a:	5f e3       	ldi	r21, 0x3F	; 63
    283c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2840:	88 23       	and	r24, r24
    2842:	34 f4       	brge	.+12     	; 0x2850 <LCD_voidWriteCharctr_4bitMode+0xba>
		__ticks = 1;
    2844:	fe 01       	movw	r30, r28
    2846:	e8 5a       	subi	r30, 0xA8	; 168
    2848:	ff 4f       	sbci	r31, 0xFF	; 255
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	80 83       	st	Z, r24
    284e:	e0 c0       	rjmp	.+448    	; 0x2a10 <LCD_voidWriteCharctr_4bitMode+0x27a>
	else if (__tmp > 255)
    2850:	fe 01       	movw	r30, r28
    2852:	e7 5a       	subi	r30, 0xA7	; 167
    2854:	ff 4f       	sbci	r31, 0xFF	; 255
    2856:	60 81       	ld	r22, Z
    2858:	71 81       	ldd	r23, Z+1	; 0x01
    285a:	82 81       	ldd	r24, Z+2	; 0x02
    285c:	93 81       	ldd	r25, Z+3	; 0x03
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	4f e7       	ldi	r20, 0x7F	; 127
    2864:	53 e4       	ldi	r21, 0x43	; 67
    2866:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    286a:	18 16       	cp	r1, r24
    286c:	0c f0       	brlt	.+2      	; 0x2870 <LCD_voidWriteCharctr_4bitMode+0xda>
    286e:	c0 c0       	rjmp	.+384    	; 0x29f0 <LCD_voidWriteCharctr_4bitMode+0x25a>
	{
		_delay_ms(__us / 1000.0);
    2870:	fe 01       	movw	r30, r28
    2872:	e3 5a       	subi	r30, 0xA3	; 163
    2874:	ff 4f       	sbci	r31, 0xFF	; 255
    2876:	60 81       	ld	r22, Z
    2878:	71 81       	ldd	r23, Z+1	; 0x01
    287a:	82 81       	ldd	r24, Z+2	; 0x02
    287c:	93 81       	ldd	r25, Z+3	; 0x03
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	4a e7       	ldi	r20, 0x7A	; 122
    2884:	54 e4       	ldi	r21, 0x44	; 68
    2886:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	fe 01       	movw	r30, r28
    2890:	ec 5a       	subi	r30, 0xAC	; 172
    2892:	ff 4f       	sbci	r31, 0xFF	; 255
    2894:	80 83       	st	Z, r24
    2896:	91 83       	std	Z+1, r25	; 0x01
    2898:	a2 83       	std	Z+2, r26	; 0x02
    289a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    289c:	8e 01       	movw	r16, r28
    289e:	00 5b       	subi	r16, 0xB0	; 176
    28a0:	1f 4f       	sbci	r17, 0xFF	; 255
    28a2:	fe 01       	movw	r30, r28
    28a4:	ec 5a       	subi	r30, 0xAC	; 172
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	60 81       	ld	r22, Z
    28aa:	71 81       	ldd	r23, Z+1	; 0x01
    28ac:	82 81       	ldd	r24, Z+2	; 0x02
    28ae:	93 81       	ldd	r25, Z+3	; 0x03
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	4a ef       	ldi	r20, 0xFA	; 250
    28b6:	54 e4       	ldi	r21, 0x44	; 68
    28b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	f8 01       	movw	r30, r16
    28c2:	80 83       	st	Z, r24
    28c4:	91 83       	std	Z+1, r25	; 0x01
    28c6:	a2 83       	std	Z+2, r26	; 0x02
    28c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28ca:	fe 01       	movw	r30, r28
    28cc:	e0 5b       	subi	r30, 0xB0	; 176
    28ce:	ff 4f       	sbci	r31, 0xFF	; 255
    28d0:	60 81       	ld	r22, Z
    28d2:	71 81       	ldd	r23, Z+1	; 0x01
    28d4:	82 81       	ldd	r24, Z+2	; 0x02
    28d6:	93 81       	ldd	r25, Z+3	; 0x03
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	40 e8       	ldi	r20, 0x80	; 128
    28de:	5f e3       	ldi	r21, 0x3F	; 63
    28e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28e4:	88 23       	and	r24, r24
    28e6:	44 f4       	brge	.+16     	; 0x28f8 <LCD_voidWriteCharctr_4bitMode+0x162>
		__ticks = 1;
    28e8:	fe 01       	movw	r30, r28
    28ea:	e2 5b       	subi	r30, 0xB2	; 178
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	91 83       	std	Z+1, r25	; 0x01
    28f4:	80 83       	st	Z, r24
    28f6:	64 c0       	rjmp	.+200    	; 0x29c0 <LCD_voidWriteCharctr_4bitMode+0x22a>
	else if (__tmp > 65535)
    28f8:	fe 01       	movw	r30, r28
    28fa:	e0 5b       	subi	r30, 0xB0	; 176
    28fc:	ff 4f       	sbci	r31, 0xFF	; 255
    28fe:	60 81       	ld	r22, Z
    2900:	71 81       	ldd	r23, Z+1	; 0x01
    2902:	82 81       	ldd	r24, Z+2	; 0x02
    2904:	93 81       	ldd	r25, Z+3	; 0x03
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	3f ef       	ldi	r19, 0xFF	; 255
    290a:	4f e7       	ldi	r20, 0x7F	; 127
    290c:	57 e4       	ldi	r21, 0x47	; 71
    290e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2912:	18 16       	cp	r1, r24
    2914:	0c f0       	brlt	.+2      	; 0x2918 <LCD_voidWriteCharctr_4bitMode+0x182>
    2916:	43 c0       	rjmp	.+134    	; 0x299e <LCD_voidWriteCharctr_4bitMode+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2918:	fe 01       	movw	r30, r28
    291a:	ec 5a       	subi	r30, 0xAC	; 172
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	60 81       	ld	r22, Z
    2920:	71 81       	ldd	r23, Z+1	; 0x01
    2922:	82 81       	ldd	r24, Z+2	; 0x02
    2924:	93 81       	ldd	r25, Z+3	; 0x03
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	40 e2       	ldi	r20, 0x20	; 32
    292c:	51 e4       	ldi	r21, 0x41	; 65
    292e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	8e 01       	movw	r16, r28
    2938:	02 5b       	subi	r16, 0xB2	; 178
    293a:	1f 4f       	sbci	r17, 0xFF	; 255
    293c:	bc 01       	movw	r22, r24
    293e:	cd 01       	movw	r24, r26
    2940:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	f8 01       	movw	r30, r16
    294a:	91 83       	std	Z+1, r25	; 0x01
    294c:	80 83       	st	Z, r24
    294e:	1f c0       	rjmp	.+62     	; 0x298e <LCD_voidWriteCharctr_4bitMode+0x1f8>
    2950:	fe 01       	movw	r30, r28
    2952:	e4 5b       	subi	r30, 0xB4	; 180
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	88 ec       	ldi	r24, 0xC8	; 200
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	91 83       	std	Z+1, r25	; 0x01
    295c:	80 83       	st	Z, r24
    295e:	fe 01       	movw	r30, r28
    2960:	e4 5b       	subi	r30, 0xB4	; 180
    2962:	ff 4f       	sbci	r31, 0xFF	; 255
    2964:	80 81       	ld	r24, Z
    2966:	91 81       	ldd	r25, Z+1	; 0x01
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	f1 f7       	brne	.-4      	; 0x2968 <LCD_voidWriteCharctr_4bitMode+0x1d2>
    296c:	fe 01       	movw	r30, r28
    296e:	e4 5b       	subi	r30, 0xB4	; 180
    2970:	ff 4f       	sbci	r31, 0xFF	; 255
    2972:	91 83       	std	Z+1, r25	; 0x01
    2974:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2976:	de 01       	movw	r26, r28
    2978:	a2 5b       	subi	r26, 0xB2	; 178
    297a:	bf 4f       	sbci	r27, 0xFF	; 255
    297c:	fe 01       	movw	r30, r28
    297e:	e2 5b       	subi	r30, 0xB2	; 178
    2980:	ff 4f       	sbci	r31, 0xFF	; 255
    2982:	80 81       	ld	r24, Z
    2984:	91 81       	ldd	r25, Z+1	; 0x01
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	11 96       	adiw	r26, 0x01	; 1
    298a:	9c 93       	st	X, r25
    298c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    298e:	fe 01       	movw	r30, r28
    2990:	e2 5b       	subi	r30, 0xB2	; 178
    2992:	ff 4f       	sbci	r31, 0xFF	; 255
    2994:	80 81       	ld	r24, Z
    2996:	91 81       	ldd	r25, Z+1	; 0x01
    2998:	00 97       	sbiw	r24, 0x00	; 0
    299a:	d1 f6       	brne	.-76     	; 0x2950 <LCD_voidWriteCharctr_4bitMode+0x1ba>
    299c:	4b c0       	rjmp	.+150    	; 0x2a34 <LCD_voidWriteCharctr_4bitMode+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    299e:	8e 01       	movw	r16, r28
    29a0:	02 5b       	subi	r16, 0xB2	; 178
    29a2:	1f 4f       	sbci	r17, 0xFF	; 255
    29a4:	fe 01       	movw	r30, r28
    29a6:	e0 5b       	subi	r30, 0xB0	; 176
    29a8:	ff 4f       	sbci	r31, 0xFF	; 255
    29aa:	60 81       	ld	r22, Z
    29ac:	71 81       	ldd	r23, Z+1	; 0x01
    29ae:	82 81       	ldd	r24, Z+2	; 0x02
    29b0:	93 81       	ldd	r25, Z+3	; 0x03
    29b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	f8 01       	movw	r30, r16
    29bc:	91 83       	std	Z+1, r25	; 0x01
    29be:	80 83       	st	Z, r24
    29c0:	de 01       	movw	r26, r28
    29c2:	a6 5b       	subi	r26, 0xB6	; 182
    29c4:	bf 4f       	sbci	r27, 0xFF	; 255
    29c6:	fe 01       	movw	r30, r28
    29c8:	e2 5b       	subi	r30, 0xB2	; 178
    29ca:	ff 4f       	sbci	r31, 0xFF	; 255
    29cc:	80 81       	ld	r24, Z
    29ce:	91 81       	ldd	r25, Z+1	; 0x01
    29d0:	11 96       	adiw	r26, 0x01	; 1
    29d2:	9c 93       	st	X, r25
    29d4:	8e 93       	st	-X, r24
    29d6:	fe 01       	movw	r30, r28
    29d8:	e6 5b       	subi	r30, 0xB6	; 182
    29da:	ff 4f       	sbci	r31, 0xFF	; 255
    29dc:	80 81       	ld	r24, Z
    29de:	91 81       	ldd	r25, Z+1	; 0x01
    29e0:	01 97       	sbiw	r24, 0x01	; 1
    29e2:	f1 f7       	brne	.-4      	; 0x29e0 <LCD_voidWriteCharctr_4bitMode+0x24a>
    29e4:	fe 01       	movw	r30, r28
    29e6:	e6 5b       	subi	r30, 0xB6	; 182
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	91 83       	std	Z+1, r25	; 0x01
    29ec:	80 83       	st	Z, r24
    29ee:	22 c0       	rjmp	.+68     	; 0x2a34 <LCD_voidWriteCharctr_4bitMode+0x29e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29f0:	8e 01       	movw	r16, r28
    29f2:	08 5a       	subi	r16, 0xA8	; 168
    29f4:	1f 4f       	sbci	r17, 0xFF	; 255
    29f6:	fe 01       	movw	r30, r28
    29f8:	e7 5a       	subi	r30, 0xA7	; 167
    29fa:	ff 4f       	sbci	r31, 0xFF	; 255
    29fc:	60 81       	ld	r22, Z
    29fe:	71 81       	ldd	r23, Z+1	; 0x01
    2a00:	82 81       	ldd	r24, Z+2	; 0x02
    2a02:	93 81       	ldd	r25, Z+3	; 0x03
    2a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	f8 01       	movw	r30, r16
    2a0e:	80 83       	st	Z, r24
    2a10:	de 01       	movw	r26, r28
    2a12:	a7 5b       	subi	r26, 0xB7	; 183
    2a14:	bf 4f       	sbci	r27, 0xFF	; 255
    2a16:	fe 01       	movw	r30, r28
    2a18:	e8 5a       	subi	r30, 0xA8	; 168
    2a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1c:	80 81       	ld	r24, Z
    2a1e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a20:	fe 01       	movw	r30, r28
    2a22:	e7 5b       	subi	r30, 0xB7	; 183
    2a24:	ff 4f       	sbci	r31, 0xFF	; 255
    2a26:	80 81       	ld	r24, Z
    2a28:	8a 95       	dec	r24
    2a2a:	f1 f7       	brne	.-4      	; 0x2a28 <LCD_voidWriteCharctr_4bitMode+0x292>
    2a2c:	fe 01       	movw	r30, r28
    2a2e:	e7 5b       	subi	r30, 0xB7	; 183
    2a30:	ff 4f       	sbci	r31, 0xFF	; 255
    2a32:	80 83       	st	Z, r24
	_delay_us(5);
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    2a34:	83 e0       	ldi	r24, 0x03	; 3
    2a36:	63 e0       	ldi	r22, 0x03	; 3
    2a38:	40 e0       	ldi	r20, 0x00	; 0
    2a3a:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>
    2a3e:	fe 01       	movw	r30, r28
    2a40:	eb 5b       	subi	r30, 0xBB	; 187
    2a42:	ff 4f       	sbci	r31, 0xFF	; 255
    2a44:	80 e0       	ldi	r24, 0x00	; 0
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	a8 e4       	ldi	r26, 0x48	; 72
    2a4a:	b3 e4       	ldi	r27, 0x43	; 67
    2a4c:	80 83       	st	Z, r24
    2a4e:	91 83       	std	Z+1, r25	; 0x01
    2a50:	a2 83       	std	Z+2, r26	; 0x02
    2a52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a54:	8e 01       	movw	r16, r28
    2a56:	0f 5b       	subi	r16, 0xBF	; 191
    2a58:	1f 4f       	sbci	r17, 0xFF	; 255
    2a5a:	fe 01       	movw	r30, r28
    2a5c:	eb 5b       	subi	r30, 0xBB	; 187
    2a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a60:	60 81       	ld	r22, Z
    2a62:	71 81       	ldd	r23, Z+1	; 0x01
    2a64:	82 81       	ldd	r24, Z+2	; 0x02
    2a66:	93 81       	ldd	r25, Z+3	; 0x03
    2a68:	2b ea       	ldi	r18, 0xAB	; 171
    2a6a:	3a ea       	ldi	r19, 0xAA	; 170
    2a6c:	4a e2       	ldi	r20, 0x2A	; 42
    2a6e:	50 e4       	ldi	r21, 0x40	; 64
    2a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	f8 01       	movw	r30, r16
    2a7a:	80 83       	st	Z, r24
    2a7c:	91 83       	std	Z+1, r25	; 0x01
    2a7e:	a2 83       	std	Z+2, r26	; 0x02
    2a80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a82:	fe 01       	movw	r30, r28
    2a84:	ef 5b       	subi	r30, 0xBF	; 191
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	60 81       	ld	r22, Z
    2a8a:	71 81       	ldd	r23, Z+1	; 0x01
    2a8c:	82 81       	ldd	r24, Z+2	; 0x02
    2a8e:	93 81       	ldd	r25, Z+3	; 0x03
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	40 e8       	ldi	r20, 0x80	; 128
    2a96:	5f e3       	ldi	r21, 0x3F	; 63
    2a98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a9c:	88 23       	and	r24, r24
    2a9e:	34 f4       	brge	.+12     	; 0x2aac <LCD_voidWriteCharctr_4bitMode+0x316>
		__ticks = 1;
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	fe 01       	movw	r30, r28
    2aa4:	e0 5c       	subi	r30, 0xC0	; 192
    2aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa8:	80 83       	st	Z, r24
    2aaa:	9d c0       	rjmp	.+314    	; 0x2be6 <LCD_voidWriteCharctr_4bitMode+0x450>
	else if (__tmp > 255)
    2aac:	fe 01       	movw	r30, r28
    2aae:	ef 5b       	subi	r30, 0xBF	; 191
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	60 81       	ld	r22, Z
    2ab4:	71 81       	ldd	r23, Z+1	; 0x01
    2ab6:	82 81       	ldd	r24, Z+2	; 0x02
    2ab8:	93 81       	ldd	r25, Z+3	; 0x03
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	4f e7       	ldi	r20, 0x7F	; 127
    2ac0:	53 e4       	ldi	r21, 0x43	; 67
    2ac2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ac6:	18 16       	cp	r1, r24
    2ac8:	0c f0       	brlt	.+2      	; 0x2acc <LCD_voidWriteCharctr_4bitMode+0x336>
    2aca:	7e c0       	rjmp	.+252    	; 0x2bc8 <LCD_voidWriteCharctr_4bitMode+0x432>
	{
		_delay_ms(__us / 1000.0);
    2acc:	fe 01       	movw	r30, r28
    2ace:	eb 5b       	subi	r30, 0xBB	; 187
    2ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad2:	60 81       	ld	r22, Z
    2ad4:	71 81       	ldd	r23, Z+1	; 0x01
    2ad6:	82 81       	ldd	r24, Z+2	; 0x02
    2ad8:	93 81       	ldd	r25, Z+3	; 0x03
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	4a e7       	ldi	r20, 0x7A	; 122
    2ae0:	54 e4       	ldi	r21, 0x44	; 68
    2ae2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	cb 01       	movw	r24, r22
    2aea:	8c af       	std	Y+60, r24	; 0x3c
    2aec:	9d af       	std	Y+61, r25	; 0x3d
    2aee:	ae af       	std	Y+62, r26	; 0x3e
    2af0:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af2:	6c ad       	ldd	r22, Y+60	; 0x3c
    2af4:	7d ad       	ldd	r23, Y+61	; 0x3d
    2af6:	8e ad       	ldd	r24, Y+62	; 0x3e
    2af8:	9f ad       	ldd	r25, Y+63	; 0x3f
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	4a ef       	ldi	r20, 0xFA	; 250
    2b00:	54 e4       	ldi	r21, 0x44	; 68
    2b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	88 af       	std	Y+56, r24	; 0x38
    2b0c:	99 af       	std	Y+57, r25	; 0x39
    2b0e:	aa af       	std	Y+58, r26	; 0x3a
    2b10:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2b12:	68 ad       	ldd	r22, Y+56	; 0x38
    2b14:	79 ad       	ldd	r23, Y+57	; 0x39
    2b16:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b18:	9b ad       	ldd	r25, Y+59	; 0x3b
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	40 e8       	ldi	r20, 0x80	; 128
    2b20:	5f e3       	ldi	r21, 0x3F	; 63
    2b22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b26:	88 23       	and	r24, r24
    2b28:	2c f4       	brge	.+10     	; 0x2b34 <LCD_voidWriteCharctr_4bitMode+0x39e>
		__ticks = 1;
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	9f ab       	std	Y+55, r25	; 0x37
    2b30:	8e ab       	std	Y+54, r24	; 0x36
    2b32:	3f c0       	rjmp	.+126    	; 0x2bb2 <LCD_voidWriteCharctr_4bitMode+0x41c>
	else if (__tmp > 65535)
    2b34:	68 ad       	ldd	r22, Y+56	; 0x38
    2b36:	79 ad       	ldd	r23, Y+57	; 0x39
    2b38:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b3a:	9b ad       	ldd	r25, Y+59	; 0x3b
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	3f ef       	ldi	r19, 0xFF	; 255
    2b40:	4f e7       	ldi	r20, 0x7F	; 127
    2b42:	57 e4       	ldi	r21, 0x47	; 71
    2b44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b48:	18 16       	cp	r1, r24
    2b4a:	4c f5       	brge	.+82     	; 0x2b9e <LCD_voidWriteCharctr_4bitMode+0x408>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b4c:	6c ad       	ldd	r22, Y+60	; 0x3c
    2b4e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2b50:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b52:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	40 e2       	ldi	r20, 0x20	; 32
    2b5a:	51 e4       	ldi	r21, 0x41	; 65
    2b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	bc 01       	movw	r22, r24
    2b66:	cd 01       	movw	r24, r26
    2b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	9f ab       	std	Y+55, r25	; 0x37
    2b72:	8e ab       	std	Y+54, r24	; 0x36
    2b74:	0f c0       	rjmp	.+30     	; 0x2b94 <LCD_voidWriteCharctr_4bitMode+0x3fe>
    2b76:	88 ec       	ldi	r24, 0xC8	; 200
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	9d ab       	std	Y+53, r25	; 0x35
    2b7c:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b7e:	8c a9       	ldd	r24, Y+52	; 0x34
    2b80:	9d a9       	ldd	r25, Y+53	; 0x35
    2b82:	01 97       	sbiw	r24, 0x01	; 1
    2b84:	f1 f7       	brne	.-4      	; 0x2b82 <LCD_voidWriteCharctr_4bitMode+0x3ec>
    2b86:	9d ab       	std	Y+53, r25	; 0x35
    2b88:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b8a:	8e a9       	ldd	r24, Y+54	; 0x36
    2b8c:	9f a9       	ldd	r25, Y+55	; 0x37
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	9f ab       	std	Y+55, r25	; 0x37
    2b92:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b94:	8e a9       	ldd	r24, Y+54	; 0x36
    2b96:	9f a9       	ldd	r25, Y+55	; 0x37
    2b98:	00 97       	sbiw	r24, 0x00	; 0
    2b9a:	69 f7       	brne	.-38     	; 0x2b76 <LCD_voidWriteCharctr_4bitMode+0x3e0>
    2b9c:	2d c0       	rjmp	.+90     	; 0x2bf8 <LCD_voidWriteCharctr_4bitMode+0x462>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b9e:	68 ad       	ldd	r22, Y+56	; 0x38
    2ba0:	79 ad       	ldd	r23, Y+57	; 0x39
    2ba2:	8a ad       	ldd	r24, Y+58	; 0x3a
    2ba4:	9b ad       	ldd	r25, Y+59	; 0x3b
    2ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	9f ab       	std	Y+55, r25	; 0x37
    2bb0:	8e ab       	std	Y+54, r24	; 0x36
    2bb2:	8e a9       	ldd	r24, Y+54	; 0x36
    2bb4:	9f a9       	ldd	r25, Y+55	; 0x37
    2bb6:	9b ab       	std	Y+51, r25	; 0x33
    2bb8:	8a ab       	std	Y+50, r24	; 0x32
    2bba:	8a a9       	ldd	r24, Y+50	; 0x32
    2bbc:	9b a9       	ldd	r25, Y+51	; 0x33
    2bbe:	01 97       	sbiw	r24, 0x01	; 1
    2bc0:	f1 f7       	brne	.-4      	; 0x2bbe <LCD_voidWriteCharctr_4bitMode+0x428>
    2bc2:	9b ab       	std	Y+51, r25	; 0x33
    2bc4:	8a ab       	std	Y+50, r24	; 0x32
    2bc6:	18 c0       	rjmp	.+48     	; 0x2bf8 <LCD_voidWriteCharctr_4bitMode+0x462>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bc8:	fe 01       	movw	r30, r28
    2bca:	ef 5b       	subi	r30, 0xBF	; 191
    2bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bce:	60 81       	ld	r22, Z
    2bd0:	71 81       	ldd	r23, Z+1	; 0x01
    2bd2:	82 81       	ldd	r24, Z+2	; 0x02
    2bd4:	93 81       	ldd	r25, Z+3	; 0x03
    2bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	fe 01       	movw	r30, r28
    2be0:	e0 5c       	subi	r30, 0xC0	; 192
    2be2:	ff 4f       	sbci	r31, 0xFF	; 255
    2be4:	80 83       	st	Z, r24
    2be6:	fe 01       	movw	r30, r28
    2be8:	e0 5c       	subi	r30, 0xC0	; 192
    2bea:	ff 4f       	sbci	r31, 0xFF	; 255
    2bec:	80 81       	ld	r24, Z
    2bee:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bf0:	89 a9       	ldd	r24, Y+49	; 0x31
    2bf2:	8a 95       	dec	r24
    2bf4:	f1 f7       	brne	.-4      	; 0x2bf2 <LCD_voidWriteCharctr_4bitMode+0x45c>
    2bf6:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);

	/* Write Data on Data Pins, sending lower nibble*/
	DIO_voidWritePort(lcd_DATAPORT, (lcd_DATAPORT & 0x0F) | (u8DataCpy <<4));
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	ef 59       	subi	r30, 0x9F	; 159
    2bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfe:	80 81       	ld	r24, Z
    2c00:	88 2f       	mov	r24, r24
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	82 95       	swap	r24
    2c06:	92 95       	swap	r25
    2c08:	90 7f       	andi	r25, 0xF0	; 240
    2c0a:	98 27       	eor	r25, r24
    2c0c:	80 7f       	andi	r24, 0xF0	; 240
    2c0e:	98 27       	eor	r25, r24
    2c10:	84 60       	ori	r24, 0x04	; 4
    2c12:	98 2f       	mov	r25, r24
    2c14:	84 e0       	ldi	r24, 0x04	; 4
    2c16:	69 2f       	mov	r22, r25
    2c18:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <DIO_voidWritePort>
	/* Enable Sequence */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    2c1c:	83 e0       	ldi	r24, 0x03	; 3
    2c1e:	63 e0       	ldi	r22, 0x03	; 3
    2c20:	41 e0       	ldi	r20, 0x01	; 1
    2c22:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>
    2c26:	80 e0       	ldi	r24, 0x00	; 0
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	a0 ea       	ldi	r26, 0xA0	; 160
    2c2c:	b0 e4       	ldi	r27, 0x40	; 64
    2c2e:	8d a7       	std	Y+45, r24	; 0x2d
    2c30:	9e a7       	std	Y+46, r25	; 0x2e
    2c32:	af a7       	std	Y+47, r26	; 0x2f
    2c34:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c36:	6d a5       	ldd	r22, Y+45	; 0x2d
    2c38:	7e a5       	ldd	r23, Y+46	; 0x2e
    2c3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c3c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c3e:	2b ea       	ldi	r18, 0xAB	; 171
    2c40:	3a ea       	ldi	r19, 0xAA	; 170
    2c42:	4a e2       	ldi	r20, 0x2A	; 42
    2c44:	50 e4       	ldi	r21, 0x40	; 64
    2c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	89 a7       	std	Y+41, r24	; 0x29
    2c50:	9a a7       	std	Y+42, r25	; 0x2a
    2c52:	ab a7       	std	Y+43, r26	; 0x2b
    2c54:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2c56:	69 a5       	ldd	r22, Y+41	; 0x29
    2c58:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c5a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c5c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	40 e8       	ldi	r20, 0x80	; 128
    2c64:	5f e3       	ldi	r21, 0x3F	; 63
    2c66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c6a:	88 23       	and	r24, r24
    2c6c:	1c f4       	brge	.+6      	; 0x2c74 <LCD_voidWriteCharctr_4bitMode+0x4de>
		__ticks = 1;
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	88 a7       	std	Y+40, r24	; 0x28
    2c72:	91 c0       	rjmp	.+290    	; 0x2d96 <LCD_voidWriteCharctr_4bitMode+0x600>
	else if (__tmp > 255)
    2c74:	69 a5       	ldd	r22, Y+41	; 0x29
    2c76:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c78:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c7a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	4f e7       	ldi	r20, 0x7F	; 127
    2c82:	53 e4       	ldi	r21, 0x43	; 67
    2c84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c88:	18 16       	cp	r1, r24
    2c8a:	0c f0       	brlt	.+2      	; 0x2c8e <LCD_voidWriteCharctr_4bitMode+0x4f8>
    2c8c:	7b c0       	rjmp	.+246    	; 0x2d84 <LCD_voidWriteCharctr_4bitMode+0x5ee>
	{
		_delay_ms(__us / 1000.0);
    2c8e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2c90:	7e a5       	ldd	r23, Y+46	; 0x2e
    2c92:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c94:	98 a9       	ldd	r25, Y+48	; 0x30
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	4a e7       	ldi	r20, 0x7A	; 122
    2c9c:	54 e4       	ldi	r21, 0x44	; 68
    2c9e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	8c a3       	std	Y+36, r24	; 0x24
    2ca8:	9d a3       	std	Y+37, r25	; 0x25
    2caa:	ae a3       	std	Y+38, r26	; 0x26
    2cac:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cae:	6c a1       	ldd	r22, Y+36	; 0x24
    2cb0:	7d a1       	ldd	r23, Y+37	; 0x25
    2cb2:	8e a1       	ldd	r24, Y+38	; 0x26
    2cb4:	9f a1       	ldd	r25, Y+39	; 0x27
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	4a ef       	ldi	r20, 0xFA	; 250
    2cbc:	54 e4       	ldi	r21, 0x44	; 68
    2cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	88 a3       	std	Y+32, r24	; 0x20
    2cc8:	99 a3       	std	Y+33, r25	; 0x21
    2cca:	aa a3       	std	Y+34, r26	; 0x22
    2ccc:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2cce:	68 a1       	ldd	r22, Y+32	; 0x20
    2cd0:	79 a1       	ldd	r23, Y+33	; 0x21
    2cd2:	8a a1       	ldd	r24, Y+34	; 0x22
    2cd4:	9b a1       	ldd	r25, Y+35	; 0x23
    2cd6:	20 e0       	ldi	r18, 0x00	; 0
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	40 e8       	ldi	r20, 0x80	; 128
    2cdc:	5f e3       	ldi	r21, 0x3F	; 63
    2cde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ce2:	88 23       	and	r24, r24
    2ce4:	2c f4       	brge	.+10     	; 0x2cf0 <LCD_voidWriteCharctr_4bitMode+0x55a>
		__ticks = 1;
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	9f 8f       	std	Y+31, r25	; 0x1f
    2cec:	8e 8f       	std	Y+30, r24	; 0x1e
    2cee:	3f c0       	rjmp	.+126    	; 0x2d6e <LCD_voidWriteCharctr_4bitMode+0x5d8>
	else if (__tmp > 65535)
    2cf0:	68 a1       	ldd	r22, Y+32	; 0x20
    2cf2:	79 a1       	ldd	r23, Y+33	; 0x21
    2cf4:	8a a1       	ldd	r24, Y+34	; 0x22
    2cf6:	9b a1       	ldd	r25, Y+35	; 0x23
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	3f ef       	ldi	r19, 0xFF	; 255
    2cfc:	4f e7       	ldi	r20, 0x7F	; 127
    2cfe:	57 e4       	ldi	r21, 0x47	; 71
    2d00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d04:	18 16       	cp	r1, r24
    2d06:	4c f5       	brge	.+82     	; 0x2d5a <LCD_voidWriteCharctr_4bitMode+0x5c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d08:	6c a1       	ldd	r22, Y+36	; 0x24
    2d0a:	7d a1       	ldd	r23, Y+37	; 0x25
    2d0c:	8e a1       	ldd	r24, Y+38	; 0x26
    2d0e:	9f a1       	ldd	r25, Y+39	; 0x27
    2d10:	20 e0       	ldi	r18, 0x00	; 0
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	40 e2       	ldi	r20, 0x20	; 32
    2d16:	51 e4       	ldi	r21, 0x41	; 65
    2d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	bc 01       	movw	r22, r24
    2d22:	cd 01       	movw	r24, r26
    2d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	9f 8f       	std	Y+31, r25	; 0x1f
    2d2e:	8e 8f       	std	Y+30, r24	; 0x1e
    2d30:	0f c0       	rjmp	.+30     	; 0x2d50 <LCD_voidWriteCharctr_4bitMode+0x5ba>
    2d32:	88 ec       	ldi	r24, 0xC8	; 200
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	9d 8f       	std	Y+29, r25	; 0x1d
    2d38:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d3a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d3c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	f1 f7       	brne	.-4      	; 0x2d3e <LCD_voidWriteCharctr_4bitMode+0x5a8>
    2d42:	9d 8f       	std	Y+29, r25	; 0x1d
    2d44:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d46:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d48:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d4a:	01 97       	sbiw	r24, 0x01	; 1
    2d4c:	9f 8f       	std	Y+31, r25	; 0x1f
    2d4e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d50:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d52:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d54:	00 97       	sbiw	r24, 0x00	; 0
    2d56:	69 f7       	brne	.-38     	; 0x2d32 <LCD_voidWriteCharctr_4bitMode+0x59c>
    2d58:	24 c0       	rjmp	.+72     	; 0x2da2 <LCD_voidWriteCharctr_4bitMode+0x60c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d5a:	68 a1       	ldd	r22, Y+32	; 0x20
    2d5c:	79 a1       	ldd	r23, Y+33	; 0x21
    2d5e:	8a a1       	ldd	r24, Y+34	; 0x22
    2d60:	9b a1       	ldd	r25, Y+35	; 0x23
    2d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	9f 8f       	std	Y+31, r25	; 0x1f
    2d6c:	8e 8f       	std	Y+30, r24	; 0x1e
    2d6e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d70:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d72:	9b 8f       	std	Y+27, r25	; 0x1b
    2d74:	8a 8f       	std	Y+26, r24	; 0x1a
    2d76:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d78:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d7a:	01 97       	sbiw	r24, 0x01	; 1
    2d7c:	f1 f7       	brne	.-4      	; 0x2d7a <LCD_voidWriteCharctr_4bitMode+0x5e4>
    2d7e:	9b 8f       	std	Y+27, r25	; 0x1b
    2d80:	8a 8f       	std	Y+26, r24	; 0x1a
    2d82:	0f c0       	rjmp	.+30     	; 0x2da2 <LCD_voidWriteCharctr_4bitMode+0x60c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d84:	69 a5       	ldd	r22, Y+41	; 0x29
    2d86:	7a a5       	ldd	r23, Y+42	; 0x2a
    2d88:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d8a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d90:	dc 01       	movw	r26, r24
    2d92:	cb 01       	movw	r24, r22
    2d94:	88 a7       	std	Y+40, r24	; 0x28
    2d96:	88 a5       	ldd	r24, Y+40	; 0x28
    2d98:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d9a:	89 8d       	ldd	r24, Y+25	; 0x19
    2d9c:	8a 95       	dec	r24
    2d9e:	f1 f7       	brne	.-4      	; 0x2d9c <LCD_voidWriteCharctr_4bitMode+0x606>
    2da0:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(5);
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    2da2:	83 e0       	ldi	r24, 0x03	; 3
    2da4:	63 e0       	ldi	r22, 0x03	; 3
    2da6:	40 e0       	ldi	r20, 0x00	; 0
    2da8:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	a8 e4       	ldi	r26, 0x48	; 72
    2db2:	b3 e4       	ldi	r27, 0x43	; 67
    2db4:	8d 8b       	std	Y+21, r24	; 0x15
    2db6:	9e 8b       	std	Y+22, r25	; 0x16
    2db8:	af 8b       	std	Y+23, r26	; 0x17
    2dba:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2dbc:	6d 89       	ldd	r22, Y+21	; 0x15
    2dbe:	7e 89       	ldd	r23, Y+22	; 0x16
    2dc0:	8f 89       	ldd	r24, Y+23	; 0x17
    2dc2:	98 8d       	ldd	r25, Y+24	; 0x18
    2dc4:	2b ea       	ldi	r18, 0xAB	; 171
    2dc6:	3a ea       	ldi	r19, 0xAA	; 170
    2dc8:	4a e2       	ldi	r20, 0x2A	; 42
    2dca:	50 e4       	ldi	r21, 0x40	; 64
    2dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd0:	dc 01       	movw	r26, r24
    2dd2:	cb 01       	movw	r24, r22
    2dd4:	89 8b       	std	Y+17, r24	; 0x11
    2dd6:	9a 8b       	std	Y+18, r25	; 0x12
    2dd8:	ab 8b       	std	Y+19, r26	; 0x13
    2dda:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2ddc:	69 89       	ldd	r22, Y+17	; 0x11
    2dde:	7a 89       	ldd	r23, Y+18	; 0x12
    2de0:	8b 89       	ldd	r24, Y+19	; 0x13
    2de2:	9c 89       	ldd	r25, Y+20	; 0x14
    2de4:	20 e0       	ldi	r18, 0x00	; 0
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	40 e8       	ldi	r20, 0x80	; 128
    2dea:	5f e3       	ldi	r21, 0x3F	; 63
    2dec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2df0:	88 23       	and	r24, r24
    2df2:	1c f4       	brge	.+6      	; 0x2dfa <LCD_voidWriteCharctr_4bitMode+0x664>
		__ticks = 1;
    2df4:	81 e0       	ldi	r24, 0x01	; 1
    2df6:	88 8b       	std	Y+16, r24	; 0x10
    2df8:	91 c0       	rjmp	.+290    	; 0x2f1c <LCD_voidWriteCharctr_4bitMode+0x786>
	else if (__tmp > 255)
    2dfa:	69 89       	ldd	r22, Y+17	; 0x11
    2dfc:	7a 89       	ldd	r23, Y+18	; 0x12
    2dfe:	8b 89       	ldd	r24, Y+19	; 0x13
    2e00:	9c 89       	ldd	r25, Y+20	; 0x14
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	4f e7       	ldi	r20, 0x7F	; 127
    2e08:	53 e4       	ldi	r21, 0x43	; 67
    2e0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e0e:	18 16       	cp	r1, r24
    2e10:	0c f0       	brlt	.+2      	; 0x2e14 <LCD_voidWriteCharctr_4bitMode+0x67e>
    2e12:	7b c0       	rjmp	.+246    	; 0x2f0a <LCD_voidWriteCharctr_4bitMode+0x774>
	{
		_delay_ms(__us / 1000.0);
    2e14:	6d 89       	ldd	r22, Y+21	; 0x15
    2e16:	7e 89       	ldd	r23, Y+22	; 0x16
    2e18:	8f 89       	ldd	r24, Y+23	; 0x17
    2e1a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	4a e7       	ldi	r20, 0x7A	; 122
    2e22:	54 e4       	ldi	r21, 0x44	; 68
    2e24:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e28:	dc 01       	movw	r26, r24
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	8c 87       	std	Y+12, r24	; 0x0c
    2e2e:	9d 87       	std	Y+13, r25	; 0x0d
    2e30:	ae 87       	std	Y+14, r26	; 0x0e
    2e32:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e34:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e36:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e38:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e3a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	4a ef       	ldi	r20, 0xFA	; 250
    2e42:	54 e4       	ldi	r21, 0x44	; 68
    2e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	88 87       	std	Y+8, r24	; 0x08
    2e4e:	99 87       	std	Y+9, r25	; 0x09
    2e50:	aa 87       	std	Y+10, r26	; 0x0a
    2e52:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2e54:	68 85       	ldd	r22, Y+8	; 0x08
    2e56:	79 85       	ldd	r23, Y+9	; 0x09
    2e58:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	40 e8       	ldi	r20, 0x80	; 128
    2e62:	5f e3       	ldi	r21, 0x3F	; 63
    2e64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e68:	88 23       	and	r24, r24
    2e6a:	2c f4       	brge	.+10     	; 0x2e76 <LCD_voidWriteCharctr_4bitMode+0x6e0>
		__ticks = 1;
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	9f 83       	std	Y+7, r25	; 0x07
    2e72:	8e 83       	std	Y+6, r24	; 0x06
    2e74:	3f c0       	rjmp	.+126    	; 0x2ef4 <LCD_voidWriteCharctr_4bitMode+0x75e>
	else if (__tmp > 65535)
    2e76:	68 85       	ldd	r22, Y+8	; 0x08
    2e78:	79 85       	ldd	r23, Y+9	; 0x09
    2e7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	3f ef       	ldi	r19, 0xFF	; 255
    2e82:	4f e7       	ldi	r20, 0x7F	; 127
    2e84:	57 e4       	ldi	r21, 0x47	; 71
    2e86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e8a:	18 16       	cp	r1, r24
    2e8c:	4c f5       	brge	.+82     	; 0x2ee0 <LCD_voidWriteCharctr_4bitMode+0x74a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e8e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e90:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e92:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e94:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e96:	20 e0       	ldi	r18, 0x00	; 0
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	40 e2       	ldi	r20, 0x20	; 32
    2e9c:	51 e4       	ldi	r21, 0x41	; 65
    2e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea2:	dc 01       	movw	r26, r24
    2ea4:	cb 01       	movw	r24, r22
    2ea6:	bc 01       	movw	r22, r24
    2ea8:	cd 01       	movw	r24, r26
    2eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	9f 83       	std	Y+7, r25	; 0x07
    2eb4:	8e 83       	std	Y+6, r24	; 0x06
    2eb6:	0f c0       	rjmp	.+30     	; 0x2ed6 <LCD_voidWriteCharctr_4bitMode+0x740>
    2eb8:	88 ec       	ldi	r24, 0xC8	; 200
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	9d 83       	std	Y+5, r25	; 0x05
    2ebe:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ec0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ec2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ec4:	01 97       	sbiw	r24, 0x01	; 1
    2ec6:	f1 f7       	brne	.-4      	; 0x2ec4 <LCD_voidWriteCharctr_4bitMode+0x72e>
    2ec8:	9d 83       	std	Y+5, r25	; 0x05
    2eca:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ecc:	8e 81       	ldd	r24, Y+6	; 0x06
    2ece:	9f 81       	ldd	r25, Y+7	; 0x07
    2ed0:	01 97       	sbiw	r24, 0x01	; 1
    2ed2:	9f 83       	std	Y+7, r25	; 0x07
    2ed4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ed6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ed8:	9f 81       	ldd	r25, Y+7	; 0x07
    2eda:	00 97       	sbiw	r24, 0x00	; 0
    2edc:	69 f7       	brne	.-38     	; 0x2eb8 <LCD_voidWriteCharctr_4bitMode+0x722>
    2ede:	24 c0       	rjmp	.+72     	; 0x2f28 <LCD_voidWriteCharctr_4bitMode+0x792>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee0:	68 85       	ldd	r22, Y+8	; 0x08
    2ee2:	79 85       	ldd	r23, Y+9	; 0x09
    2ee4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ee6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eec:	dc 01       	movw	r26, r24
    2eee:	cb 01       	movw	r24, r22
    2ef0:	9f 83       	std	Y+7, r25	; 0x07
    2ef2:	8e 83       	std	Y+6, r24	; 0x06
    2ef4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ef6:	9f 81       	ldd	r25, Y+7	; 0x07
    2ef8:	9b 83       	std	Y+3, r25	; 0x03
    2efa:	8a 83       	std	Y+2, r24	; 0x02
    2efc:	8a 81       	ldd	r24, Y+2	; 0x02
    2efe:	9b 81       	ldd	r25, Y+3	; 0x03
    2f00:	01 97       	sbiw	r24, 0x01	; 1
    2f02:	f1 f7       	brne	.-4      	; 0x2f00 <LCD_voidWriteCharctr_4bitMode+0x76a>
    2f04:	9b 83       	std	Y+3, r25	; 0x03
    2f06:	8a 83       	std	Y+2, r24	; 0x02
    2f08:	0f c0       	rjmp	.+30     	; 0x2f28 <LCD_voidWriteCharctr_4bitMode+0x792>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f0a:	69 89       	ldd	r22, Y+17	; 0x11
    2f0c:	7a 89       	ldd	r23, Y+18	; 0x12
    2f0e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f10:	9c 89       	ldd	r25, Y+20	; 0x14
    2f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f16:	dc 01       	movw	r26, r24
    2f18:	cb 01       	movw	r24, r22
    2f1a:	88 8b       	std	Y+16, r24	; 0x10
    2f1c:	88 89       	ldd	r24, Y+16	; 0x10
    2f1e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f20:	89 81       	ldd	r24, Y+1	; 0x01
    2f22:	8a 95       	dec	r24
    2f24:	f1 f7       	brne	.-4      	; 0x2f22 <LCD_voidWriteCharctr_4bitMode+0x78c>
    2f26:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);

}
    2f28:	cf 59       	subi	r28, 0x9F	; 159
    2f2a:	df 4f       	sbci	r29, 0xFF	; 255
    2f2c:	0f b6       	in	r0, 0x3f	; 63
    2f2e:	f8 94       	cli
    2f30:	de bf       	out	0x3e, r29	; 62
    2f32:	0f be       	out	0x3f, r0	; 63
    2f34:	cd bf       	out	0x3d, r28	; 61
    2f36:	cf 91       	pop	r28
    2f38:	df 91       	pop	r29
    2f3a:	1f 91       	pop	r17
    2f3c:	0f 91       	pop	r16
    2f3e:	08 95       	ret

00002f40 <LCD_voidWriteString>:
void LCD_voidWriteString(uint8 *pu8StringCpy, uint8 u8Index){	//LCD_voidWriteString('Tasneem')
    2f40:	df 93       	push	r29
    2f42:	cf 93       	push	r28
    2f44:	00 d0       	rcall	.+0      	; 0x2f46 <LCD_voidWriteString+0x6>
    2f46:	00 d0       	rcall	.+0      	; 0x2f48 <LCD_voidWriteString+0x8>
    2f48:	cd b7       	in	r28, 0x3d	; 61
    2f4a:	de b7       	in	r29, 0x3e	; 62
    2f4c:	9b 83       	std	Y+3, r25	; 0x03
    2f4e:	8a 83       	std	Y+2, r24	; 0x02
    2f50:	6c 83       	std	Y+4, r22	; 0x04
	/*uint8 i=0;
	 *while(pu8StringCpy[i] != '\0'){
	 *		LCD_voidWriteCharctr(pu8StringCpy[i]);
	 *		i++;
	 *}*/
	for(uint8 i=0; i<u8Index; i++){
    2f52:	19 82       	std	Y+1, r1	; 0x01
    2f54:	0e c0       	rjmp	.+28     	; 0x2f72 <LCD_voidWriteString+0x32>
		LCD_voidWriteCharctr(pu8StringCpy[i]);
    2f56:	89 81       	ldd	r24, Y+1	; 0x01
    2f58:	28 2f       	mov	r18, r24
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f60:	fc 01       	movw	r30, r24
    2f62:	e2 0f       	add	r30, r18
    2f64:	f3 1f       	adc	r31, r19
    2f66:	80 81       	ld	r24, Z
    2f68:	0e 94 32 13 	call	0x2664	; 0x2664 <LCD_voidWriteCharctr>
	/*uint8 i=0;
	 *while(pu8StringCpy[i] != '\0'){
	 *		LCD_voidWriteCharctr(pu8StringCpy[i]);
	 *		i++;
	 *}*/
	for(uint8 i=0; i<u8Index; i++){
    2f6c:	89 81       	ldd	r24, Y+1	; 0x01
    2f6e:	8f 5f       	subi	r24, 0xFF	; 255
    2f70:	89 83       	std	Y+1, r24	; 0x01
    2f72:	99 81       	ldd	r25, Y+1	; 0x01
    2f74:	8c 81       	ldd	r24, Y+4	; 0x04
    2f76:	98 17       	cp	r25, r24
    2f78:	70 f3       	brcs	.-36     	; 0x2f56 <LCD_voidWriteString+0x16>
		LCD_voidWriteCharctr(pu8StringCpy[i]);
	}
}
    2f7a:	0f 90       	pop	r0
    2f7c:	0f 90       	pop	r0
    2f7e:	0f 90       	pop	r0
    2f80:	0f 90       	pop	r0
    2f82:	cf 91       	pop	r28
    2f84:	df 91       	pop	r29
    2f86:	08 95       	ret

00002f88 <LCD_voidWriteString_4bitMode>:
void LCD_voidWriteString_4bitMode(uint8 *pu8StringCpy, uint8 u8Index){	//LCD_voidWriteString('Tasneem')
    2f88:	df 93       	push	r29
    2f8a:	cf 93       	push	r28
    2f8c:	00 d0       	rcall	.+0      	; 0x2f8e <LCD_voidWriteString_4bitMode+0x6>
    2f8e:	00 d0       	rcall	.+0      	; 0x2f90 <LCD_voidWriteString_4bitMode+0x8>
    2f90:	cd b7       	in	r28, 0x3d	; 61
    2f92:	de b7       	in	r29, 0x3e	; 62
    2f94:	9b 83       	std	Y+3, r25	; 0x03
    2f96:	8a 83       	std	Y+2, r24	; 0x02
    2f98:	6c 83       	std	Y+4, r22	; 0x04
	for(uint8 i=0; i<u8Index; i++){
    2f9a:	19 82       	std	Y+1, r1	; 0x01
    2f9c:	0e c0       	rjmp	.+28     	; 0x2fba <LCD_voidWriteString_4bitMode+0x32>
		LCD_voidWriteCharctr_4bitMode(pu8StringCpy[i]);
    2f9e:	89 81       	ldd	r24, Y+1	; 0x01
    2fa0:	28 2f       	mov	r18, r24
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fa8:	fc 01       	movw	r30, r24
    2faa:	e2 0f       	add	r30, r18
    2fac:	f3 1f       	adc	r31, r19
    2fae:	80 81       	ld	r24, Z
    2fb0:	0e 94 cb 13 	call	0x2796	; 0x2796 <LCD_voidWriteCharctr_4bitMode>
	for(uint8 i=0; i<u8Index; i++){
		LCD_voidWriteCharctr(pu8StringCpy[i]);
	}
}
void LCD_voidWriteString_4bitMode(uint8 *pu8StringCpy, uint8 u8Index){	//LCD_voidWriteString('Tasneem')
	for(uint8 i=0; i<u8Index; i++){
    2fb4:	89 81       	ldd	r24, Y+1	; 0x01
    2fb6:	8f 5f       	subi	r24, 0xFF	; 255
    2fb8:	89 83       	std	Y+1, r24	; 0x01
    2fba:	99 81       	ldd	r25, Y+1	; 0x01
    2fbc:	8c 81       	ldd	r24, Y+4	; 0x04
    2fbe:	98 17       	cp	r25, r24
    2fc0:	70 f3       	brcs	.-36     	; 0x2f9e <LCD_voidWriteString_4bitMode+0x16>
		LCD_voidWriteCharctr_4bitMode(pu8StringCpy[i]);
	}
}
    2fc2:	0f 90       	pop	r0
    2fc4:	0f 90       	pop	r0
    2fc6:	0f 90       	pop	r0
    2fc8:	0f 90       	pop	r0
    2fca:	cf 91       	pop	r28
    2fcc:	df 91       	pop	r29
    2fce:	08 95       	ret

00002fd0 <Gotoxy>:
void Gotoxy(uint8 x, uint8 y){
    2fd0:	df 93       	push	r29
    2fd2:	cf 93       	push	r28
    2fd4:	00 d0       	rcall	.+0      	; 0x2fd6 <Gotoxy+0x6>
    2fd6:	00 d0       	rcall	.+0      	; 0x2fd8 <Gotoxy+0x8>
    2fd8:	cd b7       	in	r28, 0x3d	; 61
    2fda:	de b7       	in	r29, 0x3e	; 62
    2fdc:	89 83       	std	Y+1, r24	; 0x01
    2fde:	6a 83       	std	Y+2, r22	; 0x02
	if(x>=0 && x<16)
    2fe0:	89 81       	ldd	r24, Y+1	; 0x01
    2fe2:	80 31       	cpi	r24, 0x10	; 16
    2fe4:	c8 f4       	brcc	.+50     	; 0x3018 <Gotoxy+0x48>
	{
		switch(y){
    2fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe8:	28 2f       	mov	r18, r24
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	3c 83       	std	Y+4, r19	; 0x04
    2fee:	2b 83       	std	Y+3, r18	; 0x03
    2ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff4:	81 30       	cpi	r24, 0x01	; 1
    2ff6:	91 05       	cpc	r25, r1
    2ff8:	31 f0       	breq	.+12     	; 0x3006 <Gotoxy+0x36>
    2ffa:	2b 81       	ldd	r18, Y+3	; 0x03
    2ffc:	3c 81       	ldd	r19, Y+4	; 0x04
    2ffe:	22 30       	cpi	r18, 0x02	; 2
    3000:	31 05       	cpc	r19, r1
    3002:	31 f0       	breq	.+12     	; 0x3010 <Gotoxy+0x40>
    3004:	09 c0       	rjmp	.+18     	; 0x3018 <Gotoxy+0x48>
		case LineOne:
			LCD_voidSendCommand(LineOneStart+x);	//set DDRAM address
    3006:	89 81       	ldd	r24, Y+1	; 0x01
    3008:	80 58       	subi	r24, 0x80	; 128
    300a:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCommand>
    300e:	04 c0       	rjmp	.+8      	; 0x3018 <Gotoxy+0x48>
			break;
		case LineTwo:
			LCD_voidSendCommand(LineTwoStart+x);	//set DDRAM address
    3010:	89 81       	ldd	r24, Y+1	; 0x01
    3012:	80 54       	subi	r24, 0x40	; 64
    3014:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCommand>
	}
	else
	{
		//do nothing
	}
}
    3018:	0f 90       	pop	r0
    301a:	0f 90       	pop	r0
    301c:	0f 90       	pop	r0
    301e:	0f 90       	pop	r0
    3020:	cf 91       	pop	r28
    3022:	df 91       	pop	r29
    3024:	08 95       	ret

00003026 <LCD_voidGotoxy_4bitMode>:

void LCD_voidGotoxy_4bitMode(uint8 x, uint8 y){
    3026:	df 93       	push	r29
    3028:	cf 93       	push	r28
    302a:	00 d0       	rcall	.+0      	; 0x302c <LCD_voidGotoxy_4bitMode+0x6>
    302c:	00 d0       	rcall	.+0      	; 0x302e <LCD_voidGotoxy_4bitMode+0x8>
    302e:	cd b7       	in	r28, 0x3d	; 61
    3030:	de b7       	in	r29, 0x3e	; 62
    3032:	89 83       	std	Y+1, r24	; 0x01
    3034:	6a 83       	std	Y+2, r22	; 0x02
	if(x>=0 && x<16)
    3036:	89 81       	ldd	r24, Y+1	; 0x01
    3038:	80 31       	cpi	r24, 0x10	; 16
    303a:	c8 f4       	brcc	.+50     	; 0x306e <LCD_voidGotoxy_4bitMode+0x48>
	{
		switch(y){
    303c:	8a 81       	ldd	r24, Y+2	; 0x02
    303e:	28 2f       	mov	r18, r24
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	3c 83       	std	Y+4, r19	; 0x04
    3044:	2b 83       	std	Y+3, r18	; 0x03
    3046:	8b 81       	ldd	r24, Y+3	; 0x03
    3048:	9c 81       	ldd	r25, Y+4	; 0x04
    304a:	81 30       	cpi	r24, 0x01	; 1
    304c:	91 05       	cpc	r25, r1
    304e:	31 f0       	breq	.+12     	; 0x305c <LCD_voidGotoxy_4bitMode+0x36>
    3050:	2b 81       	ldd	r18, Y+3	; 0x03
    3052:	3c 81       	ldd	r19, Y+4	; 0x04
    3054:	22 30       	cpi	r18, 0x02	; 2
    3056:	31 05       	cpc	r19, r1
    3058:	31 f0       	breq	.+12     	; 0x3066 <LCD_voidGotoxy_4bitMode+0x40>
    305a:	09 c0       	rjmp	.+18     	; 0x306e <LCD_voidGotoxy_4bitMode+0x48>
		case LineOne:
			LCD_voidSendCommand_4bitMode(LineOneStart+x);	//set DDRAM address
    305c:	89 81       	ldd	r24, Y+1	; 0x01
    305e:	80 58       	subi	r24, 0x80	; 128
    3060:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_voidSendCommand_4bitMode>
    3064:	04 c0       	rjmp	.+8      	; 0x306e <LCD_voidGotoxy_4bitMode+0x48>
			break;
		case LineTwo:
			LCD_voidSendCommand_4bitMode(LineTwoStart+x);	//set DDRAM address
    3066:	89 81       	ldd	r24, Y+1	; 0x01
    3068:	80 54       	subi	r24, 0x40	; 64
    306a:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_voidSendCommand_4bitMode>
	}
	else
	{
		//do nothing
	}
}
    306e:	0f 90       	pop	r0
    3070:	0f 90       	pop	r0
    3072:	0f 90       	pop	r0
    3074:	0f 90       	pop	r0
    3076:	cf 91       	pop	r28
    3078:	df 91       	pop	r29
    307a:	08 95       	ret

0000307c <LCD_voidWriteExtraChar>:
void LCD_voidWriteExtraChar(uint8 Y, uint8 X){
    307c:	df 93       	push	r29
    307e:	cf 93       	push	r28
    3080:	00 d0       	rcall	.+0      	; 0x3082 <LCD_voidWriteExtraChar+0x6>
    3082:	cd b7       	in	r28, 0x3d	; 61
    3084:	de b7       	in	r29, 0x3e	; 62
    3086:	89 83       	std	Y+1, r24	; 0x01
    3088:	6a 83       	std	Y+2, r22	; 0x02

}
    308a:	0f 90       	pop	r0
    308c:	0f 90       	pop	r0
    308e:	cf 91       	pop	r28
    3090:	df 91       	pop	r29
    3092:	08 95       	ret

00003094 <LCD_voidDisplayKeys>:


void LCD_voidDisplayKeys(uint8 *u8key, uint8 *index){
    3094:	df 93       	push	r29
    3096:	cf 93       	push	r28
    3098:	cd b7       	in	r28, 0x3d	; 61
    309a:	de b7       	in	r29, 0x3e	; 62
    309c:	62 97       	sbiw	r28, 0x12	; 18
    309e:	0f b6       	in	r0, 0x3f	; 63
    30a0:	f8 94       	cli
    30a2:	de bf       	out	0x3e, r29	; 62
    30a4:	0f be       	out	0x3f, r0	; 63
    30a6:	cd bf       	out	0x3d, r28	; 61
    30a8:	98 8b       	std	Y+16, r25	; 0x10
    30aa:	8f 87       	std	Y+15, r24	; 0x0f
    30ac:	7a 8b       	std	Y+18, r23	; 0x12
    30ae:	69 8b       	std	Y+17, r22	; 0x11
	if ((u8key[*index] >= '0' && u8key[*index] <= '9') || (u8key[*index] >= 'A' && u8key[*index] <= 'D') || (u8key[*index] =='*')||(u8key[*index] =='#')) {
    30b0:	e9 89       	ldd	r30, Y+17	; 0x11
    30b2:	fa 89       	ldd	r31, Y+18	; 0x12
    30b4:	80 81       	ld	r24, Z
    30b6:	28 2f       	mov	r18, r24
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    30bc:	98 89       	ldd	r25, Y+16	; 0x10
    30be:	fc 01       	movw	r30, r24
    30c0:	e2 0f       	add	r30, r18
    30c2:	f3 1f       	adc	r31, r19
    30c4:	80 81       	ld	r24, Z
    30c6:	80 33       	cpi	r24, 0x30	; 48
    30c8:	68 f0       	brcs	.+26     	; 0x30e4 <LCD_voidDisplayKeys+0x50>
    30ca:	e9 89       	ldd	r30, Y+17	; 0x11
    30cc:	fa 89       	ldd	r31, Y+18	; 0x12
    30ce:	80 81       	ld	r24, Z
    30d0:	28 2f       	mov	r18, r24
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    30d6:	98 89       	ldd	r25, Y+16	; 0x10
    30d8:	fc 01       	movw	r30, r24
    30da:	e2 0f       	add	r30, r18
    30dc:	f3 1f       	adc	r31, r19
    30de:	80 81       	ld	r24, Z
    30e0:	8a 33       	cpi	r24, 0x3A	; 58
    30e2:	a8 f1       	brcs	.+106    	; 0x314e <LCD_voidDisplayKeys+0xba>
    30e4:	e9 89       	ldd	r30, Y+17	; 0x11
    30e6:	fa 89       	ldd	r31, Y+18	; 0x12
    30e8:	80 81       	ld	r24, Z
    30ea:	28 2f       	mov	r18, r24
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    30f0:	98 89       	ldd	r25, Y+16	; 0x10
    30f2:	fc 01       	movw	r30, r24
    30f4:	e2 0f       	add	r30, r18
    30f6:	f3 1f       	adc	r31, r19
    30f8:	80 81       	ld	r24, Z
    30fa:	81 34       	cpi	r24, 0x41	; 65
    30fc:	68 f0       	brcs	.+26     	; 0x3118 <LCD_voidDisplayKeys+0x84>
    30fe:	e9 89       	ldd	r30, Y+17	; 0x11
    3100:	fa 89       	ldd	r31, Y+18	; 0x12
    3102:	80 81       	ld	r24, Z
    3104:	28 2f       	mov	r18, r24
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	8f 85       	ldd	r24, Y+15	; 0x0f
    310a:	98 89       	ldd	r25, Y+16	; 0x10
    310c:	fc 01       	movw	r30, r24
    310e:	e2 0f       	add	r30, r18
    3110:	f3 1f       	adc	r31, r19
    3112:	80 81       	ld	r24, Z
    3114:	85 34       	cpi	r24, 0x45	; 69
    3116:	d8 f0       	brcs	.+54     	; 0x314e <LCD_voidDisplayKeys+0xba>
    3118:	e9 89       	ldd	r30, Y+17	; 0x11
    311a:	fa 89       	ldd	r31, Y+18	; 0x12
    311c:	80 81       	ld	r24, Z
    311e:	28 2f       	mov	r18, r24
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	8f 85       	ldd	r24, Y+15	; 0x0f
    3124:	98 89       	ldd	r25, Y+16	; 0x10
    3126:	fc 01       	movw	r30, r24
    3128:	e2 0f       	add	r30, r18
    312a:	f3 1f       	adc	r31, r19
    312c:	80 81       	ld	r24, Z
    312e:	8a 32       	cpi	r24, 0x2A	; 42
    3130:	71 f0       	breq	.+28     	; 0x314e <LCD_voidDisplayKeys+0xba>
    3132:	e9 89       	ldd	r30, Y+17	; 0x11
    3134:	fa 89       	ldd	r31, Y+18	; 0x12
    3136:	80 81       	ld	r24, Z
    3138:	28 2f       	mov	r18, r24
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	8f 85       	ldd	r24, Y+15	; 0x0f
    313e:	98 89       	ldd	r25, Y+16	; 0x10
    3140:	fc 01       	movw	r30, r24
    3142:	e2 0f       	add	r30, r18
    3144:	f3 1f       	adc	r31, r19
    3146:	80 81       	ld	r24, Z
    3148:	83 32       	cpi	r24, 0x23	; 35
    314a:	09 f0       	breq	.+2      	; 0x314e <LCD_voidDisplayKeys+0xba>
    314c:	86 c0       	rjmp	.+268    	; 0x325a <LCD_voidDisplayKeys+0x1c6>
		LCD_voidWriteCharctr_4bitMode(u8key[*index]);
    314e:	e9 89       	ldd	r30, Y+17	; 0x11
    3150:	fa 89       	ldd	r31, Y+18	; 0x12
    3152:	80 81       	ld	r24, Z
    3154:	28 2f       	mov	r18, r24
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	8f 85       	ldd	r24, Y+15	; 0x0f
    315a:	98 89       	ldd	r25, Y+16	; 0x10
    315c:	fc 01       	movw	r30, r24
    315e:	e2 0f       	add	r30, r18
    3160:	f3 1f       	adc	r31, r19
    3162:	80 81       	ld	r24, Z
    3164:	0e 94 cb 13 	call	0x2796	; 0x2796 <LCD_voidWriteCharctr_4bitMode>
    3168:	80 e0       	ldi	r24, 0x00	; 0
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	aa ef       	ldi	r26, 0xFA	; 250
    316e:	b3 e4       	ldi	r27, 0x43	; 67
    3170:	8b 87       	std	Y+11, r24	; 0x0b
    3172:	9c 87       	std	Y+12, r25	; 0x0c
    3174:	ad 87       	std	Y+13, r26	; 0x0d
    3176:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3178:	6b 85       	ldd	r22, Y+11	; 0x0b
    317a:	7c 85       	ldd	r23, Y+12	; 0x0c
    317c:	8d 85       	ldd	r24, Y+13	; 0x0d
    317e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3180:	20 e0       	ldi	r18, 0x00	; 0
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	4a ef       	ldi	r20, 0xFA	; 250
    3186:	54 e4       	ldi	r21, 0x44	; 68
    3188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    318c:	dc 01       	movw	r26, r24
    318e:	cb 01       	movw	r24, r22
    3190:	8f 83       	std	Y+7, r24	; 0x07
    3192:	98 87       	std	Y+8, r25	; 0x08
    3194:	a9 87       	std	Y+9, r26	; 0x09
    3196:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3198:	6f 81       	ldd	r22, Y+7	; 0x07
    319a:	78 85       	ldd	r23, Y+8	; 0x08
    319c:	89 85       	ldd	r24, Y+9	; 0x09
    319e:	9a 85       	ldd	r25, Y+10	; 0x0a
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	40 e8       	ldi	r20, 0x80	; 128
    31a6:	5f e3       	ldi	r21, 0x3F	; 63
    31a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31ac:	88 23       	and	r24, r24
    31ae:	2c f4       	brge	.+10     	; 0x31ba <LCD_voidDisplayKeys+0x126>
		__ticks = 1;
    31b0:	81 e0       	ldi	r24, 0x01	; 1
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	9e 83       	std	Y+6, r25	; 0x06
    31b6:	8d 83       	std	Y+5, r24	; 0x05
    31b8:	3f c0       	rjmp	.+126    	; 0x3238 <LCD_voidDisplayKeys+0x1a4>
	else if (__tmp > 65535)
    31ba:	6f 81       	ldd	r22, Y+7	; 0x07
    31bc:	78 85       	ldd	r23, Y+8	; 0x08
    31be:	89 85       	ldd	r24, Y+9	; 0x09
    31c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31c2:	20 e0       	ldi	r18, 0x00	; 0
    31c4:	3f ef       	ldi	r19, 0xFF	; 255
    31c6:	4f e7       	ldi	r20, 0x7F	; 127
    31c8:	57 e4       	ldi	r21, 0x47	; 71
    31ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31ce:	18 16       	cp	r1, r24
    31d0:	4c f5       	brge	.+82     	; 0x3224 <LCD_voidDisplayKeys+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    31d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    31d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    31d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    31da:	20 e0       	ldi	r18, 0x00	; 0
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	40 e2       	ldi	r20, 0x20	; 32
    31e0:	51 e4       	ldi	r21, 0x41	; 65
    31e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	bc 01       	movw	r22, r24
    31ec:	cd 01       	movw	r24, r26
    31ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f2:	dc 01       	movw	r26, r24
    31f4:	cb 01       	movw	r24, r22
    31f6:	9e 83       	std	Y+6, r25	; 0x06
    31f8:	8d 83       	std	Y+5, r24	; 0x05
    31fa:	0f c0       	rjmp	.+30     	; 0x321a <LCD_voidDisplayKeys+0x186>
    31fc:	88 ec       	ldi	r24, 0xC8	; 200
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	9c 83       	std	Y+4, r25	; 0x04
    3202:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3204:	8b 81       	ldd	r24, Y+3	; 0x03
    3206:	9c 81       	ldd	r25, Y+4	; 0x04
    3208:	01 97       	sbiw	r24, 0x01	; 1
    320a:	f1 f7       	brne	.-4      	; 0x3208 <LCD_voidDisplayKeys+0x174>
    320c:	9c 83       	std	Y+4, r25	; 0x04
    320e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3210:	8d 81       	ldd	r24, Y+5	; 0x05
    3212:	9e 81       	ldd	r25, Y+6	; 0x06
    3214:	01 97       	sbiw	r24, 0x01	; 1
    3216:	9e 83       	std	Y+6, r25	; 0x06
    3218:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    321a:	8d 81       	ldd	r24, Y+5	; 0x05
    321c:	9e 81       	ldd	r25, Y+6	; 0x06
    321e:	00 97       	sbiw	r24, 0x00	; 0
    3220:	69 f7       	brne	.-38     	; 0x31fc <LCD_voidDisplayKeys+0x168>
    3222:	14 c0       	rjmp	.+40     	; 0x324c <LCD_voidDisplayKeys+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3224:	6f 81       	ldd	r22, Y+7	; 0x07
    3226:	78 85       	ldd	r23, Y+8	; 0x08
    3228:	89 85       	ldd	r24, Y+9	; 0x09
    322a:	9a 85       	ldd	r25, Y+10	; 0x0a
    322c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	9e 83       	std	Y+6, r25	; 0x06
    3236:	8d 83       	std	Y+5, r24	; 0x05
    3238:	8d 81       	ldd	r24, Y+5	; 0x05
    323a:	9e 81       	ldd	r25, Y+6	; 0x06
    323c:	9a 83       	std	Y+2, r25	; 0x02
    323e:	89 83       	std	Y+1, r24	; 0x01
    3240:	89 81       	ldd	r24, Y+1	; 0x01
    3242:	9a 81       	ldd	r25, Y+2	; 0x02
    3244:	01 97       	sbiw	r24, 0x01	; 1
    3246:	f1 f7       	brne	.-4      	; 0x3244 <LCD_voidDisplayKeys+0x1b0>
    3248:	9a 83       	std	Y+2, r25	; 0x02
    324a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		(*index)++;
    324c:	e9 89       	ldd	r30, Y+17	; 0x11
    324e:	fa 89       	ldd	r31, Y+18	; 0x12
    3250:	80 81       	ld	r24, Z
    3252:	8f 5f       	subi	r24, 0xFF	; 255
    3254:	e9 89       	ldd	r30, Y+17	; 0x11
    3256:	fa 89       	ldd	r31, Y+18	; 0x12
    3258:	80 83       	st	Z, r24
//
//	case '*': LCD_voidWriteCharctr_4bitMode(u8key[*index]); break;
//	case '#': LCD_voidWriteCharctr_4bitMode(u8key[*index]); break;
//	}
//	(*index)++;
}
    325a:	62 96       	adiw	r28, 0x12	; 18
    325c:	0f b6       	in	r0, 0x3f	; 63
    325e:	f8 94       	cli
    3260:	de bf       	out	0x3e, r29	; 62
    3262:	0f be       	out	0x3f, r0	; 63
    3264:	cd bf       	out	0x3d, r28	; 61
    3266:	cf 91       	pop	r28
    3268:	df 91       	pop	r29
    326a:	08 95       	ret

0000326c <KPD_voidInit>:
					 { '4', '5', '6', 'B'},
					 { '7', '8', '9', 'C'},
					 { '*', '0', '#', 'D'}};


void KPD_voidInit(void){
    326c:	df 93       	push	r29
    326e:	cf 93       	push	r28
    3270:	0f 92       	push	r0
    3272:	cd b7       	in	r28, 0x3d	; 61
    3274:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	for(i=ROW_START; i<=ROW_END; i++){
    3276:	19 82       	std	Y+1, r1	; 0x01
    3278:	08 c0       	rjmp	.+16     	; 0x328a <KPD_voidInit+0x1e>
		//make all rows input pull up
		DIO_voidPullUpState(KPD_PORT,i, ENABLE_PULLUP);
    327a:	83 e0       	ldi	r24, 0x03	; 3
    327c:	69 81       	ldd	r22, Y+1	; 0x01
    327e:	41 e0       	ldi	r20, 0x01	; 1
    3280:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <DIO_voidPullUpState>
					 { '*', '0', '#', 'D'}};


void KPD_voidInit(void){
	uint8 i;
	for(i=ROW_START; i<=ROW_END; i++){
    3284:	89 81       	ldd	r24, Y+1	; 0x01
    3286:	8f 5f       	subi	r24, 0xFF	; 255
    3288:	89 83       	std	Y+1, r24	; 0x01
    328a:	89 81       	ldd	r24, Y+1	; 0x01
    328c:	84 30       	cpi	r24, 0x04	; 4
    328e:	a8 f3       	brcs	.-22     	; 0x327a <KPD_voidInit+0xe>
		//make all rows input pull up
		DIO_voidPullUpState(KPD_PORT,i, ENABLE_PULLUP);
	}
	for(i=COLUMN_START; i<=COLUMN_END; i++){
    3290:	84 e0       	ldi	r24, 0x04	; 4
    3292:	89 83       	std	Y+1, r24	; 0x01
    3294:	08 c0       	rjmp	.+16     	; 0x32a6 <KPD_voidInit+0x3a>
		//make all column pins high
		//DIO_voidWritePin(KPD_PORT,i, DIO_INPUT);
		DIO_voidWritePin(KPD_PORT,i, DIO_HIGH);
    3296:	83 e0       	ldi	r24, 0x03	; 3
    3298:	69 81       	ldd	r22, Y+1	; 0x01
    329a:	41 e0       	ldi	r20, 0x01	; 1
    329c:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>
	uint8 i;
	for(i=ROW_START; i<=ROW_END; i++){
		//make all rows input pull up
		DIO_voidPullUpState(KPD_PORT,i, ENABLE_PULLUP);
	}
	for(i=COLUMN_START; i<=COLUMN_END; i++){
    32a0:	89 81       	ldd	r24, Y+1	; 0x01
    32a2:	8f 5f       	subi	r24, 0xFF	; 255
    32a4:	89 83       	std	Y+1, r24	; 0x01
    32a6:	89 81       	ldd	r24, Y+1	; 0x01
    32a8:	88 30       	cpi	r24, 0x08	; 8
    32aa:	a8 f3       	brcs	.-22     	; 0x3296 <KPD_voidInit+0x2a>
		//make all column pins high
		//DIO_voidWritePin(KPD_PORT,i, DIO_INPUT);
		DIO_voidWritePin(KPD_PORT,i, DIO_HIGH);
		}
}
    32ac:	0f 90       	pop	r0
    32ae:	cf 91       	pop	r28
    32b0:	df 91       	pop	r29
    32b2:	08 95       	ret

000032b4 <KPD_u8GetKey>:

uint8 KPD_u8GetKey(void){
    32b4:	df 93       	push	r29
    32b6:	cf 93       	push	r28
    32b8:	cd b7       	in	r28, 0x3d	; 61
    32ba:	de b7       	in	r29, 0x3e	; 62
    32bc:	64 97       	sbiw	r28, 0x14	; 20
    32be:	0f b6       	in	r0, 0x3f	; 63
    32c0:	f8 94       	cli
    32c2:	de bf       	out	0x3e, r29	; 62
    32c4:	0f be       	out	0x3f, r0	; 63
    32c6:	cd bf       	out	0x3d, r28	; 61
	uint8 key = NoPressedKey;
    32c8:	8f ef       	ldi	r24, 0xFF	; 255
    32ca:	8c 8b       	std	Y+20, r24	; 0x14
	uint8 i, j, k;
	uint8 result, exitflag = DIO_LOW;
    32cc:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;i<4;i++){			//loop over columns
    32ce:	1b 8a       	std	Y+19, r1	; 0x13
    32d0:	b6 c0       	rjmp	.+364    	; 0x343e <KPD_u8GetKey+0x18a>
		//set all columns high
		for(k=COLUMN_START; k<=COLUMN_END;k++){
    32d2:	84 e0       	ldi	r24, 0x04	; 4
    32d4:	89 8b       	std	Y+17, r24	; 0x11
    32d6:	08 c0       	rjmp	.+16     	; 0x32e8 <KPD_u8GetKey+0x34>
			DIO_voidWritePin(KPD_PORT,k, DIO_HIGH);
    32d8:	83 e0       	ldi	r24, 0x03	; 3
    32da:	69 89       	ldd	r22, Y+17	; 0x11
    32dc:	41 e0       	ldi	r20, 0x01	; 1
    32de:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>
	uint8 key = NoPressedKey;
	uint8 i, j, k;
	uint8 result, exitflag = DIO_LOW;
	for(i=0;i<4;i++){			//loop over columns
		//set all columns high
		for(k=COLUMN_START; k<=COLUMN_END;k++){
    32e2:	89 89       	ldd	r24, Y+17	; 0x11
    32e4:	8f 5f       	subi	r24, 0xFF	; 255
    32e6:	89 8b       	std	Y+17, r24	; 0x11
    32e8:	89 89       	ldd	r24, Y+17	; 0x11
    32ea:	88 30       	cpi	r24, 0x08	; 8
    32ec:	a8 f3       	brcs	.-22     	; 0x32d8 <KPD_u8GetKey+0x24>
			DIO_voidWritePin(KPD_PORT,k, DIO_HIGH);
		}
		//set column low
		DIO_voidWritePin(KPD_PORT,(COLUMN_START+i), DIO_LOW);
    32ee:	8b 89       	ldd	r24, Y+19	; 0x13
    32f0:	98 2f       	mov	r25, r24
    32f2:	9c 5f       	subi	r25, 0xFC	; 252
    32f4:	83 e0       	ldi	r24, 0x03	; 3
    32f6:	69 2f       	mov	r22, r25
    32f8:	40 e0       	ldi	r20, 0x00	; 0
    32fa:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>

		for(j=0;j<4;j++){		//loop over rows
    32fe:	1a 8a       	std	Y+18, r1	; 0x12
    3300:	94 c0       	rjmp	.+296    	; 0x342a <KPD_u8GetKey+0x176>
			result = DIO_u8ReadPin(KPD_PORT, (ROW_START+j));
    3302:	83 e0       	ldi	r24, 0x03	; 3
    3304:	6a 89       	ldd	r22, Y+18	; 0x12
    3306:	0e 94 a8 1c 	call	0x3950	; 0x3950 <DIO_u8ReadPin>
    330a:	88 8b       	std	Y+16, r24	; 0x10
    330c:	80 e0       	ldi	r24, 0x00	; 0
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	a0 ea       	ldi	r26, 0xA0	; 160
    3312:	b1 e4       	ldi	r27, 0x41	; 65
    3314:	8b 87       	std	Y+11, r24	; 0x0b
    3316:	9c 87       	std	Y+12, r25	; 0x0c
    3318:	ad 87       	std	Y+13, r26	; 0x0d
    331a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    331c:	6b 85       	ldd	r22, Y+11	; 0x0b
    331e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3320:	8d 85       	ldd	r24, Y+13	; 0x0d
    3322:	9e 85       	ldd	r25, Y+14	; 0x0e
    3324:	20 e0       	ldi	r18, 0x00	; 0
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	4a ef       	ldi	r20, 0xFA	; 250
    332a:	54 e4       	ldi	r21, 0x44	; 68
    332c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3330:	dc 01       	movw	r26, r24
    3332:	cb 01       	movw	r24, r22
    3334:	8f 83       	std	Y+7, r24	; 0x07
    3336:	98 87       	std	Y+8, r25	; 0x08
    3338:	a9 87       	std	Y+9, r26	; 0x09
    333a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    333c:	6f 81       	ldd	r22, Y+7	; 0x07
    333e:	78 85       	ldd	r23, Y+8	; 0x08
    3340:	89 85       	ldd	r24, Y+9	; 0x09
    3342:	9a 85       	ldd	r25, Y+10	; 0x0a
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	40 e8       	ldi	r20, 0x80	; 128
    334a:	5f e3       	ldi	r21, 0x3F	; 63
    334c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3350:	88 23       	and	r24, r24
    3352:	2c f4       	brge	.+10     	; 0x335e <KPD_u8GetKey+0xaa>
		__ticks = 1;
    3354:	81 e0       	ldi	r24, 0x01	; 1
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	9e 83       	std	Y+6, r25	; 0x06
    335a:	8d 83       	std	Y+5, r24	; 0x05
    335c:	3f c0       	rjmp	.+126    	; 0x33dc <KPD_u8GetKey+0x128>
	else if (__tmp > 65535)
    335e:	6f 81       	ldd	r22, Y+7	; 0x07
    3360:	78 85       	ldd	r23, Y+8	; 0x08
    3362:	89 85       	ldd	r24, Y+9	; 0x09
    3364:	9a 85       	ldd	r25, Y+10	; 0x0a
    3366:	20 e0       	ldi	r18, 0x00	; 0
    3368:	3f ef       	ldi	r19, 0xFF	; 255
    336a:	4f e7       	ldi	r20, 0x7F	; 127
    336c:	57 e4       	ldi	r21, 0x47	; 71
    336e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3372:	18 16       	cp	r1, r24
    3374:	4c f5       	brge	.+82     	; 0x33c8 <KPD_u8GetKey+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3376:	6b 85       	ldd	r22, Y+11	; 0x0b
    3378:	7c 85       	ldd	r23, Y+12	; 0x0c
    337a:	8d 85       	ldd	r24, Y+13	; 0x0d
    337c:	9e 85       	ldd	r25, Y+14	; 0x0e
    337e:	20 e0       	ldi	r18, 0x00	; 0
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	40 e2       	ldi	r20, 0x20	; 32
    3384:	51 e4       	ldi	r21, 0x41	; 65
    3386:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338a:	dc 01       	movw	r26, r24
    338c:	cb 01       	movw	r24, r22
    338e:	bc 01       	movw	r22, r24
    3390:	cd 01       	movw	r24, r26
    3392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	9e 83       	std	Y+6, r25	; 0x06
    339c:	8d 83       	std	Y+5, r24	; 0x05
    339e:	0f c0       	rjmp	.+30     	; 0x33be <KPD_u8GetKey+0x10a>
    33a0:	88 ec       	ldi	r24, 0xC8	; 200
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	9c 83       	std	Y+4, r25	; 0x04
    33a6:	8b 83       	std	Y+3, r24	; 0x03
    33a8:	8b 81       	ldd	r24, Y+3	; 0x03
    33aa:	9c 81       	ldd	r25, Y+4	; 0x04
    33ac:	01 97       	sbiw	r24, 0x01	; 1
    33ae:	f1 f7       	brne	.-4      	; 0x33ac <KPD_u8GetKey+0xf8>
    33b0:	9c 83       	std	Y+4, r25	; 0x04
    33b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33b4:	8d 81       	ldd	r24, Y+5	; 0x05
    33b6:	9e 81       	ldd	r25, Y+6	; 0x06
    33b8:	01 97       	sbiw	r24, 0x01	; 1
    33ba:	9e 83       	std	Y+6, r25	; 0x06
    33bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33be:	8d 81       	ldd	r24, Y+5	; 0x05
    33c0:	9e 81       	ldd	r25, Y+6	; 0x06
    33c2:	00 97       	sbiw	r24, 0x00	; 0
    33c4:	69 f7       	brne	.-38     	; 0x33a0 <KPD_u8GetKey+0xec>
    33c6:	14 c0       	rjmp	.+40     	; 0x33f0 <KPD_u8GetKey+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33c8:	6f 81       	ldd	r22, Y+7	; 0x07
    33ca:	78 85       	ldd	r23, Y+8	; 0x08
    33cc:	89 85       	ldd	r24, Y+9	; 0x09
    33ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    33d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d4:	dc 01       	movw	r26, r24
    33d6:	cb 01       	movw	r24, r22
    33d8:	9e 83       	std	Y+6, r25	; 0x06
    33da:	8d 83       	std	Y+5, r24	; 0x05
    33dc:	8d 81       	ldd	r24, Y+5	; 0x05
    33de:	9e 81       	ldd	r25, Y+6	; 0x06
    33e0:	9a 83       	std	Y+2, r25	; 0x02
    33e2:	89 83       	std	Y+1, r24	; 0x01
    33e4:	89 81       	ldd	r24, Y+1	; 0x01
    33e6:	9a 81       	ldd	r25, Y+2	; 0x02
    33e8:	01 97       	sbiw	r24, 0x01	; 1
    33ea:	f1 f7       	brne	.-4      	; 0x33e8 <KPD_u8GetKey+0x134>
    33ec:	9a 83       	std	Y+2, r25	; 0x02
    33ee:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(20);
			if(result == DIO_LOW){
    33f0:	88 89       	ldd	r24, Y+16	; 0x10
    33f2:	88 23       	and	r24, r24
    33f4:	b9 f4       	brne	.+46     	; 0x3424 <KPD_u8GetKey+0x170>
				key = KPD_arr[j][i];
    33f6:	8a 89       	ldd	r24, Y+18	; 0x12
    33f8:	48 2f       	mov	r20, r24
    33fa:	50 e0       	ldi	r21, 0x00	; 0
    33fc:	8b 89       	ldd	r24, Y+19	; 0x13
    33fe:	28 2f       	mov	r18, r24
    3400:	30 e0       	ldi	r19, 0x00	; 0
    3402:	ca 01       	movw	r24, r20
    3404:	88 0f       	add	r24, r24
    3406:	99 1f       	adc	r25, r25
    3408:	88 0f       	add	r24, r24
    340a:	99 1f       	adc	r25, r25
    340c:	82 0f       	add	r24, r18
    340e:	93 1f       	adc	r25, r19
    3410:	fc 01       	movw	r30, r24
    3412:	e8 59       	subi	r30, 0x98	; 152
    3414:	ff 4f       	sbci	r31, 0xFF	; 255
    3416:	80 81       	ld	r24, Z
    3418:	8c 8b       	std	Y+20, r24	; 0x14
				exitflag = DIO_HIGH;
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	8f 87       	std	Y+15, r24	; 0x0f
				if(exitflag ==DIO_HIGH){
    341e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3420:	81 30       	cpi	r24, 0x01	; 1
    3422:	39 f0       	breq	.+14     	; 0x3432 <KPD_u8GetKey+0x17e>
			DIO_voidWritePin(KPD_PORT,k, DIO_HIGH);
		}
		//set column low
		DIO_voidWritePin(KPD_PORT,(COLUMN_START+i), DIO_LOW);

		for(j=0;j<4;j++){		//loop over rows
    3424:	8a 89       	ldd	r24, Y+18	; 0x12
    3426:	8f 5f       	subi	r24, 0xFF	; 255
    3428:	8a 8b       	std	Y+18, r24	; 0x12
    342a:	8a 89       	ldd	r24, Y+18	; 0x12
    342c:	84 30       	cpi	r24, 0x04	; 4
    342e:	08 f4       	brcc	.+2      	; 0x3432 <KPD_u8GetKey+0x17e>
    3430:	68 cf       	rjmp	.-304    	; 0x3302 <KPD_u8GetKey+0x4e>
				if(exitflag ==DIO_HIGH){
					break;
				}
			}
		}
		if(exitflag == DIO_HIGH){
    3432:	8f 85       	ldd	r24, Y+15	; 0x0f
    3434:	81 30       	cpi	r24, 0x01	; 1
    3436:	39 f0       	breq	.+14     	; 0x3446 <KPD_u8GetKey+0x192>

uint8 KPD_u8GetKey(void){
	uint8 key = NoPressedKey;
	uint8 i, j, k;
	uint8 result, exitflag = DIO_LOW;
	for(i=0;i<4;i++){			//loop over columns
    3438:	8b 89       	ldd	r24, Y+19	; 0x13
    343a:	8f 5f       	subi	r24, 0xFF	; 255
    343c:	8b 8b       	std	Y+19, r24	; 0x13
    343e:	8b 89       	ldd	r24, Y+19	; 0x13
    3440:	84 30       	cpi	r24, 0x04	; 4
    3442:	08 f4       	brcc	.+2      	; 0x3446 <KPD_u8GetKey+0x192>
    3444:	46 cf       	rjmp	.-372    	; 0x32d2 <KPD_u8GetKey+0x1e>
		}
		if(exitflag == DIO_HIGH){
			break;
		}
	}
	return key;
    3446:	8c 89       	ldd	r24, Y+20	; 0x14
}
    3448:	64 96       	adiw	r28, 0x14	; 20
    344a:	0f b6       	in	r0, 0x3f	; 63
    344c:	f8 94       	cli
    344e:	de bf       	out	0x3e, r29	; 62
    3450:	0f be       	out	0x3f, r0	; 63
    3452:	cd bf       	out	0x3d, r28	; 61
    3454:	cf 91       	pop	r28
    3456:	df 91       	pop	r29
    3458:	08 95       	ret

0000345a <EXT_INTERRUPT_VID_INIT>:
void (*EXTI0_CALLBACK_PTR)(void)=NULL;
void (*EXTI1_CALLBACK_PTR)(void)=NULL;
void (*EXTI2_CALLBACK_PTR)(void)=NULL;


void EXT_INTERRUPT_VID_INIT(void){
    345a:	df 93       	push	r29
    345c:	cf 93       	push	r28
    345e:	cd b7       	in	r28, 0x3d	; 61
    3460:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,ISC01);
#elif EXT0_MODE==   IOC
	SET_BIT(MCUCR,ISC00);
	CLR_BIT(MCUCR,ISC01);
#elif EXT0_MODE==   FALLING_EDGE
	CLR_BIT(MCUCR,ISC00);
    3462:	a5 e5       	ldi	r26, 0x55	; 85
    3464:	b0 e0       	ldi	r27, 0x00	; 0
    3466:	e5 e5       	ldi	r30, 0x55	; 85
    3468:	f0 e0       	ldi	r31, 0x00	; 0
    346a:	80 81       	ld	r24, Z
    346c:	8e 7f       	andi	r24, 0xFE	; 254
    346e:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC01);
    3470:	a5 e5       	ldi	r26, 0x55	; 85
    3472:	b0 e0       	ldi	r27, 0x00	; 0
    3474:	e5 e5       	ldi	r30, 0x55	; 85
    3476:	f0 e0       	ldi	r31, 0x00	; 0
    3478:	80 81       	ld	r24, Z
    347a:	82 60       	ori	r24, 0x02	; 2
    347c:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,ISC11);
#elif EXT1_MODE==   IOC
	SET_BIT(MCUCR,ISC10);
	CLR_BIT(MCUCR,ISC11);
#elif EXT1_MODE==   FALLING_EDGE
	CLR_BIT(MCUCR,ISC10);
    347e:	a5 e5       	ldi	r26, 0x55	; 85
    3480:	b0 e0       	ldi	r27, 0x00	; 0
    3482:	e5 e5       	ldi	r30, 0x55	; 85
    3484:	f0 e0       	ldi	r31, 0x00	; 0
    3486:	80 81       	ld	r24, Z
    3488:	8b 7f       	andi	r24, 0xFB	; 251
    348a:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC11);
    348c:	a5 e5       	ldi	r26, 0x55	; 85
    348e:	b0 e0       	ldi	r27, 0x00	; 0
    3490:	e5 e5       	ldi	r30, 0x55	; 85
    3492:	f0 e0       	ldi	r31, 0x00	; 0
    3494:	80 81       	ld	r24, Z
    3496:	88 60       	ori	r24, 0x08	; 8
    3498:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC11);
#else
#endif

#if EXT2_MODE== FALLING_EDGE
	CLR_BIT(MCUCSR,ISC2);
    349a:	a4 e5       	ldi	r26, 0x54	; 84
    349c:	b0 e0       	ldi	r27, 0x00	; 0
    349e:	e4 e5       	ldi	r30, 0x54	; 84
    34a0:	f0 e0       	ldi	r31, 0x00	; 0
    34a2:	80 81       	ld	r24, Z
    34a4:	8f 7b       	andi	r24, 0xBF	; 191
    34a6:	8c 93       	st	X, r24
	SET_BIT(MCUCSR,ISC2);


#else
#endif
}
    34a8:	cf 91       	pop	r28
    34aa:	df 91       	pop	r29
    34ac:	08 95       	ret

000034ae <EXT_INTERRUPT_VID_ENABLE>:

void EXT_INTERRUPT_VID_ENABLE(uint8 interrupt_number){
    34ae:	df 93       	push	r29
    34b0:	cf 93       	push	r28
    34b2:	00 d0       	rcall	.+0      	; 0x34b4 <EXT_INTERRUPT_VID_ENABLE+0x6>
    34b4:	0f 92       	push	r0
    34b6:	cd b7       	in	r28, 0x3d	; 61
    34b8:	de b7       	in	r29, 0x3e	; 62
    34ba:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt_number){
    34bc:	89 81       	ldd	r24, Y+1	; 0x01
    34be:	28 2f       	mov	r18, r24
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	3b 83       	std	Y+3, r19	; 0x03
    34c4:	2a 83       	std	Y+2, r18	; 0x02
    34c6:	8a 81       	ldd	r24, Y+2	; 0x02
    34c8:	9b 81       	ldd	r25, Y+3	; 0x03
    34ca:	81 30       	cpi	r24, 0x01	; 1
    34cc:	91 05       	cpc	r25, r1
    34ce:	89 f0       	breq	.+34     	; 0x34f2 <EXT_INTERRUPT_VID_ENABLE+0x44>
    34d0:	2a 81       	ldd	r18, Y+2	; 0x02
    34d2:	3b 81       	ldd	r19, Y+3	; 0x03
    34d4:	22 30       	cpi	r18, 0x02	; 2
    34d6:	31 05       	cpc	r19, r1
    34d8:	a1 f0       	breq	.+40     	; 0x3502 <EXT_INTERRUPT_VID_ENABLE+0x54>
    34da:	8a 81       	ldd	r24, Y+2	; 0x02
    34dc:	9b 81       	ldd	r25, Y+3	; 0x03
    34de:	00 97       	sbiw	r24, 0x00	; 0
    34e0:	b9 f4       	brne	.+46     	; 0x3510 <EXT_INTERRUPT_VID_ENABLE+0x62>
	case EXT0:
		SET_BIT(GICR, INT0);
    34e2:	ab e5       	ldi	r26, 0x5B	; 91
    34e4:	b0 e0       	ldi	r27, 0x00	; 0
    34e6:	eb e5       	ldi	r30, 0x5B	; 91
    34e8:	f0 e0       	ldi	r31, 0x00	; 0
    34ea:	80 81       	ld	r24, Z
    34ec:	80 64       	ori	r24, 0x40	; 64
    34ee:	8c 93       	st	X, r24
    34f0:	0f c0       	rjmp	.+30     	; 0x3510 <EXT_INTERRUPT_VID_ENABLE+0x62>
		break;
	case EXT1:
		SET_BIT(GICR, INT1);
    34f2:	ab e5       	ldi	r26, 0x5B	; 91
    34f4:	b0 e0       	ldi	r27, 0x00	; 0
    34f6:	eb e5       	ldi	r30, 0x5B	; 91
    34f8:	f0 e0       	ldi	r31, 0x00	; 0
    34fa:	80 81       	ld	r24, Z
    34fc:	80 68       	ori	r24, 0x80	; 128
    34fe:	8c 93       	st	X, r24
    3500:	07 c0       	rjmp	.+14     	; 0x3510 <EXT_INTERRUPT_VID_ENABLE+0x62>
		break;
	case EXT2:
		SET_BIT(GICR, INT2);
    3502:	ab e5       	ldi	r26, 0x5B	; 91
    3504:	b0 e0       	ldi	r27, 0x00	; 0
    3506:	eb e5       	ldi	r30, 0x5B	; 91
    3508:	f0 e0       	ldi	r31, 0x00	; 0
    350a:	80 81       	ld	r24, Z
    350c:	80 62       	ori	r24, 0x20	; 32
    350e:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    3510:	0f 90       	pop	r0
    3512:	0f 90       	pop	r0
    3514:	0f 90       	pop	r0
    3516:	cf 91       	pop	r28
    3518:	df 91       	pop	r29
    351a:	08 95       	ret

0000351c <EXT_INTERRUPT_VID_DISABLE>:

void EXT_INTERRUPT_VID_DISABLE(uint8 interrupt_number){
    351c:	df 93       	push	r29
    351e:	cf 93       	push	r28
    3520:	00 d0       	rcall	.+0      	; 0x3522 <EXT_INTERRUPT_VID_DISABLE+0x6>
    3522:	0f 92       	push	r0
    3524:	cd b7       	in	r28, 0x3d	; 61
    3526:	de b7       	in	r29, 0x3e	; 62
    3528:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt_number){
    352a:	89 81       	ldd	r24, Y+1	; 0x01
    352c:	28 2f       	mov	r18, r24
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	3b 83       	std	Y+3, r19	; 0x03
    3532:	2a 83       	std	Y+2, r18	; 0x02
    3534:	8a 81       	ldd	r24, Y+2	; 0x02
    3536:	9b 81       	ldd	r25, Y+3	; 0x03
    3538:	81 30       	cpi	r24, 0x01	; 1
    353a:	91 05       	cpc	r25, r1
    353c:	89 f0       	breq	.+34     	; 0x3560 <EXT_INTERRUPT_VID_DISABLE+0x44>
    353e:	2a 81       	ldd	r18, Y+2	; 0x02
    3540:	3b 81       	ldd	r19, Y+3	; 0x03
    3542:	22 30       	cpi	r18, 0x02	; 2
    3544:	31 05       	cpc	r19, r1
    3546:	a1 f0       	breq	.+40     	; 0x3570 <EXT_INTERRUPT_VID_DISABLE+0x54>
    3548:	8a 81       	ldd	r24, Y+2	; 0x02
    354a:	9b 81       	ldd	r25, Y+3	; 0x03
    354c:	00 97       	sbiw	r24, 0x00	; 0
    354e:	b9 f4       	brne	.+46     	; 0x357e <EXT_INTERRUPT_VID_DISABLE+0x62>
		case EXT0:
			CLR_BIT(GICR, INT0);
    3550:	ab e5       	ldi	r26, 0x5B	; 91
    3552:	b0 e0       	ldi	r27, 0x00	; 0
    3554:	eb e5       	ldi	r30, 0x5B	; 91
    3556:	f0 e0       	ldi	r31, 0x00	; 0
    3558:	80 81       	ld	r24, Z
    355a:	8f 7b       	andi	r24, 0xBF	; 191
    355c:	8c 93       	st	X, r24
    355e:	0f c0       	rjmp	.+30     	; 0x357e <EXT_INTERRUPT_VID_DISABLE+0x62>
			break;
		case EXT1:
			CLR_BIT(GICR, INT1);
    3560:	ab e5       	ldi	r26, 0x5B	; 91
    3562:	b0 e0       	ldi	r27, 0x00	; 0
    3564:	eb e5       	ldi	r30, 0x5B	; 91
    3566:	f0 e0       	ldi	r31, 0x00	; 0
    3568:	80 81       	ld	r24, Z
    356a:	8f 77       	andi	r24, 0x7F	; 127
    356c:	8c 93       	st	X, r24
    356e:	07 c0       	rjmp	.+14     	; 0x357e <EXT_INTERRUPT_VID_DISABLE+0x62>
			break;
		case EXT2:
			CLR_BIT(GICR, INT2);
    3570:	ab e5       	ldi	r26, 0x5B	; 91
    3572:	b0 e0       	ldi	r27, 0x00	; 0
    3574:	eb e5       	ldi	r30, 0x5B	; 91
    3576:	f0 e0       	ldi	r31, 0x00	; 0
    3578:	80 81       	ld	r24, Z
    357a:	8f 7d       	andi	r24, 0xDF	; 223
    357c:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
}
    357e:	0f 90       	pop	r0
    3580:	0f 90       	pop	r0
    3582:	0f 90       	pop	r0
    3584:	cf 91       	pop	r28
    3586:	df 91       	pop	r29
    3588:	08 95       	ret

0000358a <EXT0_VID_SET_CALL_BACK>:

	void EXT0_VID_SET_CALL_BACK(void (*PTR)(void)){
    358a:	df 93       	push	r29
    358c:	cf 93       	push	r28
    358e:	00 d0       	rcall	.+0      	; 0x3590 <EXT0_VID_SET_CALL_BACK+0x6>
    3590:	cd b7       	in	r28, 0x3d	; 61
    3592:	de b7       	in	r29, 0x3e	; 62
    3594:	9a 83       	std	Y+2, r25	; 0x02
    3596:	89 83       	std	Y+1, r24	; 0x01
		EXTI0_CALLBACK_PTR=PTR;
    3598:	89 81       	ldd	r24, Y+1	; 0x01
    359a:	9a 81       	ldd	r25, Y+2	; 0x02
    359c:	90 93 97 00 	sts	0x0097, r25
    35a0:	80 93 96 00 	sts	0x0096, r24
	}
    35a4:	0f 90       	pop	r0
    35a6:	0f 90       	pop	r0
    35a8:	cf 91       	pop	r28
    35aa:	df 91       	pop	r29
    35ac:	08 95       	ret

000035ae <EXT1_VID_SET_CALL_BACK>:

	void EXT1_VID_SET_CALL_BACK(void (*PTR)(void)){
    35ae:	df 93       	push	r29
    35b0:	cf 93       	push	r28
    35b2:	00 d0       	rcall	.+0      	; 0x35b4 <EXT1_VID_SET_CALL_BACK+0x6>
    35b4:	cd b7       	in	r28, 0x3d	; 61
    35b6:	de b7       	in	r29, 0x3e	; 62
    35b8:	9a 83       	std	Y+2, r25	; 0x02
    35ba:	89 83       	std	Y+1, r24	; 0x01
		EXTI1_CALLBACK_PTR=PTR;
    35bc:	89 81       	ldd	r24, Y+1	; 0x01
    35be:	9a 81       	ldd	r25, Y+2	; 0x02
    35c0:	90 93 99 00 	sts	0x0099, r25
    35c4:	80 93 98 00 	sts	0x0098, r24
	}
    35c8:	0f 90       	pop	r0
    35ca:	0f 90       	pop	r0
    35cc:	cf 91       	pop	r28
    35ce:	df 91       	pop	r29
    35d0:	08 95       	ret

000035d2 <EXT2_VID_SET_CALL_BACK>:

	void EXT2_VID_SET_CALL_BACK(void (*PTR)(void)){
    35d2:	df 93       	push	r29
    35d4:	cf 93       	push	r28
    35d6:	00 d0       	rcall	.+0      	; 0x35d8 <EXT2_VID_SET_CALL_BACK+0x6>
    35d8:	cd b7       	in	r28, 0x3d	; 61
    35da:	de b7       	in	r29, 0x3e	; 62
    35dc:	9a 83       	std	Y+2, r25	; 0x02
    35de:	89 83       	std	Y+1, r24	; 0x01
		EXTI2_CALLBACK_PTR=PTR;
    35e0:	89 81       	ldd	r24, Y+1	; 0x01
    35e2:	9a 81       	ldd	r25, Y+2	; 0x02
    35e4:	90 93 9b 00 	sts	0x009B, r25
    35e8:	80 93 9a 00 	sts	0x009A, r24
	}
    35ec:	0f 90       	pop	r0
    35ee:	0f 90       	pop	r0
    35f0:	cf 91       	pop	r28
    35f2:	df 91       	pop	r29
    35f4:	08 95       	ret

000035f6 <__vector_1>:


	void __vector_1 (void) __attribute__ ((signal,used, externally_visible)) ; \
	void __vector_1 (void){
    35f6:	1f 92       	push	r1
    35f8:	0f 92       	push	r0
    35fa:	0f b6       	in	r0, 0x3f	; 63
    35fc:	0f 92       	push	r0
    35fe:	11 24       	eor	r1, r1
    3600:	2f 93       	push	r18
    3602:	3f 93       	push	r19
    3604:	4f 93       	push	r20
    3606:	5f 93       	push	r21
    3608:	6f 93       	push	r22
    360a:	7f 93       	push	r23
    360c:	8f 93       	push	r24
    360e:	9f 93       	push	r25
    3610:	af 93       	push	r26
    3612:	bf 93       	push	r27
    3614:	ef 93       	push	r30
    3616:	ff 93       	push	r31
    3618:	df 93       	push	r29
    361a:	cf 93       	push	r28
    361c:	cd b7       	in	r28, 0x3d	; 61
    361e:	de b7       	in	r29, 0x3e	; 62
		EXTI0_CALLBACK_PTR();
    3620:	e0 91 96 00 	lds	r30, 0x0096
    3624:	f0 91 97 00 	lds	r31, 0x0097
    3628:	09 95       	icall
	}
    362a:	cf 91       	pop	r28
    362c:	df 91       	pop	r29
    362e:	ff 91       	pop	r31
    3630:	ef 91       	pop	r30
    3632:	bf 91       	pop	r27
    3634:	af 91       	pop	r26
    3636:	9f 91       	pop	r25
    3638:	8f 91       	pop	r24
    363a:	7f 91       	pop	r23
    363c:	6f 91       	pop	r22
    363e:	5f 91       	pop	r21
    3640:	4f 91       	pop	r20
    3642:	3f 91       	pop	r19
    3644:	2f 91       	pop	r18
    3646:	0f 90       	pop	r0
    3648:	0f be       	out	0x3f, r0	; 63
    364a:	0f 90       	pop	r0
    364c:	1f 90       	pop	r1
    364e:	18 95       	reti

00003650 <__vector_2>:

	void __vector_2 (void) __attribute__ ((signal,used, externally_visible)) ; \
	void __vector_2 (void){
    3650:	1f 92       	push	r1
    3652:	0f 92       	push	r0
    3654:	0f b6       	in	r0, 0x3f	; 63
    3656:	0f 92       	push	r0
    3658:	11 24       	eor	r1, r1
    365a:	2f 93       	push	r18
    365c:	3f 93       	push	r19
    365e:	4f 93       	push	r20
    3660:	5f 93       	push	r21
    3662:	6f 93       	push	r22
    3664:	7f 93       	push	r23
    3666:	8f 93       	push	r24
    3668:	9f 93       	push	r25
    366a:	af 93       	push	r26
    366c:	bf 93       	push	r27
    366e:	ef 93       	push	r30
    3670:	ff 93       	push	r31
    3672:	df 93       	push	r29
    3674:	cf 93       	push	r28
    3676:	cd b7       	in	r28, 0x3d	; 61
    3678:	de b7       	in	r29, 0x3e	; 62
		EXTI1_CALLBACK_PTR();
    367a:	e0 91 98 00 	lds	r30, 0x0098
    367e:	f0 91 99 00 	lds	r31, 0x0099
    3682:	09 95       	icall
	}
    3684:	cf 91       	pop	r28
    3686:	df 91       	pop	r29
    3688:	ff 91       	pop	r31
    368a:	ef 91       	pop	r30
    368c:	bf 91       	pop	r27
    368e:	af 91       	pop	r26
    3690:	9f 91       	pop	r25
    3692:	8f 91       	pop	r24
    3694:	7f 91       	pop	r23
    3696:	6f 91       	pop	r22
    3698:	5f 91       	pop	r21
    369a:	4f 91       	pop	r20
    369c:	3f 91       	pop	r19
    369e:	2f 91       	pop	r18
    36a0:	0f 90       	pop	r0
    36a2:	0f be       	out	0x3f, r0	; 63
    36a4:	0f 90       	pop	r0
    36a6:	1f 90       	pop	r1
    36a8:	18 95       	reti

000036aa <__vector_3>:


	void __vector_3 (void) __attribute__ ((signal,used, externally_visible)) ; \
	void __vector_3 (void){
    36aa:	1f 92       	push	r1
    36ac:	0f 92       	push	r0
    36ae:	0f b6       	in	r0, 0x3f	; 63
    36b0:	0f 92       	push	r0
    36b2:	11 24       	eor	r1, r1
    36b4:	2f 93       	push	r18
    36b6:	3f 93       	push	r19
    36b8:	4f 93       	push	r20
    36ba:	5f 93       	push	r21
    36bc:	6f 93       	push	r22
    36be:	7f 93       	push	r23
    36c0:	8f 93       	push	r24
    36c2:	9f 93       	push	r25
    36c4:	af 93       	push	r26
    36c6:	bf 93       	push	r27
    36c8:	ef 93       	push	r30
    36ca:	ff 93       	push	r31
    36cc:	df 93       	push	r29
    36ce:	cf 93       	push	r28
    36d0:	cd b7       	in	r28, 0x3d	; 61
    36d2:	de b7       	in	r29, 0x3e	; 62
		EXTI2_CALLBACK_PTR();
    36d4:	e0 91 9a 00 	lds	r30, 0x009A
    36d8:	f0 91 9b 00 	lds	r31, 0x009B
    36dc:	09 95       	icall
	}
    36de:	cf 91       	pop	r28
    36e0:	df 91       	pop	r29
    36e2:	ff 91       	pop	r31
    36e4:	ef 91       	pop	r30
    36e6:	bf 91       	pop	r27
    36e8:	af 91       	pop	r26
    36ea:	9f 91       	pop	r25
    36ec:	8f 91       	pop	r24
    36ee:	7f 91       	pop	r23
    36f0:	6f 91       	pop	r22
    36f2:	5f 91       	pop	r21
    36f4:	4f 91       	pop	r20
    36f6:	3f 91       	pop	r19
    36f8:	2f 91       	pop	r18
    36fa:	0f 90       	pop	r0
    36fc:	0f be       	out	0x3f, r0	; 63
    36fe:	0f 90       	pop	r0
    3700:	1f 90       	pop	r1
    3702:	18 95       	reti

00003704 <Global_Interrupt_Enable>:
#include "../BIT_Math.h"
#include "Global_Interrupt_register.h"
#include "Global_Interrupt_interface.h"

void Global_Interrupt_Enable(void)
{
    3704:	df 93       	push	r29
    3706:	cf 93       	push	r28
    3708:	cd b7       	in	r28, 0x3d	; 61
    370a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I);
    370c:	af e5       	ldi	r26, 0x5F	; 95
    370e:	b0 e0       	ldi	r27, 0x00	; 0
    3710:	ef e5       	ldi	r30, 0x5F	; 95
    3712:	f0 e0       	ldi	r31, 0x00	; 0
    3714:	80 81       	ld	r24, Z
    3716:	80 68       	ori	r24, 0x80	; 128
    3718:	8c 93       	st	X, r24
}
    371a:	cf 91       	pop	r28
    371c:	df 91       	pop	r29
    371e:	08 95       	ret

00003720 <Global_Interrupt_Disable>:
void Global_Interrupt_Disable(void)
{
    3720:	df 93       	push	r29
    3722:	cf 93       	push	r28
    3724:	cd b7       	in	r28, 0x3d	; 61
    3726:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
    3728:	af e5       	ldi	r26, 0x5F	; 95
    372a:	b0 e0       	ldi	r27, 0x00	; 0
    372c:	ef e5       	ldi	r30, 0x5F	; 95
    372e:	f0 e0       	ldi	r31, 0x00	; 0
    3730:	80 81       	ld	r24, Z
    3732:	8f 77       	andi	r24, 0x7F	; 127
    3734:	8c 93       	st	X, r24
}
    3736:	cf 91       	pop	r28
    3738:	df 91       	pop	r29
    373a:	08 95       	ret

0000373c <DIO_voidInit>:
#include "DIO_private.h"
#include "DIO_config.h"


void DIO_voidInit(void)
{
    373c:	df 93       	push	r29
    373e:	cf 93       	push	r28
    3740:	cd b7       	in	r28, 0x3d	; 61
    3742:	de b7       	in	r29, 0x3e	; 62
	DDRA=CONCAT(DIO_PIN_NUM_A7_DIR,DIO_PIN_NUM_A6_DIR,DIO_PIN_NUM_A5_DIR,DIO_PIN_NUM_A4_DIR,DIO_PIN_NUM_A3_DIR,DIO_PIN_NUM_A2_DIR,DIO_PIN_NUM_A1_DIR,DIO_PIN_NUM_A0_DIR);
    3744:	ea e3       	ldi	r30, 0x3A	; 58
    3746:	f0 e0       	ldi	r31, 0x00	; 0
    3748:	8f ef       	ldi	r24, 0xFF	; 255
    374a:	80 83       	st	Z, r24
	DDRB=CONCAT(DIO_PIN_NUM_B7_DIR,DIO_PIN_NUM_B6_DIR,DIO_PIN_NUM_B5_DIR,DIO_PIN_NUM_B4_DIR,DIO_PIN_NUM_B3_DIR,DIO_PIN_NUM_B2_DIR,DIO_PIN_NUM_B1_DIR,DIO_PIN_NUM_B0_DIR);
    374c:	e7 e3       	ldi	r30, 0x37	; 55
    374e:	f0 e0       	ldi	r31, 0x00	; 0
    3750:	8f e4       	ldi	r24, 0x4F	; 79
    3752:	80 83       	st	Z, r24
	DDRC=CONCAT(DIO_PIN_NUM_C7_DIR,DIO_PIN_NUM_C6_DIR,DIO_PIN_NUM_C5_DIR,DIO_PIN_NUM_C4_DIR,DIO_PIN_NUM_C3_DIR,DIO_PIN_NUM_C2_DIR,DIO_PIN_NUM_C1_DIR,DIO_PIN_NUM_C0_DIR);
    3754:	e4 e3       	ldi	r30, 0x34	; 52
    3756:	f0 e0       	ldi	r31, 0x00	; 0
    3758:	80 ef       	ldi	r24, 0xF0	; 240
    375a:	80 83       	st	Z, r24
	DDRD=CONCAT(DIO_PIN_NUM_D7_DIR,DIO_PIN_NUM_D6_DIR,DIO_PIN_NUM_D5_DIR,DIO_PIN_NUM_D4_DIR,DIO_PIN_NUM_D3_DIR,DIO_PIN_NUM_D2_DIR,DIO_PIN_NUM_D1_DIR,DIO_PIN_NUM_D0_DIR);
    375c:	e1 e3       	ldi	r30, 0x31	; 49
    375e:	f0 e0       	ldi	r31, 0x00	; 0
    3760:	8e ef       	ldi	r24, 0xFE	; 254
    3762:	80 83       	st	Z, r24
}
    3764:	cf 91       	pop	r28
    3766:	df 91       	pop	r29
    3768:	08 95       	ret

0000376a <DIO_voidWritePin>:
void DIO_voidWritePin(uint8 u8PortCpy, uint8 u8PinCpy, uint8 u8ValueCpy)
{
    376a:	df 93       	push	r29
    376c:	cf 93       	push	r28
    376e:	00 d0       	rcall	.+0      	; 0x3770 <DIO_voidWritePin+0x6>
    3770:	00 d0       	rcall	.+0      	; 0x3772 <DIO_voidWritePin+0x8>
    3772:	0f 92       	push	r0
    3774:	cd b7       	in	r28, 0x3d	; 61
    3776:	de b7       	in	r29, 0x3e	; 62
    3778:	89 83       	std	Y+1, r24	; 0x01
    377a:	6a 83       	std	Y+2, r22	; 0x02
    377c:	4b 83       	std	Y+3, r20	; 0x03
	switch(u8PortCpy){
    377e:	89 81       	ldd	r24, Y+1	; 0x01
    3780:	28 2f       	mov	r18, r24
    3782:	30 e0       	ldi	r19, 0x00	; 0
    3784:	3d 83       	std	Y+5, r19	; 0x05
    3786:	2c 83       	std	Y+4, r18	; 0x04
    3788:	8c 81       	ldd	r24, Y+4	; 0x04
    378a:	9d 81       	ldd	r25, Y+5	; 0x05
    378c:	82 30       	cpi	r24, 0x02	; 2
    378e:	91 05       	cpc	r25, r1
    3790:	09 f4       	brne	.+2      	; 0x3794 <DIO_voidWritePin+0x2a>
    3792:	48 c0       	rjmp	.+144    	; 0x3824 <DIO_voidWritePin+0xba>
    3794:	2c 81       	ldd	r18, Y+4	; 0x04
    3796:	3d 81       	ldd	r19, Y+5	; 0x05
    3798:	23 30       	cpi	r18, 0x03	; 3
    379a:	31 05       	cpc	r19, r1
    379c:	34 f4       	brge	.+12     	; 0x37aa <DIO_voidWritePin+0x40>
    379e:	8c 81       	ldd	r24, Y+4	; 0x04
    37a0:	9d 81       	ldd	r25, Y+5	; 0x05
    37a2:	81 30       	cpi	r24, 0x01	; 1
    37a4:	91 05       	cpc	r25, r1
    37a6:	71 f0       	breq	.+28     	; 0x37c4 <DIO_voidWritePin+0x5a>
    37a8:	cb c0       	rjmp	.+406    	; 0x3940 <DIO_voidWritePin+0x1d6>
    37aa:	2c 81       	ldd	r18, Y+4	; 0x04
    37ac:	3d 81       	ldd	r19, Y+5	; 0x05
    37ae:	23 30       	cpi	r18, 0x03	; 3
    37b0:	31 05       	cpc	r19, r1
    37b2:	09 f4       	brne	.+2      	; 0x37b6 <DIO_voidWritePin+0x4c>
    37b4:	67 c0       	rjmp	.+206    	; 0x3884 <DIO_voidWritePin+0x11a>
    37b6:	8c 81       	ldd	r24, Y+4	; 0x04
    37b8:	9d 81       	ldd	r25, Y+5	; 0x05
    37ba:	84 30       	cpi	r24, 0x04	; 4
    37bc:	91 05       	cpc	r25, r1
    37be:	09 f4       	brne	.+2      	; 0x37c2 <DIO_voidWritePin+0x58>
    37c0:	91 c0       	rjmp	.+290    	; 0x38e4 <DIO_voidWritePin+0x17a>
    37c2:	be c0       	rjmp	.+380    	; 0x3940 <DIO_voidWritePin+0x1d6>
	case PORT_A:
		if (u8ValueCpy == DIO_HIGH)
    37c4:	8b 81       	ldd	r24, Y+3	; 0x03
    37c6:	81 30       	cpi	r24, 0x01	; 1
    37c8:	a1 f4       	brne	.+40     	; 0x37f2 <DIO_voidWritePin+0x88>
		{
			SET_BIT(PORTA, u8PinCpy);
    37ca:	ab e3       	ldi	r26, 0x3B	; 59
    37cc:	b0 e0       	ldi	r27, 0x00	; 0
    37ce:	eb e3       	ldi	r30, 0x3B	; 59
    37d0:	f0 e0       	ldi	r31, 0x00	; 0
    37d2:	80 81       	ld	r24, Z
    37d4:	48 2f       	mov	r20, r24
    37d6:	8a 81       	ldd	r24, Y+2	; 0x02
    37d8:	28 2f       	mov	r18, r24
    37da:	30 e0       	ldi	r19, 0x00	; 0
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	02 2e       	mov	r0, r18
    37e2:	02 c0       	rjmp	.+4      	; 0x37e8 <DIO_voidWritePin+0x7e>
    37e4:	88 0f       	add	r24, r24
    37e6:	99 1f       	adc	r25, r25
    37e8:	0a 94       	dec	r0
    37ea:	e2 f7       	brpl	.-8      	; 0x37e4 <DIO_voidWritePin+0x7a>
    37ec:	84 2b       	or	r24, r20
    37ee:	8c 93       	st	X, r24
    37f0:	a7 c0       	rjmp	.+334    	; 0x3940 <DIO_voidWritePin+0x1d6>
		}
		else if(u8ValueCpy == DIO_LOW)
    37f2:	8b 81       	ldd	r24, Y+3	; 0x03
    37f4:	88 23       	and	r24, r24
    37f6:	09 f0       	breq	.+2      	; 0x37fa <DIO_voidWritePin+0x90>
    37f8:	a3 c0       	rjmp	.+326    	; 0x3940 <DIO_voidWritePin+0x1d6>
		{
			CLR_BIT(PORTA, u8PinCpy);
    37fa:	ab e3       	ldi	r26, 0x3B	; 59
    37fc:	b0 e0       	ldi	r27, 0x00	; 0
    37fe:	eb e3       	ldi	r30, 0x3B	; 59
    3800:	f0 e0       	ldi	r31, 0x00	; 0
    3802:	80 81       	ld	r24, Z
    3804:	48 2f       	mov	r20, r24
    3806:	8a 81       	ldd	r24, Y+2	; 0x02
    3808:	28 2f       	mov	r18, r24
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	81 e0       	ldi	r24, 0x01	; 1
    380e:	90 e0       	ldi	r25, 0x00	; 0
    3810:	02 2e       	mov	r0, r18
    3812:	02 c0       	rjmp	.+4      	; 0x3818 <DIO_voidWritePin+0xae>
    3814:	88 0f       	add	r24, r24
    3816:	99 1f       	adc	r25, r25
    3818:	0a 94       	dec	r0
    381a:	e2 f7       	brpl	.-8      	; 0x3814 <DIO_voidWritePin+0xaa>
    381c:	80 95       	com	r24
    381e:	84 23       	and	r24, r20
    3820:	8c 93       	st	X, r24
    3822:	8e c0       	rjmp	.+284    	; 0x3940 <DIO_voidWritePin+0x1d6>
		}
		break;
	case PORT_B:
		if (u8ValueCpy == DIO_HIGH)
    3824:	8b 81       	ldd	r24, Y+3	; 0x03
    3826:	81 30       	cpi	r24, 0x01	; 1
    3828:	a1 f4       	brne	.+40     	; 0x3852 <DIO_voidWritePin+0xe8>
		{
			SET_BIT(PORTB, u8PinCpy);
    382a:	a8 e3       	ldi	r26, 0x38	; 56
    382c:	b0 e0       	ldi	r27, 0x00	; 0
    382e:	e8 e3       	ldi	r30, 0x38	; 56
    3830:	f0 e0       	ldi	r31, 0x00	; 0
    3832:	80 81       	ld	r24, Z
    3834:	48 2f       	mov	r20, r24
    3836:	8a 81       	ldd	r24, Y+2	; 0x02
    3838:	28 2f       	mov	r18, r24
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	81 e0       	ldi	r24, 0x01	; 1
    383e:	90 e0       	ldi	r25, 0x00	; 0
    3840:	02 2e       	mov	r0, r18
    3842:	02 c0       	rjmp	.+4      	; 0x3848 <DIO_voidWritePin+0xde>
    3844:	88 0f       	add	r24, r24
    3846:	99 1f       	adc	r25, r25
    3848:	0a 94       	dec	r0
    384a:	e2 f7       	brpl	.-8      	; 0x3844 <DIO_voidWritePin+0xda>
    384c:	84 2b       	or	r24, r20
    384e:	8c 93       	st	X, r24
    3850:	77 c0       	rjmp	.+238    	; 0x3940 <DIO_voidWritePin+0x1d6>
		}
		else if(u8ValueCpy == DIO_LOW)
    3852:	8b 81       	ldd	r24, Y+3	; 0x03
    3854:	88 23       	and	r24, r24
    3856:	09 f0       	breq	.+2      	; 0x385a <DIO_voidWritePin+0xf0>
    3858:	73 c0       	rjmp	.+230    	; 0x3940 <DIO_voidWritePin+0x1d6>
		{
			CLR_BIT(PORTB, u8PinCpy);
    385a:	a8 e3       	ldi	r26, 0x38	; 56
    385c:	b0 e0       	ldi	r27, 0x00	; 0
    385e:	e8 e3       	ldi	r30, 0x38	; 56
    3860:	f0 e0       	ldi	r31, 0x00	; 0
    3862:	80 81       	ld	r24, Z
    3864:	48 2f       	mov	r20, r24
    3866:	8a 81       	ldd	r24, Y+2	; 0x02
    3868:	28 2f       	mov	r18, r24
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	81 e0       	ldi	r24, 0x01	; 1
    386e:	90 e0       	ldi	r25, 0x00	; 0
    3870:	02 2e       	mov	r0, r18
    3872:	02 c0       	rjmp	.+4      	; 0x3878 <DIO_voidWritePin+0x10e>
    3874:	88 0f       	add	r24, r24
    3876:	99 1f       	adc	r25, r25
    3878:	0a 94       	dec	r0
    387a:	e2 f7       	brpl	.-8      	; 0x3874 <DIO_voidWritePin+0x10a>
    387c:	80 95       	com	r24
    387e:	84 23       	and	r24, r20
    3880:	8c 93       	st	X, r24
    3882:	5e c0       	rjmp	.+188    	; 0x3940 <DIO_voidWritePin+0x1d6>
		}
		break;
	case PORT_C:
		if (u8ValueCpy == DIO_HIGH)
    3884:	8b 81       	ldd	r24, Y+3	; 0x03
    3886:	81 30       	cpi	r24, 0x01	; 1
    3888:	a1 f4       	brne	.+40     	; 0x38b2 <DIO_voidWritePin+0x148>
		{
			SET_BIT(PORTC, u8PinCpy);
    388a:	a5 e3       	ldi	r26, 0x35	; 53
    388c:	b0 e0       	ldi	r27, 0x00	; 0
    388e:	e5 e3       	ldi	r30, 0x35	; 53
    3890:	f0 e0       	ldi	r31, 0x00	; 0
    3892:	80 81       	ld	r24, Z
    3894:	48 2f       	mov	r20, r24
    3896:	8a 81       	ldd	r24, Y+2	; 0x02
    3898:	28 2f       	mov	r18, r24
    389a:	30 e0       	ldi	r19, 0x00	; 0
    389c:	81 e0       	ldi	r24, 0x01	; 1
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	02 2e       	mov	r0, r18
    38a2:	02 c0       	rjmp	.+4      	; 0x38a8 <DIO_voidWritePin+0x13e>
    38a4:	88 0f       	add	r24, r24
    38a6:	99 1f       	adc	r25, r25
    38a8:	0a 94       	dec	r0
    38aa:	e2 f7       	brpl	.-8      	; 0x38a4 <DIO_voidWritePin+0x13a>
    38ac:	84 2b       	or	r24, r20
    38ae:	8c 93       	st	X, r24
    38b0:	47 c0       	rjmp	.+142    	; 0x3940 <DIO_voidWritePin+0x1d6>
		}
		else if(u8ValueCpy == DIO_LOW){
    38b2:	8b 81       	ldd	r24, Y+3	; 0x03
    38b4:	88 23       	and	r24, r24
    38b6:	09 f0       	breq	.+2      	; 0x38ba <DIO_voidWritePin+0x150>
    38b8:	43 c0       	rjmp	.+134    	; 0x3940 <DIO_voidWritePin+0x1d6>
			CLR_BIT(PORTC, u8PinCpy);
    38ba:	a5 e3       	ldi	r26, 0x35	; 53
    38bc:	b0 e0       	ldi	r27, 0x00	; 0
    38be:	e5 e3       	ldi	r30, 0x35	; 53
    38c0:	f0 e0       	ldi	r31, 0x00	; 0
    38c2:	80 81       	ld	r24, Z
    38c4:	48 2f       	mov	r20, r24
    38c6:	8a 81       	ldd	r24, Y+2	; 0x02
    38c8:	28 2f       	mov	r18, r24
    38ca:	30 e0       	ldi	r19, 0x00	; 0
    38cc:	81 e0       	ldi	r24, 0x01	; 1
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	02 2e       	mov	r0, r18
    38d2:	02 c0       	rjmp	.+4      	; 0x38d8 <DIO_voidWritePin+0x16e>
    38d4:	88 0f       	add	r24, r24
    38d6:	99 1f       	adc	r25, r25
    38d8:	0a 94       	dec	r0
    38da:	e2 f7       	brpl	.-8      	; 0x38d4 <DIO_voidWritePin+0x16a>
    38dc:	80 95       	com	r24
    38de:	84 23       	and	r24, r20
    38e0:	8c 93       	st	X, r24
    38e2:	2e c0       	rjmp	.+92     	; 0x3940 <DIO_voidWritePin+0x1d6>
		}
		break;
	case PORT_D:
		if (u8ValueCpy == DIO_HIGH){
    38e4:	8b 81       	ldd	r24, Y+3	; 0x03
    38e6:	81 30       	cpi	r24, 0x01	; 1
    38e8:	a1 f4       	brne	.+40     	; 0x3912 <DIO_voidWritePin+0x1a8>
			SET_BIT(PORTD, u8PinCpy);
    38ea:	a2 e3       	ldi	r26, 0x32	; 50
    38ec:	b0 e0       	ldi	r27, 0x00	; 0
    38ee:	e2 e3       	ldi	r30, 0x32	; 50
    38f0:	f0 e0       	ldi	r31, 0x00	; 0
    38f2:	80 81       	ld	r24, Z
    38f4:	48 2f       	mov	r20, r24
    38f6:	8a 81       	ldd	r24, Y+2	; 0x02
    38f8:	28 2f       	mov	r18, r24
    38fa:	30 e0       	ldi	r19, 0x00	; 0
    38fc:	81 e0       	ldi	r24, 0x01	; 1
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	02 2e       	mov	r0, r18
    3902:	02 c0       	rjmp	.+4      	; 0x3908 <DIO_voidWritePin+0x19e>
    3904:	88 0f       	add	r24, r24
    3906:	99 1f       	adc	r25, r25
    3908:	0a 94       	dec	r0
    390a:	e2 f7       	brpl	.-8      	; 0x3904 <DIO_voidWritePin+0x19a>
    390c:	84 2b       	or	r24, r20
    390e:	8c 93       	st	X, r24
    3910:	17 c0       	rjmp	.+46     	; 0x3940 <DIO_voidWritePin+0x1d6>
		}
		else if(u8ValueCpy == DIO_LOW){
    3912:	8b 81       	ldd	r24, Y+3	; 0x03
    3914:	88 23       	and	r24, r24
    3916:	a1 f4       	brne	.+40     	; 0x3940 <DIO_voidWritePin+0x1d6>
			CLR_BIT(PORTD, u8PinCpy);
    3918:	a2 e3       	ldi	r26, 0x32	; 50
    391a:	b0 e0       	ldi	r27, 0x00	; 0
    391c:	e2 e3       	ldi	r30, 0x32	; 50
    391e:	f0 e0       	ldi	r31, 0x00	; 0
    3920:	80 81       	ld	r24, Z
    3922:	48 2f       	mov	r20, r24
    3924:	8a 81       	ldd	r24, Y+2	; 0x02
    3926:	28 2f       	mov	r18, r24
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	81 e0       	ldi	r24, 0x01	; 1
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	02 2e       	mov	r0, r18
    3930:	02 c0       	rjmp	.+4      	; 0x3936 <DIO_voidWritePin+0x1cc>
    3932:	88 0f       	add	r24, r24
    3934:	99 1f       	adc	r25, r25
    3936:	0a 94       	dec	r0
    3938:	e2 f7       	brpl	.-8      	; 0x3932 <DIO_voidWritePin+0x1c8>
    393a:	80 95       	com	r24
    393c:	84 23       	and	r24, r20
    393e:	8c 93       	st	X, r24
		}
		break;
		}
}
    3940:	0f 90       	pop	r0
    3942:	0f 90       	pop	r0
    3944:	0f 90       	pop	r0
    3946:	0f 90       	pop	r0
    3948:	0f 90       	pop	r0
    394a:	cf 91       	pop	r28
    394c:	df 91       	pop	r29
    394e:	08 95       	ret

00003950 <DIO_u8ReadPin>:
uint8 DIO_u8ReadPin(uint8 u8PortCpy, uint8 u8PinCpy)
{
    3950:	df 93       	push	r29
    3952:	cf 93       	push	r28
    3954:	00 d0       	rcall	.+0      	; 0x3956 <DIO_u8ReadPin+0x6>
    3956:	00 d0       	rcall	.+0      	; 0x3958 <DIO_u8ReadPin+0x8>
    3958:	0f 92       	push	r0
    395a:	cd b7       	in	r28, 0x3d	; 61
    395c:	de b7       	in	r29, 0x3e	; 62
    395e:	8a 83       	std	Y+2, r24	; 0x02
    3960:	6b 83       	std	Y+3, r22	; 0x03
	uint8 u8PinVal;
	switch(u8PortCpy)
    3962:	8a 81       	ldd	r24, Y+2	; 0x02
    3964:	28 2f       	mov	r18, r24
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	3d 83       	std	Y+5, r19	; 0x05
    396a:	2c 83       	std	Y+4, r18	; 0x04
    396c:	4c 81       	ldd	r20, Y+4	; 0x04
    396e:	5d 81       	ldd	r21, Y+5	; 0x05
    3970:	42 30       	cpi	r20, 0x02	; 2
    3972:	51 05       	cpc	r21, r1
    3974:	41 f1       	breq	.+80     	; 0x39c6 <DIO_u8ReadPin+0x76>
    3976:	8c 81       	ldd	r24, Y+4	; 0x04
    3978:	9d 81       	ldd	r25, Y+5	; 0x05
    397a:	83 30       	cpi	r24, 0x03	; 3
    397c:	91 05       	cpc	r25, r1
    397e:	34 f4       	brge	.+12     	; 0x398c <DIO_u8ReadPin+0x3c>
    3980:	2c 81       	ldd	r18, Y+4	; 0x04
    3982:	3d 81       	ldd	r19, Y+5	; 0x05
    3984:	21 30       	cpi	r18, 0x01	; 1
    3986:	31 05       	cpc	r19, r1
    3988:	61 f0       	breq	.+24     	; 0x39a2 <DIO_u8ReadPin+0x52>
    398a:	52 c0       	rjmp	.+164    	; 0x3a30 <DIO_u8ReadPin+0xe0>
    398c:	4c 81       	ldd	r20, Y+4	; 0x04
    398e:	5d 81       	ldd	r21, Y+5	; 0x05
    3990:	43 30       	cpi	r20, 0x03	; 3
    3992:	51 05       	cpc	r21, r1
    3994:	51 f1       	breq	.+84     	; 0x39ea <DIO_u8ReadPin+0x9a>
    3996:	8c 81       	ldd	r24, Y+4	; 0x04
    3998:	9d 81       	ldd	r25, Y+5	; 0x05
    399a:	84 30       	cpi	r24, 0x04	; 4
    399c:	91 05       	cpc	r25, r1
    399e:	b9 f1       	breq	.+110    	; 0x3a0e <DIO_u8ReadPin+0xbe>
    39a0:	47 c0       	rjmp	.+142    	; 0x3a30 <DIO_u8ReadPin+0xe0>
	{
		case PORT_A:
			u8PinVal=GET_BIT(PINA,u8PinCpy);
    39a2:	e9 e3       	ldi	r30, 0x39	; 57
    39a4:	f0 e0       	ldi	r31, 0x00	; 0
    39a6:	80 81       	ld	r24, Z
    39a8:	28 2f       	mov	r18, r24
    39aa:	30 e0       	ldi	r19, 0x00	; 0
    39ac:	8b 81       	ldd	r24, Y+3	; 0x03
    39ae:	88 2f       	mov	r24, r24
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	a9 01       	movw	r20, r18
    39b4:	02 c0       	rjmp	.+4      	; 0x39ba <DIO_u8ReadPin+0x6a>
    39b6:	55 95       	asr	r21
    39b8:	47 95       	ror	r20
    39ba:	8a 95       	dec	r24
    39bc:	e2 f7       	brpl	.-8      	; 0x39b6 <DIO_u8ReadPin+0x66>
    39be:	ca 01       	movw	r24, r20
    39c0:	81 70       	andi	r24, 0x01	; 1
    39c2:	89 83       	std	Y+1, r24	; 0x01
    39c4:	35 c0       	rjmp	.+106    	; 0x3a30 <DIO_u8ReadPin+0xe0>
			break;
		case PORT_B:
			u8PinVal=GET_BIT(PINB,u8PinCpy);
    39c6:	e6 e3       	ldi	r30, 0x36	; 54
    39c8:	f0 e0       	ldi	r31, 0x00	; 0
    39ca:	80 81       	ld	r24, Z
    39cc:	28 2f       	mov	r18, r24
    39ce:	30 e0       	ldi	r19, 0x00	; 0
    39d0:	8b 81       	ldd	r24, Y+3	; 0x03
    39d2:	88 2f       	mov	r24, r24
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	a9 01       	movw	r20, r18
    39d8:	02 c0       	rjmp	.+4      	; 0x39de <DIO_u8ReadPin+0x8e>
    39da:	55 95       	asr	r21
    39dc:	47 95       	ror	r20
    39de:	8a 95       	dec	r24
    39e0:	e2 f7       	brpl	.-8      	; 0x39da <DIO_u8ReadPin+0x8a>
    39e2:	ca 01       	movw	r24, r20
    39e4:	81 70       	andi	r24, 0x01	; 1
    39e6:	89 83       	std	Y+1, r24	; 0x01
    39e8:	23 c0       	rjmp	.+70     	; 0x3a30 <DIO_u8ReadPin+0xe0>
			break;
		case PORT_C:
			u8PinVal=GET_BIT(PINC,u8PinCpy);
    39ea:	e3 e3       	ldi	r30, 0x33	; 51
    39ec:	f0 e0       	ldi	r31, 0x00	; 0
    39ee:	80 81       	ld	r24, Z
    39f0:	28 2f       	mov	r18, r24
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	8b 81       	ldd	r24, Y+3	; 0x03
    39f6:	88 2f       	mov	r24, r24
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	a9 01       	movw	r20, r18
    39fc:	02 c0       	rjmp	.+4      	; 0x3a02 <DIO_u8ReadPin+0xb2>
    39fe:	55 95       	asr	r21
    3a00:	47 95       	ror	r20
    3a02:	8a 95       	dec	r24
    3a04:	e2 f7       	brpl	.-8      	; 0x39fe <DIO_u8ReadPin+0xae>
    3a06:	ca 01       	movw	r24, r20
    3a08:	81 70       	andi	r24, 0x01	; 1
    3a0a:	89 83       	std	Y+1, r24	; 0x01
    3a0c:	11 c0       	rjmp	.+34     	; 0x3a30 <DIO_u8ReadPin+0xe0>
			break;
		case PORT_D:
			u8PinVal=GET_BIT(PIND,u8PinCpy);
    3a0e:	e0 e3       	ldi	r30, 0x30	; 48
    3a10:	f0 e0       	ldi	r31, 0x00	; 0
    3a12:	80 81       	ld	r24, Z
    3a14:	28 2f       	mov	r18, r24
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	8b 81       	ldd	r24, Y+3	; 0x03
    3a1a:	88 2f       	mov	r24, r24
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	a9 01       	movw	r20, r18
    3a20:	02 c0       	rjmp	.+4      	; 0x3a26 <DIO_u8ReadPin+0xd6>
    3a22:	55 95       	asr	r21
    3a24:	47 95       	ror	r20
    3a26:	8a 95       	dec	r24
    3a28:	e2 f7       	brpl	.-8      	; 0x3a22 <DIO_u8ReadPin+0xd2>
    3a2a:	ca 01       	movw	r24, r20
    3a2c:	81 70       	andi	r24, 0x01	; 1
    3a2e:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return u8PinVal;
    3a30:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a32:	0f 90       	pop	r0
    3a34:	0f 90       	pop	r0
    3a36:	0f 90       	pop	r0
    3a38:	0f 90       	pop	r0
    3a3a:	0f 90       	pop	r0
    3a3c:	cf 91       	pop	r28
    3a3e:	df 91       	pop	r29
    3a40:	08 95       	ret

00003a42 <DIO_voidTogglePin>:

void DIO_voidTogglePin(uint8 u8PortCpy, uint8 u8PinCpy)
{
    3a42:	df 93       	push	r29
    3a44:	cf 93       	push	r28
    3a46:	00 d0       	rcall	.+0      	; 0x3a48 <DIO_voidTogglePin+0x6>
    3a48:	00 d0       	rcall	.+0      	; 0x3a4a <DIO_voidTogglePin+0x8>
    3a4a:	cd b7       	in	r28, 0x3d	; 61
    3a4c:	de b7       	in	r29, 0x3e	; 62
    3a4e:	89 83       	std	Y+1, r24	; 0x01
    3a50:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortCpy)
    3a52:	89 81       	ldd	r24, Y+1	; 0x01
    3a54:	28 2f       	mov	r18, r24
    3a56:	30 e0       	ldi	r19, 0x00	; 0
    3a58:	3c 83       	std	Y+4, r19	; 0x04
    3a5a:	2b 83       	std	Y+3, r18	; 0x03
    3a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    3a60:	82 30       	cpi	r24, 0x02	; 2
    3a62:	91 05       	cpc	r25, r1
    3a64:	51 f1       	breq	.+84     	; 0x3aba <DIO_voidTogglePin+0x78>
    3a66:	2b 81       	ldd	r18, Y+3	; 0x03
    3a68:	3c 81       	ldd	r19, Y+4	; 0x04
    3a6a:	23 30       	cpi	r18, 0x03	; 3
    3a6c:	31 05       	cpc	r19, r1
    3a6e:	34 f4       	brge	.+12     	; 0x3a7c <DIO_voidTogglePin+0x3a>
    3a70:	8b 81       	ldd	r24, Y+3	; 0x03
    3a72:	9c 81       	ldd	r25, Y+4	; 0x04
    3a74:	81 30       	cpi	r24, 0x01	; 1
    3a76:	91 05       	cpc	r25, r1
    3a78:	61 f0       	breq	.+24     	; 0x3a92 <DIO_voidTogglePin+0x50>
    3a7a:	5a c0       	rjmp	.+180    	; 0x3b30 <DIO_voidTogglePin+0xee>
    3a7c:	2b 81       	ldd	r18, Y+3	; 0x03
    3a7e:	3c 81       	ldd	r19, Y+4	; 0x04
    3a80:	23 30       	cpi	r18, 0x03	; 3
    3a82:	31 05       	cpc	r19, r1
    3a84:	71 f1       	breq	.+92     	; 0x3ae2 <DIO_voidTogglePin+0xa0>
    3a86:	8b 81       	ldd	r24, Y+3	; 0x03
    3a88:	9c 81       	ldd	r25, Y+4	; 0x04
    3a8a:	84 30       	cpi	r24, 0x04	; 4
    3a8c:	91 05       	cpc	r25, r1
    3a8e:	e9 f1       	breq	.+122    	; 0x3b0a <DIO_voidTogglePin+0xc8>
    3a90:	4f c0       	rjmp	.+158    	; 0x3b30 <DIO_voidTogglePin+0xee>
	{
		case PORT_A:
			TOG_BIT(PORTA,u8PinCpy);
    3a92:	ab e3       	ldi	r26, 0x3B	; 59
    3a94:	b0 e0       	ldi	r27, 0x00	; 0
    3a96:	eb e3       	ldi	r30, 0x3B	; 59
    3a98:	f0 e0       	ldi	r31, 0x00	; 0
    3a9a:	80 81       	ld	r24, Z
    3a9c:	48 2f       	mov	r20, r24
    3a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa0:	28 2f       	mov	r18, r24
    3aa2:	30 e0       	ldi	r19, 0x00	; 0
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
    3aa6:	90 e0       	ldi	r25, 0x00	; 0
    3aa8:	02 2e       	mov	r0, r18
    3aaa:	02 c0       	rjmp	.+4      	; 0x3ab0 <DIO_voidTogglePin+0x6e>
    3aac:	88 0f       	add	r24, r24
    3aae:	99 1f       	adc	r25, r25
    3ab0:	0a 94       	dec	r0
    3ab2:	e2 f7       	brpl	.-8      	; 0x3aac <DIO_voidTogglePin+0x6a>
    3ab4:	84 27       	eor	r24, r20
    3ab6:	8c 93       	st	X, r24
    3ab8:	3b c0       	rjmp	.+118    	; 0x3b30 <DIO_voidTogglePin+0xee>
			break;
		case PORT_B:
			TOG_BIT(PORTB,u8PinCpy);
    3aba:	a8 e3       	ldi	r26, 0x38	; 56
    3abc:	b0 e0       	ldi	r27, 0x00	; 0
    3abe:	e8 e3       	ldi	r30, 0x38	; 56
    3ac0:	f0 e0       	ldi	r31, 0x00	; 0
    3ac2:	80 81       	ld	r24, Z
    3ac4:	48 2f       	mov	r20, r24
    3ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac8:	28 2f       	mov	r18, r24
    3aca:	30 e0       	ldi	r19, 0x00	; 0
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	02 2e       	mov	r0, r18
    3ad2:	02 c0       	rjmp	.+4      	; 0x3ad8 <DIO_voidTogglePin+0x96>
    3ad4:	88 0f       	add	r24, r24
    3ad6:	99 1f       	adc	r25, r25
    3ad8:	0a 94       	dec	r0
    3ada:	e2 f7       	brpl	.-8      	; 0x3ad4 <DIO_voidTogglePin+0x92>
    3adc:	84 27       	eor	r24, r20
    3ade:	8c 93       	st	X, r24
    3ae0:	27 c0       	rjmp	.+78     	; 0x3b30 <DIO_voidTogglePin+0xee>
			break;
		case PORT_C:
			TOG_BIT(PORTC,u8PinCpy);
    3ae2:	a5 e3       	ldi	r26, 0x35	; 53
    3ae4:	b0 e0       	ldi	r27, 0x00	; 0
    3ae6:	e5 e3       	ldi	r30, 0x35	; 53
    3ae8:	f0 e0       	ldi	r31, 0x00	; 0
    3aea:	80 81       	ld	r24, Z
    3aec:	48 2f       	mov	r20, r24
    3aee:	8a 81       	ldd	r24, Y+2	; 0x02
    3af0:	28 2f       	mov	r18, r24
    3af2:	30 e0       	ldi	r19, 0x00	; 0
    3af4:	81 e0       	ldi	r24, 0x01	; 1
    3af6:	90 e0       	ldi	r25, 0x00	; 0
    3af8:	02 2e       	mov	r0, r18
    3afa:	02 c0       	rjmp	.+4      	; 0x3b00 <DIO_voidTogglePin+0xbe>
    3afc:	88 0f       	add	r24, r24
    3afe:	99 1f       	adc	r25, r25
    3b00:	0a 94       	dec	r0
    3b02:	e2 f7       	brpl	.-8      	; 0x3afc <DIO_voidTogglePin+0xba>
    3b04:	84 27       	eor	r24, r20
    3b06:	8c 93       	st	X, r24
    3b08:	13 c0       	rjmp	.+38     	; 0x3b30 <DIO_voidTogglePin+0xee>
			break;
		case PORT_D:
			TOG_BIT(PORTD,u8PinCpy);
    3b0a:	a2 e3       	ldi	r26, 0x32	; 50
    3b0c:	b0 e0       	ldi	r27, 0x00	; 0
    3b0e:	e2 e3       	ldi	r30, 0x32	; 50
    3b10:	f0 e0       	ldi	r31, 0x00	; 0
    3b12:	80 81       	ld	r24, Z
    3b14:	48 2f       	mov	r20, r24
    3b16:	8a 81       	ldd	r24, Y+2	; 0x02
    3b18:	28 2f       	mov	r18, r24
    3b1a:	30 e0       	ldi	r19, 0x00	; 0
    3b1c:	81 e0       	ldi	r24, 0x01	; 1
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	02 2e       	mov	r0, r18
    3b22:	02 c0       	rjmp	.+4      	; 0x3b28 <DIO_voidTogglePin+0xe6>
    3b24:	88 0f       	add	r24, r24
    3b26:	99 1f       	adc	r25, r25
    3b28:	0a 94       	dec	r0
    3b2a:	e2 f7       	brpl	.-8      	; 0x3b24 <DIO_voidTogglePin+0xe2>
    3b2c:	84 27       	eor	r24, r20
    3b2e:	8c 93       	st	X, r24
			break;
	}

}
    3b30:	0f 90       	pop	r0
    3b32:	0f 90       	pop	r0
    3b34:	0f 90       	pop	r0
    3b36:	0f 90       	pop	r0
    3b38:	cf 91       	pop	r28
    3b3a:	df 91       	pop	r29
    3b3c:	08 95       	ret

00003b3e <DIO_voidWritePort>:
/* DIO_voidWritePort(PORT_A, 0x20) -> ob0010 0000-----> this means bit 0 will be 0 and bit5 will be 1 */
void DIO_voidWritePort(uint8 u8PortCpy, uint8 u8ValueCpy)
{
    3b3e:	df 93       	push	r29
    3b40:	cf 93       	push	r28
    3b42:	00 d0       	rcall	.+0      	; 0x3b44 <DIO_voidWritePort+0x6>
    3b44:	00 d0       	rcall	.+0      	; 0x3b46 <DIO_voidWritePort+0x8>
    3b46:	cd b7       	in	r28, 0x3d	; 61
    3b48:	de b7       	in	r29, 0x3e	; 62
    3b4a:	89 83       	std	Y+1, r24	; 0x01
    3b4c:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortCpy){
    3b4e:	89 81       	ldd	r24, Y+1	; 0x01
    3b50:	28 2f       	mov	r18, r24
    3b52:	30 e0       	ldi	r19, 0x00	; 0
    3b54:	3c 83       	std	Y+4, r19	; 0x04
    3b56:	2b 83       	std	Y+3, r18	; 0x03
    3b58:	8b 81       	ldd	r24, Y+3	; 0x03
    3b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b5c:	82 30       	cpi	r24, 0x02	; 2
    3b5e:	91 05       	cpc	r25, r1
    3b60:	d9 f0       	breq	.+54     	; 0x3b98 <DIO_voidWritePort+0x5a>
    3b62:	2b 81       	ldd	r18, Y+3	; 0x03
    3b64:	3c 81       	ldd	r19, Y+4	; 0x04
    3b66:	23 30       	cpi	r18, 0x03	; 3
    3b68:	31 05       	cpc	r19, r1
    3b6a:	34 f4       	brge	.+12     	; 0x3b78 <DIO_voidWritePort+0x3a>
    3b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b70:	81 30       	cpi	r24, 0x01	; 1
    3b72:	91 05       	cpc	r25, r1
    3b74:	61 f0       	breq	.+24     	; 0x3b8e <DIO_voidWritePort+0x50>
    3b76:	1e c0       	rjmp	.+60     	; 0x3bb4 <DIO_voidWritePort+0x76>
    3b78:	2b 81       	ldd	r18, Y+3	; 0x03
    3b7a:	3c 81       	ldd	r19, Y+4	; 0x04
    3b7c:	23 30       	cpi	r18, 0x03	; 3
    3b7e:	31 05       	cpc	r19, r1
    3b80:	81 f0       	breq	.+32     	; 0x3ba2 <DIO_voidWritePort+0x64>
    3b82:	8b 81       	ldd	r24, Y+3	; 0x03
    3b84:	9c 81       	ldd	r25, Y+4	; 0x04
    3b86:	84 30       	cpi	r24, 0x04	; 4
    3b88:	91 05       	cpc	r25, r1
    3b8a:	81 f0       	breq	.+32     	; 0x3bac <DIO_voidWritePort+0x6e>
    3b8c:	13 c0       	rjmp	.+38     	; 0x3bb4 <DIO_voidWritePort+0x76>
	case PORT_A:
		PORTA = u8ValueCpy;
    3b8e:	eb e3       	ldi	r30, 0x3B	; 59
    3b90:	f0 e0       	ldi	r31, 0x00	; 0
    3b92:	8a 81       	ldd	r24, Y+2	; 0x02
    3b94:	80 83       	st	Z, r24
    3b96:	0e c0       	rjmp	.+28     	; 0x3bb4 <DIO_voidWritePort+0x76>
		break;
	case PORT_B:
		PORTB = u8ValueCpy;
    3b98:	e8 e3       	ldi	r30, 0x38	; 56
    3b9a:	f0 e0       	ldi	r31, 0x00	; 0
    3b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b9e:	80 83       	st	Z, r24
    3ba0:	09 c0       	rjmp	.+18     	; 0x3bb4 <DIO_voidWritePort+0x76>
		break;
	case PORT_C:
		PORTC = u8ValueCpy;
    3ba2:	e5 e3       	ldi	r30, 0x35	; 53
    3ba4:	f0 e0       	ldi	r31, 0x00	; 0
    3ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba8:	80 83       	st	Z, r24
    3baa:	04 c0       	rjmp	.+8      	; 0x3bb4 <DIO_voidWritePort+0x76>
		break;
	case PORT_D:
		PORTD = u8ValueCpy;
    3bac:	e2 e3       	ldi	r30, 0x32	; 50
    3bae:	f0 e0       	ldi	r31, 0x00	; 0
    3bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3bb2:	80 83       	st	Z, r24
		break;

	}
}
    3bb4:	0f 90       	pop	r0
    3bb6:	0f 90       	pop	r0
    3bb8:	0f 90       	pop	r0
    3bba:	0f 90       	pop	r0
    3bbc:	cf 91       	pop	r28
    3bbe:	df 91       	pop	r29
    3bc0:	08 95       	ret

00003bc2 <DIO_voidPullUpState>:
void DIO_voidPullUpState(uint8 u8PortCpy , uint8 u8PinCpy,uint8 u8State)
{
    3bc2:	df 93       	push	r29
    3bc4:	cf 93       	push	r28
    3bc6:	00 d0       	rcall	.+0      	; 0x3bc8 <DIO_voidPullUpState+0x6>
    3bc8:	00 d0       	rcall	.+0      	; 0x3bca <DIO_voidPullUpState+0x8>
    3bca:	00 d0       	rcall	.+0      	; 0x3bcc <DIO_voidPullUpState+0xa>
    3bcc:	cd b7       	in	r28, 0x3d	; 61
    3bce:	de b7       	in	r29, 0x3e	; 62
    3bd0:	8a 83       	std	Y+2, r24	; 0x02
    3bd2:	6b 83       	std	Y+3, r22	; 0x03
    3bd4:	4c 83       	std	Y+4, r20	; 0x04
	uint8 u8Direction ;
	switch(u8PortCpy)
    3bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    3bd8:	28 2f       	mov	r18, r24
    3bda:	30 e0       	ldi	r19, 0x00	; 0
    3bdc:	3e 83       	std	Y+6, r19	; 0x06
    3bde:	2d 83       	std	Y+5, r18	; 0x05
    3be0:	4d 81       	ldd	r20, Y+5	; 0x05
    3be2:	5e 81       	ldd	r21, Y+6	; 0x06
    3be4:	42 30       	cpi	r20, 0x02	; 2
    3be6:	51 05       	cpc	r21, r1
    3be8:	41 f1       	breq	.+80     	; 0x3c3a <DIO_voidPullUpState+0x78>
    3bea:	8d 81       	ldd	r24, Y+5	; 0x05
    3bec:	9e 81       	ldd	r25, Y+6	; 0x06
    3bee:	83 30       	cpi	r24, 0x03	; 3
    3bf0:	91 05       	cpc	r25, r1
    3bf2:	34 f4       	brge	.+12     	; 0x3c00 <DIO_voidPullUpState+0x3e>
    3bf4:	2d 81       	ldd	r18, Y+5	; 0x05
    3bf6:	3e 81       	ldd	r19, Y+6	; 0x06
    3bf8:	21 30       	cpi	r18, 0x01	; 1
    3bfa:	31 05       	cpc	r19, r1
    3bfc:	61 f0       	breq	.+24     	; 0x3c16 <DIO_voidPullUpState+0x54>
    3bfe:	52 c0       	rjmp	.+164    	; 0x3ca4 <DIO_voidPullUpState+0xe2>
    3c00:	4d 81       	ldd	r20, Y+5	; 0x05
    3c02:	5e 81       	ldd	r21, Y+6	; 0x06
    3c04:	43 30       	cpi	r20, 0x03	; 3
    3c06:	51 05       	cpc	r21, r1
    3c08:	51 f1       	breq	.+84     	; 0x3c5e <DIO_voidPullUpState+0x9c>
    3c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c0c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c0e:	84 30       	cpi	r24, 0x04	; 4
    3c10:	91 05       	cpc	r25, r1
    3c12:	b9 f1       	breq	.+110    	; 0x3c82 <DIO_voidPullUpState+0xc0>
    3c14:	47 c0       	rjmp	.+142    	; 0x3ca4 <DIO_voidPullUpState+0xe2>
	{
	case PORT_A :
		u8Direction=GET_BIT(DDRA,u8PinCpy);
    3c16:	ea e3       	ldi	r30, 0x3A	; 58
    3c18:	f0 e0       	ldi	r31, 0x00	; 0
    3c1a:	80 81       	ld	r24, Z
    3c1c:	28 2f       	mov	r18, r24
    3c1e:	30 e0       	ldi	r19, 0x00	; 0
    3c20:	8b 81       	ldd	r24, Y+3	; 0x03
    3c22:	88 2f       	mov	r24, r24
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	a9 01       	movw	r20, r18
    3c28:	02 c0       	rjmp	.+4      	; 0x3c2e <DIO_voidPullUpState+0x6c>
    3c2a:	55 95       	asr	r21
    3c2c:	47 95       	ror	r20
    3c2e:	8a 95       	dec	r24
    3c30:	e2 f7       	brpl	.-8      	; 0x3c2a <DIO_voidPullUpState+0x68>
    3c32:	ca 01       	movw	r24, r20
    3c34:	81 70       	andi	r24, 0x01	; 1
    3c36:	89 83       	std	Y+1, r24	; 0x01
    3c38:	35 c0       	rjmp	.+106    	; 0x3ca4 <DIO_voidPullUpState+0xe2>
		break;
	case PORT_B :
		u8Direction=GET_BIT(DDRB,u8PinCpy);
    3c3a:	e7 e3       	ldi	r30, 0x37	; 55
    3c3c:	f0 e0       	ldi	r31, 0x00	; 0
    3c3e:	80 81       	ld	r24, Z
    3c40:	28 2f       	mov	r18, r24
    3c42:	30 e0       	ldi	r19, 0x00	; 0
    3c44:	8b 81       	ldd	r24, Y+3	; 0x03
    3c46:	88 2f       	mov	r24, r24
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	a9 01       	movw	r20, r18
    3c4c:	02 c0       	rjmp	.+4      	; 0x3c52 <DIO_voidPullUpState+0x90>
    3c4e:	55 95       	asr	r21
    3c50:	47 95       	ror	r20
    3c52:	8a 95       	dec	r24
    3c54:	e2 f7       	brpl	.-8      	; 0x3c4e <DIO_voidPullUpState+0x8c>
    3c56:	ca 01       	movw	r24, r20
    3c58:	81 70       	andi	r24, 0x01	; 1
    3c5a:	89 83       	std	Y+1, r24	; 0x01
    3c5c:	23 c0       	rjmp	.+70     	; 0x3ca4 <DIO_voidPullUpState+0xe2>
		break;

	case PORT_C :
		u8Direction=GET_BIT(DDRC,u8PinCpy);
    3c5e:	e4 e3       	ldi	r30, 0x34	; 52
    3c60:	f0 e0       	ldi	r31, 0x00	; 0
    3c62:	80 81       	ld	r24, Z
    3c64:	28 2f       	mov	r18, r24
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	8b 81       	ldd	r24, Y+3	; 0x03
    3c6a:	88 2f       	mov	r24, r24
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	a9 01       	movw	r20, r18
    3c70:	02 c0       	rjmp	.+4      	; 0x3c76 <DIO_voidPullUpState+0xb4>
    3c72:	55 95       	asr	r21
    3c74:	47 95       	ror	r20
    3c76:	8a 95       	dec	r24
    3c78:	e2 f7       	brpl	.-8      	; 0x3c72 <DIO_voidPullUpState+0xb0>
    3c7a:	ca 01       	movw	r24, r20
    3c7c:	81 70       	andi	r24, 0x01	; 1
    3c7e:	89 83       	std	Y+1, r24	; 0x01
    3c80:	11 c0       	rjmp	.+34     	; 0x3ca4 <DIO_voidPullUpState+0xe2>
		break;

	case PORT_D :
		u8Direction=GET_BIT(DDRD,u8PinCpy);
    3c82:	e1 e3       	ldi	r30, 0x31	; 49
    3c84:	f0 e0       	ldi	r31, 0x00	; 0
    3c86:	80 81       	ld	r24, Z
    3c88:	28 2f       	mov	r18, r24
    3c8a:	30 e0       	ldi	r19, 0x00	; 0
    3c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c8e:	88 2f       	mov	r24, r24
    3c90:	90 e0       	ldi	r25, 0x00	; 0
    3c92:	a9 01       	movw	r20, r18
    3c94:	02 c0       	rjmp	.+4      	; 0x3c9a <DIO_voidPullUpState+0xd8>
    3c96:	55 95       	asr	r21
    3c98:	47 95       	ror	r20
    3c9a:	8a 95       	dec	r24
    3c9c:	e2 f7       	brpl	.-8      	; 0x3c96 <DIO_voidPullUpState+0xd4>
    3c9e:	ca 01       	movw	r24, r20
    3ca0:	81 70       	andi	r24, 0x01	; 1
    3ca2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	if (u8Direction==DIO_INPUT)			//if zero, write zero in pin
    3ca4:	89 81       	ldd	r24, Y+1	; 0x01
    3ca6:	88 23       	and	r24, r24
    3ca8:	29 f4       	brne	.+10     	; 0x3cb4 <DIO_voidPullUpState+0xf2>
	{
		DIO_voidWritePin(u8PortCpy,u8PinCpy,u8State);
    3caa:	8a 81       	ldd	r24, Y+2	; 0x02
    3cac:	6b 81       	ldd	r22, Y+3	; 0x03
    3cae:	4c 81       	ldd	r20, Y+4	; 0x04
    3cb0:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>
	}
	else
	{
		//do nothing
	}
}
    3cb4:	26 96       	adiw	r28, 0x06	; 6
    3cb6:	0f b6       	in	r0, 0x3f	; 63
    3cb8:	f8 94       	cli
    3cba:	de bf       	out	0x3e, r29	; 62
    3cbc:	0f be       	out	0x3f, r0	; 63
    3cbe:	cd bf       	out	0x3d, r28	; 61
    3cc0:	cf 91       	pop	r28
    3cc2:	df 91       	pop	r29
    3cc4:	08 95       	ret

00003cc6 <SevSeg_voidDisplay>:




void SevSeg_voidDisplay(uint8 u8NumberCpy)
{	if(u8NumberCpy<10){
    3cc6:	df 93       	push	r29
    3cc8:	cf 93       	push	r28
    3cca:	0f 92       	push	r0
    3ccc:	cd b7       	in	r28, 0x3d	; 61
    3cce:	de b7       	in	r29, 0x3e	; 62
    3cd0:	89 83       	std	Y+1, r24	; 0x01
    3cd2:	89 81       	ldd	r24, Y+1	; 0x01
    3cd4:	8a 30       	cpi	r24, 0x0A	; 10
    3cd6:	60 f4       	brcc	.+24     	; 0x3cf0 <SevSeg_voidDisplay+0x2a>
		#if COMMON_TYPE == COMMON_CATHODE
			DIO_voidWritePort(SEVEN_PORT_NAME_1,Seven_SegmentPattern_1[u8NumberCpy]);
		#elif COMMON_TYPE == COMMON_ANODE
			DIO_voidWritePort(SEVEN_PORT_NAME_1,array[u8NumberCpy]);
    3cd8:	89 81       	ldd	r24, Y+1	; 0x01
    3cda:	88 2f       	mov	r24, r24
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	fc 01       	movw	r30, r24
    3ce0:	ee 57       	subi	r30, 0x7E	; 126
    3ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce4:	90 81       	ld	r25, Z
    3ce6:	81 e0       	ldi	r24, 0x01	; 1
    3ce8:	69 2f       	mov	r22, r25
    3cea:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <DIO_voidWritePort>
    3cee:	27 c0       	rjmp	.+78     	; 0x3d3e <SevSeg_voidDisplay+0x78>

		#endif
	}

	else if	(u8NumberCpy>=10 && u8NumberCpy<99){
    3cf0:	89 81       	ldd	r24, Y+1	; 0x01
    3cf2:	8a 30       	cpi	r24, 0x0A	; 10
    3cf4:	20 f1       	brcs	.+72     	; 0x3d3e <SevSeg_voidDisplay+0x78>
    3cf6:	89 81       	ldd	r24, Y+1	; 0x01
    3cf8:	83 36       	cpi	r24, 0x63	; 99
    3cfa:	08 f5       	brcc	.+66     	; 0x3d3e <SevSeg_voidDisplay+0x78>
		#if COMMON_TYPE == COMMON_CATHODE
			DIO_voidWritePort(SEVEN_PORT_NAME_1,Seven_SegmentPattern_1[u8NumberCpy%10]);
			DIO_voidWritePort(SEVEN_PORT_NAME_2,Seven_SegmentPattern_2[u8NumberCpy/10]);
		#elif COMMON_TYPE == COMMON_ANODE
			DIO_voidWritePort(SEVEN_PORT_NAME_1,Seven_SegmentPattern_1[u8NumberCpy%10]);
    3cfc:	89 81       	ldd	r24, Y+1	; 0x01
    3cfe:	9a e0       	ldi	r25, 0x0A	; 10
    3d00:	69 2f       	mov	r22, r25
    3d02:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <__udivmodqi4>
    3d06:	89 2f       	mov	r24, r25
    3d08:	88 2f       	mov	r24, r24
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	fc 01       	movw	r30, r24
    3d0e:	e8 58       	subi	r30, 0x88	; 136
    3d10:	ff 4f       	sbci	r31, 0xFF	; 255
    3d12:	90 81       	ld	r25, Z
    3d14:	81 e0       	ldi	r24, 0x01	; 1
    3d16:	69 2f       	mov	r22, r25
    3d18:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <DIO_voidWritePort>
			DIO_voidWritePort(SEVEN_PORT_NAME_2,~Seven_SegmentPattern_2[u8NumberCpy/10]);
    3d1c:	89 81       	ldd	r24, Y+1	; 0x01
    3d1e:	9a e0       	ldi	r25, 0x0A	; 10
    3d20:	69 2f       	mov	r22, r25
    3d22:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <__udivmodqi4>
    3d26:	88 2f       	mov	r24, r24
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	fc 01       	movw	r30, r24
    3d2c:	e4 57       	subi	r30, 0x74	; 116
    3d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d30:	80 81       	ld	r24, Z
    3d32:	98 2f       	mov	r25, r24
    3d34:	90 95       	com	r25
    3d36:	82 e0       	ldi	r24, 0x02	; 2
    3d38:	69 2f       	mov	r22, r25
    3d3a:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <DIO_voidWritePort>

	}



}
    3d3e:	0f 90       	pop	r0
    3d40:	cf 91       	pop	r28
    3d42:	df 91       	pop	r29
    3d44:	08 95       	ret

00003d46 <main>:
#include "util/delay.h"
#include "DIO/DIO_interface.h"
#include "UART/UART_interface.h"
#include "7SEG/seven_segment_interface.h"

int main(void){
    3d46:	df 93       	push	r29
    3d48:	cf 93       	push	r28
    3d4a:	cd b7       	in	r28, 0x3d	; 61
    3d4c:	de b7       	in	r29, 0x3e	; 62
    3d4e:	6e 97       	sbiw	r28, 0x1e	; 30
    3d50:	0f b6       	in	r0, 0x3f	; 63
    3d52:	f8 94       	cli
    3d54:	de bf       	out	0x3e, r29	; 62
    3d56:	0f be       	out	0x3f, r0	; 63
    3d58:	cd bf       	out	0x3d, r28	; 61
	DIO_voidInit();
    3d5a:	0e 94 9e 1b 	call	0x373c	; 0x373c <DIO_voidInit>
	UART_voidInit();
    3d5e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <UART_voidInit>
	DIO_voidWritePin(PORT_B, DIO_PIN_NUM_B0, DIO_LOW);
    3d62:	82 e0       	ldi	r24, 0x02	; 2
    3d64:	60 e0       	ldi	r22, 0x00	; 0
    3d66:	40 e0       	ldi	r20, 0x00	; 0
    3d68:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>
	uint8 u8ErrorCounts=0;
    3d6c:	1e 8e       	std	Y+30, r1	; 0x1e
	while(1){
		//-------------MCU2----------------
		// start counting no. of trials on the 7SEG
		//if no. of trials exceeded 3
		//turn the siren ON (buzzer)
		uint8 u8WrongPass = UART_u8ReceiveData();
    3d6e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <UART_u8ReceiveData>
    3d72:	8d 8f       	std	Y+29, r24	; 0x1d

		if(u8WrongPass == 5){
    3d74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d76:	85 30       	cpi	r24, 0x05	; 5
    3d78:	09 f0       	breq	.+2      	; 0x3d7c <main+0x36>
    3d7a:	7c c0       	rjmp	.+248    	; 0x3e74 <main+0x12e>
			if(u8ErrorCounts<2){
    3d7c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d7e:	82 30       	cpi	r24, 0x02	; 2
    3d80:	b0 f7       	brcc	.-20     	; 0x3d6e <main+0x28>
				u8ErrorCounts++;
    3d82:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d84:	8f 5f       	subi	r24, 0xFF	; 255
    3d86:	8e 8f       	std	Y+30, r24	; 0x1e
				SevSeg_voidDisplay(u8ErrorCounts);
    3d88:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d8a:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <SevSeg_voidDisplay>
    3d8e:	80 e0       	ldi	r24, 0x00	; 0
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	a0 ea       	ldi	r26, 0xA0	; 160
    3d94:	b1 e4       	ldi	r27, 0x41	; 65
    3d96:	89 8f       	std	Y+25, r24	; 0x19
    3d98:	9a 8f       	std	Y+26, r25	; 0x1a
    3d9a:	ab 8f       	std	Y+27, r26	; 0x1b
    3d9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d9e:	69 8d       	ldd	r22, Y+25	; 0x19
    3da0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3da2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3da4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3da6:	20 e0       	ldi	r18, 0x00	; 0
    3da8:	30 e0       	ldi	r19, 0x00	; 0
    3daa:	4a ef       	ldi	r20, 0xFA	; 250
    3dac:	54 e4       	ldi	r21, 0x44	; 68
    3dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db2:	dc 01       	movw	r26, r24
    3db4:	cb 01       	movw	r24, r22
    3db6:	8d 8b       	std	Y+21, r24	; 0x15
    3db8:	9e 8b       	std	Y+22, r25	; 0x16
    3dba:	af 8b       	std	Y+23, r26	; 0x17
    3dbc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3dbe:	6d 89       	ldd	r22, Y+21	; 0x15
    3dc0:	7e 89       	ldd	r23, Y+22	; 0x16
    3dc2:	8f 89       	ldd	r24, Y+23	; 0x17
    3dc4:	98 8d       	ldd	r25, Y+24	; 0x18
    3dc6:	20 e0       	ldi	r18, 0x00	; 0
    3dc8:	30 e0       	ldi	r19, 0x00	; 0
    3dca:	40 e8       	ldi	r20, 0x80	; 128
    3dcc:	5f e3       	ldi	r21, 0x3F	; 63
    3dce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3dd2:	88 23       	and	r24, r24
    3dd4:	2c f4       	brge	.+10     	; 0x3de0 <main+0x9a>
		__ticks = 1;
    3dd6:	81 e0       	ldi	r24, 0x01	; 1
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	9c 8b       	std	Y+20, r25	; 0x14
    3ddc:	8b 8b       	std	Y+19, r24	; 0x13
    3dde:	3f c0       	rjmp	.+126    	; 0x3e5e <main+0x118>
	else if (__tmp > 65535)
    3de0:	6d 89       	ldd	r22, Y+21	; 0x15
    3de2:	7e 89       	ldd	r23, Y+22	; 0x16
    3de4:	8f 89       	ldd	r24, Y+23	; 0x17
    3de6:	98 8d       	ldd	r25, Y+24	; 0x18
    3de8:	20 e0       	ldi	r18, 0x00	; 0
    3dea:	3f ef       	ldi	r19, 0xFF	; 255
    3dec:	4f e7       	ldi	r20, 0x7F	; 127
    3dee:	57 e4       	ldi	r21, 0x47	; 71
    3df0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3df4:	18 16       	cp	r1, r24
    3df6:	4c f5       	brge	.+82     	; 0x3e4a <main+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3df8:	69 8d       	ldd	r22, Y+25	; 0x19
    3dfa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3dfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3dfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e00:	20 e0       	ldi	r18, 0x00	; 0
    3e02:	30 e0       	ldi	r19, 0x00	; 0
    3e04:	40 e2       	ldi	r20, 0x20	; 32
    3e06:	51 e4       	ldi	r21, 0x41	; 65
    3e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e0c:	dc 01       	movw	r26, r24
    3e0e:	cb 01       	movw	r24, r22
    3e10:	bc 01       	movw	r22, r24
    3e12:	cd 01       	movw	r24, r26
    3e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e18:	dc 01       	movw	r26, r24
    3e1a:	cb 01       	movw	r24, r22
    3e1c:	9c 8b       	std	Y+20, r25	; 0x14
    3e1e:	8b 8b       	std	Y+19, r24	; 0x13
    3e20:	0f c0       	rjmp	.+30     	; 0x3e40 <main+0xfa>
    3e22:	88 ec       	ldi	r24, 0xC8	; 200
    3e24:	90 e0       	ldi	r25, 0x00	; 0
    3e26:	9a 8b       	std	Y+18, r25	; 0x12
    3e28:	89 8b       	std	Y+17, r24	; 0x11
    3e2a:	89 89       	ldd	r24, Y+17	; 0x11
    3e2c:	9a 89       	ldd	r25, Y+18	; 0x12
    3e2e:	01 97       	sbiw	r24, 0x01	; 1
    3e30:	f1 f7       	brne	.-4      	; 0x3e2e <main+0xe8>
    3e32:	9a 8b       	std	Y+18, r25	; 0x12
    3e34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e36:	8b 89       	ldd	r24, Y+19	; 0x13
    3e38:	9c 89       	ldd	r25, Y+20	; 0x14
    3e3a:	01 97       	sbiw	r24, 0x01	; 1
    3e3c:	9c 8b       	std	Y+20, r25	; 0x14
    3e3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e40:	8b 89       	ldd	r24, Y+19	; 0x13
    3e42:	9c 89       	ldd	r25, Y+20	; 0x14
    3e44:	00 97       	sbiw	r24, 0x00	; 0
    3e46:	69 f7       	brne	.-38     	; 0x3e22 <main+0xdc>
    3e48:	92 cf       	rjmp	.-220    	; 0x3d6e <main+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e4a:	6d 89       	ldd	r22, Y+21	; 0x15
    3e4c:	7e 89       	ldd	r23, Y+22	; 0x16
    3e4e:	8f 89       	ldd	r24, Y+23	; 0x17
    3e50:	98 8d       	ldd	r25, Y+24	; 0x18
    3e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e56:	dc 01       	movw	r26, r24
    3e58:	cb 01       	movw	r24, r22
    3e5a:	9c 8b       	std	Y+20, r25	; 0x14
    3e5c:	8b 8b       	std	Y+19, r24	; 0x13
    3e5e:	8b 89       	ldd	r24, Y+19	; 0x13
    3e60:	9c 89       	ldd	r25, Y+20	; 0x14
    3e62:	98 8b       	std	Y+16, r25	; 0x10
    3e64:	8f 87       	std	Y+15, r24	; 0x0f
    3e66:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e68:	98 89       	ldd	r25, Y+16	; 0x10
    3e6a:	01 97       	sbiw	r24, 0x01	; 1
    3e6c:	f1 f7       	brne	.-4      	; 0x3e6a <main+0x124>
    3e6e:	98 8b       	std	Y+16, r25	; 0x10
    3e70:	8f 87       	std	Y+15, r24	; 0x0f
    3e72:	7d cf       	rjmp	.-262    	; 0x3d6e <main+0x28>
			}
			else{
				//do nth
			}
		}
		else if(u8WrongPass == 3){
    3e74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e76:	83 30       	cpi	r24, 0x03	; 3
    3e78:	09 f0       	breq	.+2      	; 0x3e7c <main+0x136>
    3e7a:	78 c0       	rjmp	.+240    	; 0x3f6c <main+0x226>
			DIO_voidWritePin(PORT_B, DIO_PIN_NUM_B0, DIO_HIGH);		//buzzer ON
    3e7c:	82 e0       	ldi	r24, 0x02	; 2
    3e7e:	60 e0       	ldi	r22, 0x00	; 0
    3e80:	41 e0       	ldi	r20, 0x01	; 1
    3e82:	0e 94 b5 1b 	call	0x376a	; 0x376a <DIO_voidWritePin>
    3e86:	80 e0       	ldi	r24, 0x00	; 0
    3e88:	90 e4       	ldi	r25, 0x40	; 64
    3e8a:	ac e9       	ldi	r26, 0x9C	; 156
    3e8c:	b5 e4       	ldi	r27, 0x45	; 69
    3e8e:	8b 87       	std	Y+11, r24	; 0x0b
    3e90:	9c 87       	std	Y+12, r25	; 0x0c
    3e92:	ad 87       	std	Y+13, r26	; 0x0d
    3e94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e96:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e98:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e9e:	20 e0       	ldi	r18, 0x00	; 0
    3ea0:	30 e0       	ldi	r19, 0x00	; 0
    3ea2:	4a ef       	ldi	r20, 0xFA	; 250
    3ea4:	54 e4       	ldi	r21, 0x44	; 68
    3ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eaa:	dc 01       	movw	r26, r24
    3eac:	cb 01       	movw	r24, r22
    3eae:	8f 83       	std	Y+7, r24	; 0x07
    3eb0:	98 87       	std	Y+8, r25	; 0x08
    3eb2:	a9 87       	std	Y+9, r26	; 0x09
    3eb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3eb6:	6f 81       	ldd	r22, Y+7	; 0x07
    3eb8:	78 85       	ldd	r23, Y+8	; 0x08
    3eba:	89 85       	ldd	r24, Y+9	; 0x09
    3ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ebe:	20 e0       	ldi	r18, 0x00	; 0
    3ec0:	30 e0       	ldi	r19, 0x00	; 0
    3ec2:	40 e8       	ldi	r20, 0x80	; 128
    3ec4:	5f e3       	ldi	r21, 0x3F	; 63
    3ec6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3eca:	88 23       	and	r24, r24
    3ecc:	2c f4       	brge	.+10     	; 0x3ed8 <main+0x192>
		__ticks = 1;
    3ece:	81 e0       	ldi	r24, 0x01	; 1
    3ed0:	90 e0       	ldi	r25, 0x00	; 0
    3ed2:	9e 83       	std	Y+6, r25	; 0x06
    3ed4:	8d 83       	std	Y+5, r24	; 0x05
    3ed6:	3f c0       	rjmp	.+126    	; 0x3f56 <main+0x210>
	else if (__tmp > 65535)
    3ed8:	6f 81       	ldd	r22, Y+7	; 0x07
    3eda:	78 85       	ldd	r23, Y+8	; 0x08
    3edc:	89 85       	ldd	r24, Y+9	; 0x09
    3ede:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ee0:	20 e0       	ldi	r18, 0x00	; 0
    3ee2:	3f ef       	ldi	r19, 0xFF	; 255
    3ee4:	4f e7       	ldi	r20, 0x7F	; 127
    3ee6:	57 e4       	ldi	r21, 0x47	; 71
    3ee8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3eec:	18 16       	cp	r1, r24
    3eee:	4c f5       	brge	.+82     	; 0x3f42 <main+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ef0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ef2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ef4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ef6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ef8:	20 e0       	ldi	r18, 0x00	; 0
    3efa:	30 e0       	ldi	r19, 0x00	; 0
    3efc:	40 e2       	ldi	r20, 0x20	; 32
    3efe:	51 e4       	ldi	r21, 0x41	; 65
    3f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f04:	dc 01       	movw	r26, r24
    3f06:	cb 01       	movw	r24, r22
    3f08:	bc 01       	movw	r22, r24
    3f0a:	cd 01       	movw	r24, r26
    3f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f10:	dc 01       	movw	r26, r24
    3f12:	cb 01       	movw	r24, r22
    3f14:	9e 83       	std	Y+6, r25	; 0x06
    3f16:	8d 83       	std	Y+5, r24	; 0x05
    3f18:	0f c0       	rjmp	.+30     	; 0x3f38 <main+0x1f2>
    3f1a:	88 ec       	ldi	r24, 0xC8	; 200
    3f1c:	90 e0       	ldi	r25, 0x00	; 0
    3f1e:	9c 83       	std	Y+4, r25	; 0x04
    3f20:	8b 83       	std	Y+3, r24	; 0x03
    3f22:	8b 81       	ldd	r24, Y+3	; 0x03
    3f24:	9c 81       	ldd	r25, Y+4	; 0x04
    3f26:	01 97       	sbiw	r24, 0x01	; 1
    3f28:	f1 f7       	brne	.-4      	; 0x3f26 <main+0x1e0>
    3f2a:	9c 83       	std	Y+4, r25	; 0x04
    3f2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f30:	9e 81       	ldd	r25, Y+6	; 0x06
    3f32:	01 97       	sbiw	r24, 0x01	; 1
    3f34:	9e 83       	std	Y+6, r25	; 0x06
    3f36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f38:	8d 81       	ldd	r24, Y+5	; 0x05
    3f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f3c:	00 97       	sbiw	r24, 0x00	; 0
    3f3e:	69 f7       	brne	.-38     	; 0x3f1a <main+0x1d4>
    3f40:	16 cf       	rjmp	.-468    	; 0x3d6e <main+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f42:	6f 81       	ldd	r22, Y+7	; 0x07
    3f44:	78 85       	ldd	r23, Y+8	; 0x08
    3f46:	89 85       	ldd	r24, Y+9	; 0x09
    3f48:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f4e:	dc 01       	movw	r26, r24
    3f50:	cb 01       	movw	r24, r22
    3f52:	9e 83       	std	Y+6, r25	; 0x06
    3f54:	8d 83       	std	Y+5, r24	; 0x05
    3f56:	8d 81       	ldd	r24, Y+5	; 0x05
    3f58:	9e 81       	ldd	r25, Y+6	; 0x06
    3f5a:	9a 83       	std	Y+2, r25	; 0x02
    3f5c:	89 83       	std	Y+1, r24	; 0x01
    3f5e:	89 81       	ldd	r24, Y+1	; 0x01
    3f60:	9a 81       	ldd	r25, Y+2	; 0x02
    3f62:	01 97       	sbiw	r24, 0x01	; 1
    3f64:	f1 f7       	brne	.-4      	; 0x3f62 <main+0x21c>
    3f66:	9a 83       	std	Y+2, r25	; 0x02
    3f68:	89 83       	std	Y+1, r24	; 0x01
    3f6a:	01 cf       	rjmp	.-510    	; 0x3d6e <main+0x28>
			_delay_ms(5000);
//			DIO_voidWritePin(PORT_B, DIO_PIN_NUM_B0, DIO_LOW);
		}
		else {
			u8ErrorCounts=0;
    3f6c:	1e 8e       	std	Y+30, r1	; 0x1e
			SevSeg_voidDisplay(u8ErrorCounts);
    3f6e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3f70:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <SevSeg_voidDisplay>
    3f74:	fc ce       	rjmp	.-520    	; 0x3d6e <main+0x28>

00003f76 <__udivmodqi4>:
    3f76:	99 1b       	sub	r25, r25
    3f78:	79 e0       	ldi	r23, 0x09	; 9
    3f7a:	04 c0       	rjmp	.+8      	; 0x3f84 <__udivmodqi4_ep>

00003f7c <__udivmodqi4_loop>:
    3f7c:	99 1f       	adc	r25, r25
    3f7e:	96 17       	cp	r25, r22
    3f80:	08 f0       	brcs	.+2      	; 0x3f84 <__udivmodqi4_ep>
    3f82:	96 1b       	sub	r25, r22

00003f84 <__udivmodqi4_ep>:
    3f84:	88 1f       	adc	r24, r24
    3f86:	7a 95       	dec	r23
    3f88:	c9 f7       	brne	.-14     	; 0x3f7c <__udivmodqi4_loop>
    3f8a:	80 95       	com	r24
    3f8c:	08 95       	ret

00003f8e <__prologue_saves__>:
    3f8e:	2f 92       	push	r2
    3f90:	3f 92       	push	r3
    3f92:	4f 92       	push	r4
    3f94:	5f 92       	push	r5
    3f96:	6f 92       	push	r6
    3f98:	7f 92       	push	r7
    3f9a:	8f 92       	push	r8
    3f9c:	9f 92       	push	r9
    3f9e:	af 92       	push	r10
    3fa0:	bf 92       	push	r11
    3fa2:	cf 92       	push	r12
    3fa4:	df 92       	push	r13
    3fa6:	ef 92       	push	r14
    3fa8:	ff 92       	push	r15
    3faa:	0f 93       	push	r16
    3fac:	1f 93       	push	r17
    3fae:	cf 93       	push	r28
    3fb0:	df 93       	push	r29
    3fb2:	cd b7       	in	r28, 0x3d	; 61
    3fb4:	de b7       	in	r29, 0x3e	; 62
    3fb6:	ca 1b       	sub	r28, r26
    3fb8:	db 0b       	sbc	r29, r27
    3fba:	0f b6       	in	r0, 0x3f	; 63
    3fbc:	f8 94       	cli
    3fbe:	de bf       	out	0x3e, r29	; 62
    3fc0:	0f be       	out	0x3f, r0	; 63
    3fc2:	cd bf       	out	0x3d, r28	; 61
    3fc4:	09 94       	ijmp

00003fc6 <__epilogue_restores__>:
    3fc6:	2a 88       	ldd	r2, Y+18	; 0x12
    3fc8:	39 88       	ldd	r3, Y+17	; 0x11
    3fca:	48 88       	ldd	r4, Y+16	; 0x10
    3fcc:	5f 84       	ldd	r5, Y+15	; 0x0f
    3fce:	6e 84       	ldd	r6, Y+14	; 0x0e
    3fd0:	7d 84       	ldd	r7, Y+13	; 0x0d
    3fd2:	8c 84       	ldd	r8, Y+12	; 0x0c
    3fd4:	9b 84       	ldd	r9, Y+11	; 0x0b
    3fd6:	aa 84       	ldd	r10, Y+10	; 0x0a
    3fd8:	b9 84       	ldd	r11, Y+9	; 0x09
    3fda:	c8 84       	ldd	r12, Y+8	; 0x08
    3fdc:	df 80       	ldd	r13, Y+7	; 0x07
    3fde:	ee 80       	ldd	r14, Y+6	; 0x06
    3fe0:	fd 80       	ldd	r15, Y+5	; 0x05
    3fe2:	0c 81       	ldd	r16, Y+4	; 0x04
    3fe4:	1b 81       	ldd	r17, Y+3	; 0x03
    3fe6:	aa 81       	ldd	r26, Y+2	; 0x02
    3fe8:	b9 81       	ldd	r27, Y+1	; 0x01
    3fea:	ce 0f       	add	r28, r30
    3fec:	d1 1d       	adc	r29, r1
    3fee:	0f b6       	in	r0, 0x3f	; 63
    3ff0:	f8 94       	cli
    3ff2:	de bf       	out	0x3e, r29	; 62
    3ff4:	0f be       	out	0x3f, r0	; 63
    3ff6:	cd bf       	out	0x3d, r28	; 61
    3ff8:	ed 01       	movw	r28, r26
    3ffa:	08 95       	ret

00003ffc <_exit>:
    3ffc:	f8 94       	cli

00003ffe <__stop_program>:
    3ffe:	ff cf       	rjmp	.-2      	; 0x3ffe <__stop_program>
