
AVR_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005f62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  00800060  00005f62  00005ff6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003d  008000e0  008000e0  00006076  2**0
                  ALLOC
  3 .stab         00006438  00000000  00000000  00006078  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e5b  00000000  00000000  0000c4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000e30b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000e46b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000e5fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0001063f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00011740  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000126c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00012844  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00012b06  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013394  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b2 1f 	jmp	0x3f64	; 0x3f64 <__vector_1>
       8:	0c 94 df 1f 	jmp	0x3fbe	; 0x3fbe <__vector_2>
       c:	0c 94 0c 20 	jmp	0x4018	; 0x4018 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 34 0a 	jmp	0x1468	; 0x1468 <__vector_6>
      1c:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <__vector_7>
      20:	0c 94 07 0a 	jmp	0x140e	; 0x140e <__vector_8>
      24:	0c 94 ad 09 	jmp	0x135a	; 0x135a <__vector_9>
      28:	0c 94 87 0b 	jmp	0x170e	; 0x170e <__vector_10>
      2c:	0c 94 54 0b 	jmp	0x16a8	; 0x16a8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 64 07 	jmp	0xec8	; 0xec8 <__vector_13>
      38:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__vector_14>
      3c:	0c 94 7f 07 	jmp	0xefe	; 0xefe <__vector_15>
      40:	0c 94 fd 26 	jmp	0x4dfa	; 0x4dfa <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	ff e5       	ldi	r31, 0x5F	; 95
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3e       	cpi	r26, 0xE0	; 224
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 ee       	ldi	r26, 0xE0	; 224
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 31       	cpi	r26, 0x1D	; 29
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <main>
      8a:	0c 94 af 2f 	jmp	0x5f5e	; 0x5f5e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 78 2f 	jmp	0x5ef0	; 0x5ef0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 ec       	ldi	r26, 0xC7	; 199
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 94 2f 	jmp	0x5f28	; 0x5f28 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 84 2f 	jmp	0x5f08	; 0x5f08 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a0 2f 	jmp	0x5f40	; 0x5f40 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 84 2f 	jmp	0x5f08	; 0x5f08 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a0 2f 	jmp	0x5f40	; 0x5f40 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 78 2f 	jmp	0x5ef0	; 0x5ef0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 ec       	ldi	r24, 0xC7	; 199
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 94 2f 	jmp	0x5f28	; 0x5f28 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 80 2f 	jmp	0x5f00	; 0x5f00 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 ec       	ldi	r22, 0xC7	; 199
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9c 2f 	jmp	0x5f38	; 0x5f38 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 84 2f 	jmp	0x5f08	; 0x5f08 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a0 2f 	jmp	0x5f40	; 0x5f40 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 84 2f 	jmp	0x5f08	; 0x5f08 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a0 2f 	jmp	0x5f40	; 0x5f40 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 84 2f 	jmp	0x5f08	; 0x5f08 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a0 2f 	jmp	0x5f40	; 0x5f40 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 88 2f 	jmp	0x5f10	; 0x5f10 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a4 2f 	jmp	0x5f48	; 0x5f48 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <UART_voidInit>:
#include "util/delay.h"

volatile uint8 u8Global_Data;
volatile uint8 u8Global_Receive;

void UART_voidInit(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	uint8 u8Local_temp = 0;
     ca8:	19 82       	std	Y+1, r1	; 0x01

	/* enable RXCIE, RX Complete Interrupt Enable */
	SET_BIT(UCSRB, UCSRB_RXCIE);
     caa:	aa e2       	ldi	r26, 0x2A	; 42
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	ea e2       	ldi	r30, 0x2A	; 42
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	80 68       	ori	r24, 0x80	; 128
     cb6:	8c 93       	st	X, r24
	/* Enable UDRIE, Data Register Empty Interrupt Enable */
	SET_BIT(UCSRB, UCSRB_UDRIE);
     cb8:	aa e2       	ldi	r26, 0x2A	; 42
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	ea e2       	ldi	r30, 0x2A	; 42
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	80 62       	ori	r24, 0x20	; 32
     cc4:	8c 93       	st	X, r24

	/* Select 8-bit data (character size) */
	CLR_BIT(UCSRB, UCSRB_UCSZ2);
     cc6:	aa e2       	ldi	r26, 0x2A	; 42
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	ea e2       	ldi	r30, 0x2A	; 42
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	8b 7f       	andi	r24, 0xFB	; 251
     cd2:	8c 93       	st	X, r24

	/*************** Select UCSRC register ********************/
	SET_BIT(u8Local_temp, UCSRC_URSEL);
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	80 68       	ori	r24, 0x80	; 128
     cd8:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(u8Local_temp, UCSRC_UCSZ0);
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	82 60       	ori	r24, 0x02	; 2
     cde:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(u8Local_temp, UCSRC_UCSZ1);
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	84 60       	ori	r24, 0x04	; 4
     ce4:	89 83       	std	Y+1, r24	; 0x01

	/* Select UART mode */
	CLR_BIT(u8Local_temp, UCSRC_UMSEL);     //Asynchronous Operation
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	8f 7b       	andi	r24, 0xBF	; 191
     cea:	89 83       	std	Y+1, r24	; 0x01
	/* Select parity mode */				//disable parity bits
	CLR_BIT(u8Local_temp, UCSRC_UPM0);
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	8f 7e       	andi	r24, 0xEF	; 239
     cf0:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(u8Local_temp, UCSRC_UPM1);
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	8f 7d       	andi	r24, 0xDF	; 223
     cf6:	89 83       	std	Y+1, r24	; 0x01
	/* Select stop bit */
	CLR_BIT(u8Local_temp, UCSRC_USBS);      //1 stop bit
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	87 7f       	andi	r24, 0xF7	; 247
     cfc:	89 83       	std	Y+1, r24	; 0x01
	/**********************************************************/

	/* Select BaudRate = 9600 */
	UBRRL = BAUD_RATE;
     cfe:	e9 e2       	ldi	r30, 0x29	; 41
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	83 e3       	ldi	r24, 0x33	; 51
     d04:	80 83       	st	Z, r24

	/* Enable RXEN */
	SET_BIT(UCSRB, UCSRB_RXEN);
     d06:	aa e2       	ldi	r26, 0x2A	; 42
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	ea e2       	ldi	r30, 0x2A	; 42
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	80 61       	ori	r24, 0x10	; 16
     d12:	8c 93       	st	X, r24
	/* Enable TXEN */
	SET_BIT(UCSRB, UCSRB_TXEN);
     d14:	aa e2       	ldi	r26, 0x2A	; 42
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	ea e2       	ldi	r30, 0x2A	; 42
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	88 60       	ori	r24, 0x08	; 8
     d20:	8c 93       	st	X, r24

	/**********************************************************/
	UCSRC = u8Local_temp;
     d22:	e0 e4       	ldi	r30, 0x40	; 64
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	89 81       	ldd	r24, Y+1	; 0x01
     d28:	80 83       	st	Z, r24
}
     d2a:	0f 90       	pop	r0
     d2c:	cf 91       	pop	r28
     d2e:	df 91       	pop	r29
     d30:	08 95       	ret

00000d32 <UART_voidSendDataAsynch>:

void UART_voidSendDataAsynch(const uint8 u8DataCpy){
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	0f 92       	push	r0
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	89 83       	std	Y+1, r24	; 0x01
	u8Global_Data = u8DataCpy;
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	80 93 ef 00 	sts	0x00EF, r24
	//UDR = u8DataCpy
}
     d44:	0f 90       	pop	r0
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <UART_voidSendDataSynch>:
void UART_voidSendDataSynch(const uint8 u8DataCpy){
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	0f 92       	push	r0
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	89 83       	std	Y+1, r24	; 0x01
	while ((UCSRA & 0x20) == 0x00);
     d58:	eb e2       	ldi	r30, 0x2B	; 43
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	88 2f       	mov	r24, r24
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	80 72       	andi	r24, 0x20	; 32
     d64:	90 70       	andi	r25, 0x00	; 0
     d66:	00 97       	sbiw	r24, 0x00	; 0
     d68:	b9 f3       	breq	.-18     	; 0xd58 <UART_voidSendDataSynch+0xc>
	UDR = u8DataCpy;
     d6a:	ec e2       	ldi	r30, 0x2C	; 44
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	80 83       	st	Z, r24
}
     d72:	0f 90       	pop	r0
     d74:	cf 91       	pop	r28
     d76:	df 91       	pop	r29
     d78:	08 95       	ret

00000d7a <UART_u8ReceiveData>:

uint8 UART_u8ReceiveData(void){
     d7a:	df 93       	push	r29
     d7c:	cf 93       	push	r28
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62

//	uint8 Result;
	// Wait until Reception Complete
	while((UCSRA & 0x80) == 0x00);
     d82:	eb e2       	ldi	r30, 0x2B	; 43
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	88 23       	and	r24, r24
     d8a:	dc f7       	brge	.-10     	; 0xd82 <UART_u8ReceiveData+0x8>
//	Result = UDR;
	return UDR;
     d8c:	ec e2       	ldi	r30, 0x2C	; 44
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z


}
     d92:	cf 91       	pop	r28
     d94:	df 91       	pop	r29
     d96:	08 95       	ret

00000d98 <UART_voidSendstring>:
void UART_voidSendstring(uint8 *ptr)
{
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	60 97       	sbiw	r28, 0x10	; 16
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	cd bf       	out	0x3d, r28	; 61
     dac:	98 8b       	std	Y+16, r25	; 0x10
     dae:	8f 87       	std	Y+15, r24	; 0x0f
     db0:	7c c0       	rjmp	.+248    	; 0xeaa <UART_voidSendstring+0x112>
	while(*ptr!=0)
	{
		UART_voidSendDataSynch(*ptr);
     db2:	ef 85       	ldd	r30, Y+15	; 0x0f
     db4:	f8 89       	ldd	r31, Y+16	; 0x10
     db6:	80 81       	ld	r24, Z
     db8:	0e 94 a6 06 	call	0xd4c	; 0xd4c <UART_voidSendDataSynch>
		ptr++;
     dbc:	8f 85       	ldd	r24, Y+15	; 0x0f
     dbe:	98 89       	ldd	r25, Y+16	; 0x10
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	98 8b       	std	Y+16, r25	; 0x10
     dc4:	8f 87       	std	Y+15, r24	; 0x0f
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	a8 ec       	ldi	r26, 0xC8	; 200
     dcc:	b2 e4       	ldi	r27, 0x42	; 66
     dce:	8b 87       	std	Y+11, r24	; 0x0b
     dd0:	9c 87       	std	Y+12, r25	; 0x0c
     dd2:	ad 87       	std	Y+13, r26	; 0x0d
     dd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dd6:	6b 85       	ldd	r22, Y+11	; 0x0b
     dd8:	7c 85       	ldd	r23, Y+12	; 0x0c
     dda:	8d 85       	ldd	r24, Y+13	; 0x0d
     ddc:	9e 85       	ldd	r25, Y+14	; 0x0e
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	4a ef       	ldi	r20, 0xFA	; 250
     de4:	54 e4       	ldi	r21, 0x44	; 68
     de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dea:	dc 01       	movw	r26, r24
     dec:	cb 01       	movw	r24, r22
     dee:	8f 83       	std	Y+7, r24	; 0x07
     df0:	98 87       	std	Y+8, r25	; 0x08
     df2:	a9 87       	std	Y+9, r26	; 0x09
     df4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     df6:	6f 81       	ldd	r22, Y+7	; 0x07
     df8:	78 85       	ldd	r23, Y+8	; 0x08
     dfa:	89 85       	ldd	r24, Y+9	; 0x09
     dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	40 e8       	ldi	r20, 0x80	; 128
     e04:	5f e3       	ldi	r21, 0x3F	; 63
     e06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e0a:	88 23       	and	r24, r24
     e0c:	2c f4       	brge	.+10     	; 0xe18 <UART_voidSendstring+0x80>
		__ticks = 1;
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	9e 83       	std	Y+6, r25	; 0x06
     e14:	8d 83       	std	Y+5, r24	; 0x05
     e16:	3f c0       	rjmp	.+126    	; 0xe96 <UART_voidSendstring+0xfe>
	else if (__tmp > 65535)
     e18:	6f 81       	ldd	r22, Y+7	; 0x07
     e1a:	78 85       	ldd	r23, Y+8	; 0x08
     e1c:	89 85       	ldd	r24, Y+9	; 0x09
     e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	3f ef       	ldi	r19, 0xFF	; 255
     e24:	4f e7       	ldi	r20, 0x7F	; 127
     e26:	57 e4       	ldi	r21, 0x47	; 71
     e28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e2c:	18 16       	cp	r1, r24
     e2e:	4c f5       	brge	.+82     	; 0xe82 <UART_voidSendstring+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e30:	6b 85       	ldd	r22, Y+11	; 0x0b
     e32:	7c 85       	ldd	r23, Y+12	; 0x0c
     e34:	8d 85       	ldd	r24, Y+13	; 0x0d
     e36:	9e 85       	ldd	r25, Y+14	; 0x0e
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e2       	ldi	r20, 0x20	; 32
     e3e:	51 e4       	ldi	r21, 0x41	; 65
     e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	bc 01       	movw	r22, r24
     e4a:	cd 01       	movw	r24, r26
     e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	9e 83       	std	Y+6, r25	; 0x06
     e56:	8d 83       	std	Y+5, r24	; 0x05
     e58:	0f c0       	rjmp	.+30     	; 0xe78 <UART_voidSendstring+0xe0>
     e5a:	88 ec       	ldi	r24, 0xC8	; 200
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	9c 83       	std	Y+4, r25	; 0x04
     e60:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	9c 81       	ldd	r25, Y+4	; 0x04
     e66:	01 97       	sbiw	r24, 0x01	; 1
     e68:	f1 f7       	brne	.-4      	; 0xe66 <UART_voidSendstring+0xce>
     e6a:	9c 83       	std	Y+4, r25	; 0x04
     e6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e6e:	8d 81       	ldd	r24, Y+5	; 0x05
     e70:	9e 81       	ldd	r25, Y+6	; 0x06
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	9e 83       	std	Y+6, r25	; 0x06
     e76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e78:	8d 81       	ldd	r24, Y+5	; 0x05
     e7a:	9e 81       	ldd	r25, Y+6	; 0x06
     e7c:	00 97       	sbiw	r24, 0x00	; 0
     e7e:	69 f7       	brne	.-38     	; 0xe5a <UART_voidSendstring+0xc2>
     e80:	14 c0       	rjmp	.+40     	; 0xeaa <UART_voidSendstring+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e82:	6f 81       	ldd	r22, Y+7	; 0x07
     e84:	78 85       	ldd	r23, Y+8	; 0x08
     e86:	89 85       	ldd	r24, Y+9	; 0x09
     e88:	9a 85       	ldd	r25, Y+10	; 0x0a
     e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	9e 83       	std	Y+6, r25	; 0x06
     e94:	8d 83       	std	Y+5, r24	; 0x05
     e96:	8d 81       	ldd	r24, Y+5	; 0x05
     e98:	9e 81       	ldd	r25, Y+6	; 0x06
     e9a:	9a 83       	std	Y+2, r25	; 0x02
     e9c:	89 83       	std	Y+1, r24	; 0x01
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	9a 81       	ldd	r25, Y+2	; 0x02
     ea2:	01 97       	sbiw	r24, 0x01	; 1
     ea4:	f1 f7       	brne	.-4      	; 0xea2 <UART_voidSendstring+0x10a>
     ea6:	9a 83       	std	Y+2, r25	; 0x02
     ea8:	89 83       	std	Y+1, r24	; 0x01


}
void UART_voidSendstring(uint8 *ptr)
{
	while(*ptr!=0)
     eaa:	ef 85       	ldd	r30, Y+15	; 0x0f
     eac:	f8 89       	ldd	r31, Y+16	; 0x10
     eae:	80 81       	ld	r24, Z
     eb0:	88 23       	and	r24, r24
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <UART_voidSendstring+0x11e>
     eb4:	7e cf       	rjmp	.-260    	; 0xdb2 <UART_voidSendstring+0x1a>
	{
		UART_voidSendDataSynch(*ptr);
		ptr++;
		_delay_ms(100);
	}
}
     eb6:	60 96       	adiw	r28, 0x10	; 16
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	de bf       	out	0x3e, r29	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	cd bf       	out	0x3d, r28	; 61
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	08 95       	ret

00000ec8 <__vector_13>:

// __attribute__ -> communicate with LINKER, to not to optimize it
//  USART, RXC, Rx Complete
void __vector_13 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_13 (void)
{
     ec8:	1f 92       	push	r1
     eca:	0f 92       	push	r0
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	0f 92       	push	r0
     ed0:	11 24       	eor	r1, r1
     ed2:	8f 93       	push	r24
     ed4:	ef 93       	push	r30
     ed6:	ff 93       	push	r31
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
	UDR = u8Global_Data;
     ee0:	ec e2       	ldi	r30, 0x2C	; 44
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 91 ef 00 	lds	r24, 0x00EF
     ee8:	80 83       	st	Z, r24
}
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	ff 91       	pop	r31
     ef0:	ef 91       	pop	r30
     ef2:	8f 91       	pop	r24
     ef4:	0f 90       	pop	r0
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	0f 90       	pop	r0
     efa:	1f 90       	pop	r1
     efc:	18 95       	reti

00000efe <__vector_15>:

//USART, TXC, Tx Complete
void __vector_15 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_15 (void)
{
     efe:	1f 92       	push	r1
     f00:	0f 92       	push	r0
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	0f 92       	push	r0
     f06:	11 24       	eor	r1, r1
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62

}
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	0f 90       	pop	r0
     f1a:	1f 90       	pop	r1
     f1c:	18 95       	reti

00000f1e <__vector_14>:

//USART, UDRE, Data Register Empty
void __vector_14 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_14 (void)
{
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	0f 92       	push	r0
     f26:	11 24       	eor	r1, r1
     f28:	2f 93       	push	r18
     f2a:	3f 93       	push	r19
     f2c:	4f 93       	push	r20
     f2e:	5f 93       	push	r21
     f30:	6f 93       	push	r22
     f32:	7f 93       	push	r23
     f34:	8f 93       	push	r24
     f36:	9f 93       	push	r25
     f38:	af 93       	push	r26
     f3a:	bf 93       	push	r27
     f3c:	ef 93       	push	r30
     f3e:	ff 93       	push	r31
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
	UART_voidSendDataAsynch(u8Global_Data);
     f48:	80 91 ef 00 	lds	r24, 0x00EF
     f4c:	0e 94 99 06 	call	0xd32	; 0xd32 <UART_voidSendDataAsynch>
}
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	ff 91       	pop	r31
     f56:	ef 91       	pop	r30
     f58:	bf 91       	pop	r27
     f5a:	af 91       	pop	r26
     f5c:	9f 91       	pop	r25
     f5e:	8f 91       	pop	r24
     f60:	7f 91       	pop	r23
     f62:	6f 91       	pop	r22
     f64:	5f 91       	pop	r21
     f66:	4f 91       	pop	r20
     f68:	3f 91       	pop	r19
     f6a:	2f 91       	pop	r18
     f6c:	0f 90       	pop	r0
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	0f 90       	pop	r0
     f72:	1f 90       	pop	r1
     f74:	18 95       	reti

00000f76 <TIM1_voidInit>:
pf  TIM1_pfCmpBCallBack;
pf  TIM1_pfIcuCallBack;


void TIM1_voidInit(void)
{
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TCCR1A , 0);
	SET_BIT(TCCR1A , 1);
	SET_BIT(TCCR1B , 3);
	CLR_BIT(TCCR1B , 4);
#elif TIM1_MODE ==  TIM1_F_PWM_TO_ICR1
    CLR_BIT(TCCR1A , 0);
     f7e:	af e4       	ldi	r26, 0x4F	; 79
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	ef e4       	ldi	r30, 0x4F	; 79
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	8e 7f       	andi	r24, 0xFE	; 254
     f8a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 1);
     f8c:	af e4       	ldi	r26, 0x4F	; 79
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	ef e4       	ldi	r30, 0x4F	; 79
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	82 60       	ori	r24, 0x02	; 2
     f98:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , 3);
     f9a:	ae e4       	ldi	r26, 0x4E	; 78
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	ee e4       	ldi	r30, 0x4E	; 78
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	88 60       	ori	r24, 0x08	; 8
     fa6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , 4);
     fa8:	ae e4       	ldi	r26, 0x4E	; 78
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	ee e4       	ldi	r30, 0x4E	; 78
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	80 61       	ori	r24, 0x10	; 16
     fb4:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 7);
#elif TIM1_OUTFORM_comA == TIM1_SET_OC1A
    SET_BIT(TCCR1A , 6);
	SET_BIT(TCCR1A , 7);
#elif TIM1_OUTFORM_comA == TIM1_F_NON_INVERT_OC1A
    CLR_BIT(TCCR1A , 6);
     fb6:	af e4       	ldi	r26, 0x4F	; 79
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	ef e4       	ldi	r30, 0x4F	; 79
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	8f 7b       	andi	r24, 0xBF	; 191
     fc2:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 7);
     fc4:	af e4       	ldi	r26, 0x4F	; 79
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	ef e4       	ldi	r30, 0x4F	; 79
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	80 68       	ori	r24, 0x80	; 128
     fd0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 5);
#elif TIM1_OUTFORM_comB == TIM1_SET_OC1B
    SET_BIT(TCCR1A , 4);
	SET_BIT(TCCR1A , 5);
#elif TIM1_OUTFORM_comB == TIM1_F_NON_INVERT_OC1B
    CLR_BIT(TCCR1A , 4);
     fd2:	af e4       	ldi	r26, 0x4F	; 79
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	ef e4       	ldi	r30, 0x4F	; 79
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	8f 7e       	andi	r24, 0xEF	; 239
     fde:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 5);
     fe0:	af e4       	ldi	r26, 0x4F	; 79
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	ef e4       	ldi	r30, 0x4F	; 79
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	80 62       	ori	r24, 0x20	; 32
     fec:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , 4);
	CLR_BIT(TCCR1A , 5);

#endif
  /*Disable timer*/
  TCCR1B &= 0b11111000;
     fee:	ae e4       	ldi	r26, 0x4E	; 78
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	ee e4       	ldi	r30, 0x4E	; 78
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	88 7f       	andi	r24, 0xF8	; 248
     ffa:	8c 93       	st	X, r24
  /*Disable Int OVF-CMPA,B ICU*/
  CLR_BIT(TIMSK , 2 );
     ffc:	a9 e5       	ldi	r26, 0x59	; 89
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e9 e5       	ldi	r30, 0x59	; 89
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	8b 7f       	andi	r24, 0xFB	; 251
    1008:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 3);
    100a:	a9 e5       	ldi	r26, 0x59	; 89
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e9 e5       	ldi	r30, 0x59	; 89
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	87 7f       	andi	r24, 0xF7	; 247
    1016:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 4 );
    1018:	a9 e5       	ldi	r26, 0x59	; 89
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e9 e5       	ldi	r30, 0x59	; 89
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	8f 7e       	andi	r24, 0xEF	; 239
    1024:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 5);
    1026:	a9 e5       	ldi	r26, 0x59	; 89
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e9 e5       	ldi	r30, 0x59	; 89
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	8f 7d       	andi	r24, 0xDF	; 223
    1032:	8c 93       	st	X, r24
  /*Clear Int OVF-CMP flags*/
  SET_BIT(TIFR , 2 );
    1034:	a8 e5       	ldi	r26, 0x58	; 88
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e8 e5       	ldi	r30, 0x58	; 88
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	84 60       	ori	r24, 0x04	; 4
    1040:	8c 93       	st	X, r24
  SET_BIT(TIFR , 3 );
    1042:	a8 e5       	ldi	r26, 0x58	; 88
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e8 e5       	ldi	r30, 0x58	; 88
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	88 60       	ori	r24, 0x08	; 8
    104e:	8c 93       	st	X, r24
  SET_BIT(TIFR , 4 );
    1050:	a8 e5       	ldi	r26, 0x58	; 88
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e8 e5       	ldi	r30, 0x58	; 88
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	80 61       	ori	r24, 0x10	; 16
    105c:	8c 93       	st	X, r24
  SET_BIT(TIFR , 5 );
    105e:	a8 e5       	ldi	r26, 0x58	; 88
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e8 e5       	ldi	r30, 0x58	; 88
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	80 62       	ori	r24, 0x20	; 32
    106a:	8c 93       	st	X, r24

  /*Clear TCNT,OCE1A,B,ICR*/
  OCR1AL = 0 ;
    106c:	ea e4       	ldi	r30, 0x4A	; 74
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	10 82       	st	Z, r1
  OCR1AH = 0 ;
    1072:	eb e4       	ldi	r30, 0x4B	; 75
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	10 82       	st	Z, r1
  OCR1BL = 0 ;
    1078:	e8 e4       	ldi	r30, 0x48	; 72
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	10 82       	st	Z, r1
  OCR1BH = 0 ;
    107e:	e9 e4       	ldi	r30, 0x49	; 73
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	10 82       	st	Z, r1
  TCNT1L = 0 ;
    1084:	ec e4       	ldi	r30, 0x4C	; 76
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	10 82       	st	Z, r1
  TCNT1H = 0 ;
    108a:	ed e4       	ldi	r30, 0x4D	; 77
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	10 82       	st	Z, r1
  ICR1L  = 0 ;
    1090:	e6 e4       	ldi	r30, 0x46	; 70
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	10 82       	st	Z, r1
  ICR1H  = 0 ;
    1096:	e7 e4       	ldi	r30, 0x47	; 71
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	10 82       	st	Z, r1

}
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <TIM1_voidEnable>:
void TIM1_voidEnable(uint8 u8PrescalValCpy)
{
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	0f 92       	push	r0
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B &= 0b11111000;
    10ae:	ae e4       	ldi	r26, 0x4E	; 78
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	ee e4       	ldi	r30, 0x4E	; 78
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	88 7f       	andi	r24, 0xF8	; 248
    10ba:	8c 93       	st	X, r24
	TCCR1B |= u8PrescalValCpy & 0x07 ;// 0b00000111
    10bc:	ae e4       	ldi	r26, 0x4E	; 78
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	ee e4       	ldi	r30, 0x4E	; 78
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	98 2f       	mov	r25, r24
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	87 70       	andi	r24, 0x07	; 7
    10cc:	89 2b       	or	r24, r25
    10ce:	8c 93       	st	X, r24

}
    10d0:	0f 90       	pop	r0
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	08 95       	ret

000010d8 <TIM1_voidDisable>:
void TIM1_voidDisable(void)
{
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000;
    10e0:	ae e4       	ldi	r26, 0x4E	; 78
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	ee e4       	ldi	r30, 0x4E	; 78
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	88 7f       	andi	r24, 0xF8	; 248
    10ec:	8c 93       	st	X, r24

}
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <TIM1_voidEnableOvfInt>:
void TIM1_voidEnableOvfInt(void)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 2 );
    10fc:	a9 e5       	ldi	r26, 0x59	; 89
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e9 e5       	ldi	r30, 0x59	; 89
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	84 60       	ori	r24, 0x04	; 4
    1108:	8c 93       	st	X, r24

}
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <TIM1_voidDisableOvfInt>:
void TIM1_voidDisableOvfInt(void)
{
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 2 );
    1118:	a9 e5       	ldi	r26, 0x59	; 89
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e9 e5       	ldi	r30, 0x59	; 89
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	8b 7f       	andi	r24, 0xFB	; 251
    1124:	8c 93       	st	X, r24

}
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <TIM1_voidEnableCmpAInt>:
void TIM1_voidEnableCmpAInt(void)
{
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 4 );
    1134:	a9 e5       	ldi	r26, 0x59	; 89
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e9 e5       	ldi	r30, 0x59	; 89
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	80 61       	ori	r24, 0x10	; 16
    1140:	8c 93       	st	X, r24

}
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <TIM1_voidDisableCmpAInt>:
void TIM1_voidDisableCmpAInt(void)
{
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 4 );
    1150:	a9 e5       	ldi	r26, 0x59	; 89
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e9 e5       	ldi	r30, 0x59	; 89
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	8f 7e       	andi	r24, 0xEF	; 239
    115c:	8c 93       	st	X, r24

}
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	08 95       	ret

00001164 <TIM1_voidEnableCmpBInt>:
void TIM1_voidEnableCmpBInt(void)
{
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 3 );
    116c:	a9 e5       	ldi	r26, 0x59	; 89
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	e9 e5       	ldi	r30, 0x59	; 89
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	88 60       	ori	r24, 0x08	; 8
    1178:	8c 93       	st	X, r24

}
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <TIM1_voidDisableCmpBInt>:
void TIM1_voidDisableCmpBInt(void)
{
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 3);
    1188:	a9 e5       	ldi	r26, 0x59	; 89
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e9 e5       	ldi	r30, 0x59	; 89
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	87 7f       	andi	r24, 0xF7	; 247
    1194:	8c 93       	st	X, r24

}
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	08 95       	ret

0000119c <TIM1_voidEnableIcuInt>:
void TIM1_voidEnableIcuInt(void)
{
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 5 );
    11a4:	a9 e5       	ldi	r26, 0x59	; 89
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e9 e5       	ldi	r30, 0x59	; 89
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	80 62       	ori	r24, 0x20	; 32
    11b0:	8c 93       	st	X, r24
}
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <TIM1_voidDisableIcuInt>:
void TIM1_voidDisableIcuInt(void)
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 5);
    11c0:	a9 e5       	ldi	r26, 0x59	; 89
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e9 e5       	ldi	r30, 0x59	; 89
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	8f 7d       	andi	r24, 0xDF	; 223
    11cc:	8c 93       	st	X, r24
}
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <TIM1_voidSetCallbackOvfInt>:

void TIM1_voidSetCallbackOvfInt(pf pfOvfCalbckCpy)
{
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	00 d0       	rcall	.+0      	; 0x11da <TIM1_voidSetCallbackOvfInt+0x6>
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	9a 83       	std	Y+2, r25	; 0x02
    11e0:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfOvfCallBack = pfOvfCalbckCpy;
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	9a 81       	ldd	r25, Y+2	; 0x02
    11e6:	90 93 f5 00 	sts	0x00F5, r25
    11ea:	80 93 f4 00 	sts	0x00F4, r24
}
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <TIM1_voidSetCallbackCompAInt>:
void TIM1_voidSetCallbackCompAInt(pf pfCompACalbckCpy)
{
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <TIM1_voidSetCallbackCompAInt+0x6>
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	9a 83       	std	Y+2, r25	; 0x02
    1204:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfCmpACallBack = pfCompACalbckCpy;
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	9a 81       	ldd	r25, Y+2	; 0x02
    120a:	90 93 f7 00 	sts	0x00F7, r25
    120e:	80 93 f6 00 	sts	0x00F6, r24
}
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <TIM1_voidSetCallbackCompBInt>:
void TIM1_voidSetCallbackCompBInt(pf pfCompBCalbckCpy)
{
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	00 d0       	rcall	.+0      	; 0x1222 <TIM1_voidSetCallbackCompBInt+0x6>
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	9a 83       	std	Y+2, r25	; 0x02
    1228:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfCmpBCallBack = pfCompBCalbckCpy;
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	9a 81       	ldd	r25, Y+2	; 0x02
    122e:	90 93 f1 00 	sts	0x00F1, r25
    1232:	80 93 f0 00 	sts	0x00F0, r24
}
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <TIM1_voidSetCallbackIcuInt>:
void TIM1_voidSetCallbackIcuInt(pf pfIcuCalbckCpy)
{
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	00 d0       	rcall	.+0      	; 0x1246 <TIM1_voidSetCallbackIcuInt+0x6>
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	9a 83       	std	Y+2, r25	; 0x02
    124c:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfIcuCallBack = pfIcuCalbckCpy;
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	9a 81       	ldd	r25, Y+2	; 0x02
    1252:	90 93 f3 00 	sts	0x00F3, r25
    1256:	80 93 f2 00 	sts	0x00F2, r24
}
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <TIM1_voidSetTimerValue>:
void TIM1_voidSetTimerValue(uint16 u16TimValCpy) //TCNT
{
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	00 d0       	rcall	.+0      	; 0x126a <TIM1_voidSetTimerValue+0x6>
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	9a 83       	std	Y+2, r25	; 0x02
    1270:	89 83       	std	Y+1, r24	; 0x01
	TCNT1L =(uint8) u16TimValCpy;
    1272:	ec e4       	ldi	r30, 0x4C	; 76
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	80 83       	st	Z, r24
	TCNT1H =(uint8) (u16TimValCpy>>8);
    127a:	ed e4       	ldi	r30, 0x4D	; 77
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	9a 81       	ldd	r25, Y+2	; 0x02
    1282:	89 2f       	mov	r24, r25
    1284:	99 27       	eor	r25, r25
    1286:	80 83       	st	Z, r24
	//TCNT1=u16TimValCpy
}
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	08 95       	ret

00001292 <TIM1_voidSetCmpARegValue>:
void TIM1_voidSetCmpARegValue(uint16 u16CmpAValCpy)
{
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	00 d0       	rcall	.+0      	; 0x1298 <TIM1_voidSetCmpARegValue+0x6>
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
    129c:	9a 83       	std	Y+2, r25	; 0x02
    129e:	89 83       	std	Y+1, r24	; 0x01
	OCR1AL= (uint8)u16CmpAValCpy;
    12a0:	ea e4       	ldi	r30, 0x4A	; 74
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	80 83       	st	Z, r24
	OCR1AH= (uint8)(u16CmpAValCpy>>8);
    12a8:	eb e4       	ldi	r30, 0x4B	; 75
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	9a 81       	ldd	r25, Y+2	; 0x02
    12b0:	89 2f       	mov	r24, r25
    12b2:	99 27       	eor	r25, r25
    12b4:	80 83       	st	Z, r24

}
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <TIM1_voidSetCmpBRegValue>:
void TIM1_voidSetCmpBRegValue(uint16 u16CmpBValCpy)
{
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	00 d0       	rcall	.+0      	; 0x12c6 <TIM1_voidSetCmpBRegValue+0x6>
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	9a 83       	std	Y+2, r25	; 0x02
    12cc:	89 83       	std	Y+1, r24	; 0x01
	OCR1BL= (uint8)u16CmpBValCpy;
    12ce:	e8 e4       	ldi	r30, 0x48	; 72
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	80 83       	st	Z, r24
	OCR1BH= (uint8)(u16CmpBValCpy>>8);
    12d6:	e9 e4       	ldi	r30, 0x49	; 73
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	89 81       	ldd	r24, Y+1	; 0x01
    12dc:	9a 81       	ldd	r25, Y+2	; 0x02
    12de:	89 2f       	mov	r24, r25
    12e0:	99 27       	eor	r25, r25
    12e2:	80 83       	st	Z, r24

}
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <TIM1_voidSetIcuRegValue>:
void TIM1_voidSetIcuRegValue(uint16 u16IcuValCpy)
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <TIM1_voidSetIcuRegValue+0x6>
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	9a 83       	std	Y+2, r25	; 0x02
    12fa:	89 83       	std	Y+1, r24	; 0x01
	ICR1=u16IcuValCpy;
    12fc:	e6 e4       	ldi	r30, 0x46	; 70
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	9a 81       	ldd	r25, Y+2	; 0x02
    1304:	91 83       	std	Z+1, r25	; 0x01
    1306:	80 83       	st	Z, r24

}
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	cf 91       	pop	r28
    130e:	df 91       	pop	r29
    1310:	08 95       	ret

00001312 <TIM1_u8ReadTimerValue>:
uint16 TIM1_u8ReadTimerValue(void)
{
    1312:	df 93       	push	r29
    1314:	cf 93       	push	r28
    1316:	00 d0       	rcall	.+0      	; 0x1318 <TIM1_u8ReadTimerValue+0x6>
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
	uint16 u16TcntValueLoc;
	u16TcntValueLoc   = TCNT1H;
    131c:	ed e4       	ldi	r30, 0x4D	; 77
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	88 2f       	mov	r24, r24
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	9a 83       	std	Y+2, r25	; 0x02
    1328:	89 83       	std	Y+1, r24	; 0x01
	u16TcntValueLoc   = (u16TcntValueLoc<<8);
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	9a 81       	ldd	r25, Y+2	; 0x02
    132e:	98 2f       	mov	r25, r24
    1330:	88 27       	eor	r24, r24
    1332:	9a 83       	std	Y+2, r25	; 0x02
    1334:	89 83       	std	Y+1, r24	; 0x01
	u16TcntValueLoc |= TCNT1L;
    1336:	ec e4       	ldi	r30, 0x4C	; 76
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	9a 81       	ldd	r25, Y+2	; 0x02
    1344:	82 2b       	or	r24, r18
    1346:	93 2b       	or	r25, r19
    1348:	9a 83       	std	Y+2, r25	; 0x02
    134a:	89 83       	std	Y+1, r24	; 0x01
	return u16TcntValueLoc;
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <__vector_9>:
/* ISR for overflow*/
void __vector_9(void) __attribute__ ((signal,used));
void __vector_9 (void)
{
    135a:	1f 92       	push	r1
    135c:	0f 92       	push	r0
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	0f 92       	push	r0
    1362:	11 24       	eor	r1, r1
    1364:	2f 93       	push	r18
    1366:	3f 93       	push	r19
    1368:	4f 93       	push	r20
    136a:	5f 93       	push	r21
    136c:	6f 93       	push	r22
    136e:	7f 93       	push	r23
    1370:	8f 93       	push	r24
    1372:	9f 93       	push	r25
    1374:	af 93       	push	r26
    1376:	bf 93       	push	r27
    1378:	ef 93       	push	r30
    137a:	ff 93       	push	r31
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfOvfCallBack();
    1384:	e0 91 f4 00 	lds	r30, 0x00F4
    1388:	f0 91 f5 00 	lds	r31, 0x00F5
    138c:	09 95       	icall

}
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	ff 91       	pop	r31
    1394:	ef 91       	pop	r30
    1396:	bf 91       	pop	r27
    1398:	af 91       	pop	r26
    139a:	9f 91       	pop	r25
    139c:	8f 91       	pop	r24
    139e:	7f 91       	pop	r23
    13a0:	6f 91       	pop	r22
    13a2:	5f 91       	pop	r21
    13a4:	4f 91       	pop	r20
    13a6:	3f 91       	pop	r19
    13a8:	2f 91       	pop	r18
    13aa:	0f 90       	pop	r0
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	0f 90       	pop	r0
    13b0:	1f 90       	pop	r1
    13b2:	18 95       	reti

000013b4 <__vector_7>:
/* ISR for compaA*/

void __vector_7 (void) __attribute__ ((signal,used));
void __vector_7 (void)
{
    13b4:	1f 92       	push	r1
    13b6:	0f 92       	push	r0
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	0f 92       	push	r0
    13bc:	11 24       	eor	r1, r1
    13be:	2f 93       	push	r18
    13c0:	3f 93       	push	r19
    13c2:	4f 93       	push	r20
    13c4:	5f 93       	push	r21
    13c6:	6f 93       	push	r22
    13c8:	7f 93       	push	r23
    13ca:	8f 93       	push	r24
    13cc:	9f 93       	push	r25
    13ce:	af 93       	push	r26
    13d0:	bf 93       	push	r27
    13d2:	ef 93       	push	r30
    13d4:	ff 93       	push	r31
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfCmpACallBack();
    13de:	e0 91 f6 00 	lds	r30, 0x00F6
    13e2:	f0 91 f7 00 	lds	r31, 0x00F7
    13e6:	09 95       	icall
}
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	ff 91       	pop	r31
    13ee:	ef 91       	pop	r30
    13f0:	bf 91       	pop	r27
    13f2:	af 91       	pop	r26
    13f4:	9f 91       	pop	r25
    13f6:	8f 91       	pop	r24
    13f8:	7f 91       	pop	r23
    13fa:	6f 91       	pop	r22
    13fc:	5f 91       	pop	r21
    13fe:	4f 91       	pop	r20
    1400:	3f 91       	pop	r19
    1402:	2f 91       	pop	r18
    1404:	0f 90       	pop	r0
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	0f 90       	pop	r0
    140a:	1f 90       	pop	r1
    140c:	18 95       	reti

0000140e <__vector_8>:
/* ISR for compaB*/

void __vector_8 (void) __attribute__ ((signal,used));
void __vector_8 (void)
{
    140e:	1f 92       	push	r1
    1410:	0f 92       	push	r0
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	0f 92       	push	r0
    1416:	11 24       	eor	r1, r1
    1418:	2f 93       	push	r18
    141a:	3f 93       	push	r19
    141c:	4f 93       	push	r20
    141e:	5f 93       	push	r21
    1420:	6f 93       	push	r22
    1422:	7f 93       	push	r23
    1424:	8f 93       	push	r24
    1426:	9f 93       	push	r25
    1428:	af 93       	push	r26
    142a:	bf 93       	push	r27
    142c:	ef 93       	push	r30
    142e:	ff 93       	push	r31
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfCmpBCallBack();
    1438:	e0 91 f0 00 	lds	r30, 0x00F0
    143c:	f0 91 f1 00 	lds	r31, 0x00F1
    1440:	09 95       	icall
}
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	ff 91       	pop	r31
    1448:	ef 91       	pop	r30
    144a:	bf 91       	pop	r27
    144c:	af 91       	pop	r26
    144e:	9f 91       	pop	r25
    1450:	8f 91       	pop	r24
    1452:	7f 91       	pop	r23
    1454:	6f 91       	pop	r22
    1456:	5f 91       	pop	r21
    1458:	4f 91       	pop	r20
    145a:	3f 91       	pop	r19
    145c:	2f 91       	pop	r18
    145e:	0f 90       	pop	r0
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	0f 90       	pop	r0
    1464:	1f 90       	pop	r1
    1466:	18 95       	reti

00001468 <__vector_6>:
/* ISR for ICU*/

void __vector_6 (void) __attribute__ ((signal,used));
void __vector_6 (void)
{
    1468:	1f 92       	push	r1
    146a:	0f 92       	push	r0
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	0f 92       	push	r0
    1470:	11 24       	eor	r1, r1
    1472:	2f 93       	push	r18
    1474:	3f 93       	push	r19
    1476:	4f 93       	push	r20
    1478:	5f 93       	push	r21
    147a:	6f 93       	push	r22
    147c:	7f 93       	push	r23
    147e:	8f 93       	push	r24
    1480:	9f 93       	push	r25
    1482:	af 93       	push	r26
    1484:	bf 93       	push	r27
    1486:	ef 93       	push	r30
    1488:	ff 93       	push	r31
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfIcuCallBack();
    1492:	e0 91 f2 00 	lds	r30, 0x00F2
    1496:	f0 91 f3 00 	lds	r31, 0x00F3
    149a:	09 95       	icall
}
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	ff 91       	pop	r31
    14a2:	ef 91       	pop	r30
    14a4:	bf 91       	pop	r27
    14a6:	af 91       	pop	r26
    14a8:	9f 91       	pop	r25
    14aa:	8f 91       	pop	r24
    14ac:	7f 91       	pop	r23
    14ae:	6f 91       	pop	r22
    14b0:	5f 91       	pop	r21
    14b2:	4f 91       	pop	r20
    14b4:	3f 91       	pop	r19
    14b6:	2f 91       	pop	r18
    14b8:	0f 90       	pop	r0
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	0f 90       	pop	r0
    14be:	1f 90       	pop	r1
    14c0:	18 95       	reti

000014c2 <TIM1_u16GetIcuValue>:

/*ICU*/


uint16 TIM1_u16GetIcuValue(void)
{
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    14ca:	e6 e4       	ldi	r30, 0x46	; 70
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	91 81       	ldd	r25, Z+1	; 0x01
}
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	08 95       	ret

000014d8 <ICU_voidRisingEdge>:
void ICU_voidRisingEdge(void)
 {
    14d8:	df 93       	push	r29
    14da:	cf 93       	push	r28
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B , 6);
    14e0:	ae e4       	ldi	r26, 0x4E	; 78
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	ee e4       	ldi	r30, 0x4E	; 78
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	80 64       	ori	r24, 0x40	; 64
    14ec:	8c 93       	st	X, r24
 }
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <ICU_voidFallenEdge>:

 void ICU_voidFallenEdge(void)
 {
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B , 6);
    14fc:	ae e4       	ldi	r26, 0x4E	; 78
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	ee e4       	ldi	r30, 0x4E	; 78
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	8f 7b       	andi	r24, 0xBF	; 191
    1508:	8c 93       	st	X, r24
 }
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <TIMER0_voidInit>:

pf TIMER0_pfOVFCallBack = NULL_PTR;
pf TIMER0_pfComCallBack = NULL_PTR;

void TIMER0_voidInit(void)
{
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0,3);
#elif TIMER0_MODE == CTC_MODE
	CLR_BIT(TCCR0,6);
	SET_BIT(TCCR0,3);
#elif TIMER0_MODE == FAST_PWM
	SET_BIT(TCCR0,6);
    1518:	a3 e5       	ldi	r26, 0x53	; 83
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e3 e5       	ldi	r30, 0x53	; 83
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	80 64       	ori	r24, 0x40	; 64
    1524:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
    1526:	a3 e5       	ldi	r26, 0x53	; 83
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e3 e5       	ldi	r30, 0x53	; 83
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	88 60       	ori	r24, 0x08	; 8
    1532:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
#elif TIMER0_OC0_PWM == SET_OC0
	CLR_BIT(TCCR0,4);
	SET_BIT(TCCR0,5);
#elif TIMER0_OC0_PWM == INVERTING_FAST_PWM
	SET_BIT(TCCR0,4);
    1534:	a3 e5       	ldi	r26, 0x53	; 83
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e3 e5       	ldi	r30, 0x53	; 83
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	80 61       	ori	r24, 0x10	; 16
    1540:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
    1542:	a3 e5       	ldi	r26, 0x53	; 83
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e3 e5       	ldi	r30, 0x53	; 83
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	80 62       	ori	r24, 0x20	; 32
    154e:	8c 93       	st	X, r24

//	/*PRESCALAR CONFIG*/
//	TCCR0 = TCCR0 & 0b11111000;
//	TCCR0 |=TIMER0_PRESCALER;

}
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <TIMER0_voidEnable>:

//used to enable and update prescalar
void TIMER0_voidEnable(uint8 u8Prescalar)
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	0f 92       	push	r0
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	89 83       	std	Y+1, r24	; 0x01
	/*PRESCALAR CONFIG*/
	TCCR0 = TCCR0 & 0b11111000;
    1562:	a3 e5       	ldi	r26, 0x53	; 83
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e3 e5       	ldi	r30, 0x53	; 83
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	88 7f       	andi	r24, 0xF8	; 248
    156e:	8c 93       	st	X, r24
	TCCR0 |=u8Prescalar;
    1570:	a3 e5       	ldi	r26, 0x53	; 83
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e3 e5       	ldi	r30, 0x53	; 83
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	90 81       	ld	r25, Z
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	89 2b       	or	r24, r25
    157e:	8c 93       	st	X, r24
}
    1580:	0f 90       	pop	r0
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	08 95       	ret

00001588 <TIMER0_voidDisable>:
void TIMER0_voidDisable(void)
{
    1588:	df 93       	push	r29
    158a:	cf 93       	push	r28
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = TCCR0 & 0b11111000;
    1590:	a3 e5       	ldi	r26, 0x53	; 83
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e3 e5       	ldi	r30, 0x53	; 83
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	88 7f       	andi	r24, 0xF8	; 248
    159c:	8c 93       	st	X, r24
}
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	08 95       	ret

000015a4 <TIMER0_voidEnableOvfInt>:

void TIMER0_voidEnableOvfInt(void)
{
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,0);
    15ac:	a9 e5       	ldi	r26, 0x59	; 89
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e9 e5       	ldi	r30, 0x59	; 89
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	81 60       	ori	r24, 0x01	; 1
    15b8:	8c 93       	st	X, r24
}
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	08 95       	ret

000015c0 <TIMER0_voidDisableOvfInt>:
void TIMER0_voidDisableOvfInt(void)
{
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,0);
    15c8:	a9 e5       	ldi	r26, 0x59	; 89
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e9 e5       	ldi	r30, 0x59	; 89
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	8e 7f       	andi	r24, 0xFE	; 254
    15d4:	8c 93       	st	X, r24
}
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <TIMER0_voidEnableComInt>:


void TIMER0_voidEnableComInt(void)
{
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,1);
    15e4:	a9 e5       	ldi	r26, 0x59	; 89
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e9 e5       	ldi	r30, 0x59	; 89
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	82 60       	ori	r24, 0x02	; 2
    15f0:	8c 93       	st	X, r24
}
    15f2:	cf 91       	pop	r28
    15f4:	df 91       	pop	r29
    15f6:	08 95       	ret

000015f8 <TIMER0_voidDisableComInt>:
void TIMER0_voidDisableComInt(void)
{
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,1);
    1600:	a9 e5       	ldi	r26, 0x59	; 89
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e9 e5       	ldi	r30, 0x59	; 89
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	8d 7f       	andi	r24, 0xFD	; 253
    160c:	8c 93       	st	X, r24
}
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	08 95       	ret

00001614 <TIMER0_voidSetTCNTValue>:


void TIMER0_voidSetTCNTValue(uint8 u8ValueCpy)
{
    1614:	df 93       	push	r29
    1616:	cf 93       	push	r28
    1618:	0f 92       	push	r0
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = u8ValueCpy;
    1620:	e2 e5       	ldi	r30, 0x52	; 82
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	80 83       	st	Z, r24
}
    1628:	0f 90       	pop	r0
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <TIMER0_voidSetOCRValue>:

void TIMER0_voidSetOCRValue(uint8 u8ValueCpy)
{
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	0f 92       	push	r0
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = u8ValueCpy;
    163c:	ec e5       	ldi	r30, 0x5C	; 92
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	80 83       	st	Z, r24
}
    1644:	0f 90       	pop	r0
    1646:	cf 91       	pop	r28
    1648:	df 91       	pop	r29
    164a:	08 95       	ret

0000164c <TIMER0_voidReadTCNTReg>:

uint8 TIMER0_voidReadTCNTReg(void)
{
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    1654:	e2 e5       	ldi	r30, 0x52	; 82
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
}
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <TIMER0_voidSetCallBackOvfInt>:

void TIMER0_voidSetCallBackOvfInt(pf pfOvfcallbackCpy)
{
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	00 d0       	rcall	.+0      	; 0x1666 <TIMER0_voidSetCallBackOvfInt+0x6>
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	9a 83       	std	Y+2, r25	; 0x02
    166c:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_pfOVFCallBack = pfOvfcallbackCpy;
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	9a 81       	ldd	r25, Y+2	; 0x02
    1672:	90 93 e1 00 	sts	0x00E1, r25
    1676:	80 93 e0 00 	sts	0x00E0, r24
}
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	08 95       	ret

00001684 <TIMER0_voidSetCallBackComInt>:


void TIMER0_voidSetCallBackComInt(pf pfComcallbackCpy)
{
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	00 d0       	rcall	.+0      	; 0x168a <TIMER0_voidSetCallBackComInt+0x6>
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
    168e:	9a 83       	std	Y+2, r25	; 0x02
    1690:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_pfComCallBack = pfComcallbackCpy;
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	9a 81       	ldd	r25, Y+2	; 0x02
    1696:	90 93 e3 00 	sts	0x00E3, r25
    169a:	80 93 e2 00 	sts	0x00E2, r24
}
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	cf 91       	pop	r28
    16a4:	df 91       	pop	r29
    16a6:	08 95       	ret

000016a8 <__vector_11>:

//__attribute__ means -> compiler  do not optimize			//12-1=11
void __vector_11 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_11 (void)
{
    16a8:	1f 92       	push	r1
    16aa:	0f 92       	push	r0
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	0f 92       	push	r0
    16b0:	11 24       	eor	r1, r1
    16b2:	2f 93       	push	r18
    16b4:	3f 93       	push	r19
    16b6:	4f 93       	push	r20
    16b8:	5f 93       	push	r21
    16ba:	6f 93       	push	r22
    16bc:	7f 93       	push	r23
    16be:	8f 93       	push	r24
    16c0:	9f 93       	push	r25
    16c2:	af 93       	push	r26
    16c4:	bf 93       	push	r27
    16c6:	ef 93       	push	r30
    16c8:	ff 93       	push	r31
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pfOVFCallBack!= NULL_PTR)
    16d2:	80 91 e0 00 	lds	r24, 0x00E0
    16d6:	90 91 e1 00 	lds	r25, 0x00E1
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	29 f0       	breq	.+10     	; 0x16e8 <__vector_11+0x40>
	{
		TIMER0_pfOVFCallBack();
    16de:	e0 91 e0 00 	lds	r30, 0x00E0
    16e2:	f0 91 e1 00 	lds	r31, 0x00E1
    16e6:	09 95       	icall
	}
	else
	{
		//do nothing
	}
}
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	ff 91       	pop	r31
    16ee:	ef 91       	pop	r30
    16f0:	bf 91       	pop	r27
    16f2:	af 91       	pop	r26
    16f4:	9f 91       	pop	r25
    16f6:	8f 91       	pop	r24
    16f8:	7f 91       	pop	r23
    16fa:	6f 91       	pop	r22
    16fc:	5f 91       	pop	r21
    16fe:	4f 91       	pop	r20
    1700:	3f 91       	pop	r19
    1702:	2f 91       	pop	r18
    1704:	0f 90       	pop	r0
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	0f 90       	pop	r0
    170a:	1f 90       	pop	r1
    170c:	18 95       	reti

0000170e <__vector_10>:

void __vector_10 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_10 (void)
{
    170e:	1f 92       	push	r1
    1710:	0f 92       	push	r0
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	0f 92       	push	r0
    1716:	11 24       	eor	r1, r1
    1718:	2f 93       	push	r18
    171a:	3f 93       	push	r19
    171c:	4f 93       	push	r20
    171e:	5f 93       	push	r21
    1720:	6f 93       	push	r22
    1722:	7f 93       	push	r23
    1724:	8f 93       	push	r24
    1726:	9f 93       	push	r25
    1728:	af 93       	push	r26
    172a:	bf 93       	push	r27
    172c:	ef 93       	push	r30
    172e:	ff 93       	push	r31
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pfComCallBack!= NULL_PTR)
    1738:	80 91 e2 00 	lds	r24, 0x00E2
    173c:	90 91 e3 00 	lds	r25, 0x00E3
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	29 f0       	breq	.+10     	; 0x174e <__vector_10+0x40>
	{
		TIMER0_pfComCallBack();
    1744:	e0 91 e2 00 	lds	r30, 0x00E2
    1748:	f0 91 e3 00 	lds	r31, 0x00E3
    174c:	09 95       	icall
	}
	else
	{
		//do nothing
	}
}
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	ff 91       	pop	r31
    1754:	ef 91       	pop	r30
    1756:	bf 91       	pop	r27
    1758:	af 91       	pop	r26
    175a:	9f 91       	pop	r25
    175c:	8f 91       	pop	r24
    175e:	7f 91       	pop	r23
    1760:	6f 91       	pop	r22
    1762:	5f 91       	pop	r21
    1764:	4f 91       	pop	r20
    1766:	3f 91       	pop	r19
    1768:	2f 91       	pop	r18
    176a:	0f 90       	pop	r0
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	0f 90       	pop	r0
    1770:	1f 90       	pop	r1
    1772:	18 95       	reti

00001774 <SPI_voidMasterInit>:
#include "SPI_interface.h"
#include "SPI_private.h"
#include "SPI_config.h"


void SPI_voidMasterInit(void){
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
	/******Select data order*******/						  // default
	CLR_BIT(SPCR, SPCR_DORD);
    177c:	ad e2       	ldi	r26, 0x2D	; 45
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	ed e2       	ldi	r30, 0x2D	; 45
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	8f 7d       	andi	r24, 0xDF	; 223
    1788:	8c 93       	st	X, r24
	/******Select master******/
	SET_BIT(SPCR, SPCR_MSTR);
    178a:	ad e2       	ldi	r26, 0x2D	; 45
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	ed e2       	ldi	r30, 0x2D	; 45
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	80 61       	ori	r24, 0x10	; 16
    1796:	8c 93       	st	X, r24
	/******Clock Polarity -> leading edge -> rising ******/	  // default
	CLR_BIT(SPCR, SPCR_CPOL);
    1798:	ad e2       	ldi	r26, 0x2D	; 45
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	ed e2       	ldi	r30, 0x2D	; 45
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	87 7f       	andi	r24, 0xF7	; 247
    17a4:	8c 93       	st	X, r24
	/******Clock Phase    -> sample first ******/			  // default
	CLR_BIT(SPCR, SPCR_CPHA);
    17a6:	ad e2       	ldi	r26, 0x2D	; 45
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	ed e2       	ldi	r30, 0x2D	; 45
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	8b 7f       	andi	r24, 0xFB	; 251
    17b2:	8c 93       	st	X, r24
	/******Select SPI clock rate******/
	SET_BIT(SPCR, SPCR_SPR0);
    17b4:	ad e2       	ldi	r26, 0x2D	; 45
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	ed e2       	ldi	r30, 0x2D	; 45
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	81 60       	ori	r24, 0x01	; 1
    17c0:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPCR_SPR1);
    17c2:	ad e2       	ldi	r26, 0x2D	; 45
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	ed e2       	ldi	r30, 0x2D	; 45
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	8d 7f       	andi	r24, 0xFD	; 253
    17ce:	8c 93       	st	X, r24
	CLR_BIT(SPSR, SPSR_SPI2X);
    17d0:	ae e2       	ldi	r26, 0x2E	; 46
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	ee e2       	ldi	r30, 0x2E	; 46
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	8e 7f       	andi	r24, 0xFE	; 254
    17dc:	8c 93       	st	X, r24

	/******Enable SPI******/
	SET_BIT(SPCR, SPCR_SPE);
    17de:	ad e2       	ldi	r26, 0x2D	; 45
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	ed e2       	ldi	r30, 0x2D	; 45
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	80 64       	ori	r24, 0x40	; 64
    17ea:	8c 93       	st	X, r24
}
    17ec:	cf 91       	pop	r28
    17ee:	df 91       	pop	r29
    17f0:	08 95       	ret

000017f2 <SPI_voidSlaveInit>:
void SPI_voidSlaveInit(void){
    17f2:	df 93       	push	r29
    17f4:	cf 93       	push	r28
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
	/******Select data order******/
	CLR_BIT(SPCR, SPCR_DORD);								  // default
    17fa:	ad e2       	ldi	r26, 0x2D	; 45
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	ed e2       	ldi	r30, 0x2D	; 45
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	8f 7d       	andi	r24, 0xDF	; 223
    1806:	8c 93       	st	X, r24
	/******Select slave******/
	CLR_BIT(SPCR, SPCR_MSTR);
    1808:	ad e2       	ldi	r26, 0x2D	; 45
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	ed e2       	ldi	r30, 0x2D	; 45
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	8f 7e       	andi	r24, 0xEF	; 239
    1814:	8c 93       	st	X, r24
	/******Clock Polarity -> leading edge -> rising ******/   // default
	CLR_BIT(SPCR, SPCR_CPOL);
    1816:	ad e2       	ldi	r26, 0x2D	; 45
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	ed e2       	ldi	r30, 0x2D	; 45
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	87 7f       	andi	r24, 0xF7	; 247
    1822:	8c 93       	st	X, r24
	/******Clock Phase    -> sample first ******/             // default
	CLR_BIT(SPCR, SPCR_CPHA);
    1824:	ad e2       	ldi	r26, 0x2D	; 45
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	ed e2       	ldi	r30, 0x2D	; 45
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	8b 7f       	andi	r24, 0xFB	; 251
    1830:	8c 93       	st	X, r24

	/******Enable SPI******/
	SET_BIT(SPCR, SPCR_SPE);
    1832:	ad e2       	ldi	r26, 0x2D	; 45
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	ed e2       	ldi	r30, 0x2D	; 45
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	80 64       	ori	r24, 0x40	; 64
    183e:	8c 93       	st	X, r24
}
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <SPI_u8TransceiverDataSynch>:

uint8 SPI_u8TransceiverDataSynch(uint8 u8DataCpy){
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	0f 92       	push	r0
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	89 83       	std	Y+1, r24	; 0x01
	/*****Send Data****/
	SPDR = u8DataCpy;
    1852:	ef e2       	ldi	r30, 0x2F	; 47
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	80 83       	st	Z, r24
	/*****wait until data received****/
	while(GET_BIT(SPSR, SPSR_SPIF)==0);
    185a:	ee e2       	ldi	r30, 0x2E	; 46
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	88 23       	and	r24, r24
    1862:	dc f7       	brge	.-10     	; 0x185a <SPI_u8TransceiverDataSynch+0x14>

	return SPDR;
    1864:	ef e2       	ldi	r30, 0x2F	; 47
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
}
    186a:	0f 90       	pop	r0
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret

00001872 <PASS_u8Setup>:
#include "../KeyPad/KPD_interface.h"

uint8 u8key[5];


uint8* PASS_u8Setup(void){
    1872:	0f 93       	push	r16
    1874:	1f 93       	push	r17
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	0f 92       	push	r0
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
//	while(KPD_u8GetKey() == 0);

	for(uint8 i=0; i<5; i++){
    1880:	19 82       	std	Y+1, r1	; 0x01
    1882:	0c c0       	rjmp	.+24     	; 0x189c <PASS_u8Setup+0x2a>
		u8key[i] = KPD_u8GetKey();
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	08 2f       	mov	r16, r24
    1888:	10 e0       	ldi	r17, 0x00	; 0
    188a:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <KPD_u8GetKey>
    188e:	f8 01       	movw	r30, r16
    1890:	e8 50       	subi	r30, 0x08	; 8
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	80 83       	st	Z, r24


uint8* PASS_u8Setup(void){
//	while(KPD_u8GetKey() == 0);

	for(uint8 i=0; i<5; i++){
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	8f 5f       	subi	r24, 0xFF	; 255
    189a:	89 83       	std	Y+1, r24	; 0x01
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	85 30       	cpi	r24, 0x05	; 5
    18a0:	88 f3       	brcs	.-30     	; 0x1884 <PASS_u8Setup+0x12>
		u8key[i] = KPD_u8GetKey();
	}
	return u8key;
    18a2:	88 ef       	ldi	r24, 0xF8	; 248
    18a4:	90 e0       	ldi	r25, 0x00	; 0
}
    18a6:	0f 90       	pop	r0
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	1f 91       	pop	r17
    18ae:	0f 91       	pop	r16
    18b0:	08 95       	ret

000018b2 <PASS_u8ComparePassword>:

uint8 PASS_u8ComparePassword(uint8 key1, uint8 key2 ){
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	00 d0       	rcall	.+0      	; 0x18b8 <PASS_u8ComparePassword+0x6>
    18b8:	0f 92       	push	r0
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	8a 83       	std	Y+2, r24	; 0x02
    18c0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 u8Error = 0;
    18c2:	19 82       	std	Y+1, r1	; 0x01
	if(key1 == key2){
    18c4:	9a 81       	ldd	r25, Y+2	; 0x02
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	98 17       	cp	r25, r24
    18ca:	11 f4       	brne	.+4      	; 0x18d0 <PASS_u8ComparePassword+0x1e>
		u8Error = 0;
    18cc:	19 82       	std	Y+1, r1	; 0x01
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <PASS_u8ComparePassword+0x22>
	}
	else{
		u8Error = 1;
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8Error;
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	08 95       	ret

000018e2 <LCD_voidInit>:
#include "../DIO/DIO_interface.h"
#include "LCD_interface.h"
#include "../Password/Password_interface.h"
#include "util/delay.h"

void LCD_voidInit(void){
    18e2:	0f 93       	push	r16
    18e4:	1f 93       	push	r17
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
    18ee:	c4 55       	subi	r28, 0x54	; 84
    18f0:	d0 40       	sbci	r29, 0x00	; 0
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	f8 94       	cli
    18f6:	de bf       	out	0x3e, r29	; 62
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	cd bf       	out	0x3d, r28	; 61
	/* Pin Direction*/
	DIO_voidWritePort(lcd_DATAPORT   , DIO_OUTPUT);
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	61 e0       	ldi	r22, 0x01	; 1
    1900:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <DIO_voidWritePort>
	DIO_voidWritePin (lcd_CONTROLPORT, lcd_RSPIN, DIO_OUTPUT);
    1904:	83 e0       	ldi	r24, 0x03	; 3
    1906:	62 e0       	ldi	r22, 0x02	; 2
    1908:	41 e0       	ldi	r20, 0x01	; 1
    190a:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
	//DIO_voidWritePin (lcd_CONTROLPORT, lcd_RWPIN, DIO_OUTPUT);
	DIO_voidWritePin (lcd_CONTROLPORT, lcd_EPIN , DIO_OUTPUT);
    190e:	83 e0       	ldi	r24, 0x03	; 3
    1910:	63 e0       	ldi	r22, 0x03	; 3
    1912:	41 e0       	ldi	r20, 0x01	; 1
    1914:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
	/* Make Enable Low*/
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    1918:	83 e0       	ldi	r24, 0x03	; 3
    191a:	63 e0       	ldi	r22, 0x03	; 3
    191c:	40 e0       	ldi	r20, 0x00	; 0
    191e:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
    1922:	fe 01       	movw	r30, r28
    1924:	ef 5a       	subi	r30, 0xAF	; 175
    1926:	ff 4f       	sbci	r31, 0xFF	; 255
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	a0 ef       	ldi	r26, 0xF0	; 240
    192e:	b1 e4       	ldi	r27, 0x41	; 65
    1930:	80 83       	st	Z, r24
    1932:	91 83       	std	Z+1, r25	; 0x01
    1934:	a2 83       	std	Z+2, r26	; 0x02
    1936:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1938:	8e 01       	movw	r16, r28
    193a:	03 5b       	subi	r16, 0xB3	; 179
    193c:	1f 4f       	sbci	r17, 0xFF	; 255
    193e:	fe 01       	movw	r30, r28
    1940:	ef 5a       	subi	r30, 0xAF	; 175
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	60 81       	ld	r22, Z
    1946:	71 81       	ldd	r23, Z+1	; 0x01
    1948:	82 81       	ldd	r24, Z+2	; 0x02
    194a:	93 81       	ldd	r25, Z+3	; 0x03
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	4a ef       	ldi	r20, 0xFA	; 250
    1952:	54 e4       	ldi	r21, 0x44	; 68
    1954:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	f8 01       	movw	r30, r16
    195e:	80 83       	st	Z, r24
    1960:	91 83       	std	Z+1, r25	; 0x01
    1962:	a2 83       	std	Z+2, r26	; 0x02
    1964:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1966:	fe 01       	movw	r30, r28
    1968:	e3 5b       	subi	r30, 0xB3	; 179
    196a:	ff 4f       	sbci	r31, 0xFF	; 255
    196c:	60 81       	ld	r22, Z
    196e:	71 81       	ldd	r23, Z+1	; 0x01
    1970:	82 81       	ldd	r24, Z+2	; 0x02
    1972:	93 81       	ldd	r25, Z+3	; 0x03
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	40 e8       	ldi	r20, 0x80	; 128
    197a:	5f e3       	ldi	r21, 0x3F	; 63
    197c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1980:	88 23       	and	r24, r24
    1982:	44 f4       	brge	.+16     	; 0x1994 <LCD_voidInit+0xb2>
		__ticks = 1;
    1984:	fe 01       	movw	r30, r28
    1986:	e5 5b       	subi	r30, 0xB5	; 181
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	91 83       	std	Z+1, r25	; 0x01
    1990:	80 83       	st	Z, r24
    1992:	64 c0       	rjmp	.+200    	; 0x1a5c <LCD_voidInit+0x17a>
	else if (__tmp > 65535)
    1994:	fe 01       	movw	r30, r28
    1996:	e3 5b       	subi	r30, 0xB3	; 179
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	60 81       	ld	r22, Z
    199c:	71 81       	ldd	r23, Z+1	; 0x01
    199e:	82 81       	ldd	r24, Z+2	; 0x02
    19a0:	93 81       	ldd	r25, Z+3	; 0x03
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	3f ef       	ldi	r19, 0xFF	; 255
    19a6:	4f e7       	ldi	r20, 0x7F	; 127
    19a8:	57 e4       	ldi	r21, 0x47	; 71
    19aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19ae:	18 16       	cp	r1, r24
    19b0:	0c f0       	brlt	.+2      	; 0x19b4 <LCD_voidInit+0xd2>
    19b2:	43 c0       	rjmp	.+134    	; 0x1a3a <LCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b4:	fe 01       	movw	r30, r28
    19b6:	ef 5a       	subi	r30, 0xAF	; 175
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	60 81       	ld	r22, Z
    19bc:	71 81       	ldd	r23, Z+1	; 0x01
    19be:	82 81       	ldd	r24, Z+2	; 0x02
    19c0:	93 81       	ldd	r25, Z+3	; 0x03
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	40 e2       	ldi	r20, 0x20	; 32
    19c8:	51 e4       	ldi	r21, 0x41	; 65
    19ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	8e 01       	movw	r16, r28
    19d4:	05 5b       	subi	r16, 0xB5	; 181
    19d6:	1f 4f       	sbci	r17, 0xFF	; 255
    19d8:	bc 01       	movw	r22, r24
    19da:	cd 01       	movw	r24, r26
    19dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	f8 01       	movw	r30, r16
    19e6:	91 83       	std	Z+1, r25	; 0x01
    19e8:	80 83       	st	Z, r24
    19ea:	1f c0       	rjmp	.+62     	; 0x1a2a <LCD_voidInit+0x148>
    19ec:	fe 01       	movw	r30, r28
    19ee:	e7 5b       	subi	r30, 0xB7	; 183
    19f0:	ff 4f       	sbci	r31, 0xFF	; 255
    19f2:	88 ec       	ldi	r24, 0xC8	; 200
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	91 83       	std	Z+1, r25	; 0x01
    19f8:	80 83       	st	Z, r24
    19fa:	fe 01       	movw	r30, r28
    19fc:	e7 5b       	subi	r30, 0xB7	; 183
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	80 81       	ld	r24, Z
    1a02:	91 81       	ldd	r25, Z+1	; 0x01
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	f1 f7       	brne	.-4      	; 0x1a04 <LCD_voidInit+0x122>
    1a08:	fe 01       	movw	r30, r28
    1a0a:	e7 5b       	subi	r30, 0xB7	; 183
    1a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0e:	91 83       	std	Z+1, r25	; 0x01
    1a10:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a12:	de 01       	movw	r26, r28
    1a14:	a5 5b       	subi	r26, 0xB5	; 181
    1a16:	bf 4f       	sbci	r27, 0xFF	; 255
    1a18:	fe 01       	movw	r30, r28
    1a1a:	e5 5b       	subi	r30, 0xB5	; 181
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	80 81       	ld	r24, Z
    1a20:	91 81       	ldd	r25, Z+1	; 0x01
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	11 96       	adiw	r26, 0x01	; 1
    1a26:	9c 93       	st	X, r25
    1a28:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	e5 5b       	subi	r30, 0xB5	; 181
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	80 81       	ld	r24, Z
    1a32:	91 81       	ldd	r25, Z+1	; 0x01
    1a34:	00 97       	sbiw	r24, 0x00	; 0
    1a36:	d1 f6       	brne	.-76     	; 0x19ec <LCD_voidInit+0x10a>
    1a38:	27 c0       	rjmp	.+78     	; 0x1a88 <LCD_voidInit+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3a:	8e 01       	movw	r16, r28
    1a3c:	05 5b       	subi	r16, 0xB5	; 181
    1a3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a40:	fe 01       	movw	r30, r28
    1a42:	e3 5b       	subi	r30, 0xB3	; 179
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	60 81       	ld	r22, Z
    1a48:	71 81       	ldd	r23, Z+1	; 0x01
    1a4a:	82 81       	ldd	r24, Z+2	; 0x02
    1a4c:	93 81       	ldd	r25, Z+3	; 0x03
    1a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	f8 01       	movw	r30, r16
    1a58:	91 83       	std	Z+1, r25	; 0x01
    1a5a:	80 83       	st	Z, r24
    1a5c:	de 01       	movw	r26, r28
    1a5e:	a9 5b       	subi	r26, 0xB9	; 185
    1a60:	bf 4f       	sbci	r27, 0xFF	; 255
    1a62:	fe 01       	movw	r30, r28
    1a64:	e5 5b       	subi	r30, 0xB5	; 181
    1a66:	ff 4f       	sbci	r31, 0xFF	; 255
    1a68:	80 81       	ld	r24, Z
    1a6a:	91 81       	ldd	r25, Z+1	; 0x01
    1a6c:	8d 93       	st	X+, r24
    1a6e:	9c 93       	st	X, r25
    1a70:	fe 01       	movw	r30, r28
    1a72:	e9 5b       	subi	r30, 0xB9	; 185
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	80 81       	ld	r24, Z
    1a78:	91 81       	ldd	r25, Z+1	; 0x01
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	f1 f7       	brne	.-4      	; 0x1a7a <LCD_voidInit+0x198>
    1a7e:	fe 01       	movw	r30, r28
    1a80:	e9 5b       	subi	r30, 0xB9	; 185
    1a82:	ff 4f       	sbci	r31, 0xFF	; 255
    1a84:	91 83       	std	Z+1, r25	; 0x01
    1a86:	80 83       	st	Z, r24

	_delay_ms(30);
	LCD_voidSendCommand(lcd_Home);
    1a88:	82 e0       	ldi	r24, 0x02	; 2
    1a8a:	0e 94 f7 12 	call	0x25ee	; 0x25ee <LCD_voidSendCommand>
    1a8e:	fe 01       	movw	r30, r28
    1a90:	ed 5b       	subi	r30, 0xBD	; 189
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	a0 ea       	ldi	r26, 0xA0	; 160
    1a9a:	b0 e4       	ldi	r27, 0x40	; 64
    1a9c:	80 83       	st	Z, r24
    1a9e:	91 83       	std	Z+1, r25	; 0x01
    1aa0:	a2 83       	std	Z+2, r26	; 0x02
    1aa2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa4:	8e 01       	movw	r16, r28
    1aa6:	01 5c       	subi	r16, 0xC1	; 193
    1aa8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aaa:	fe 01       	movw	r30, r28
    1aac:	ed 5b       	subi	r30, 0xBD	; 189
    1aae:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab0:	60 81       	ld	r22, Z
    1ab2:	71 81       	ldd	r23, Z+1	; 0x01
    1ab4:	82 81       	ldd	r24, Z+2	; 0x02
    1ab6:	93 81       	ldd	r25, Z+3	; 0x03
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	4a ef       	ldi	r20, 0xFA	; 250
    1abe:	54 e4       	ldi	r21, 0x44	; 68
    1ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	f8 01       	movw	r30, r16
    1aca:	80 83       	st	Z, r24
    1acc:	91 83       	std	Z+1, r25	; 0x01
    1ace:	a2 83       	std	Z+2, r26	; 0x02
    1ad0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	ff 96       	adiw	r30, 0x3f	; 63
    1ad6:	60 81       	ld	r22, Z
    1ad8:	71 81       	ldd	r23, Z+1	; 0x01
    1ada:	82 81       	ldd	r24, Z+2	; 0x02
    1adc:	93 81       	ldd	r25, Z+3	; 0x03
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e8       	ldi	r20, 0x80	; 128
    1ae4:	5f e3       	ldi	r21, 0x3F	; 63
    1ae6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aea:	88 23       	and	r24, r24
    1aec:	2c f4       	brge	.+10     	; 0x1af8 <LCD_voidInit+0x216>
		__ticks = 1;
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	9e af       	std	Y+62, r25	; 0x3e
    1af4:	8d af       	std	Y+61, r24	; 0x3d
    1af6:	46 c0       	rjmp	.+140    	; 0x1b84 <LCD_voidInit+0x2a2>
	else if (__tmp > 65535)
    1af8:	fe 01       	movw	r30, r28
    1afa:	ff 96       	adiw	r30, 0x3f	; 63
    1afc:	60 81       	ld	r22, Z
    1afe:	71 81       	ldd	r23, Z+1	; 0x01
    1b00:	82 81       	ldd	r24, Z+2	; 0x02
    1b02:	93 81       	ldd	r25, Z+3	; 0x03
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	3f ef       	ldi	r19, 0xFF	; 255
    1b08:	4f e7       	ldi	r20, 0x7F	; 127
    1b0a:	57 e4       	ldi	r21, 0x47	; 71
    1b0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b10:	18 16       	cp	r1, r24
    1b12:	64 f5       	brge	.+88     	; 0x1b6c <LCD_voidInit+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b14:	fe 01       	movw	r30, r28
    1b16:	ed 5b       	subi	r30, 0xBD	; 189
    1b18:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1a:	60 81       	ld	r22, Z
    1b1c:	71 81       	ldd	r23, Z+1	; 0x01
    1b1e:	82 81       	ldd	r24, Z+2	; 0x02
    1b20:	93 81       	ldd	r25, Z+3	; 0x03
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	40 e2       	ldi	r20, 0x20	; 32
    1b28:	51 e4       	ldi	r21, 0x41	; 65
    1b2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	bc 01       	movw	r22, r24
    1b34:	cd 01       	movw	r24, r26
    1b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	9e af       	std	Y+62, r25	; 0x3e
    1b40:	8d af       	std	Y+61, r24	; 0x3d
    1b42:	0f c0       	rjmp	.+30     	; 0x1b62 <LCD_voidInit+0x280>
    1b44:	88 ec       	ldi	r24, 0xC8	; 200
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	9c af       	std	Y+60, r25	; 0x3c
    1b4a:	8b af       	std	Y+59, r24	; 0x3b
    1b4c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b4e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <LCD_voidInit+0x26e>
    1b54:	9c af       	std	Y+60, r25	; 0x3c
    1b56:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b58:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b5a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	9e af       	std	Y+62, r25	; 0x3e
    1b60:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b62:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b64:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b66:	00 97       	sbiw	r24, 0x00	; 0
    1b68:	69 f7       	brne	.-38     	; 0x1b44 <LCD_voidInit+0x262>
    1b6a:	16 c0       	rjmp	.+44     	; 0x1b98 <LCD_voidInit+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	ff 96       	adiw	r30, 0x3f	; 63
    1b70:	60 81       	ld	r22, Z
    1b72:	71 81       	ldd	r23, Z+1	; 0x01
    1b74:	82 81       	ldd	r24, Z+2	; 0x02
    1b76:	93 81       	ldd	r25, Z+3	; 0x03
    1b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	9e af       	std	Y+62, r25	; 0x3e
    1b82:	8d af       	std	Y+61, r24	; 0x3d
    1b84:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b86:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b88:	9a af       	std	Y+58, r25	; 0x3a
    1b8a:	89 af       	std	Y+57, r24	; 0x39
    1b8c:	89 ad       	ldd	r24, Y+57	; 0x39
    1b8e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	f1 f7       	brne	.-4      	; 0x1b90 <LCD_voidInit+0x2ae>
    1b94:	9a af       	std	Y+58, r25	; 0x3a
    1b96:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);
	LCD_voidSendCommand(lcd_FunctionSet8bit);
    1b98:	88 e3       	ldi	r24, 0x38	; 56
    1b9a:	0e 94 f7 12 	call	0x25ee	; 0x25ee <LCD_voidSendCommand>
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	a0 ea       	ldi	r26, 0xA0	; 160
    1ba4:	b0 e4       	ldi	r27, 0x40	; 64
    1ba6:	8d ab       	std	Y+53, r24	; 0x35
    1ba8:	9e ab       	std	Y+54, r25	; 0x36
    1baa:	af ab       	std	Y+55, r26	; 0x37
    1bac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bae:	6d a9       	ldd	r22, Y+53	; 0x35
    1bb0:	7e a9       	ldd	r23, Y+54	; 0x36
    1bb2:	8f a9       	ldd	r24, Y+55	; 0x37
    1bb4:	98 ad       	ldd	r25, Y+56	; 0x38
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	4a ef       	ldi	r20, 0xFA	; 250
    1bbc:	54 e4       	ldi	r21, 0x44	; 68
    1bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	89 ab       	std	Y+49, r24	; 0x31
    1bc8:	9a ab       	std	Y+50, r25	; 0x32
    1bca:	ab ab       	std	Y+51, r26	; 0x33
    1bcc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bce:	69 a9       	ldd	r22, Y+49	; 0x31
    1bd0:	7a a9       	ldd	r23, Y+50	; 0x32
    1bd2:	8b a9       	ldd	r24, Y+51	; 0x33
    1bd4:	9c a9       	ldd	r25, Y+52	; 0x34
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	40 e8       	ldi	r20, 0x80	; 128
    1bdc:	5f e3       	ldi	r21, 0x3F	; 63
    1bde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1be2:	88 23       	and	r24, r24
    1be4:	2c f4       	brge	.+10     	; 0x1bf0 <LCD_voidInit+0x30e>
		__ticks = 1;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	98 ab       	std	Y+48, r25	; 0x30
    1bec:	8f a7       	std	Y+47, r24	; 0x2f
    1bee:	3f c0       	rjmp	.+126    	; 0x1c6e <LCD_voidInit+0x38c>
	else if (__tmp > 65535)
    1bf0:	69 a9       	ldd	r22, Y+49	; 0x31
    1bf2:	7a a9       	ldd	r23, Y+50	; 0x32
    1bf4:	8b a9       	ldd	r24, Y+51	; 0x33
    1bf6:	9c a9       	ldd	r25, Y+52	; 0x34
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	3f ef       	ldi	r19, 0xFF	; 255
    1bfc:	4f e7       	ldi	r20, 0x7F	; 127
    1bfe:	57 e4       	ldi	r21, 0x47	; 71
    1c00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c04:	18 16       	cp	r1, r24
    1c06:	4c f5       	brge	.+82     	; 0x1c5a <LCD_voidInit+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c08:	6d a9       	ldd	r22, Y+53	; 0x35
    1c0a:	7e a9       	ldd	r23, Y+54	; 0x36
    1c0c:	8f a9       	ldd	r24, Y+55	; 0x37
    1c0e:	98 ad       	ldd	r25, Y+56	; 0x38
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	40 e2       	ldi	r20, 0x20	; 32
    1c16:	51 e4       	ldi	r21, 0x41	; 65
    1c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	bc 01       	movw	r22, r24
    1c22:	cd 01       	movw	r24, r26
    1c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	98 ab       	std	Y+48, r25	; 0x30
    1c2e:	8f a7       	std	Y+47, r24	; 0x2f
    1c30:	0f c0       	rjmp	.+30     	; 0x1c50 <LCD_voidInit+0x36e>
    1c32:	88 ec       	ldi	r24, 0xC8	; 200
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	9e a7       	std	Y+46, r25	; 0x2e
    1c38:	8d a7       	std	Y+45, r24	; 0x2d
    1c3a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c3c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c3e:	01 97       	sbiw	r24, 0x01	; 1
    1c40:	f1 f7       	brne	.-4      	; 0x1c3e <LCD_voidInit+0x35c>
    1c42:	9e a7       	std	Y+46, r25	; 0x2e
    1c44:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c48:	98 a9       	ldd	r25, Y+48	; 0x30
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	98 ab       	std	Y+48, r25	; 0x30
    1c4e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c52:	98 a9       	ldd	r25, Y+48	; 0x30
    1c54:	00 97       	sbiw	r24, 0x00	; 0
    1c56:	69 f7       	brne	.-38     	; 0x1c32 <LCD_voidInit+0x350>
    1c58:	14 c0       	rjmp	.+40     	; 0x1c82 <LCD_voidInit+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c5c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c5e:	8b a9       	ldd	r24, Y+51	; 0x33
    1c60:	9c a9       	ldd	r25, Y+52	; 0x34
    1c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	98 ab       	std	Y+48, r25	; 0x30
    1c6c:	8f a7       	std	Y+47, r24	; 0x2f
    1c6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c70:	98 a9       	ldd	r25, Y+48	; 0x30
    1c72:	9c a7       	std	Y+44, r25	; 0x2c
    1c74:	8b a7       	std	Y+43, r24	; 0x2b
    1c76:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c78:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	f1 f7       	brne	.-4      	; 0x1c7a <LCD_voidInit+0x398>
    1c7e:	9c a7       	std	Y+44, r25	; 0x2c
    1c80:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	LCD_voidSendCommand(lcd_DisplayOn);
    1c82:	8c e0       	ldi	r24, 0x0C	; 12
    1c84:	0e 94 f7 12 	call	0x25ee	; 0x25ee <LCD_voidSendCommand>
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	a0 ea       	ldi	r26, 0xA0	; 160
    1c8e:	b0 e4       	ldi	r27, 0x40	; 64
    1c90:	8f a3       	std	Y+39, r24	; 0x27
    1c92:	98 a7       	std	Y+40, r25	; 0x28
    1c94:	a9 a7       	std	Y+41, r26	; 0x29
    1c96:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c98:	6f a1       	ldd	r22, Y+39	; 0x27
    1c9a:	78 a5       	ldd	r23, Y+40	; 0x28
    1c9c:	89 a5       	ldd	r24, Y+41	; 0x29
    1c9e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	4a ef       	ldi	r20, 0xFA	; 250
    1ca6:	54 e4       	ldi	r21, 0x44	; 68
    1ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	8b a3       	std	Y+35, r24	; 0x23
    1cb2:	9c a3       	std	Y+36, r25	; 0x24
    1cb4:	ad a3       	std	Y+37, r26	; 0x25
    1cb6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cb8:	6b a1       	ldd	r22, Y+35	; 0x23
    1cba:	7c a1       	ldd	r23, Y+36	; 0x24
    1cbc:	8d a1       	ldd	r24, Y+37	; 0x25
    1cbe:	9e a1       	ldd	r25, Y+38	; 0x26
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	40 e8       	ldi	r20, 0x80	; 128
    1cc6:	5f e3       	ldi	r21, 0x3F	; 63
    1cc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ccc:	88 23       	and	r24, r24
    1cce:	2c f4       	brge	.+10     	; 0x1cda <LCD_voidInit+0x3f8>
		__ticks = 1;
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	9a a3       	std	Y+34, r25	; 0x22
    1cd6:	89 a3       	std	Y+33, r24	; 0x21
    1cd8:	3f c0       	rjmp	.+126    	; 0x1d58 <LCD_voidInit+0x476>
	else if (__tmp > 65535)
    1cda:	6b a1       	ldd	r22, Y+35	; 0x23
    1cdc:	7c a1       	ldd	r23, Y+36	; 0x24
    1cde:	8d a1       	ldd	r24, Y+37	; 0x25
    1ce0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	3f ef       	ldi	r19, 0xFF	; 255
    1ce6:	4f e7       	ldi	r20, 0x7F	; 127
    1ce8:	57 e4       	ldi	r21, 0x47	; 71
    1cea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cee:	18 16       	cp	r1, r24
    1cf0:	4c f5       	brge	.+82     	; 0x1d44 <LCD_voidInit+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf2:	6f a1       	ldd	r22, Y+39	; 0x27
    1cf4:	78 a5       	ldd	r23, Y+40	; 0x28
    1cf6:	89 a5       	ldd	r24, Y+41	; 0x29
    1cf8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 e2       	ldi	r20, 0x20	; 32
    1d00:	51 e4       	ldi	r21, 0x41	; 65
    1d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	bc 01       	movw	r22, r24
    1d0c:	cd 01       	movw	r24, r26
    1d0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	9a a3       	std	Y+34, r25	; 0x22
    1d18:	89 a3       	std	Y+33, r24	; 0x21
    1d1a:	0f c0       	rjmp	.+30     	; 0x1d3a <LCD_voidInit+0x458>
    1d1c:	88 ec       	ldi	r24, 0xC8	; 200
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	98 a3       	std	Y+32, r25	; 0x20
    1d22:	8f 8f       	std	Y+31, r24	; 0x1f
    1d24:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d26:	98 a1       	ldd	r25, Y+32	; 0x20
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	f1 f7       	brne	.-4      	; 0x1d28 <LCD_voidInit+0x446>
    1d2c:	98 a3       	std	Y+32, r25	; 0x20
    1d2e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d30:	89 a1       	ldd	r24, Y+33	; 0x21
    1d32:	9a a1       	ldd	r25, Y+34	; 0x22
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	9a a3       	std	Y+34, r25	; 0x22
    1d38:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d3a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d3c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d3e:	00 97       	sbiw	r24, 0x00	; 0
    1d40:	69 f7       	brne	.-38     	; 0x1d1c <LCD_voidInit+0x43a>
    1d42:	14 c0       	rjmp	.+40     	; 0x1d6c <LCD_voidInit+0x48a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d44:	6b a1       	ldd	r22, Y+35	; 0x23
    1d46:	7c a1       	ldd	r23, Y+36	; 0x24
    1d48:	8d a1       	ldd	r24, Y+37	; 0x25
    1d4a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	9a a3       	std	Y+34, r25	; 0x22
    1d56:	89 a3       	std	Y+33, r24	; 0x21
    1d58:	89 a1       	ldd	r24, Y+33	; 0x21
    1d5a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d5c:	9e 8f       	std	Y+30, r25	; 0x1e
    1d5e:	8d 8f       	std	Y+29, r24	; 0x1d
    1d60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d64:	01 97       	sbiw	r24, 0x01	; 1
    1d66:	f1 f7       	brne	.-4      	; 0x1d64 <LCD_voidInit+0x482>
    1d68:	9e 8f       	std	Y+30, r25	; 0x1e
    1d6a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand(lcd_Clear);
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	0e 94 f7 12 	call	0x25ee	; 0x25ee <LCD_voidSendCommand>
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	a0 ea       	ldi	r26, 0xA0	; 160
    1d78:	b0 e4       	ldi	r27, 0x40	; 64
    1d7a:	89 8f       	std	Y+25, r24	; 0x19
    1d7c:	9a 8f       	std	Y+26, r25	; 0x1a
    1d7e:	ab 8f       	std	Y+27, r26	; 0x1b
    1d80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d82:	69 8d       	ldd	r22, Y+25	; 0x19
    1d84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	4a ef       	ldi	r20, 0xFA	; 250
    1d90:	54 e4       	ldi	r21, 0x44	; 68
    1d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	8d 8b       	std	Y+21, r24	; 0x15
    1d9c:	9e 8b       	std	Y+22, r25	; 0x16
    1d9e:	af 8b       	std	Y+23, r26	; 0x17
    1da0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1da2:	6d 89       	ldd	r22, Y+21	; 0x15
    1da4:	7e 89       	ldd	r23, Y+22	; 0x16
    1da6:	8f 89       	ldd	r24, Y+23	; 0x17
    1da8:	98 8d       	ldd	r25, Y+24	; 0x18
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	40 e8       	ldi	r20, 0x80	; 128
    1db0:	5f e3       	ldi	r21, 0x3F	; 63
    1db2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1db6:	88 23       	and	r24, r24
    1db8:	2c f4       	brge	.+10     	; 0x1dc4 <LCD_voidInit+0x4e2>
		__ticks = 1;
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	9c 8b       	std	Y+20, r25	; 0x14
    1dc0:	8b 8b       	std	Y+19, r24	; 0x13
    1dc2:	3f c0       	rjmp	.+126    	; 0x1e42 <LCD_voidInit+0x560>
	else if (__tmp > 65535)
    1dc4:	6d 89       	ldd	r22, Y+21	; 0x15
    1dc6:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dca:	98 8d       	ldd	r25, Y+24	; 0x18
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	3f ef       	ldi	r19, 0xFF	; 255
    1dd0:	4f e7       	ldi	r20, 0x7F	; 127
    1dd2:	57 e4       	ldi	r21, 0x47	; 71
    1dd4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dd8:	18 16       	cp	r1, r24
    1dda:	4c f5       	brge	.+82     	; 0x1e2e <LCD_voidInit+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ddc:	69 8d       	ldd	r22, Y+25	; 0x19
    1dde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1de0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1de2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	40 e2       	ldi	r20, 0x20	; 32
    1dea:	51 e4       	ldi	r21, 0x41	; 65
    1dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	bc 01       	movw	r22, r24
    1df6:	cd 01       	movw	r24, r26
    1df8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	9c 8b       	std	Y+20, r25	; 0x14
    1e02:	8b 8b       	std	Y+19, r24	; 0x13
    1e04:	0f c0       	rjmp	.+30     	; 0x1e24 <LCD_voidInit+0x542>
    1e06:	88 ec       	ldi	r24, 0xC8	; 200
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	9a 8b       	std	Y+18, r25	; 0x12
    1e0c:	89 8b       	std	Y+17, r24	; 0x11
    1e0e:	89 89       	ldd	r24, Y+17	; 0x11
    1e10:	9a 89       	ldd	r25, Y+18	; 0x12
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	f1 f7       	brne	.-4      	; 0x1e12 <LCD_voidInit+0x530>
    1e16:	9a 8b       	std	Y+18, r25	; 0x12
    1e18:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	9c 8b       	std	Y+20, r25	; 0x14
    1e22:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e24:	8b 89       	ldd	r24, Y+19	; 0x13
    1e26:	9c 89       	ldd	r25, Y+20	; 0x14
    1e28:	00 97       	sbiw	r24, 0x00	; 0
    1e2a:	69 f7       	brne	.-38     	; 0x1e06 <LCD_voidInit+0x524>
    1e2c:	14 c0       	rjmp	.+40     	; 0x1e56 <LCD_voidInit+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e30:	7e 89       	ldd	r23, Y+22	; 0x16
    1e32:	8f 89       	ldd	r24, Y+23	; 0x17
    1e34:	98 8d       	ldd	r25, Y+24	; 0x18
    1e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	9c 8b       	std	Y+20, r25	; 0x14
    1e40:	8b 8b       	std	Y+19, r24	; 0x13
    1e42:	8b 89       	ldd	r24, Y+19	; 0x13
    1e44:	9c 89       	ldd	r25, Y+20	; 0x14
    1e46:	98 8b       	std	Y+16, r25	; 0x10
    1e48:	8f 87       	std	Y+15, r24	; 0x0f
    1e4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e4c:	98 89       	ldd	r25, Y+16	; 0x10
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	f1 f7       	brne	.-4      	; 0x1e4e <LCD_voidInit+0x56c>
    1e52:	98 8b       	std	Y+16, r25	; 0x10
    1e54:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	LCD_voidSendCommand(lcd_EntryMode);
    1e56:	86 e0       	ldi	r24, 0x06	; 6
    1e58:	0e 94 f7 12 	call	0x25ee	; 0x25ee <LCD_voidSendCommand>
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	a0 ea       	ldi	r26, 0xA0	; 160
    1e62:	b0 e4       	ldi	r27, 0x40	; 64
    1e64:	8b 87       	std	Y+11, r24	; 0x0b
    1e66:	9c 87       	std	Y+12, r25	; 0x0c
    1e68:	ad 87       	std	Y+13, r26	; 0x0d
    1e6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	4a ef       	ldi	r20, 0xFA	; 250
    1e7a:	54 e4       	ldi	r21, 0x44	; 68
    1e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	8f 83       	std	Y+7, r24	; 0x07
    1e86:	98 87       	std	Y+8, r25	; 0x08
    1e88:	a9 87       	std	Y+9, r26	; 0x09
    1e8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8e:	78 85       	ldd	r23, Y+8	; 0x08
    1e90:	89 85       	ldd	r24, Y+9	; 0x09
    1e92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	40 e8       	ldi	r20, 0x80	; 128
    1e9a:	5f e3       	ldi	r21, 0x3F	; 63
    1e9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ea0:	88 23       	and	r24, r24
    1ea2:	2c f4       	brge	.+10     	; 0x1eae <LCD_voidInit+0x5cc>
		__ticks = 1;
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	9e 83       	std	Y+6, r25	; 0x06
    1eaa:	8d 83       	std	Y+5, r24	; 0x05
    1eac:	3f c0       	rjmp	.+126    	; 0x1f2c <LCD_voidInit+0x64a>
	else if (__tmp > 65535)
    1eae:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb0:	78 85       	ldd	r23, Y+8	; 0x08
    1eb2:	89 85       	ldd	r24, Y+9	; 0x09
    1eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	3f ef       	ldi	r19, 0xFF	; 255
    1eba:	4f e7       	ldi	r20, 0x7F	; 127
    1ebc:	57 e4       	ldi	r21, 0x47	; 71
    1ebe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ec2:	18 16       	cp	r1, r24
    1ec4:	4c f5       	brge	.+82     	; 0x1f18 <LCD_voidInit+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ecc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	40 e2       	ldi	r20, 0x20	; 32
    1ed4:	51 e4       	ldi	r21, 0x41	; 65
    1ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	bc 01       	movw	r22, r24
    1ee0:	cd 01       	movw	r24, r26
    1ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	9e 83       	std	Y+6, r25	; 0x06
    1eec:	8d 83       	std	Y+5, r24	; 0x05
    1eee:	0f c0       	rjmp	.+30     	; 0x1f0e <LCD_voidInit+0x62c>
    1ef0:	88 ec       	ldi	r24, 0xC8	; 200
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	9c 83       	std	Y+4, r25	; 0x04
    1ef6:	8b 83       	std	Y+3, r24	; 0x03
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	9c 81       	ldd	r25, Y+4	; 0x04
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	f1 f7       	brne	.-4      	; 0x1efc <LCD_voidInit+0x61a>
    1f00:	9c 83       	std	Y+4, r25	; 0x04
    1f02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f04:	8d 81       	ldd	r24, Y+5	; 0x05
    1f06:	9e 81       	ldd	r25, Y+6	; 0x06
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	9e 83       	std	Y+6, r25	; 0x06
    1f0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f10:	9e 81       	ldd	r25, Y+6	; 0x06
    1f12:	00 97       	sbiw	r24, 0x00	; 0
    1f14:	69 f7       	brne	.-38     	; 0x1ef0 <LCD_voidInit+0x60e>
    1f16:	14 c0       	rjmp	.+40     	; 0x1f40 <LCD_voidInit+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f18:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1a:	78 85       	ldd	r23, Y+8	; 0x08
    1f1c:	89 85       	ldd	r24, Y+9	; 0x09
    1f1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	9e 83       	std	Y+6, r25	; 0x06
    1f2a:	8d 83       	std	Y+5, r24	; 0x05
    1f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f30:	9a 83       	std	Y+2, r25	; 0x02
    1f32:	89 83       	std	Y+1, r24	; 0x01
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
    1f36:	9a 81       	ldd	r25, Y+2	; 0x02
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <LCD_voidInit+0x656>
    1f3c:	9a 83       	std	Y+2, r25	; 0x02
    1f3e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    1f40:	cc 5a       	subi	r28, 0xAC	; 172
    1f42:	df 4f       	sbci	r29, 0xFF	; 255
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	f8 94       	cli
    1f48:	de bf       	out	0x3e, r29	; 62
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	cd bf       	out	0x3d, r28	; 61
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	1f 91       	pop	r17
    1f54:	0f 91       	pop	r16
    1f56:	08 95       	ret

00001f58 <LCD_voidInit_4bitMode>:
void LCD_voidInit_4bitMode(void){
    1f58:	0f 93       	push	r16
    1f5a:	1f 93       	push	r17
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	c4 55       	subi	r28, 0x54	; 84
    1f66:	d0 40       	sbci	r29, 0x00	; 0
    1f68:	0f b6       	in	r0, 0x3f	; 63
    1f6a:	f8 94       	cli
    1f6c:	de bf       	out	0x3e, r29	; 62
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	cd bf       	out	0x3d, r28	; 61
	/* Pin Direction*/
//	DIO_voidWritePort(lcd_DATAPORT, DIO_OUTPUT);
	DIO_voidWritePin (lcd_DATAPORT, DIO_PIN_NUM_A4, DIO_OUTPUT);
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	64 e0       	ldi	r22, 0x04	; 4
    1f76:	41 e0       	ldi	r20, 0x01	; 1
    1f78:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
	DIO_voidWritePin (lcd_DATAPORT, DIO_PIN_NUM_A5, DIO_OUTPUT);
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	65 e0       	ldi	r22, 0x05	; 5
    1f80:	41 e0       	ldi	r20, 0x01	; 1
    1f82:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
	DIO_voidWritePin (lcd_DATAPORT, DIO_PIN_NUM_A6, DIO_OUTPUT);
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	66 e0       	ldi	r22, 0x06	; 6
    1f8a:	41 e0       	ldi	r20, 0x01	; 1
    1f8c:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
	DIO_voidWritePin (lcd_DATAPORT, DIO_PIN_NUM_A7, DIO_OUTPUT);
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	67 e0       	ldi	r22, 0x07	; 7
    1f94:	41 e0       	ldi	r20, 0x01	; 1
    1f96:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>

	DIO_voidWritePin (lcd_CONTROLPORT, lcd_RSPIN, DIO_OUTPUT);
    1f9a:	83 e0       	ldi	r24, 0x03	; 3
    1f9c:	62 e0       	ldi	r22, 0x02	; 2
    1f9e:	41 e0       	ldi	r20, 0x01	; 1
    1fa0:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
	//DIO_voidWritePin (lcd_CONTROLPORT, lcd_RWPIN, DIO_OUTPUT);
	DIO_voidWritePin (lcd_CONTROLPORT, lcd_EPIN , DIO_OUTPUT);
    1fa4:	83 e0       	ldi	r24, 0x03	; 3
    1fa6:	63 e0       	ldi	r22, 0x03	; 3
    1fa8:	41 e0       	ldi	r20, 0x01	; 1
    1faa:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
	/* Make Enable Low*/
	DIO_voidWritePin (lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    1fae:	83 e0       	ldi	r24, 0x03	; 3
    1fb0:	63 e0       	ldi	r22, 0x03	; 3
    1fb2:	40 e0       	ldi	r20, 0x00	; 0
    1fb4:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
    1fb8:	fe 01       	movw	r30, r28
    1fba:	ef 5a       	subi	r30, 0xAF	; 175
    1fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	a8 e4       	ldi	r26, 0x48	; 72
    1fc4:	b2 e4       	ldi	r27, 0x42	; 66
    1fc6:	80 83       	st	Z, r24
    1fc8:	91 83       	std	Z+1, r25	; 0x01
    1fca:	a2 83       	std	Z+2, r26	; 0x02
    1fcc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fce:	8e 01       	movw	r16, r28
    1fd0:	03 5b       	subi	r16, 0xB3	; 179
    1fd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	ef 5a       	subi	r30, 0xAF	; 175
    1fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fda:	60 81       	ld	r22, Z
    1fdc:	71 81       	ldd	r23, Z+1	; 0x01
    1fde:	82 81       	ldd	r24, Z+2	; 0x02
    1fe0:	93 81       	ldd	r25, Z+3	; 0x03
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	4a ef       	ldi	r20, 0xFA	; 250
    1fe8:	54 e4       	ldi	r21, 0x44	; 68
    1fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	f8 01       	movw	r30, r16
    1ff4:	80 83       	st	Z, r24
    1ff6:	91 83       	std	Z+1, r25	; 0x01
    1ff8:	a2 83       	std	Z+2, r26	; 0x02
    1ffa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	e3 5b       	subi	r30, 0xB3	; 179
    2000:	ff 4f       	sbci	r31, 0xFF	; 255
    2002:	60 81       	ld	r22, Z
    2004:	71 81       	ldd	r23, Z+1	; 0x01
    2006:	82 81       	ldd	r24, Z+2	; 0x02
    2008:	93 81       	ldd	r25, Z+3	; 0x03
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	40 e8       	ldi	r20, 0x80	; 128
    2010:	5f e3       	ldi	r21, 0x3F	; 63
    2012:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2016:	88 23       	and	r24, r24
    2018:	44 f4       	brge	.+16     	; 0x202a <LCD_voidInit_4bitMode+0xd2>
		__ticks = 1;
    201a:	fe 01       	movw	r30, r28
    201c:	e5 5b       	subi	r30, 0xB5	; 181
    201e:	ff 4f       	sbci	r31, 0xFF	; 255
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	91 83       	std	Z+1, r25	; 0x01
    2026:	80 83       	st	Z, r24
    2028:	64 c0       	rjmp	.+200    	; 0x20f2 <LCD_voidInit_4bitMode+0x19a>
	else if (__tmp > 65535)
    202a:	fe 01       	movw	r30, r28
    202c:	e3 5b       	subi	r30, 0xB3	; 179
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	60 81       	ld	r22, Z
    2032:	71 81       	ldd	r23, Z+1	; 0x01
    2034:	82 81       	ldd	r24, Z+2	; 0x02
    2036:	93 81       	ldd	r25, Z+3	; 0x03
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	3f ef       	ldi	r19, 0xFF	; 255
    203c:	4f e7       	ldi	r20, 0x7F	; 127
    203e:	57 e4       	ldi	r21, 0x47	; 71
    2040:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2044:	18 16       	cp	r1, r24
    2046:	0c f0       	brlt	.+2      	; 0x204a <LCD_voidInit_4bitMode+0xf2>
    2048:	43 c0       	rjmp	.+134    	; 0x20d0 <LCD_voidInit_4bitMode+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204a:	fe 01       	movw	r30, r28
    204c:	ef 5a       	subi	r30, 0xAF	; 175
    204e:	ff 4f       	sbci	r31, 0xFF	; 255
    2050:	60 81       	ld	r22, Z
    2052:	71 81       	ldd	r23, Z+1	; 0x01
    2054:	82 81       	ldd	r24, Z+2	; 0x02
    2056:	93 81       	ldd	r25, Z+3	; 0x03
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	40 e2       	ldi	r20, 0x20	; 32
    205e:	51 e4       	ldi	r21, 0x41	; 65
    2060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	8e 01       	movw	r16, r28
    206a:	05 5b       	subi	r16, 0xB5	; 181
    206c:	1f 4f       	sbci	r17, 0xFF	; 255
    206e:	bc 01       	movw	r22, r24
    2070:	cd 01       	movw	r24, r26
    2072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	f8 01       	movw	r30, r16
    207c:	91 83       	std	Z+1, r25	; 0x01
    207e:	80 83       	st	Z, r24
    2080:	1f c0       	rjmp	.+62     	; 0x20c0 <LCD_voidInit_4bitMode+0x168>
    2082:	fe 01       	movw	r30, r28
    2084:	e7 5b       	subi	r30, 0xB7	; 183
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	88 ec       	ldi	r24, 0xC8	; 200
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	91 83       	std	Z+1, r25	; 0x01
    208e:	80 83       	st	Z, r24
    2090:	fe 01       	movw	r30, r28
    2092:	e7 5b       	subi	r30, 0xB7	; 183
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	80 81       	ld	r24, Z
    2098:	91 81       	ldd	r25, Z+1	; 0x01
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	f1 f7       	brne	.-4      	; 0x209a <LCD_voidInit_4bitMode+0x142>
    209e:	fe 01       	movw	r30, r28
    20a0:	e7 5b       	subi	r30, 0xB7	; 183
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	91 83       	std	Z+1, r25	; 0x01
    20a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a8:	de 01       	movw	r26, r28
    20aa:	a5 5b       	subi	r26, 0xB5	; 181
    20ac:	bf 4f       	sbci	r27, 0xFF	; 255
    20ae:	fe 01       	movw	r30, r28
    20b0:	e5 5b       	subi	r30, 0xB5	; 181
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	80 81       	ld	r24, Z
    20b6:	91 81       	ldd	r25, Z+1	; 0x01
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	11 96       	adiw	r26, 0x01	; 1
    20bc:	9c 93       	st	X, r25
    20be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c0:	fe 01       	movw	r30, r28
    20c2:	e5 5b       	subi	r30, 0xB5	; 181
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	80 81       	ld	r24, Z
    20c8:	91 81       	ldd	r25, Z+1	; 0x01
    20ca:	00 97       	sbiw	r24, 0x00	; 0
    20cc:	d1 f6       	brne	.-76     	; 0x2082 <LCD_voidInit_4bitMode+0x12a>
    20ce:	27 c0       	rjmp	.+78     	; 0x211e <LCD_voidInit_4bitMode+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d0:	8e 01       	movw	r16, r28
    20d2:	05 5b       	subi	r16, 0xB5	; 181
    20d4:	1f 4f       	sbci	r17, 0xFF	; 255
    20d6:	fe 01       	movw	r30, r28
    20d8:	e3 5b       	subi	r30, 0xB3	; 179
    20da:	ff 4f       	sbci	r31, 0xFF	; 255
    20dc:	60 81       	ld	r22, Z
    20de:	71 81       	ldd	r23, Z+1	; 0x01
    20e0:	82 81       	ldd	r24, Z+2	; 0x02
    20e2:	93 81       	ldd	r25, Z+3	; 0x03
    20e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	f8 01       	movw	r30, r16
    20ee:	91 83       	std	Z+1, r25	; 0x01
    20f0:	80 83       	st	Z, r24
    20f2:	de 01       	movw	r26, r28
    20f4:	a9 5b       	subi	r26, 0xB9	; 185
    20f6:	bf 4f       	sbci	r27, 0xFF	; 255
    20f8:	fe 01       	movw	r30, r28
    20fa:	e5 5b       	subi	r30, 0xB5	; 181
    20fc:	ff 4f       	sbci	r31, 0xFF	; 255
    20fe:	80 81       	ld	r24, Z
    2100:	91 81       	ldd	r25, Z+1	; 0x01
    2102:	8d 93       	st	X+, r24
    2104:	9c 93       	st	X, r25
    2106:	fe 01       	movw	r30, r28
    2108:	e9 5b       	subi	r30, 0xB9	; 185
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	80 81       	ld	r24, Z
    210e:	91 81       	ldd	r25, Z+1	; 0x01
    2110:	01 97       	sbiw	r24, 0x01	; 1
    2112:	f1 f7       	brne	.-4      	; 0x2110 <LCD_voidInit_4bitMode+0x1b8>
    2114:	fe 01       	movw	r30, r28
    2116:	e9 5b       	subi	r30, 0xB9	; 185
    2118:	ff 4f       	sbci	r31, 0xFF	; 255
    211a:	91 83       	std	Z+1, r25	; 0x01
    211c:	80 83       	st	Z, r24

	_delay_ms(50);
	LCD_voidSendCommand_4bitMode(lcd_Home);
    211e:	82 e0       	ldi	r24, 0x02	; 2
    2120:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_voidSendCommand_4bitMode>
    2124:	fe 01       	movw	r30, r28
    2126:	ed 5b       	subi	r30, 0xBD	; 189
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	a0 ea       	ldi	r26, 0xA0	; 160
    2130:	b0 e4       	ldi	r27, 0x40	; 64
    2132:	80 83       	st	Z, r24
    2134:	91 83       	std	Z+1, r25	; 0x01
    2136:	a2 83       	std	Z+2, r26	; 0x02
    2138:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213a:	8e 01       	movw	r16, r28
    213c:	01 5c       	subi	r16, 0xC1	; 193
    213e:	1f 4f       	sbci	r17, 0xFF	; 255
    2140:	fe 01       	movw	r30, r28
    2142:	ed 5b       	subi	r30, 0xBD	; 189
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	60 81       	ld	r22, Z
    2148:	71 81       	ldd	r23, Z+1	; 0x01
    214a:	82 81       	ldd	r24, Z+2	; 0x02
    214c:	93 81       	ldd	r25, Z+3	; 0x03
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	4a ef       	ldi	r20, 0xFA	; 250
    2154:	54 e4       	ldi	r21, 0x44	; 68
    2156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	f8 01       	movw	r30, r16
    2160:	80 83       	st	Z, r24
    2162:	91 83       	std	Z+1, r25	; 0x01
    2164:	a2 83       	std	Z+2, r26	; 0x02
    2166:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2168:	fe 01       	movw	r30, r28
    216a:	ff 96       	adiw	r30, 0x3f	; 63
    216c:	60 81       	ld	r22, Z
    216e:	71 81       	ldd	r23, Z+1	; 0x01
    2170:	82 81       	ldd	r24, Z+2	; 0x02
    2172:	93 81       	ldd	r25, Z+3	; 0x03
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e8       	ldi	r20, 0x80	; 128
    217a:	5f e3       	ldi	r21, 0x3F	; 63
    217c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2180:	88 23       	and	r24, r24
    2182:	2c f4       	brge	.+10     	; 0x218e <LCD_voidInit_4bitMode+0x236>
		__ticks = 1;
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	9e af       	std	Y+62, r25	; 0x3e
    218a:	8d af       	std	Y+61, r24	; 0x3d
    218c:	46 c0       	rjmp	.+140    	; 0x221a <LCD_voidInit_4bitMode+0x2c2>
	else if (__tmp > 65535)
    218e:	fe 01       	movw	r30, r28
    2190:	ff 96       	adiw	r30, 0x3f	; 63
    2192:	60 81       	ld	r22, Z
    2194:	71 81       	ldd	r23, Z+1	; 0x01
    2196:	82 81       	ldd	r24, Z+2	; 0x02
    2198:	93 81       	ldd	r25, Z+3	; 0x03
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	3f ef       	ldi	r19, 0xFF	; 255
    219e:	4f e7       	ldi	r20, 0x7F	; 127
    21a0:	57 e4       	ldi	r21, 0x47	; 71
    21a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21a6:	18 16       	cp	r1, r24
    21a8:	64 f5       	brge	.+88     	; 0x2202 <LCD_voidInit_4bitMode+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21aa:	fe 01       	movw	r30, r28
    21ac:	ed 5b       	subi	r30, 0xBD	; 189
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	60 81       	ld	r22, Z
    21b2:	71 81       	ldd	r23, Z+1	; 0x01
    21b4:	82 81       	ldd	r24, Z+2	; 0x02
    21b6:	93 81       	ldd	r25, Z+3	; 0x03
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	40 e2       	ldi	r20, 0x20	; 32
    21be:	51 e4       	ldi	r21, 0x41	; 65
    21c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	bc 01       	movw	r22, r24
    21ca:	cd 01       	movw	r24, r26
    21cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	9e af       	std	Y+62, r25	; 0x3e
    21d6:	8d af       	std	Y+61, r24	; 0x3d
    21d8:	0f c0       	rjmp	.+30     	; 0x21f8 <LCD_voidInit_4bitMode+0x2a0>
    21da:	88 ec       	ldi	r24, 0xC8	; 200
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	9c af       	std	Y+60, r25	; 0x3c
    21e0:	8b af       	std	Y+59, r24	; 0x3b
    21e2:	8b ad       	ldd	r24, Y+59	; 0x3b
    21e4:	9c ad       	ldd	r25, Y+60	; 0x3c
    21e6:	01 97       	sbiw	r24, 0x01	; 1
    21e8:	f1 f7       	brne	.-4      	; 0x21e6 <LCD_voidInit_4bitMode+0x28e>
    21ea:	9c af       	std	Y+60, r25	; 0x3c
    21ec:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    21f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    21f2:	01 97       	sbiw	r24, 0x01	; 1
    21f4:	9e af       	std	Y+62, r25	; 0x3e
    21f6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    21fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    21fc:	00 97       	sbiw	r24, 0x00	; 0
    21fe:	69 f7       	brne	.-38     	; 0x21da <LCD_voidInit_4bitMode+0x282>
    2200:	16 c0       	rjmp	.+44     	; 0x222e <LCD_voidInit_4bitMode+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2202:	fe 01       	movw	r30, r28
    2204:	ff 96       	adiw	r30, 0x3f	; 63
    2206:	60 81       	ld	r22, Z
    2208:	71 81       	ldd	r23, Z+1	; 0x01
    220a:	82 81       	ldd	r24, Z+2	; 0x02
    220c:	93 81       	ldd	r25, Z+3	; 0x03
    220e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	9e af       	std	Y+62, r25	; 0x3e
    2218:	8d af       	std	Y+61, r24	; 0x3d
    221a:	8d ad       	ldd	r24, Y+61	; 0x3d
    221c:	9e ad       	ldd	r25, Y+62	; 0x3e
    221e:	9a af       	std	Y+58, r25	; 0x3a
    2220:	89 af       	std	Y+57, r24	; 0x39
    2222:	89 ad       	ldd	r24, Y+57	; 0x39
    2224:	9a ad       	ldd	r25, Y+58	; 0x3a
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	f1 f7       	brne	.-4      	; 0x2226 <LCD_voidInit_4bitMode+0x2ce>
    222a:	9a af       	std	Y+58, r25	; 0x3a
    222c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);
	LCD_voidSendCommand_4bitMode(lcd_FunctionSet4bit);
    222e:	88 e2       	ldi	r24, 0x28	; 40
    2230:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_voidSendCommand_4bitMode>
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	a0 ea       	ldi	r26, 0xA0	; 160
    223a:	b0 e4       	ldi	r27, 0x40	; 64
    223c:	8d ab       	std	Y+53, r24	; 0x35
    223e:	9e ab       	std	Y+54, r25	; 0x36
    2240:	af ab       	std	Y+55, r26	; 0x37
    2242:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2244:	6d a9       	ldd	r22, Y+53	; 0x35
    2246:	7e a9       	ldd	r23, Y+54	; 0x36
    2248:	8f a9       	ldd	r24, Y+55	; 0x37
    224a:	98 ad       	ldd	r25, Y+56	; 0x38
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	4a ef       	ldi	r20, 0xFA	; 250
    2252:	54 e4       	ldi	r21, 0x44	; 68
    2254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	89 ab       	std	Y+49, r24	; 0x31
    225e:	9a ab       	std	Y+50, r25	; 0x32
    2260:	ab ab       	std	Y+51, r26	; 0x33
    2262:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2264:	69 a9       	ldd	r22, Y+49	; 0x31
    2266:	7a a9       	ldd	r23, Y+50	; 0x32
    2268:	8b a9       	ldd	r24, Y+51	; 0x33
    226a:	9c a9       	ldd	r25, Y+52	; 0x34
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	40 e8       	ldi	r20, 0x80	; 128
    2272:	5f e3       	ldi	r21, 0x3F	; 63
    2274:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2278:	88 23       	and	r24, r24
    227a:	2c f4       	brge	.+10     	; 0x2286 <LCD_voidInit_4bitMode+0x32e>
		__ticks = 1;
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	98 ab       	std	Y+48, r25	; 0x30
    2282:	8f a7       	std	Y+47, r24	; 0x2f
    2284:	3f c0       	rjmp	.+126    	; 0x2304 <LCD_voidInit_4bitMode+0x3ac>
	else if (__tmp > 65535)
    2286:	69 a9       	ldd	r22, Y+49	; 0x31
    2288:	7a a9       	ldd	r23, Y+50	; 0x32
    228a:	8b a9       	ldd	r24, Y+51	; 0x33
    228c:	9c a9       	ldd	r25, Y+52	; 0x34
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	3f ef       	ldi	r19, 0xFF	; 255
    2292:	4f e7       	ldi	r20, 0x7F	; 127
    2294:	57 e4       	ldi	r21, 0x47	; 71
    2296:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    229a:	18 16       	cp	r1, r24
    229c:	4c f5       	brge	.+82     	; 0x22f0 <LCD_voidInit_4bitMode+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    229e:	6d a9       	ldd	r22, Y+53	; 0x35
    22a0:	7e a9       	ldd	r23, Y+54	; 0x36
    22a2:	8f a9       	ldd	r24, Y+55	; 0x37
    22a4:	98 ad       	ldd	r25, Y+56	; 0x38
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	40 e2       	ldi	r20, 0x20	; 32
    22ac:	51 e4       	ldi	r21, 0x41	; 65
    22ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	bc 01       	movw	r22, r24
    22b8:	cd 01       	movw	r24, r26
    22ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	98 ab       	std	Y+48, r25	; 0x30
    22c4:	8f a7       	std	Y+47, r24	; 0x2f
    22c6:	0f c0       	rjmp	.+30     	; 0x22e6 <LCD_voidInit_4bitMode+0x38e>
    22c8:	88 ec       	ldi	r24, 0xC8	; 200
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	9e a7       	std	Y+46, r25	; 0x2e
    22ce:	8d a7       	std	Y+45, r24	; 0x2d
    22d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    22d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	f1 f7       	brne	.-4      	; 0x22d4 <LCD_voidInit_4bitMode+0x37c>
    22d8:	9e a7       	std	Y+46, r25	; 0x2e
    22da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    22de:	98 a9       	ldd	r25, Y+48	; 0x30
    22e0:	01 97       	sbiw	r24, 0x01	; 1
    22e2:	98 ab       	std	Y+48, r25	; 0x30
    22e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    22e8:	98 a9       	ldd	r25, Y+48	; 0x30
    22ea:	00 97       	sbiw	r24, 0x00	; 0
    22ec:	69 f7       	brne	.-38     	; 0x22c8 <LCD_voidInit_4bitMode+0x370>
    22ee:	14 c0       	rjmp	.+40     	; 0x2318 <LCD_voidInit_4bitMode+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f0:	69 a9       	ldd	r22, Y+49	; 0x31
    22f2:	7a a9       	ldd	r23, Y+50	; 0x32
    22f4:	8b a9       	ldd	r24, Y+51	; 0x33
    22f6:	9c a9       	ldd	r25, Y+52	; 0x34
    22f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	98 ab       	std	Y+48, r25	; 0x30
    2302:	8f a7       	std	Y+47, r24	; 0x2f
    2304:	8f a5       	ldd	r24, Y+47	; 0x2f
    2306:	98 a9       	ldd	r25, Y+48	; 0x30
    2308:	9c a7       	std	Y+44, r25	; 0x2c
    230a:	8b a7       	std	Y+43, r24	; 0x2b
    230c:	8b a5       	ldd	r24, Y+43	; 0x2b
    230e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	f1 f7       	brne	.-4      	; 0x2310 <LCD_voidInit_4bitMode+0x3b8>
    2314:	9c a7       	std	Y+44, r25	; 0x2c
    2316:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	LCD_voidSendCommand_4bitMode(lcd_DisplayOn);
    2318:	8c e0       	ldi	r24, 0x0C	; 12
    231a:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_voidSendCommand_4bitMode>
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	a0 ea       	ldi	r26, 0xA0	; 160
    2324:	b0 e4       	ldi	r27, 0x40	; 64
    2326:	8f a3       	std	Y+39, r24	; 0x27
    2328:	98 a7       	std	Y+40, r25	; 0x28
    232a:	a9 a7       	std	Y+41, r26	; 0x29
    232c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    232e:	6f a1       	ldd	r22, Y+39	; 0x27
    2330:	78 a5       	ldd	r23, Y+40	; 0x28
    2332:	89 a5       	ldd	r24, Y+41	; 0x29
    2334:	9a a5       	ldd	r25, Y+42	; 0x2a
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	4a ef       	ldi	r20, 0xFA	; 250
    233c:	54 e4       	ldi	r21, 0x44	; 68
    233e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	8b a3       	std	Y+35, r24	; 0x23
    2348:	9c a3       	std	Y+36, r25	; 0x24
    234a:	ad a3       	std	Y+37, r26	; 0x25
    234c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    234e:	6b a1       	ldd	r22, Y+35	; 0x23
    2350:	7c a1       	ldd	r23, Y+36	; 0x24
    2352:	8d a1       	ldd	r24, Y+37	; 0x25
    2354:	9e a1       	ldd	r25, Y+38	; 0x26
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e8       	ldi	r20, 0x80	; 128
    235c:	5f e3       	ldi	r21, 0x3F	; 63
    235e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2362:	88 23       	and	r24, r24
    2364:	2c f4       	brge	.+10     	; 0x2370 <LCD_voidInit_4bitMode+0x418>
		__ticks = 1;
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	9a a3       	std	Y+34, r25	; 0x22
    236c:	89 a3       	std	Y+33, r24	; 0x21
    236e:	3f c0       	rjmp	.+126    	; 0x23ee <LCD_voidInit_4bitMode+0x496>
	else if (__tmp > 65535)
    2370:	6b a1       	ldd	r22, Y+35	; 0x23
    2372:	7c a1       	ldd	r23, Y+36	; 0x24
    2374:	8d a1       	ldd	r24, Y+37	; 0x25
    2376:	9e a1       	ldd	r25, Y+38	; 0x26
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	3f ef       	ldi	r19, 0xFF	; 255
    237c:	4f e7       	ldi	r20, 0x7F	; 127
    237e:	57 e4       	ldi	r21, 0x47	; 71
    2380:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2384:	18 16       	cp	r1, r24
    2386:	4c f5       	brge	.+82     	; 0x23da <LCD_voidInit_4bitMode+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2388:	6f a1       	ldd	r22, Y+39	; 0x27
    238a:	78 a5       	ldd	r23, Y+40	; 0x28
    238c:	89 a5       	ldd	r24, Y+41	; 0x29
    238e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e2       	ldi	r20, 0x20	; 32
    2396:	51 e4       	ldi	r21, 0x41	; 65
    2398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	bc 01       	movw	r22, r24
    23a2:	cd 01       	movw	r24, r26
    23a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	9a a3       	std	Y+34, r25	; 0x22
    23ae:	89 a3       	std	Y+33, r24	; 0x21
    23b0:	0f c0       	rjmp	.+30     	; 0x23d0 <LCD_voidInit_4bitMode+0x478>
    23b2:	88 ec       	ldi	r24, 0xC8	; 200
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	98 a3       	std	Y+32, r25	; 0x20
    23b8:	8f 8f       	std	Y+31, r24	; 0x1f
    23ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23bc:	98 a1       	ldd	r25, Y+32	; 0x20
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	f1 f7       	brne	.-4      	; 0x23be <LCD_voidInit_4bitMode+0x466>
    23c2:	98 a3       	std	Y+32, r25	; 0x20
    23c4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c6:	89 a1       	ldd	r24, Y+33	; 0x21
    23c8:	9a a1       	ldd	r25, Y+34	; 0x22
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	9a a3       	std	Y+34, r25	; 0x22
    23ce:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d0:	89 a1       	ldd	r24, Y+33	; 0x21
    23d2:	9a a1       	ldd	r25, Y+34	; 0x22
    23d4:	00 97       	sbiw	r24, 0x00	; 0
    23d6:	69 f7       	brne	.-38     	; 0x23b2 <LCD_voidInit_4bitMode+0x45a>
    23d8:	14 c0       	rjmp	.+40     	; 0x2402 <LCD_voidInit_4bitMode+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23da:	6b a1       	ldd	r22, Y+35	; 0x23
    23dc:	7c a1       	ldd	r23, Y+36	; 0x24
    23de:	8d a1       	ldd	r24, Y+37	; 0x25
    23e0:	9e a1       	ldd	r25, Y+38	; 0x26
    23e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	9a a3       	std	Y+34, r25	; 0x22
    23ec:	89 a3       	std	Y+33, r24	; 0x21
    23ee:	89 a1       	ldd	r24, Y+33	; 0x21
    23f0:	9a a1       	ldd	r25, Y+34	; 0x22
    23f2:	9e 8f       	std	Y+30, r25	; 0x1e
    23f4:	8d 8f       	std	Y+29, r24	; 0x1d
    23f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	f1 f7       	brne	.-4      	; 0x23fa <LCD_voidInit_4bitMode+0x4a2>
    23fe:	9e 8f       	std	Y+30, r25	; 0x1e
    2400:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand_4bitMode(lcd_Clear);
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_voidSendCommand_4bitMode>
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	a0 ea       	ldi	r26, 0xA0	; 160
    240e:	b0 e4       	ldi	r27, 0x40	; 64
    2410:	89 8f       	std	Y+25, r24	; 0x19
    2412:	9a 8f       	std	Y+26, r25	; 0x1a
    2414:	ab 8f       	std	Y+27, r26	; 0x1b
    2416:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2418:	69 8d       	ldd	r22, Y+25	; 0x19
    241a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    241c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    241e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	4a ef       	ldi	r20, 0xFA	; 250
    2426:	54 e4       	ldi	r21, 0x44	; 68
    2428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	8d 8b       	std	Y+21, r24	; 0x15
    2432:	9e 8b       	std	Y+22, r25	; 0x16
    2434:	af 8b       	std	Y+23, r26	; 0x17
    2436:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2438:	6d 89       	ldd	r22, Y+21	; 0x15
    243a:	7e 89       	ldd	r23, Y+22	; 0x16
    243c:	8f 89       	ldd	r24, Y+23	; 0x17
    243e:	98 8d       	ldd	r25, Y+24	; 0x18
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	40 e8       	ldi	r20, 0x80	; 128
    2446:	5f e3       	ldi	r21, 0x3F	; 63
    2448:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    244c:	88 23       	and	r24, r24
    244e:	2c f4       	brge	.+10     	; 0x245a <LCD_voidInit_4bitMode+0x502>
		__ticks = 1;
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	9c 8b       	std	Y+20, r25	; 0x14
    2456:	8b 8b       	std	Y+19, r24	; 0x13
    2458:	3f c0       	rjmp	.+126    	; 0x24d8 <LCD_voidInit_4bitMode+0x580>
	else if (__tmp > 65535)
    245a:	6d 89       	ldd	r22, Y+21	; 0x15
    245c:	7e 89       	ldd	r23, Y+22	; 0x16
    245e:	8f 89       	ldd	r24, Y+23	; 0x17
    2460:	98 8d       	ldd	r25, Y+24	; 0x18
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	3f ef       	ldi	r19, 0xFF	; 255
    2466:	4f e7       	ldi	r20, 0x7F	; 127
    2468:	57 e4       	ldi	r21, 0x47	; 71
    246a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    246e:	18 16       	cp	r1, r24
    2470:	4c f5       	brge	.+82     	; 0x24c4 <LCD_voidInit_4bitMode+0x56c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2472:	69 8d       	ldd	r22, Y+25	; 0x19
    2474:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2476:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2478:	9c 8d       	ldd	r25, Y+28	; 0x1c
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e2       	ldi	r20, 0x20	; 32
    2480:	51 e4       	ldi	r21, 0x41	; 65
    2482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	bc 01       	movw	r22, r24
    248c:	cd 01       	movw	r24, r26
    248e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	9c 8b       	std	Y+20, r25	; 0x14
    2498:	8b 8b       	std	Y+19, r24	; 0x13
    249a:	0f c0       	rjmp	.+30     	; 0x24ba <LCD_voidInit_4bitMode+0x562>
    249c:	88 ec       	ldi	r24, 0xC8	; 200
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	9a 8b       	std	Y+18, r25	; 0x12
    24a2:	89 8b       	std	Y+17, r24	; 0x11
    24a4:	89 89       	ldd	r24, Y+17	; 0x11
    24a6:	9a 89       	ldd	r25, Y+18	; 0x12
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	f1 f7       	brne	.-4      	; 0x24a8 <LCD_voidInit_4bitMode+0x550>
    24ac:	9a 8b       	std	Y+18, r25	; 0x12
    24ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b0:	8b 89       	ldd	r24, Y+19	; 0x13
    24b2:	9c 89       	ldd	r25, Y+20	; 0x14
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	9c 8b       	std	Y+20, r25	; 0x14
    24b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ba:	8b 89       	ldd	r24, Y+19	; 0x13
    24bc:	9c 89       	ldd	r25, Y+20	; 0x14
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	69 f7       	brne	.-38     	; 0x249c <LCD_voidInit_4bitMode+0x544>
    24c2:	14 c0       	rjmp	.+40     	; 0x24ec <LCD_voidInit_4bitMode+0x594>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c4:	6d 89       	ldd	r22, Y+21	; 0x15
    24c6:	7e 89       	ldd	r23, Y+22	; 0x16
    24c8:	8f 89       	ldd	r24, Y+23	; 0x17
    24ca:	98 8d       	ldd	r25, Y+24	; 0x18
    24cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	9c 8b       	std	Y+20, r25	; 0x14
    24d6:	8b 8b       	std	Y+19, r24	; 0x13
    24d8:	8b 89       	ldd	r24, Y+19	; 0x13
    24da:	9c 89       	ldd	r25, Y+20	; 0x14
    24dc:	98 8b       	std	Y+16, r25	; 0x10
    24de:	8f 87       	std	Y+15, r24	; 0x0f
    24e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24e2:	98 89       	ldd	r25, Y+16	; 0x10
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	f1 f7       	brne	.-4      	; 0x24e4 <LCD_voidInit_4bitMode+0x58c>
    24e8:	98 8b       	std	Y+16, r25	; 0x10
    24ea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	LCD_voidSendCommand_4bitMode(lcd_EntryMode);
    24ec:	86 e0       	ldi	r24, 0x06	; 6
    24ee:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_voidSendCommand_4bitMode>
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	a0 ea       	ldi	r26, 0xA0	; 160
    24f8:	b0 e4       	ldi	r27, 0x40	; 64
    24fa:	8b 87       	std	Y+11, r24	; 0x0b
    24fc:	9c 87       	std	Y+12, r25	; 0x0c
    24fe:	ad 87       	std	Y+13, r26	; 0x0d
    2500:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2502:	6b 85       	ldd	r22, Y+11	; 0x0b
    2504:	7c 85       	ldd	r23, Y+12	; 0x0c
    2506:	8d 85       	ldd	r24, Y+13	; 0x0d
    2508:	9e 85       	ldd	r25, Y+14	; 0x0e
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	4a ef       	ldi	r20, 0xFA	; 250
    2510:	54 e4       	ldi	r21, 0x44	; 68
    2512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	8f 83       	std	Y+7, r24	; 0x07
    251c:	98 87       	std	Y+8, r25	; 0x08
    251e:	a9 87       	std	Y+9, r26	; 0x09
    2520:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2522:	6f 81       	ldd	r22, Y+7	; 0x07
    2524:	78 85       	ldd	r23, Y+8	; 0x08
    2526:	89 85       	ldd	r24, Y+9	; 0x09
    2528:	9a 85       	ldd	r25, Y+10	; 0x0a
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	40 e8       	ldi	r20, 0x80	; 128
    2530:	5f e3       	ldi	r21, 0x3F	; 63
    2532:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2536:	88 23       	and	r24, r24
    2538:	2c f4       	brge	.+10     	; 0x2544 <LCD_voidInit_4bitMode+0x5ec>
		__ticks = 1;
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	9e 83       	std	Y+6, r25	; 0x06
    2540:	8d 83       	std	Y+5, r24	; 0x05
    2542:	3f c0       	rjmp	.+126    	; 0x25c2 <LCD_voidInit_4bitMode+0x66a>
	else if (__tmp > 65535)
    2544:	6f 81       	ldd	r22, Y+7	; 0x07
    2546:	78 85       	ldd	r23, Y+8	; 0x08
    2548:	89 85       	ldd	r24, Y+9	; 0x09
    254a:	9a 85       	ldd	r25, Y+10	; 0x0a
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	3f ef       	ldi	r19, 0xFF	; 255
    2550:	4f e7       	ldi	r20, 0x7F	; 127
    2552:	57 e4       	ldi	r21, 0x47	; 71
    2554:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2558:	18 16       	cp	r1, r24
    255a:	4c f5       	brge	.+82     	; 0x25ae <LCD_voidInit_4bitMode+0x656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    255c:	6b 85       	ldd	r22, Y+11	; 0x0b
    255e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2560:	8d 85       	ldd	r24, Y+13	; 0x0d
    2562:	9e 85       	ldd	r25, Y+14	; 0x0e
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	40 e2       	ldi	r20, 0x20	; 32
    256a:	51 e4       	ldi	r21, 0x41	; 65
    256c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	bc 01       	movw	r22, r24
    2576:	cd 01       	movw	r24, r26
    2578:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	9e 83       	std	Y+6, r25	; 0x06
    2582:	8d 83       	std	Y+5, r24	; 0x05
    2584:	0f c0       	rjmp	.+30     	; 0x25a4 <LCD_voidInit_4bitMode+0x64c>
    2586:	88 ec       	ldi	r24, 0xC8	; 200
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	9c 83       	std	Y+4, r25	; 0x04
    258c:	8b 83       	std	Y+3, r24	; 0x03
    258e:	8b 81       	ldd	r24, Y+3	; 0x03
    2590:	9c 81       	ldd	r25, Y+4	; 0x04
    2592:	01 97       	sbiw	r24, 0x01	; 1
    2594:	f1 f7       	brne	.-4      	; 0x2592 <LCD_voidInit_4bitMode+0x63a>
    2596:	9c 83       	std	Y+4, r25	; 0x04
    2598:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259a:	8d 81       	ldd	r24, Y+5	; 0x05
    259c:	9e 81       	ldd	r25, Y+6	; 0x06
    259e:	01 97       	sbiw	r24, 0x01	; 1
    25a0:	9e 83       	std	Y+6, r25	; 0x06
    25a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a4:	8d 81       	ldd	r24, Y+5	; 0x05
    25a6:	9e 81       	ldd	r25, Y+6	; 0x06
    25a8:	00 97       	sbiw	r24, 0x00	; 0
    25aa:	69 f7       	brne	.-38     	; 0x2586 <LCD_voidInit_4bitMode+0x62e>
    25ac:	14 c0       	rjmp	.+40     	; 0x25d6 <LCD_voidInit_4bitMode+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ae:	6f 81       	ldd	r22, Y+7	; 0x07
    25b0:	78 85       	ldd	r23, Y+8	; 0x08
    25b2:	89 85       	ldd	r24, Y+9	; 0x09
    25b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	9e 83       	std	Y+6, r25	; 0x06
    25c0:	8d 83       	std	Y+5, r24	; 0x05
    25c2:	8d 81       	ldd	r24, Y+5	; 0x05
    25c4:	9e 81       	ldd	r25, Y+6	; 0x06
    25c6:	9a 83       	std	Y+2, r25	; 0x02
    25c8:	89 83       	std	Y+1, r24	; 0x01
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	9a 81       	ldd	r25, Y+2	; 0x02
    25ce:	01 97       	sbiw	r24, 0x01	; 1
    25d0:	f1 f7       	brne	.-4      	; 0x25ce <LCD_voidInit_4bitMode+0x676>
    25d2:	9a 83       	std	Y+2, r25	; 0x02
    25d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    25d6:	cc 5a       	subi	r28, 0xAC	; 172
    25d8:	df 4f       	sbci	r29, 0xFF	; 255
    25da:	0f b6       	in	r0, 0x3f	; 63
    25dc:	f8 94       	cli
    25de:	de bf       	out	0x3e, r29	; 62
    25e0:	0f be       	out	0x3f, r0	; 63
    25e2:	cd bf       	out	0x3d, r28	; 61
    25e4:	cf 91       	pop	r28
    25e6:	df 91       	pop	r29
    25e8:	1f 91       	pop	r17
    25ea:	0f 91       	pop	r16
    25ec:	08 95       	ret

000025ee <LCD_voidSendCommand>:
void LCD_voidSendCommand(uint8 u8CmdCpy){
    25ee:	df 93       	push	r29
    25f0:	cf 93       	push	r28
    25f2:	cd b7       	in	r28, 0x3d	; 61
    25f4:	de b7       	in	r29, 0x3e	; 62
    25f6:	2f 97       	sbiw	r28, 0x0f	; 15
    25f8:	0f b6       	in	r0, 0x3f	; 63
    25fa:	f8 94       	cli
    25fc:	de bf       	out	0x3e, r29	; 62
    25fe:	0f be       	out	0x3f, r0	; 63
    2600:	cd bf       	out	0x3d, r28	; 61
    2602:	8f 87       	std	Y+15, r24	; 0x0f
	/* Command(0) or Data(1) */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_RSPIN, DIO_LOW);
    2604:	83 e0       	ldi	r24, 0x03	; 3
    2606:	62 e0       	ldi	r22, 0x02	; 2
    2608:	40 e0       	ldi	r20, 0x00	; 0
    260a:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
	/* Read(1) or Write(0) */
	//DIO_voidWritePin(lcd_CONTROLPORT, lcd_RWPIN, DIO_LOW);
	/* Write Commands on Data Pins*/
	DIO_voidWritePort(lcd_DATAPORT, u8CmdCpy);
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	6f 85       	ldd	r22, Y+15	; 0x0f
    2612:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <DIO_voidWritePort>
	/* Enable Sequence */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    2616:	83 e0       	ldi	r24, 0x03	; 3
    2618:	63 e0       	ldi	r22, 0x03	; 3
    261a:	41 e0       	ldi	r20, 0x01	; 1
    261c:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	a0 ea       	ldi	r26, 0xA0	; 160
    2626:	b0 e4       	ldi	r27, 0x40	; 64
    2628:	8b 87       	std	Y+11, r24	; 0x0b
    262a:	9c 87       	std	Y+12, r25	; 0x0c
    262c:	ad 87       	std	Y+13, r26	; 0x0d
    262e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2630:	6b 85       	ldd	r22, Y+11	; 0x0b
    2632:	7c 85       	ldd	r23, Y+12	; 0x0c
    2634:	8d 85       	ldd	r24, Y+13	; 0x0d
    2636:	9e 85       	ldd	r25, Y+14	; 0x0e
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	4a ef       	ldi	r20, 0xFA	; 250
    263e:	54 e4       	ldi	r21, 0x44	; 68
    2640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	8f 83       	std	Y+7, r24	; 0x07
    264a:	98 87       	std	Y+8, r25	; 0x08
    264c:	a9 87       	std	Y+9, r26	; 0x09
    264e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2650:	6f 81       	ldd	r22, Y+7	; 0x07
    2652:	78 85       	ldd	r23, Y+8	; 0x08
    2654:	89 85       	ldd	r24, Y+9	; 0x09
    2656:	9a 85       	ldd	r25, Y+10	; 0x0a
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	40 e8       	ldi	r20, 0x80	; 128
    265e:	5f e3       	ldi	r21, 0x3F	; 63
    2660:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2664:	88 23       	and	r24, r24
    2666:	2c f4       	brge	.+10     	; 0x2672 <LCD_voidSendCommand+0x84>
		__ticks = 1;
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	9e 83       	std	Y+6, r25	; 0x06
    266e:	8d 83       	std	Y+5, r24	; 0x05
    2670:	3f c0       	rjmp	.+126    	; 0x26f0 <LCD_voidSendCommand+0x102>
	else if (__tmp > 65535)
    2672:	6f 81       	ldd	r22, Y+7	; 0x07
    2674:	78 85       	ldd	r23, Y+8	; 0x08
    2676:	89 85       	ldd	r24, Y+9	; 0x09
    2678:	9a 85       	ldd	r25, Y+10	; 0x0a
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	3f ef       	ldi	r19, 0xFF	; 255
    267e:	4f e7       	ldi	r20, 0x7F	; 127
    2680:	57 e4       	ldi	r21, 0x47	; 71
    2682:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2686:	18 16       	cp	r1, r24
    2688:	4c f5       	brge	.+82     	; 0x26dc <LCD_voidSendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268a:	6b 85       	ldd	r22, Y+11	; 0x0b
    268c:	7c 85       	ldd	r23, Y+12	; 0x0c
    268e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2690:	9e 85       	ldd	r25, Y+14	; 0x0e
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	40 e2       	ldi	r20, 0x20	; 32
    2698:	51 e4       	ldi	r21, 0x41	; 65
    269a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	bc 01       	movw	r22, r24
    26a4:	cd 01       	movw	r24, r26
    26a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	9e 83       	std	Y+6, r25	; 0x06
    26b0:	8d 83       	std	Y+5, r24	; 0x05
    26b2:	0f c0       	rjmp	.+30     	; 0x26d2 <LCD_voidSendCommand+0xe4>
    26b4:	88 ec       	ldi	r24, 0xC8	; 200
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	9c 83       	std	Y+4, r25	; 0x04
    26ba:	8b 83       	std	Y+3, r24	; 0x03
    26bc:	8b 81       	ldd	r24, Y+3	; 0x03
    26be:	9c 81       	ldd	r25, Y+4	; 0x04
    26c0:	01 97       	sbiw	r24, 0x01	; 1
    26c2:	f1 f7       	brne	.-4      	; 0x26c0 <LCD_voidSendCommand+0xd2>
    26c4:	9c 83       	std	Y+4, r25	; 0x04
    26c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ca:	9e 81       	ldd	r25, Y+6	; 0x06
    26cc:	01 97       	sbiw	r24, 0x01	; 1
    26ce:	9e 83       	std	Y+6, r25	; 0x06
    26d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d2:	8d 81       	ldd	r24, Y+5	; 0x05
    26d4:	9e 81       	ldd	r25, Y+6	; 0x06
    26d6:	00 97       	sbiw	r24, 0x00	; 0
    26d8:	69 f7       	brne	.-38     	; 0x26b4 <LCD_voidSendCommand+0xc6>
    26da:	14 c0       	rjmp	.+40     	; 0x2704 <LCD_voidSendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26dc:	6f 81       	ldd	r22, Y+7	; 0x07
    26de:	78 85       	ldd	r23, Y+8	; 0x08
    26e0:	89 85       	ldd	r24, Y+9	; 0x09
    26e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	9e 83       	std	Y+6, r25	; 0x06
    26ee:	8d 83       	std	Y+5, r24	; 0x05
    26f0:	8d 81       	ldd	r24, Y+5	; 0x05
    26f2:	9e 81       	ldd	r25, Y+6	; 0x06
    26f4:	9a 83       	std	Y+2, r25	; 0x02
    26f6:	89 83       	std	Y+1, r24	; 0x01
    26f8:	89 81       	ldd	r24, Y+1	; 0x01
    26fa:	9a 81       	ldd	r25, Y+2	; 0x02
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	f1 f7       	brne	.-4      	; 0x26fc <LCD_voidSendCommand+0x10e>
    2700:	9a 83       	std	Y+2, r25	; 0x02
    2702:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    2704:	83 e0       	ldi	r24, 0x03	; 3
    2706:	63 e0       	ldi	r22, 0x03	; 3
    2708:	40 e0       	ldi	r20, 0x00	; 0
    270a:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
}
    270e:	2f 96       	adiw	r28, 0x0f	; 15
    2710:	0f b6       	in	r0, 0x3f	; 63
    2712:	f8 94       	cli
    2714:	de bf       	out	0x3e, r29	; 62
    2716:	0f be       	out	0x3f, r0	; 63
    2718:	cd bf       	out	0x3d, r28	; 61
    271a:	cf 91       	pop	r28
    271c:	df 91       	pop	r29
    271e:	08 95       	ret

00002720 <LCD_voidSendCommand_4bitMode>:

void LCD_voidSendCommand_4bitMode(uint8 u8CmdCpy){
    2720:	0f 93       	push	r16
    2722:	1f 93       	push	r17
    2724:	df 93       	push	r29
    2726:	cf 93       	push	r28
    2728:	cd b7       	in	r28, 0x3d	; 61
    272a:	de b7       	in	r29, 0x3e	; 62
    272c:	c1 56       	subi	r28, 0x61	; 97
    272e:	d0 40       	sbci	r29, 0x00	; 0
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	f8 94       	cli
    2734:	de bf       	out	0x3e, r29	; 62
    2736:	0f be       	out	0x3f, r0	; 63
    2738:	cd bf       	out	0x3d, r28	; 61
    273a:	fe 01       	movw	r30, r28
    273c:	ef 59       	subi	r30, 0x9F	; 159
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	80 83       	st	Z, r24
    /* Send Higher nibble of command */
    DIO_voidWritePort(lcd_DATAPORT, (lcd_DATAPORT & 0x0F) | (u8CmdCpy & 0xF0));
    2742:	fe 01       	movw	r30, r28
    2744:	ef 59       	subi	r30, 0x9F	; 159
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	80 81       	ld	r24, Z
    274a:	80 7f       	andi	r24, 0xF0	; 240
    274c:	81 60       	ori	r24, 0x01	; 1
    274e:	98 2f       	mov	r25, r24
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	69 2f       	mov	r22, r25
    2754:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <DIO_voidWritePort>
    /* Command(0) or Data(1) */
    DIO_voidWritePin(lcd_CONTROLPORT, lcd_RSPIN, DIO_LOW);
    2758:	83 e0       	ldi	r24, 0x03	; 3
    275a:	62 e0       	ldi	r22, 0x02	; 2
    275c:	40 e0       	ldi	r20, 0x00	; 0
    275e:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
    /* Read(1) or Write(0) */
    //DIO_voidWritePin(lcd_CONTROLPORT, lcd_RWPIN, DIO_LOW);

    /* Enable Sequence */
    DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    2762:	83 e0       	ldi	r24, 0x03	; 3
    2764:	63 e0       	ldi	r22, 0x03	; 3
    2766:	41 e0       	ldi	r20, 0x01	; 1
    2768:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
    276c:	fe 01       	movw	r30, r28
    276e:	e3 5a       	subi	r30, 0xA3	; 163
    2770:	ff 4f       	sbci	r31, 0xFF	; 255
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	a0 ea       	ldi	r26, 0xA0	; 160
    2778:	b0 e4       	ldi	r27, 0x40	; 64
    277a:	80 83       	st	Z, r24
    277c:	91 83       	std	Z+1, r25	; 0x01
    277e:	a2 83       	std	Z+2, r26	; 0x02
    2780:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2782:	8e 01       	movw	r16, r28
    2784:	07 5a       	subi	r16, 0xA7	; 167
    2786:	1f 4f       	sbci	r17, 0xFF	; 255
    2788:	fe 01       	movw	r30, r28
    278a:	e3 5a       	subi	r30, 0xA3	; 163
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	60 81       	ld	r22, Z
    2790:	71 81       	ldd	r23, Z+1	; 0x01
    2792:	82 81       	ldd	r24, Z+2	; 0x02
    2794:	93 81       	ldd	r25, Z+3	; 0x03
    2796:	2b ea       	ldi	r18, 0xAB	; 171
    2798:	3a ea       	ldi	r19, 0xAA	; 170
    279a:	4a e2       	ldi	r20, 0x2A	; 42
    279c:	50 e4       	ldi	r21, 0x40	; 64
    279e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	f8 01       	movw	r30, r16
    27a8:	80 83       	st	Z, r24
    27aa:	91 83       	std	Z+1, r25	; 0x01
    27ac:	a2 83       	std	Z+2, r26	; 0x02
    27ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27b0:	fe 01       	movw	r30, r28
    27b2:	e7 5a       	subi	r30, 0xA7	; 167
    27b4:	ff 4f       	sbci	r31, 0xFF	; 255
    27b6:	60 81       	ld	r22, Z
    27b8:	71 81       	ldd	r23, Z+1	; 0x01
    27ba:	82 81       	ldd	r24, Z+2	; 0x02
    27bc:	93 81       	ldd	r25, Z+3	; 0x03
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	40 e8       	ldi	r20, 0x80	; 128
    27c4:	5f e3       	ldi	r21, 0x3F	; 63
    27c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27ca:	88 23       	and	r24, r24
    27cc:	34 f4       	brge	.+12     	; 0x27da <LCD_voidSendCommand_4bitMode+0xba>
		__ticks = 1;
    27ce:	fe 01       	movw	r30, r28
    27d0:	e8 5a       	subi	r30, 0xA8	; 168
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	80 83       	st	Z, r24
    27d8:	e0 c0       	rjmp	.+448    	; 0x299a <LCD_voidSendCommand_4bitMode+0x27a>
	else if (__tmp > 255)
    27da:	fe 01       	movw	r30, r28
    27dc:	e7 5a       	subi	r30, 0xA7	; 167
    27de:	ff 4f       	sbci	r31, 0xFF	; 255
    27e0:	60 81       	ld	r22, Z
    27e2:	71 81       	ldd	r23, Z+1	; 0x01
    27e4:	82 81       	ldd	r24, Z+2	; 0x02
    27e6:	93 81       	ldd	r25, Z+3	; 0x03
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	4f e7       	ldi	r20, 0x7F	; 127
    27ee:	53 e4       	ldi	r21, 0x43	; 67
    27f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27f4:	18 16       	cp	r1, r24
    27f6:	0c f0       	brlt	.+2      	; 0x27fa <LCD_voidSendCommand_4bitMode+0xda>
    27f8:	c0 c0       	rjmp	.+384    	; 0x297a <LCD_voidSendCommand_4bitMode+0x25a>
	{
		_delay_ms(__us / 1000.0);
    27fa:	fe 01       	movw	r30, r28
    27fc:	e3 5a       	subi	r30, 0xA3	; 163
    27fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2800:	60 81       	ld	r22, Z
    2802:	71 81       	ldd	r23, Z+1	; 0x01
    2804:	82 81       	ldd	r24, Z+2	; 0x02
    2806:	93 81       	ldd	r25, Z+3	; 0x03
    2808:	20 e0       	ldi	r18, 0x00	; 0
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	4a e7       	ldi	r20, 0x7A	; 122
    280e:	54 e4       	ldi	r21, 0x44	; 68
    2810:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	fe 01       	movw	r30, r28
    281a:	ec 5a       	subi	r30, 0xAC	; 172
    281c:	ff 4f       	sbci	r31, 0xFF	; 255
    281e:	80 83       	st	Z, r24
    2820:	91 83       	std	Z+1, r25	; 0x01
    2822:	a2 83       	std	Z+2, r26	; 0x02
    2824:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2826:	8e 01       	movw	r16, r28
    2828:	00 5b       	subi	r16, 0xB0	; 176
    282a:	1f 4f       	sbci	r17, 0xFF	; 255
    282c:	fe 01       	movw	r30, r28
    282e:	ec 5a       	subi	r30, 0xAC	; 172
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	60 81       	ld	r22, Z
    2834:	71 81       	ldd	r23, Z+1	; 0x01
    2836:	82 81       	ldd	r24, Z+2	; 0x02
    2838:	93 81       	ldd	r25, Z+3	; 0x03
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	4a ef       	ldi	r20, 0xFA	; 250
    2840:	54 e4       	ldi	r21, 0x44	; 68
    2842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	f8 01       	movw	r30, r16
    284c:	80 83       	st	Z, r24
    284e:	91 83       	std	Z+1, r25	; 0x01
    2850:	a2 83       	std	Z+2, r26	; 0x02
    2852:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2854:	fe 01       	movw	r30, r28
    2856:	e0 5b       	subi	r30, 0xB0	; 176
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	60 81       	ld	r22, Z
    285c:	71 81       	ldd	r23, Z+1	; 0x01
    285e:	82 81       	ldd	r24, Z+2	; 0x02
    2860:	93 81       	ldd	r25, Z+3	; 0x03
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	40 e8       	ldi	r20, 0x80	; 128
    2868:	5f e3       	ldi	r21, 0x3F	; 63
    286a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    286e:	88 23       	and	r24, r24
    2870:	44 f4       	brge	.+16     	; 0x2882 <LCD_voidSendCommand_4bitMode+0x162>
		__ticks = 1;
    2872:	fe 01       	movw	r30, r28
    2874:	e2 5b       	subi	r30, 0xB2	; 178
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	91 83       	std	Z+1, r25	; 0x01
    287e:	80 83       	st	Z, r24
    2880:	64 c0       	rjmp	.+200    	; 0x294a <LCD_voidSendCommand_4bitMode+0x22a>
	else if (__tmp > 65535)
    2882:	fe 01       	movw	r30, r28
    2884:	e0 5b       	subi	r30, 0xB0	; 176
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	60 81       	ld	r22, Z
    288a:	71 81       	ldd	r23, Z+1	; 0x01
    288c:	82 81       	ldd	r24, Z+2	; 0x02
    288e:	93 81       	ldd	r25, Z+3	; 0x03
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	3f ef       	ldi	r19, 0xFF	; 255
    2894:	4f e7       	ldi	r20, 0x7F	; 127
    2896:	57 e4       	ldi	r21, 0x47	; 71
    2898:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    289c:	18 16       	cp	r1, r24
    289e:	0c f0       	brlt	.+2      	; 0x28a2 <LCD_voidSendCommand_4bitMode+0x182>
    28a0:	43 c0       	rjmp	.+134    	; 0x2928 <LCD_voidSendCommand_4bitMode+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a2:	fe 01       	movw	r30, r28
    28a4:	ec 5a       	subi	r30, 0xAC	; 172
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	60 81       	ld	r22, Z
    28aa:	71 81       	ldd	r23, Z+1	; 0x01
    28ac:	82 81       	ldd	r24, Z+2	; 0x02
    28ae:	93 81       	ldd	r25, Z+3	; 0x03
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e2       	ldi	r20, 0x20	; 32
    28b6:	51 e4       	ldi	r21, 0x41	; 65
    28b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	8e 01       	movw	r16, r28
    28c2:	02 5b       	subi	r16, 0xB2	; 178
    28c4:	1f 4f       	sbci	r17, 0xFF	; 255
    28c6:	bc 01       	movw	r22, r24
    28c8:	cd 01       	movw	r24, r26
    28ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	f8 01       	movw	r30, r16
    28d4:	91 83       	std	Z+1, r25	; 0x01
    28d6:	80 83       	st	Z, r24
    28d8:	1f c0       	rjmp	.+62     	; 0x2918 <LCD_voidSendCommand_4bitMode+0x1f8>
    28da:	fe 01       	movw	r30, r28
    28dc:	e4 5b       	subi	r30, 0xB4	; 180
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
    28e0:	88 ec       	ldi	r24, 0xC8	; 200
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	91 83       	std	Z+1, r25	; 0x01
    28e6:	80 83       	st	Z, r24
    28e8:	fe 01       	movw	r30, r28
    28ea:	e4 5b       	subi	r30, 0xB4	; 180
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	80 81       	ld	r24, Z
    28f0:	91 81       	ldd	r25, Z+1	; 0x01
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	f1 f7       	brne	.-4      	; 0x28f2 <LCD_voidSendCommand_4bitMode+0x1d2>
    28f6:	fe 01       	movw	r30, r28
    28f8:	e4 5b       	subi	r30, 0xB4	; 180
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	91 83       	std	Z+1, r25	; 0x01
    28fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2900:	de 01       	movw	r26, r28
    2902:	a2 5b       	subi	r26, 0xB2	; 178
    2904:	bf 4f       	sbci	r27, 0xFF	; 255
    2906:	fe 01       	movw	r30, r28
    2908:	e2 5b       	subi	r30, 0xB2	; 178
    290a:	ff 4f       	sbci	r31, 0xFF	; 255
    290c:	80 81       	ld	r24, Z
    290e:	91 81       	ldd	r25, Z+1	; 0x01
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	11 96       	adiw	r26, 0x01	; 1
    2914:	9c 93       	st	X, r25
    2916:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2918:	fe 01       	movw	r30, r28
    291a:	e2 5b       	subi	r30, 0xB2	; 178
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	80 81       	ld	r24, Z
    2920:	91 81       	ldd	r25, Z+1	; 0x01
    2922:	00 97       	sbiw	r24, 0x00	; 0
    2924:	d1 f6       	brne	.-76     	; 0x28da <LCD_voidSendCommand_4bitMode+0x1ba>
    2926:	4b c0       	rjmp	.+150    	; 0x29be <LCD_voidSendCommand_4bitMode+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2928:	8e 01       	movw	r16, r28
    292a:	02 5b       	subi	r16, 0xB2	; 178
    292c:	1f 4f       	sbci	r17, 0xFF	; 255
    292e:	fe 01       	movw	r30, r28
    2930:	e0 5b       	subi	r30, 0xB0	; 176
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	60 81       	ld	r22, Z
    2936:	71 81       	ldd	r23, Z+1	; 0x01
    2938:	82 81       	ldd	r24, Z+2	; 0x02
    293a:	93 81       	ldd	r25, Z+3	; 0x03
    293c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	f8 01       	movw	r30, r16
    2946:	91 83       	std	Z+1, r25	; 0x01
    2948:	80 83       	st	Z, r24
    294a:	de 01       	movw	r26, r28
    294c:	a6 5b       	subi	r26, 0xB6	; 182
    294e:	bf 4f       	sbci	r27, 0xFF	; 255
    2950:	fe 01       	movw	r30, r28
    2952:	e2 5b       	subi	r30, 0xB2	; 178
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	80 81       	ld	r24, Z
    2958:	91 81       	ldd	r25, Z+1	; 0x01
    295a:	11 96       	adiw	r26, 0x01	; 1
    295c:	9c 93       	st	X, r25
    295e:	8e 93       	st	-X, r24
    2960:	fe 01       	movw	r30, r28
    2962:	e6 5b       	subi	r30, 0xB6	; 182
    2964:	ff 4f       	sbci	r31, 0xFF	; 255
    2966:	80 81       	ld	r24, Z
    2968:	91 81       	ldd	r25, Z+1	; 0x01
    296a:	01 97       	sbiw	r24, 0x01	; 1
    296c:	f1 f7       	brne	.-4      	; 0x296a <LCD_voidSendCommand_4bitMode+0x24a>
    296e:	fe 01       	movw	r30, r28
    2970:	e6 5b       	subi	r30, 0xB6	; 182
    2972:	ff 4f       	sbci	r31, 0xFF	; 255
    2974:	91 83       	std	Z+1, r25	; 0x01
    2976:	80 83       	st	Z, r24
    2978:	22 c0       	rjmp	.+68     	; 0x29be <LCD_voidSendCommand_4bitMode+0x29e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    297a:	8e 01       	movw	r16, r28
    297c:	08 5a       	subi	r16, 0xA8	; 168
    297e:	1f 4f       	sbci	r17, 0xFF	; 255
    2980:	fe 01       	movw	r30, r28
    2982:	e7 5a       	subi	r30, 0xA7	; 167
    2984:	ff 4f       	sbci	r31, 0xFF	; 255
    2986:	60 81       	ld	r22, Z
    2988:	71 81       	ldd	r23, Z+1	; 0x01
    298a:	82 81       	ldd	r24, Z+2	; 0x02
    298c:	93 81       	ldd	r25, Z+3	; 0x03
    298e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	f8 01       	movw	r30, r16
    2998:	80 83       	st	Z, r24
    299a:	de 01       	movw	r26, r28
    299c:	a7 5b       	subi	r26, 0xB7	; 183
    299e:	bf 4f       	sbci	r27, 0xFF	; 255
    29a0:	fe 01       	movw	r30, r28
    29a2:	e8 5a       	subi	r30, 0xA8	; 168
    29a4:	ff 4f       	sbci	r31, 0xFF	; 255
    29a6:	80 81       	ld	r24, Z
    29a8:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29aa:	fe 01       	movw	r30, r28
    29ac:	e7 5b       	subi	r30, 0xB7	; 183
    29ae:	ff 4f       	sbci	r31, 0xFF	; 255
    29b0:	80 81       	ld	r24, Z
    29b2:	8a 95       	dec	r24
    29b4:	f1 f7       	brne	.-4      	; 0x29b2 <LCD_voidSendCommand_4bitMode+0x292>
    29b6:	fe 01       	movw	r30, r28
    29b8:	e7 5b       	subi	r30, 0xB7	; 183
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	80 83       	st	Z, r24
    _delay_us(5);
    DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    29be:	83 e0       	ldi	r24, 0x03	; 3
    29c0:	63 e0       	ldi	r22, 0x03	; 3
    29c2:	40 e0       	ldi	r20, 0x00	; 0
    29c4:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
    29c8:	fe 01       	movw	r30, r28
    29ca:	eb 5b       	subi	r30, 0xBB	; 187
    29cc:	ff 4f       	sbci	r31, 0xFF	; 255
    29ce:	80 e0       	ldi	r24, 0x00	; 0
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	a8 e4       	ldi	r26, 0x48	; 72
    29d4:	b3 e4       	ldi	r27, 0x43	; 67
    29d6:	80 83       	st	Z, r24
    29d8:	91 83       	std	Z+1, r25	; 0x01
    29da:	a2 83       	std	Z+2, r26	; 0x02
    29dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    29de:	8e 01       	movw	r16, r28
    29e0:	0f 5b       	subi	r16, 0xBF	; 191
    29e2:	1f 4f       	sbci	r17, 0xFF	; 255
    29e4:	fe 01       	movw	r30, r28
    29e6:	eb 5b       	subi	r30, 0xBB	; 187
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	60 81       	ld	r22, Z
    29ec:	71 81       	ldd	r23, Z+1	; 0x01
    29ee:	82 81       	ldd	r24, Z+2	; 0x02
    29f0:	93 81       	ldd	r25, Z+3	; 0x03
    29f2:	2b ea       	ldi	r18, 0xAB	; 171
    29f4:	3a ea       	ldi	r19, 0xAA	; 170
    29f6:	4a e2       	ldi	r20, 0x2A	; 42
    29f8:	50 e4       	ldi	r21, 0x40	; 64
    29fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	f8 01       	movw	r30, r16
    2a04:	80 83       	st	Z, r24
    2a06:	91 83       	std	Z+1, r25	; 0x01
    2a08:	a2 83       	std	Z+2, r26	; 0x02
    2a0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	ef 5b       	subi	r30, 0xBF	; 191
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	60 81       	ld	r22, Z
    2a14:	71 81       	ldd	r23, Z+1	; 0x01
    2a16:	82 81       	ldd	r24, Z+2	; 0x02
    2a18:	93 81       	ldd	r25, Z+3	; 0x03
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	40 e8       	ldi	r20, 0x80	; 128
    2a20:	5f e3       	ldi	r21, 0x3F	; 63
    2a22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a26:	88 23       	and	r24, r24
    2a28:	34 f4       	brge	.+12     	; 0x2a36 <LCD_voidSendCommand_4bitMode+0x316>
		__ticks = 1;
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	fe 01       	movw	r30, r28
    2a2e:	e0 5c       	subi	r30, 0xC0	; 192
    2a30:	ff 4f       	sbci	r31, 0xFF	; 255
    2a32:	80 83       	st	Z, r24
    2a34:	9d c0       	rjmp	.+314    	; 0x2b70 <LCD_voidSendCommand_4bitMode+0x450>
	else if (__tmp > 255)
    2a36:	fe 01       	movw	r30, r28
    2a38:	ef 5b       	subi	r30, 0xBF	; 191
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	60 81       	ld	r22, Z
    2a3e:	71 81       	ldd	r23, Z+1	; 0x01
    2a40:	82 81       	ldd	r24, Z+2	; 0x02
    2a42:	93 81       	ldd	r25, Z+3	; 0x03
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	4f e7       	ldi	r20, 0x7F	; 127
    2a4a:	53 e4       	ldi	r21, 0x43	; 67
    2a4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a50:	18 16       	cp	r1, r24
    2a52:	0c f0       	brlt	.+2      	; 0x2a56 <LCD_voidSendCommand_4bitMode+0x336>
    2a54:	7e c0       	rjmp	.+252    	; 0x2b52 <LCD_voidSendCommand_4bitMode+0x432>
	{
		_delay_ms(__us / 1000.0);
    2a56:	fe 01       	movw	r30, r28
    2a58:	eb 5b       	subi	r30, 0xBB	; 187
    2a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5c:	60 81       	ld	r22, Z
    2a5e:	71 81       	ldd	r23, Z+1	; 0x01
    2a60:	82 81       	ldd	r24, Z+2	; 0x02
    2a62:	93 81       	ldd	r25, Z+3	; 0x03
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	4a e7       	ldi	r20, 0x7A	; 122
    2a6a:	54 e4       	ldi	r21, 0x44	; 68
    2a6c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	8c af       	std	Y+60, r24	; 0x3c
    2a76:	9d af       	std	Y+61, r25	; 0x3d
    2a78:	ae af       	std	Y+62, r26	; 0x3e
    2a7a:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7c:	6c ad       	ldd	r22, Y+60	; 0x3c
    2a7e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2a80:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a82:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	4a ef       	ldi	r20, 0xFA	; 250
    2a8a:	54 e4       	ldi	r21, 0x44	; 68
    2a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a90:	dc 01       	movw	r26, r24
    2a92:	cb 01       	movw	r24, r22
    2a94:	88 af       	std	Y+56, r24	; 0x38
    2a96:	99 af       	std	Y+57, r25	; 0x39
    2a98:	aa af       	std	Y+58, r26	; 0x3a
    2a9a:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2a9c:	68 ad       	ldd	r22, Y+56	; 0x38
    2a9e:	79 ad       	ldd	r23, Y+57	; 0x39
    2aa0:	8a ad       	ldd	r24, Y+58	; 0x3a
    2aa2:	9b ad       	ldd	r25, Y+59	; 0x3b
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	40 e8       	ldi	r20, 0x80	; 128
    2aaa:	5f e3       	ldi	r21, 0x3F	; 63
    2aac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ab0:	88 23       	and	r24, r24
    2ab2:	2c f4       	brge	.+10     	; 0x2abe <LCD_voidSendCommand_4bitMode+0x39e>
		__ticks = 1;
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	9f ab       	std	Y+55, r25	; 0x37
    2aba:	8e ab       	std	Y+54, r24	; 0x36
    2abc:	3f c0       	rjmp	.+126    	; 0x2b3c <LCD_voidSendCommand_4bitMode+0x41c>
	else if (__tmp > 65535)
    2abe:	68 ad       	ldd	r22, Y+56	; 0x38
    2ac0:	79 ad       	ldd	r23, Y+57	; 0x39
    2ac2:	8a ad       	ldd	r24, Y+58	; 0x3a
    2ac4:	9b ad       	ldd	r25, Y+59	; 0x3b
    2ac6:	20 e0       	ldi	r18, 0x00	; 0
    2ac8:	3f ef       	ldi	r19, 0xFF	; 255
    2aca:	4f e7       	ldi	r20, 0x7F	; 127
    2acc:	57 e4       	ldi	r21, 0x47	; 71
    2ace:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ad2:	18 16       	cp	r1, r24
    2ad4:	4c f5       	brge	.+82     	; 0x2b28 <LCD_voidSendCommand_4bitMode+0x408>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad6:	6c ad       	ldd	r22, Y+60	; 0x3c
    2ad8:	7d ad       	ldd	r23, Y+61	; 0x3d
    2ada:	8e ad       	ldd	r24, Y+62	; 0x3e
    2adc:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	40 e2       	ldi	r20, 0x20	; 32
    2ae4:	51 e4       	ldi	r21, 0x41	; 65
    2ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	bc 01       	movw	r22, r24
    2af0:	cd 01       	movw	r24, r26
    2af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	9f ab       	std	Y+55, r25	; 0x37
    2afc:	8e ab       	std	Y+54, r24	; 0x36
    2afe:	0f c0       	rjmp	.+30     	; 0x2b1e <LCD_voidSendCommand_4bitMode+0x3fe>
    2b00:	88 ec       	ldi	r24, 0xC8	; 200
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	9d ab       	std	Y+53, r25	; 0x35
    2b06:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b08:	8c a9       	ldd	r24, Y+52	; 0x34
    2b0a:	9d a9       	ldd	r25, Y+53	; 0x35
    2b0c:	01 97       	sbiw	r24, 0x01	; 1
    2b0e:	f1 f7       	brne	.-4      	; 0x2b0c <LCD_voidSendCommand_4bitMode+0x3ec>
    2b10:	9d ab       	std	Y+53, r25	; 0x35
    2b12:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b14:	8e a9       	ldd	r24, Y+54	; 0x36
    2b16:	9f a9       	ldd	r25, Y+55	; 0x37
    2b18:	01 97       	sbiw	r24, 0x01	; 1
    2b1a:	9f ab       	std	Y+55, r25	; 0x37
    2b1c:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b1e:	8e a9       	ldd	r24, Y+54	; 0x36
    2b20:	9f a9       	ldd	r25, Y+55	; 0x37
    2b22:	00 97       	sbiw	r24, 0x00	; 0
    2b24:	69 f7       	brne	.-38     	; 0x2b00 <LCD_voidSendCommand_4bitMode+0x3e0>
    2b26:	2d c0       	rjmp	.+90     	; 0x2b82 <LCD_voidSendCommand_4bitMode+0x462>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b28:	68 ad       	ldd	r22, Y+56	; 0x38
    2b2a:	79 ad       	ldd	r23, Y+57	; 0x39
    2b2c:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b2e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	9f ab       	std	Y+55, r25	; 0x37
    2b3a:	8e ab       	std	Y+54, r24	; 0x36
    2b3c:	8e a9       	ldd	r24, Y+54	; 0x36
    2b3e:	9f a9       	ldd	r25, Y+55	; 0x37
    2b40:	9b ab       	std	Y+51, r25	; 0x33
    2b42:	8a ab       	std	Y+50, r24	; 0x32
    2b44:	8a a9       	ldd	r24, Y+50	; 0x32
    2b46:	9b a9       	ldd	r25, Y+51	; 0x33
    2b48:	01 97       	sbiw	r24, 0x01	; 1
    2b4a:	f1 f7       	brne	.-4      	; 0x2b48 <LCD_voidSendCommand_4bitMode+0x428>
    2b4c:	9b ab       	std	Y+51, r25	; 0x33
    2b4e:	8a ab       	std	Y+50, r24	; 0x32
    2b50:	18 c0       	rjmp	.+48     	; 0x2b82 <LCD_voidSendCommand_4bitMode+0x462>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b52:	fe 01       	movw	r30, r28
    2b54:	ef 5b       	subi	r30, 0xBF	; 191
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	60 81       	ld	r22, Z
    2b5a:	71 81       	ldd	r23, Z+1	; 0x01
    2b5c:	82 81       	ldd	r24, Z+2	; 0x02
    2b5e:	93 81       	ldd	r25, Z+3	; 0x03
    2b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	fe 01       	movw	r30, r28
    2b6a:	e0 5c       	subi	r30, 0xC0	; 192
    2b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6e:	80 83       	st	Z, r24
    2b70:	fe 01       	movw	r30, r28
    2b72:	e0 5c       	subi	r30, 0xC0	; 192
    2b74:	ff 4f       	sbci	r31, 0xFF	; 255
    2b76:	80 81       	ld	r24, Z
    2b78:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b7a:	89 a9       	ldd	r24, Y+49	; 0x31
    2b7c:	8a 95       	dec	r24
    2b7e:	f1 f7       	brne	.-4      	; 0x2b7c <LCD_voidSendCommand_4bitMode+0x45c>
    2b80:	89 ab       	std	Y+49, r24	; 0x31
    _delay_us(200);

    /* Send Lower nibble of command */
    DIO_voidWritePort(lcd_DATAPORT, (lcd_DATAPORT & 0x0F) | (u8CmdCpy <<4));
    2b82:	fe 01       	movw	r30, r28
    2b84:	ef 59       	subi	r30, 0x9F	; 159
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	80 81       	ld	r24, Z
    2b8a:	88 2f       	mov	r24, r24
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	82 95       	swap	r24
    2b90:	92 95       	swap	r25
    2b92:	90 7f       	andi	r25, 0xF0	; 240
    2b94:	98 27       	eor	r25, r24
    2b96:	80 7f       	andi	r24, 0xF0	; 240
    2b98:	98 27       	eor	r25, r24
    2b9a:	81 60       	ori	r24, 0x01	; 1
    2b9c:	98 2f       	mov	r25, r24
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	69 2f       	mov	r22, r25
    2ba2:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <DIO_voidWritePort>
    /* Enable Sequence */
    DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    2ba6:	83 e0       	ldi	r24, 0x03	; 3
    2ba8:	63 e0       	ldi	r22, 0x03	; 3
    2baa:	41 e0       	ldi	r20, 0x01	; 1
    2bac:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	a0 ea       	ldi	r26, 0xA0	; 160
    2bb6:	b0 e4       	ldi	r27, 0x40	; 64
    2bb8:	8d a7       	std	Y+45, r24	; 0x2d
    2bba:	9e a7       	std	Y+46, r25	; 0x2e
    2bbc:	af a7       	std	Y+47, r26	; 0x2f
    2bbe:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2bc0:	6d a5       	ldd	r22, Y+45	; 0x2d
    2bc2:	7e a5       	ldd	r23, Y+46	; 0x2e
    2bc4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bc6:	98 a9       	ldd	r25, Y+48	; 0x30
    2bc8:	2b ea       	ldi	r18, 0xAB	; 171
    2bca:	3a ea       	ldi	r19, 0xAA	; 170
    2bcc:	4a e2       	ldi	r20, 0x2A	; 42
    2bce:	50 e4       	ldi	r21, 0x40	; 64
    2bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	89 a7       	std	Y+41, r24	; 0x29
    2bda:	9a a7       	std	Y+42, r25	; 0x2a
    2bdc:	ab a7       	std	Y+43, r26	; 0x2b
    2bde:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2be0:	69 a5       	ldd	r22, Y+41	; 0x29
    2be2:	7a a5       	ldd	r23, Y+42	; 0x2a
    2be4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2be6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	40 e8       	ldi	r20, 0x80	; 128
    2bee:	5f e3       	ldi	r21, 0x3F	; 63
    2bf0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bf4:	88 23       	and	r24, r24
    2bf6:	1c f4       	brge	.+6      	; 0x2bfe <LCD_voidSendCommand_4bitMode+0x4de>
		__ticks = 1;
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	88 a7       	std	Y+40, r24	; 0x28
    2bfc:	91 c0       	rjmp	.+290    	; 0x2d20 <LCD_voidSendCommand_4bitMode+0x600>
	else if (__tmp > 255)
    2bfe:	69 a5       	ldd	r22, Y+41	; 0x29
    2c00:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c02:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c04:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	4f e7       	ldi	r20, 0x7F	; 127
    2c0c:	53 e4       	ldi	r21, 0x43	; 67
    2c0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c12:	18 16       	cp	r1, r24
    2c14:	0c f0       	brlt	.+2      	; 0x2c18 <LCD_voidSendCommand_4bitMode+0x4f8>
    2c16:	7b c0       	rjmp	.+246    	; 0x2d0e <LCD_voidSendCommand_4bitMode+0x5ee>
	{
		_delay_ms(__us / 1000.0);
    2c18:	6d a5       	ldd	r22, Y+45	; 0x2d
    2c1a:	7e a5       	ldd	r23, Y+46	; 0x2e
    2c1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c1e:	98 a9       	ldd	r25, Y+48	; 0x30
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	4a e7       	ldi	r20, 0x7A	; 122
    2c26:	54 e4       	ldi	r21, 0x44	; 68
    2c28:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	cb 01       	movw	r24, r22
    2c30:	8c a3       	std	Y+36, r24	; 0x24
    2c32:	9d a3       	std	Y+37, r25	; 0x25
    2c34:	ae a3       	std	Y+38, r26	; 0x26
    2c36:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c38:	6c a1       	ldd	r22, Y+36	; 0x24
    2c3a:	7d a1       	ldd	r23, Y+37	; 0x25
    2c3c:	8e a1       	ldd	r24, Y+38	; 0x26
    2c3e:	9f a1       	ldd	r25, Y+39	; 0x27
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	4a ef       	ldi	r20, 0xFA	; 250
    2c46:	54 e4       	ldi	r21, 0x44	; 68
    2c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	cb 01       	movw	r24, r22
    2c50:	88 a3       	std	Y+32, r24	; 0x20
    2c52:	99 a3       	std	Y+33, r25	; 0x21
    2c54:	aa a3       	std	Y+34, r26	; 0x22
    2c56:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2c58:	68 a1       	ldd	r22, Y+32	; 0x20
    2c5a:	79 a1       	ldd	r23, Y+33	; 0x21
    2c5c:	8a a1       	ldd	r24, Y+34	; 0x22
    2c5e:	9b a1       	ldd	r25, Y+35	; 0x23
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	40 e8       	ldi	r20, 0x80	; 128
    2c66:	5f e3       	ldi	r21, 0x3F	; 63
    2c68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c6c:	88 23       	and	r24, r24
    2c6e:	2c f4       	brge	.+10     	; 0x2c7a <LCD_voidSendCommand_4bitMode+0x55a>
		__ticks = 1;
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	9f 8f       	std	Y+31, r25	; 0x1f
    2c76:	8e 8f       	std	Y+30, r24	; 0x1e
    2c78:	3f c0       	rjmp	.+126    	; 0x2cf8 <LCD_voidSendCommand_4bitMode+0x5d8>
	else if (__tmp > 65535)
    2c7a:	68 a1       	ldd	r22, Y+32	; 0x20
    2c7c:	79 a1       	ldd	r23, Y+33	; 0x21
    2c7e:	8a a1       	ldd	r24, Y+34	; 0x22
    2c80:	9b a1       	ldd	r25, Y+35	; 0x23
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	3f ef       	ldi	r19, 0xFF	; 255
    2c86:	4f e7       	ldi	r20, 0x7F	; 127
    2c88:	57 e4       	ldi	r21, 0x47	; 71
    2c8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c8e:	18 16       	cp	r1, r24
    2c90:	4c f5       	brge	.+82     	; 0x2ce4 <LCD_voidSendCommand_4bitMode+0x5c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c92:	6c a1       	ldd	r22, Y+36	; 0x24
    2c94:	7d a1       	ldd	r23, Y+37	; 0x25
    2c96:	8e a1       	ldd	r24, Y+38	; 0x26
    2c98:	9f a1       	ldd	r25, Y+39	; 0x27
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	40 e2       	ldi	r20, 0x20	; 32
    2ca0:	51 e4       	ldi	r21, 0x41	; 65
    2ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	cb 01       	movw	r24, r22
    2caa:	bc 01       	movw	r22, r24
    2cac:	cd 01       	movw	r24, r26
    2cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	9f 8f       	std	Y+31, r25	; 0x1f
    2cb8:	8e 8f       	std	Y+30, r24	; 0x1e
    2cba:	0f c0       	rjmp	.+30     	; 0x2cda <LCD_voidSendCommand_4bitMode+0x5ba>
    2cbc:	88 ec       	ldi	r24, 0xC8	; 200
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	9d 8f       	std	Y+29, r25	; 0x1d
    2cc2:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2cc4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2cc6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2cc8:	01 97       	sbiw	r24, 0x01	; 1
    2cca:	f1 f7       	brne	.-4      	; 0x2cc8 <LCD_voidSendCommand_4bitMode+0x5a8>
    2ccc:	9d 8f       	std	Y+29, r25	; 0x1d
    2cce:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2cd2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2cd4:	01 97       	sbiw	r24, 0x01	; 1
    2cd6:	9f 8f       	std	Y+31, r25	; 0x1f
    2cd8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cda:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2cdc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2cde:	00 97       	sbiw	r24, 0x00	; 0
    2ce0:	69 f7       	brne	.-38     	; 0x2cbc <LCD_voidSendCommand_4bitMode+0x59c>
    2ce2:	24 c0       	rjmp	.+72     	; 0x2d2c <LCD_voidSendCommand_4bitMode+0x60c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce4:	68 a1       	ldd	r22, Y+32	; 0x20
    2ce6:	79 a1       	ldd	r23, Y+33	; 0x21
    2ce8:	8a a1       	ldd	r24, Y+34	; 0x22
    2cea:	9b a1       	ldd	r25, Y+35	; 0x23
    2cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	9f 8f       	std	Y+31, r25	; 0x1f
    2cf6:	8e 8f       	std	Y+30, r24	; 0x1e
    2cf8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2cfa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2cfc:	9b 8f       	std	Y+27, r25	; 0x1b
    2cfe:	8a 8f       	std	Y+26, r24	; 0x1a
    2d00:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d02:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d04:	01 97       	sbiw	r24, 0x01	; 1
    2d06:	f1 f7       	brne	.-4      	; 0x2d04 <LCD_voidSendCommand_4bitMode+0x5e4>
    2d08:	9b 8f       	std	Y+27, r25	; 0x1b
    2d0a:	8a 8f       	std	Y+26, r24	; 0x1a
    2d0c:	0f c0       	rjmp	.+30     	; 0x2d2c <LCD_voidSendCommand_4bitMode+0x60c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d0e:	69 a5       	ldd	r22, Y+41	; 0x29
    2d10:	7a a5       	ldd	r23, Y+42	; 0x2a
    2d12:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d14:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	88 a7       	std	Y+40, r24	; 0x28
    2d20:	88 a5       	ldd	r24, Y+40	; 0x28
    2d22:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d24:	89 8d       	ldd	r24, Y+25	; 0x19
    2d26:	8a 95       	dec	r24
    2d28:	f1 f7       	brne	.-4      	; 0x2d26 <LCD_voidSendCommand_4bitMode+0x606>
    2d2a:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(5);
    DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    2d2c:	83 e0       	ldi	r24, 0x03	; 3
    2d2e:	63 e0       	ldi	r22, 0x03	; 3
    2d30:	40 e0       	ldi	r20, 0x00	; 0
    2d32:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	a0 ea       	ldi	r26, 0xA0	; 160
    2d3c:	b0 e4       	ldi	r27, 0x40	; 64
    2d3e:	8d 8b       	std	Y+21, r24	; 0x15
    2d40:	9e 8b       	std	Y+22, r25	; 0x16
    2d42:	af 8b       	std	Y+23, r26	; 0x17
    2d44:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d46:	6d 89       	ldd	r22, Y+21	; 0x15
    2d48:	7e 89       	ldd	r23, Y+22	; 0x16
    2d4a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d4c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d4e:	2b ea       	ldi	r18, 0xAB	; 171
    2d50:	3a ea       	ldi	r19, 0xAA	; 170
    2d52:	4a e2       	ldi	r20, 0x2A	; 42
    2d54:	50 e4       	ldi	r21, 0x40	; 64
    2d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	89 8b       	std	Y+17, r24	; 0x11
    2d60:	9a 8b       	std	Y+18, r25	; 0x12
    2d62:	ab 8b       	std	Y+19, r26	; 0x13
    2d64:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2d66:	69 89       	ldd	r22, Y+17	; 0x11
    2d68:	7a 89       	ldd	r23, Y+18	; 0x12
    2d6a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d6c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	40 e8       	ldi	r20, 0x80	; 128
    2d74:	5f e3       	ldi	r21, 0x3F	; 63
    2d76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d7a:	88 23       	and	r24, r24
    2d7c:	1c f4       	brge	.+6      	; 0x2d84 <LCD_voidSendCommand_4bitMode+0x664>
		__ticks = 1;
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
    2d80:	88 8b       	std	Y+16, r24	; 0x10
    2d82:	91 c0       	rjmp	.+290    	; 0x2ea6 <LCD_voidSendCommand_4bitMode+0x786>
	else if (__tmp > 255)
    2d84:	69 89       	ldd	r22, Y+17	; 0x11
    2d86:	7a 89       	ldd	r23, Y+18	; 0x12
    2d88:	8b 89       	ldd	r24, Y+19	; 0x13
    2d8a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	4f e7       	ldi	r20, 0x7F	; 127
    2d92:	53 e4       	ldi	r21, 0x43	; 67
    2d94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d98:	18 16       	cp	r1, r24
    2d9a:	0c f0       	brlt	.+2      	; 0x2d9e <LCD_voidSendCommand_4bitMode+0x67e>
    2d9c:	7b c0       	rjmp	.+246    	; 0x2e94 <LCD_voidSendCommand_4bitMode+0x774>
	{
		_delay_ms(__us / 1000.0);
    2d9e:	6d 89       	ldd	r22, Y+21	; 0x15
    2da0:	7e 89       	ldd	r23, Y+22	; 0x16
    2da2:	8f 89       	ldd	r24, Y+23	; 0x17
    2da4:	98 8d       	ldd	r25, Y+24	; 0x18
    2da6:	20 e0       	ldi	r18, 0x00	; 0
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	4a e7       	ldi	r20, 0x7A	; 122
    2dac:	54 e4       	ldi	r21, 0x44	; 68
    2dae:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	8c 87       	std	Y+12, r24	; 0x0c
    2db8:	9d 87       	std	Y+13, r25	; 0x0d
    2dba:	ae 87       	std	Y+14, r26	; 0x0e
    2dbc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dbe:	6c 85       	ldd	r22, Y+12	; 0x0c
    2dc0:	7d 85       	ldd	r23, Y+13	; 0x0d
    2dc2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2dc4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	4a ef       	ldi	r20, 0xFA	; 250
    2dcc:	54 e4       	ldi	r21, 0x44	; 68
    2dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	88 87       	std	Y+8, r24	; 0x08
    2dd8:	99 87       	std	Y+9, r25	; 0x09
    2dda:	aa 87       	std	Y+10, r26	; 0x0a
    2ddc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2dde:	68 85       	ldd	r22, Y+8	; 0x08
    2de0:	79 85       	ldd	r23, Y+9	; 0x09
    2de2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2de4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	40 e8       	ldi	r20, 0x80	; 128
    2dec:	5f e3       	ldi	r21, 0x3F	; 63
    2dee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2df2:	88 23       	and	r24, r24
    2df4:	2c f4       	brge	.+10     	; 0x2e00 <LCD_voidSendCommand_4bitMode+0x6e0>
		__ticks = 1;
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	9f 83       	std	Y+7, r25	; 0x07
    2dfc:	8e 83       	std	Y+6, r24	; 0x06
    2dfe:	3f c0       	rjmp	.+126    	; 0x2e7e <LCD_voidSendCommand_4bitMode+0x75e>
	else if (__tmp > 65535)
    2e00:	68 85       	ldd	r22, Y+8	; 0x08
    2e02:	79 85       	ldd	r23, Y+9	; 0x09
    2e04:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e06:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	3f ef       	ldi	r19, 0xFF	; 255
    2e0c:	4f e7       	ldi	r20, 0x7F	; 127
    2e0e:	57 e4       	ldi	r21, 0x47	; 71
    2e10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e14:	18 16       	cp	r1, r24
    2e16:	4c f5       	brge	.+82     	; 0x2e6a <LCD_voidSendCommand_4bitMode+0x74a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e18:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e1a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e1c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e1e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	40 e2       	ldi	r20, 0x20	; 32
    2e26:	51 e4       	ldi	r21, 0x41	; 65
    2e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	bc 01       	movw	r22, r24
    2e32:	cd 01       	movw	r24, r26
    2e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	9f 83       	std	Y+7, r25	; 0x07
    2e3e:	8e 83       	std	Y+6, r24	; 0x06
    2e40:	0f c0       	rjmp	.+30     	; 0x2e60 <LCD_voidSendCommand_4bitMode+0x740>
    2e42:	88 ec       	ldi	r24, 0xC8	; 200
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	9d 83       	std	Y+5, r25	; 0x05
    2e48:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e4c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e4e:	01 97       	sbiw	r24, 0x01	; 1
    2e50:	f1 f7       	brne	.-4      	; 0x2e4e <LCD_voidSendCommand_4bitMode+0x72e>
    2e52:	9d 83       	std	Y+5, r25	; 0x05
    2e54:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e56:	8e 81       	ldd	r24, Y+6	; 0x06
    2e58:	9f 81       	ldd	r25, Y+7	; 0x07
    2e5a:	01 97       	sbiw	r24, 0x01	; 1
    2e5c:	9f 83       	std	Y+7, r25	; 0x07
    2e5e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e60:	8e 81       	ldd	r24, Y+6	; 0x06
    2e62:	9f 81       	ldd	r25, Y+7	; 0x07
    2e64:	00 97       	sbiw	r24, 0x00	; 0
    2e66:	69 f7       	brne	.-38     	; 0x2e42 <LCD_voidSendCommand_4bitMode+0x722>
    2e68:	24 c0       	rjmp	.+72     	; 0x2eb2 <LCD_voidSendCommand_4bitMode+0x792>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e6a:	68 85       	ldd	r22, Y+8	; 0x08
    2e6c:	79 85       	ldd	r23, Y+9	; 0x09
    2e6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e70:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e76:	dc 01       	movw	r26, r24
    2e78:	cb 01       	movw	r24, r22
    2e7a:	9f 83       	std	Y+7, r25	; 0x07
    2e7c:	8e 83       	std	Y+6, r24	; 0x06
    2e7e:	8e 81       	ldd	r24, Y+6	; 0x06
    2e80:	9f 81       	ldd	r25, Y+7	; 0x07
    2e82:	9b 83       	std	Y+3, r25	; 0x03
    2e84:	8a 83       	std	Y+2, r24	; 0x02
    2e86:	8a 81       	ldd	r24, Y+2	; 0x02
    2e88:	9b 81       	ldd	r25, Y+3	; 0x03
    2e8a:	01 97       	sbiw	r24, 0x01	; 1
    2e8c:	f1 f7       	brne	.-4      	; 0x2e8a <LCD_voidSendCommand_4bitMode+0x76a>
    2e8e:	9b 83       	std	Y+3, r25	; 0x03
    2e90:	8a 83       	std	Y+2, r24	; 0x02
    2e92:	0f c0       	rjmp	.+30     	; 0x2eb2 <LCD_voidSendCommand_4bitMode+0x792>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e94:	69 89       	ldd	r22, Y+17	; 0x11
    2e96:	7a 89       	ldd	r23, Y+18	; 0x12
    2e98:	8b 89       	ldd	r24, Y+19	; 0x13
    2e9a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea0:	dc 01       	movw	r26, r24
    2ea2:	cb 01       	movw	r24, r22
    2ea4:	88 8b       	std	Y+16, r24	; 0x10
    2ea6:	88 89       	ldd	r24, Y+16	; 0x10
    2ea8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2eaa:	89 81       	ldd	r24, Y+1	; 0x01
    2eac:	8a 95       	dec	r24
    2eae:	f1 f7       	brne	.-4      	; 0x2eac <LCD_voidSendCommand_4bitMode+0x78c>
    2eb0:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(5);
}
    2eb2:	cf 59       	subi	r28, 0x9F	; 159
    2eb4:	df 4f       	sbci	r29, 0xFF	; 255
    2eb6:	0f b6       	in	r0, 0x3f	; 63
    2eb8:	f8 94       	cli
    2eba:	de bf       	out	0x3e, r29	; 62
    2ebc:	0f be       	out	0x3f, r0	; 63
    2ebe:	cd bf       	out	0x3d, r28	; 61
    2ec0:	cf 91       	pop	r28
    2ec2:	df 91       	pop	r29
    2ec4:	1f 91       	pop	r17
    2ec6:	0f 91       	pop	r16
    2ec8:	08 95       	ret

00002eca <LCD_voidWriteCharctr>:


void LCD_voidWriteCharctr(uint8 u8DataCpy){		//LCD_voidWriteCharctr('A')
    2eca:	df 93       	push	r29
    2ecc:	cf 93       	push	r28
    2ece:	cd b7       	in	r28, 0x3d	; 61
    2ed0:	de b7       	in	r29, 0x3e	; 62
    2ed2:	2f 97       	sbiw	r28, 0x0f	; 15
    2ed4:	0f b6       	in	r0, 0x3f	; 63
    2ed6:	f8 94       	cli
    2ed8:	de bf       	out	0x3e, r29	; 62
    2eda:	0f be       	out	0x3f, r0	; 63
    2edc:	cd bf       	out	0x3d, r28	; 61
    2ede:	8f 87       	std	Y+15, r24	; 0x0f
	/* Command(0) or Data(1) */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_RSPIN, DIO_HIGH);
    2ee0:	83 e0       	ldi	r24, 0x03	; 3
    2ee2:	62 e0       	ldi	r22, 0x02	; 2
    2ee4:	41 e0       	ldi	r20, 0x01	; 1
    2ee6:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
	/* Read(1) or Write(0) */
	//DIO_voidWritePin(lcd_CONTROLPORT, lcd_RWPIN, DIO_LOW);
	/* Write Data on Data Pins*/
	DIO_voidWritePort(lcd_DATAPORT, u8DataCpy);
    2eea:	81 e0       	ldi	r24, 0x01	; 1
    2eec:	6f 85       	ldd	r22, Y+15	; 0x0f
    2eee:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <DIO_voidWritePort>
	/* Enable Sequence */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    2ef2:	83 e0       	ldi	r24, 0x03	; 3
    2ef4:	63 e0       	ldi	r22, 0x03	; 3
    2ef6:	41 e0       	ldi	r20, 0x01	; 1
    2ef8:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	a0 ea       	ldi	r26, 0xA0	; 160
    2f02:	b0 e4       	ldi	r27, 0x40	; 64
    2f04:	8b 87       	std	Y+11, r24	; 0x0b
    2f06:	9c 87       	std	Y+12, r25	; 0x0c
    2f08:	ad 87       	std	Y+13, r26	; 0x0d
    2f0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	4a ef       	ldi	r20, 0xFA	; 250
    2f1a:	54 e4       	ldi	r21, 0x44	; 68
    2f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f20:	dc 01       	movw	r26, r24
    2f22:	cb 01       	movw	r24, r22
    2f24:	8f 83       	std	Y+7, r24	; 0x07
    2f26:	98 87       	std	Y+8, r25	; 0x08
    2f28:	a9 87       	std	Y+9, r26	; 0x09
    2f2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f2e:	78 85       	ldd	r23, Y+8	; 0x08
    2f30:	89 85       	ldd	r24, Y+9	; 0x09
    2f32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f34:	20 e0       	ldi	r18, 0x00	; 0
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	40 e8       	ldi	r20, 0x80	; 128
    2f3a:	5f e3       	ldi	r21, 0x3F	; 63
    2f3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f40:	88 23       	and	r24, r24
    2f42:	2c f4       	brge	.+10     	; 0x2f4e <LCD_voidWriteCharctr+0x84>
		__ticks = 1;
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	9e 83       	std	Y+6, r25	; 0x06
    2f4a:	8d 83       	std	Y+5, r24	; 0x05
    2f4c:	3f c0       	rjmp	.+126    	; 0x2fcc <LCD_voidWriteCharctr+0x102>
	else if (__tmp > 65535)
    2f4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f50:	78 85       	ldd	r23, Y+8	; 0x08
    2f52:	89 85       	ldd	r24, Y+9	; 0x09
    2f54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	3f ef       	ldi	r19, 0xFF	; 255
    2f5a:	4f e7       	ldi	r20, 0x7F	; 127
    2f5c:	57 e4       	ldi	r21, 0x47	; 71
    2f5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f62:	18 16       	cp	r1, r24
    2f64:	4c f5       	brge	.+82     	; 0x2fb8 <LCD_voidWriteCharctr+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f66:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f68:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f6e:	20 e0       	ldi	r18, 0x00	; 0
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	40 e2       	ldi	r20, 0x20	; 32
    2f74:	51 e4       	ldi	r21, 0x41	; 65
    2f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	bc 01       	movw	r22, r24
    2f80:	cd 01       	movw	r24, r26
    2f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	9e 83       	std	Y+6, r25	; 0x06
    2f8c:	8d 83       	std	Y+5, r24	; 0x05
    2f8e:	0f c0       	rjmp	.+30     	; 0x2fae <LCD_voidWriteCharctr+0xe4>
    2f90:	88 ec       	ldi	r24, 0xC8	; 200
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	9c 83       	std	Y+4, r25	; 0x04
    2f96:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f98:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f9c:	01 97       	sbiw	r24, 0x01	; 1
    2f9e:	f1 f7       	brne	.-4      	; 0x2f9c <LCD_voidWriteCharctr+0xd2>
    2fa0:	9c 83       	std	Y+4, r25	; 0x04
    2fa2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fa4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa8:	01 97       	sbiw	r24, 0x01	; 1
    2faa:	9e 83       	std	Y+6, r25	; 0x06
    2fac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fae:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb2:	00 97       	sbiw	r24, 0x00	; 0
    2fb4:	69 f7       	brne	.-38     	; 0x2f90 <LCD_voidWriteCharctr+0xc6>
    2fb6:	14 c0       	rjmp	.+40     	; 0x2fe0 <LCD_voidWriteCharctr+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb8:	6f 81       	ldd	r22, Y+7	; 0x07
    2fba:	78 85       	ldd	r23, Y+8	; 0x08
    2fbc:	89 85       	ldd	r24, Y+9	; 0x09
    2fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	cb 01       	movw	r24, r22
    2fc8:	9e 83       	std	Y+6, r25	; 0x06
    2fca:	8d 83       	std	Y+5, r24	; 0x05
    2fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2fce:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd0:	9a 83       	std	Y+2, r25	; 0x02
    2fd2:	89 83       	std	Y+1, r24	; 0x01
    2fd4:	89 81       	ldd	r24, Y+1	; 0x01
    2fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fd8:	01 97       	sbiw	r24, 0x01	; 1
    2fda:	f1 f7       	brne	.-4      	; 0x2fd8 <LCD_voidWriteCharctr+0x10e>
    2fdc:	9a 83       	std	Y+2, r25	; 0x02
    2fde:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    2fe0:	83 e0       	ldi	r24, 0x03	; 3
    2fe2:	63 e0       	ldi	r22, 0x03	; 3
    2fe4:	40 e0       	ldi	r20, 0x00	; 0
    2fe6:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>

}
    2fea:	2f 96       	adiw	r28, 0x0f	; 15
    2fec:	0f b6       	in	r0, 0x3f	; 63
    2fee:	f8 94       	cli
    2ff0:	de bf       	out	0x3e, r29	; 62
    2ff2:	0f be       	out	0x3f, r0	; 63
    2ff4:	cd bf       	out	0x3d, r28	; 61
    2ff6:	cf 91       	pop	r28
    2ff8:	df 91       	pop	r29
    2ffa:	08 95       	ret

00002ffc <LCD_voidWriteCharctr_4bitMode>:
void LCD_voidWriteCharctr_4bitMode(uint8 u8DataCpy){		//LCD_voidWriteCharctr('A')
    2ffc:	0f 93       	push	r16
    2ffe:	1f 93       	push	r17
    3000:	df 93       	push	r29
    3002:	cf 93       	push	r28
    3004:	cd b7       	in	r28, 0x3d	; 61
    3006:	de b7       	in	r29, 0x3e	; 62
    3008:	c1 56       	subi	r28, 0x61	; 97
    300a:	d0 40       	sbci	r29, 0x00	; 0
    300c:	0f b6       	in	r0, 0x3f	; 63
    300e:	f8 94       	cli
    3010:	de bf       	out	0x3e, r29	; 62
    3012:	0f be       	out	0x3f, r0	; 63
    3014:	cd bf       	out	0x3d, r28	; 61
    3016:	fe 01       	movw	r30, r28
    3018:	ef 59       	subi	r30, 0x9F	; 159
    301a:	ff 4f       	sbci	r31, 0xFF	; 255
    301c:	80 83       	st	Z, r24
	/* Command(0) or Data(1) */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_RSPIN, DIO_HIGH);
    301e:	83 e0       	ldi	r24, 0x03	; 3
    3020:	62 e0       	ldi	r22, 0x02	; 2
    3022:	41 e0       	ldi	r20, 0x01	; 1
    3024:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
	/* Read(1) or Write(0) */
	//DIO_voidWritePin(lcd_CONTROLPORT, lcd_RWPIN, DIO_LOW);
	/* Write Data on Data Pins, sending upper nibble*/
	DIO_voidWritePort(lcd_DATAPORT, (lcd_DATAPORT & 0x0F) | (u8DataCpy & 0xF0));
    3028:	fe 01       	movw	r30, r28
    302a:	ef 59       	subi	r30, 0x9F	; 159
    302c:	ff 4f       	sbci	r31, 0xFF	; 255
    302e:	80 81       	ld	r24, Z
    3030:	80 7f       	andi	r24, 0xF0	; 240
    3032:	81 60       	ori	r24, 0x01	; 1
    3034:	98 2f       	mov	r25, r24
    3036:	81 e0       	ldi	r24, 0x01	; 1
    3038:	69 2f       	mov	r22, r25
    303a:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <DIO_voidWritePort>
	/* Enable Sequence */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    303e:	83 e0       	ldi	r24, 0x03	; 3
    3040:	63 e0       	ldi	r22, 0x03	; 3
    3042:	41 e0       	ldi	r20, 0x01	; 1
    3044:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
    3048:	fe 01       	movw	r30, r28
    304a:	e3 5a       	subi	r30, 0xA3	; 163
    304c:	ff 4f       	sbci	r31, 0xFF	; 255
    304e:	80 e0       	ldi	r24, 0x00	; 0
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	a0 ea       	ldi	r26, 0xA0	; 160
    3054:	b0 e4       	ldi	r27, 0x40	; 64
    3056:	80 83       	st	Z, r24
    3058:	91 83       	std	Z+1, r25	; 0x01
    305a:	a2 83       	std	Z+2, r26	; 0x02
    305c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    305e:	8e 01       	movw	r16, r28
    3060:	07 5a       	subi	r16, 0xA7	; 167
    3062:	1f 4f       	sbci	r17, 0xFF	; 255
    3064:	fe 01       	movw	r30, r28
    3066:	e3 5a       	subi	r30, 0xA3	; 163
    3068:	ff 4f       	sbci	r31, 0xFF	; 255
    306a:	60 81       	ld	r22, Z
    306c:	71 81       	ldd	r23, Z+1	; 0x01
    306e:	82 81       	ldd	r24, Z+2	; 0x02
    3070:	93 81       	ldd	r25, Z+3	; 0x03
    3072:	2b ea       	ldi	r18, 0xAB	; 171
    3074:	3a ea       	ldi	r19, 0xAA	; 170
    3076:	4a e2       	ldi	r20, 0x2A	; 42
    3078:	50 e4       	ldi	r21, 0x40	; 64
    307a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307e:	dc 01       	movw	r26, r24
    3080:	cb 01       	movw	r24, r22
    3082:	f8 01       	movw	r30, r16
    3084:	80 83       	st	Z, r24
    3086:	91 83       	std	Z+1, r25	; 0x01
    3088:	a2 83       	std	Z+2, r26	; 0x02
    308a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    308c:	fe 01       	movw	r30, r28
    308e:	e7 5a       	subi	r30, 0xA7	; 167
    3090:	ff 4f       	sbci	r31, 0xFF	; 255
    3092:	60 81       	ld	r22, Z
    3094:	71 81       	ldd	r23, Z+1	; 0x01
    3096:	82 81       	ldd	r24, Z+2	; 0x02
    3098:	93 81       	ldd	r25, Z+3	; 0x03
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	40 e8       	ldi	r20, 0x80	; 128
    30a0:	5f e3       	ldi	r21, 0x3F	; 63
    30a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30a6:	88 23       	and	r24, r24
    30a8:	34 f4       	brge	.+12     	; 0x30b6 <LCD_voidWriteCharctr_4bitMode+0xba>
		__ticks = 1;
    30aa:	fe 01       	movw	r30, r28
    30ac:	e8 5a       	subi	r30, 0xA8	; 168
    30ae:	ff 4f       	sbci	r31, 0xFF	; 255
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	80 83       	st	Z, r24
    30b4:	e0 c0       	rjmp	.+448    	; 0x3276 <LCD_voidWriteCharctr_4bitMode+0x27a>
	else if (__tmp > 255)
    30b6:	fe 01       	movw	r30, r28
    30b8:	e7 5a       	subi	r30, 0xA7	; 167
    30ba:	ff 4f       	sbci	r31, 0xFF	; 255
    30bc:	60 81       	ld	r22, Z
    30be:	71 81       	ldd	r23, Z+1	; 0x01
    30c0:	82 81       	ldd	r24, Z+2	; 0x02
    30c2:	93 81       	ldd	r25, Z+3	; 0x03
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	4f e7       	ldi	r20, 0x7F	; 127
    30ca:	53 e4       	ldi	r21, 0x43	; 67
    30cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30d0:	18 16       	cp	r1, r24
    30d2:	0c f0       	brlt	.+2      	; 0x30d6 <LCD_voidWriteCharctr_4bitMode+0xda>
    30d4:	c0 c0       	rjmp	.+384    	; 0x3256 <LCD_voidWriteCharctr_4bitMode+0x25a>
	{
		_delay_ms(__us / 1000.0);
    30d6:	fe 01       	movw	r30, r28
    30d8:	e3 5a       	subi	r30, 0xA3	; 163
    30da:	ff 4f       	sbci	r31, 0xFF	; 255
    30dc:	60 81       	ld	r22, Z
    30de:	71 81       	ldd	r23, Z+1	; 0x01
    30e0:	82 81       	ldd	r24, Z+2	; 0x02
    30e2:	93 81       	ldd	r25, Z+3	; 0x03
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	4a e7       	ldi	r20, 0x7A	; 122
    30ea:	54 e4       	ldi	r21, 0x44	; 68
    30ec:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    30f0:	dc 01       	movw	r26, r24
    30f2:	cb 01       	movw	r24, r22
    30f4:	fe 01       	movw	r30, r28
    30f6:	ec 5a       	subi	r30, 0xAC	; 172
    30f8:	ff 4f       	sbci	r31, 0xFF	; 255
    30fa:	80 83       	st	Z, r24
    30fc:	91 83       	std	Z+1, r25	; 0x01
    30fe:	a2 83       	std	Z+2, r26	; 0x02
    3100:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3102:	8e 01       	movw	r16, r28
    3104:	00 5b       	subi	r16, 0xB0	; 176
    3106:	1f 4f       	sbci	r17, 0xFF	; 255
    3108:	fe 01       	movw	r30, r28
    310a:	ec 5a       	subi	r30, 0xAC	; 172
    310c:	ff 4f       	sbci	r31, 0xFF	; 255
    310e:	60 81       	ld	r22, Z
    3110:	71 81       	ldd	r23, Z+1	; 0x01
    3112:	82 81       	ldd	r24, Z+2	; 0x02
    3114:	93 81       	ldd	r25, Z+3	; 0x03
    3116:	20 e0       	ldi	r18, 0x00	; 0
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	4a ef       	ldi	r20, 0xFA	; 250
    311c:	54 e4       	ldi	r21, 0x44	; 68
    311e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3122:	dc 01       	movw	r26, r24
    3124:	cb 01       	movw	r24, r22
    3126:	f8 01       	movw	r30, r16
    3128:	80 83       	st	Z, r24
    312a:	91 83       	std	Z+1, r25	; 0x01
    312c:	a2 83       	std	Z+2, r26	; 0x02
    312e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3130:	fe 01       	movw	r30, r28
    3132:	e0 5b       	subi	r30, 0xB0	; 176
    3134:	ff 4f       	sbci	r31, 0xFF	; 255
    3136:	60 81       	ld	r22, Z
    3138:	71 81       	ldd	r23, Z+1	; 0x01
    313a:	82 81       	ldd	r24, Z+2	; 0x02
    313c:	93 81       	ldd	r25, Z+3	; 0x03
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	40 e8       	ldi	r20, 0x80	; 128
    3144:	5f e3       	ldi	r21, 0x3F	; 63
    3146:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    314a:	88 23       	and	r24, r24
    314c:	44 f4       	brge	.+16     	; 0x315e <LCD_voidWriteCharctr_4bitMode+0x162>
		__ticks = 1;
    314e:	fe 01       	movw	r30, r28
    3150:	e2 5b       	subi	r30, 0xB2	; 178
    3152:	ff 4f       	sbci	r31, 0xFF	; 255
    3154:	81 e0       	ldi	r24, 0x01	; 1
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	91 83       	std	Z+1, r25	; 0x01
    315a:	80 83       	st	Z, r24
    315c:	64 c0       	rjmp	.+200    	; 0x3226 <LCD_voidWriteCharctr_4bitMode+0x22a>
	else if (__tmp > 65535)
    315e:	fe 01       	movw	r30, r28
    3160:	e0 5b       	subi	r30, 0xB0	; 176
    3162:	ff 4f       	sbci	r31, 0xFF	; 255
    3164:	60 81       	ld	r22, Z
    3166:	71 81       	ldd	r23, Z+1	; 0x01
    3168:	82 81       	ldd	r24, Z+2	; 0x02
    316a:	93 81       	ldd	r25, Z+3	; 0x03
    316c:	20 e0       	ldi	r18, 0x00	; 0
    316e:	3f ef       	ldi	r19, 0xFF	; 255
    3170:	4f e7       	ldi	r20, 0x7F	; 127
    3172:	57 e4       	ldi	r21, 0x47	; 71
    3174:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3178:	18 16       	cp	r1, r24
    317a:	0c f0       	brlt	.+2      	; 0x317e <LCD_voidWriteCharctr_4bitMode+0x182>
    317c:	43 c0       	rjmp	.+134    	; 0x3204 <LCD_voidWriteCharctr_4bitMode+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    317e:	fe 01       	movw	r30, r28
    3180:	ec 5a       	subi	r30, 0xAC	; 172
    3182:	ff 4f       	sbci	r31, 0xFF	; 255
    3184:	60 81       	ld	r22, Z
    3186:	71 81       	ldd	r23, Z+1	; 0x01
    3188:	82 81       	ldd	r24, Z+2	; 0x02
    318a:	93 81       	ldd	r25, Z+3	; 0x03
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	40 e2       	ldi	r20, 0x20	; 32
    3192:	51 e4       	ldi	r21, 0x41	; 65
    3194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3198:	dc 01       	movw	r26, r24
    319a:	cb 01       	movw	r24, r22
    319c:	8e 01       	movw	r16, r28
    319e:	02 5b       	subi	r16, 0xB2	; 178
    31a0:	1f 4f       	sbci	r17, 0xFF	; 255
    31a2:	bc 01       	movw	r22, r24
    31a4:	cd 01       	movw	r24, r26
    31a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31aa:	dc 01       	movw	r26, r24
    31ac:	cb 01       	movw	r24, r22
    31ae:	f8 01       	movw	r30, r16
    31b0:	91 83       	std	Z+1, r25	; 0x01
    31b2:	80 83       	st	Z, r24
    31b4:	1f c0       	rjmp	.+62     	; 0x31f4 <LCD_voidWriteCharctr_4bitMode+0x1f8>
    31b6:	fe 01       	movw	r30, r28
    31b8:	e4 5b       	subi	r30, 0xB4	; 180
    31ba:	ff 4f       	sbci	r31, 0xFF	; 255
    31bc:	88 ec       	ldi	r24, 0xC8	; 200
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	91 83       	std	Z+1, r25	; 0x01
    31c2:	80 83       	st	Z, r24
    31c4:	fe 01       	movw	r30, r28
    31c6:	e4 5b       	subi	r30, 0xB4	; 180
    31c8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ca:	80 81       	ld	r24, Z
    31cc:	91 81       	ldd	r25, Z+1	; 0x01
    31ce:	01 97       	sbiw	r24, 0x01	; 1
    31d0:	f1 f7       	brne	.-4      	; 0x31ce <LCD_voidWriteCharctr_4bitMode+0x1d2>
    31d2:	fe 01       	movw	r30, r28
    31d4:	e4 5b       	subi	r30, 0xB4	; 180
    31d6:	ff 4f       	sbci	r31, 0xFF	; 255
    31d8:	91 83       	std	Z+1, r25	; 0x01
    31da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31dc:	de 01       	movw	r26, r28
    31de:	a2 5b       	subi	r26, 0xB2	; 178
    31e0:	bf 4f       	sbci	r27, 0xFF	; 255
    31e2:	fe 01       	movw	r30, r28
    31e4:	e2 5b       	subi	r30, 0xB2	; 178
    31e6:	ff 4f       	sbci	r31, 0xFF	; 255
    31e8:	80 81       	ld	r24, Z
    31ea:	91 81       	ldd	r25, Z+1	; 0x01
    31ec:	01 97       	sbiw	r24, 0x01	; 1
    31ee:	11 96       	adiw	r26, 0x01	; 1
    31f0:	9c 93       	st	X, r25
    31f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31f4:	fe 01       	movw	r30, r28
    31f6:	e2 5b       	subi	r30, 0xB2	; 178
    31f8:	ff 4f       	sbci	r31, 0xFF	; 255
    31fa:	80 81       	ld	r24, Z
    31fc:	91 81       	ldd	r25, Z+1	; 0x01
    31fe:	00 97       	sbiw	r24, 0x00	; 0
    3200:	d1 f6       	brne	.-76     	; 0x31b6 <LCD_voidWriteCharctr_4bitMode+0x1ba>
    3202:	4b c0       	rjmp	.+150    	; 0x329a <LCD_voidWriteCharctr_4bitMode+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3204:	8e 01       	movw	r16, r28
    3206:	02 5b       	subi	r16, 0xB2	; 178
    3208:	1f 4f       	sbci	r17, 0xFF	; 255
    320a:	fe 01       	movw	r30, r28
    320c:	e0 5b       	subi	r30, 0xB0	; 176
    320e:	ff 4f       	sbci	r31, 0xFF	; 255
    3210:	60 81       	ld	r22, Z
    3212:	71 81       	ldd	r23, Z+1	; 0x01
    3214:	82 81       	ldd	r24, Z+2	; 0x02
    3216:	93 81       	ldd	r25, Z+3	; 0x03
    3218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    321c:	dc 01       	movw	r26, r24
    321e:	cb 01       	movw	r24, r22
    3220:	f8 01       	movw	r30, r16
    3222:	91 83       	std	Z+1, r25	; 0x01
    3224:	80 83       	st	Z, r24
    3226:	de 01       	movw	r26, r28
    3228:	a6 5b       	subi	r26, 0xB6	; 182
    322a:	bf 4f       	sbci	r27, 0xFF	; 255
    322c:	fe 01       	movw	r30, r28
    322e:	e2 5b       	subi	r30, 0xB2	; 178
    3230:	ff 4f       	sbci	r31, 0xFF	; 255
    3232:	80 81       	ld	r24, Z
    3234:	91 81       	ldd	r25, Z+1	; 0x01
    3236:	11 96       	adiw	r26, 0x01	; 1
    3238:	9c 93       	st	X, r25
    323a:	8e 93       	st	-X, r24
    323c:	fe 01       	movw	r30, r28
    323e:	e6 5b       	subi	r30, 0xB6	; 182
    3240:	ff 4f       	sbci	r31, 0xFF	; 255
    3242:	80 81       	ld	r24, Z
    3244:	91 81       	ldd	r25, Z+1	; 0x01
    3246:	01 97       	sbiw	r24, 0x01	; 1
    3248:	f1 f7       	brne	.-4      	; 0x3246 <LCD_voidWriteCharctr_4bitMode+0x24a>
    324a:	fe 01       	movw	r30, r28
    324c:	e6 5b       	subi	r30, 0xB6	; 182
    324e:	ff 4f       	sbci	r31, 0xFF	; 255
    3250:	91 83       	std	Z+1, r25	; 0x01
    3252:	80 83       	st	Z, r24
    3254:	22 c0       	rjmp	.+68     	; 0x329a <LCD_voidWriteCharctr_4bitMode+0x29e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3256:	8e 01       	movw	r16, r28
    3258:	08 5a       	subi	r16, 0xA8	; 168
    325a:	1f 4f       	sbci	r17, 0xFF	; 255
    325c:	fe 01       	movw	r30, r28
    325e:	e7 5a       	subi	r30, 0xA7	; 167
    3260:	ff 4f       	sbci	r31, 0xFF	; 255
    3262:	60 81       	ld	r22, Z
    3264:	71 81       	ldd	r23, Z+1	; 0x01
    3266:	82 81       	ldd	r24, Z+2	; 0x02
    3268:	93 81       	ldd	r25, Z+3	; 0x03
    326a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	f8 01       	movw	r30, r16
    3274:	80 83       	st	Z, r24
    3276:	de 01       	movw	r26, r28
    3278:	a7 5b       	subi	r26, 0xB7	; 183
    327a:	bf 4f       	sbci	r27, 0xFF	; 255
    327c:	fe 01       	movw	r30, r28
    327e:	e8 5a       	subi	r30, 0xA8	; 168
    3280:	ff 4f       	sbci	r31, 0xFF	; 255
    3282:	80 81       	ld	r24, Z
    3284:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3286:	fe 01       	movw	r30, r28
    3288:	e7 5b       	subi	r30, 0xB7	; 183
    328a:	ff 4f       	sbci	r31, 0xFF	; 255
    328c:	80 81       	ld	r24, Z
    328e:	8a 95       	dec	r24
    3290:	f1 f7       	brne	.-4      	; 0x328e <LCD_voidWriteCharctr_4bitMode+0x292>
    3292:	fe 01       	movw	r30, r28
    3294:	e7 5b       	subi	r30, 0xB7	; 183
    3296:	ff 4f       	sbci	r31, 0xFF	; 255
    3298:	80 83       	st	Z, r24
	_delay_us(5);
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    329a:	83 e0       	ldi	r24, 0x03	; 3
    329c:	63 e0       	ldi	r22, 0x03	; 3
    329e:	40 e0       	ldi	r20, 0x00	; 0
    32a0:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
    32a4:	fe 01       	movw	r30, r28
    32a6:	eb 5b       	subi	r30, 0xBB	; 187
    32a8:	ff 4f       	sbci	r31, 0xFF	; 255
    32aa:	80 e0       	ldi	r24, 0x00	; 0
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	a8 e4       	ldi	r26, 0x48	; 72
    32b0:	b3 e4       	ldi	r27, 0x43	; 67
    32b2:	80 83       	st	Z, r24
    32b4:	91 83       	std	Z+1, r25	; 0x01
    32b6:	a2 83       	std	Z+2, r26	; 0x02
    32b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    32ba:	8e 01       	movw	r16, r28
    32bc:	0f 5b       	subi	r16, 0xBF	; 191
    32be:	1f 4f       	sbci	r17, 0xFF	; 255
    32c0:	fe 01       	movw	r30, r28
    32c2:	eb 5b       	subi	r30, 0xBB	; 187
    32c4:	ff 4f       	sbci	r31, 0xFF	; 255
    32c6:	60 81       	ld	r22, Z
    32c8:	71 81       	ldd	r23, Z+1	; 0x01
    32ca:	82 81       	ldd	r24, Z+2	; 0x02
    32cc:	93 81       	ldd	r25, Z+3	; 0x03
    32ce:	2b ea       	ldi	r18, 0xAB	; 171
    32d0:	3a ea       	ldi	r19, 0xAA	; 170
    32d2:	4a e2       	ldi	r20, 0x2A	; 42
    32d4:	50 e4       	ldi	r21, 0x40	; 64
    32d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	f8 01       	movw	r30, r16
    32e0:	80 83       	st	Z, r24
    32e2:	91 83       	std	Z+1, r25	; 0x01
    32e4:	a2 83       	std	Z+2, r26	; 0x02
    32e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32e8:	fe 01       	movw	r30, r28
    32ea:	ef 5b       	subi	r30, 0xBF	; 191
    32ec:	ff 4f       	sbci	r31, 0xFF	; 255
    32ee:	60 81       	ld	r22, Z
    32f0:	71 81       	ldd	r23, Z+1	; 0x01
    32f2:	82 81       	ldd	r24, Z+2	; 0x02
    32f4:	93 81       	ldd	r25, Z+3	; 0x03
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	40 e8       	ldi	r20, 0x80	; 128
    32fc:	5f e3       	ldi	r21, 0x3F	; 63
    32fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3302:	88 23       	and	r24, r24
    3304:	34 f4       	brge	.+12     	; 0x3312 <LCD_voidWriteCharctr_4bitMode+0x316>
		__ticks = 1;
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	fe 01       	movw	r30, r28
    330a:	e0 5c       	subi	r30, 0xC0	; 192
    330c:	ff 4f       	sbci	r31, 0xFF	; 255
    330e:	80 83       	st	Z, r24
    3310:	9d c0       	rjmp	.+314    	; 0x344c <LCD_voidWriteCharctr_4bitMode+0x450>
	else if (__tmp > 255)
    3312:	fe 01       	movw	r30, r28
    3314:	ef 5b       	subi	r30, 0xBF	; 191
    3316:	ff 4f       	sbci	r31, 0xFF	; 255
    3318:	60 81       	ld	r22, Z
    331a:	71 81       	ldd	r23, Z+1	; 0x01
    331c:	82 81       	ldd	r24, Z+2	; 0x02
    331e:	93 81       	ldd	r25, Z+3	; 0x03
    3320:	20 e0       	ldi	r18, 0x00	; 0
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	4f e7       	ldi	r20, 0x7F	; 127
    3326:	53 e4       	ldi	r21, 0x43	; 67
    3328:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    332c:	18 16       	cp	r1, r24
    332e:	0c f0       	brlt	.+2      	; 0x3332 <LCD_voidWriteCharctr_4bitMode+0x336>
    3330:	7e c0       	rjmp	.+252    	; 0x342e <LCD_voidWriteCharctr_4bitMode+0x432>
	{
		_delay_ms(__us / 1000.0);
    3332:	fe 01       	movw	r30, r28
    3334:	eb 5b       	subi	r30, 0xBB	; 187
    3336:	ff 4f       	sbci	r31, 0xFF	; 255
    3338:	60 81       	ld	r22, Z
    333a:	71 81       	ldd	r23, Z+1	; 0x01
    333c:	82 81       	ldd	r24, Z+2	; 0x02
    333e:	93 81       	ldd	r25, Z+3	; 0x03
    3340:	20 e0       	ldi	r18, 0x00	; 0
    3342:	30 e0       	ldi	r19, 0x00	; 0
    3344:	4a e7       	ldi	r20, 0x7A	; 122
    3346:	54 e4       	ldi	r21, 0x44	; 68
    3348:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    334c:	dc 01       	movw	r26, r24
    334e:	cb 01       	movw	r24, r22
    3350:	8c af       	std	Y+60, r24	; 0x3c
    3352:	9d af       	std	Y+61, r25	; 0x3d
    3354:	ae af       	std	Y+62, r26	; 0x3e
    3356:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3358:	6c ad       	ldd	r22, Y+60	; 0x3c
    335a:	7d ad       	ldd	r23, Y+61	; 0x3d
    335c:	8e ad       	ldd	r24, Y+62	; 0x3e
    335e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3360:	20 e0       	ldi	r18, 0x00	; 0
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	4a ef       	ldi	r20, 0xFA	; 250
    3366:	54 e4       	ldi	r21, 0x44	; 68
    3368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    336c:	dc 01       	movw	r26, r24
    336e:	cb 01       	movw	r24, r22
    3370:	88 af       	std	Y+56, r24	; 0x38
    3372:	99 af       	std	Y+57, r25	; 0x39
    3374:	aa af       	std	Y+58, r26	; 0x3a
    3376:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3378:	68 ad       	ldd	r22, Y+56	; 0x38
    337a:	79 ad       	ldd	r23, Y+57	; 0x39
    337c:	8a ad       	ldd	r24, Y+58	; 0x3a
    337e:	9b ad       	ldd	r25, Y+59	; 0x3b
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	40 e8       	ldi	r20, 0x80	; 128
    3386:	5f e3       	ldi	r21, 0x3F	; 63
    3388:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    338c:	88 23       	and	r24, r24
    338e:	2c f4       	brge	.+10     	; 0x339a <LCD_voidWriteCharctr_4bitMode+0x39e>
		__ticks = 1;
    3390:	81 e0       	ldi	r24, 0x01	; 1
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	9f ab       	std	Y+55, r25	; 0x37
    3396:	8e ab       	std	Y+54, r24	; 0x36
    3398:	3f c0       	rjmp	.+126    	; 0x3418 <LCD_voidWriteCharctr_4bitMode+0x41c>
	else if (__tmp > 65535)
    339a:	68 ad       	ldd	r22, Y+56	; 0x38
    339c:	79 ad       	ldd	r23, Y+57	; 0x39
    339e:	8a ad       	ldd	r24, Y+58	; 0x3a
    33a0:	9b ad       	ldd	r25, Y+59	; 0x3b
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	3f ef       	ldi	r19, 0xFF	; 255
    33a6:	4f e7       	ldi	r20, 0x7F	; 127
    33a8:	57 e4       	ldi	r21, 0x47	; 71
    33aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33ae:	18 16       	cp	r1, r24
    33b0:	4c f5       	brge	.+82     	; 0x3404 <LCD_voidWriteCharctr_4bitMode+0x408>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33b2:	6c ad       	ldd	r22, Y+60	; 0x3c
    33b4:	7d ad       	ldd	r23, Y+61	; 0x3d
    33b6:	8e ad       	ldd	r24, Y+62	; 0x3e
    33b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    33ba:	20 e0       	ldi	r18, 0x00	; 0
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	40 e2       	ldi	r20, 0x20	; 32
    33c0:	51 e4       	ldi	r21, 0x41	; 65
    33c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c6:	dc 01       	movw	r26, r24
    33c8:	cb 01       	movw	r24, r22
    33ca:	bc 01       	movw	r22, r24
    33cc:	cd 01       	movw	r24, r26
    33ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d2:	dc 01       	movw	r26, r24
    33d4:	cb 01       	movw	r24, r22
    33d6:	9f ab       	std	Y+55, r25	; 0x37
    33d8:	8e ab       	std	Y+54, r24	; 0x36
    33da:	0f c0       	rjmp	.+30     	; 0x33fa <LCD_voidWriteCharctr_4bitMode+0x3fe>
    33dc:	88 ec       	ldi	r24, 0xC8	; 200
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	9d ab       	std	Y+53, r25	; 0x35
    33e2:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33e4:	8c a9       	ldd	r24, Y+52	; 0x34
    33e6:	9d a9       	ldd	r25, Y+53	; 0x35
    33e8:	01 97       	sbiw	r24, 0x01	; 1
    33ea:	f1 f7       	brne	.-4      	; 0x33e8 <LCD_voidWriteCharctr_4bitMode+0x3ec>
    33ec:	9d ab       	std	Y+53, r25	; 0x35
    33ee:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33f0:	8e a9       	ldd	r24, Y+54	; 0x36
    33f2:	9f a9       	ldd	r25, Y+55	; 0x37
    33f4:	01 97       	sbiw	r24, 0x01	; 1
    33f6:	9f ab       	std	Y+55, r25	; 0x37
    33f8:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33fa:	8e a9       	ldd	r24, Y+54	; 0x36
    33fc:	9f a9       	ldd	r25, Y+55	; 0x37
    33fe:	00 97       	sbiw	r24, 0x00	; 0
    3400:	69 f7       	brne	.-38     	; 0x33dc <LCD_voidWriteCharctr_4bitMode+0x3e0>
    3402:	2d c0       	rjmp	.+90     	; 0x345e <LCD_voidWriteCharctr_4bitMode+0x462>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3404:	68 ad       	ldd	r22, Y+56	; 0x38
    3406:	79 ad       	ldd	r23, Y+57	; 0x39
    3408:	8a ad       	ldd	r24, Y+58	; 0x3a
    340a:	9b ad       	ldd	r25, Y+59	; 0x3b
    340c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3410:	dc 01       	movw	r26, r24
    3412:	cb 01       	movw	r24, r22
    3414:	9f ab       	std	Y+55, r25	; 0x37
    3416:	8e ab       	std	Y+54, r24	; 0x36
    3418:	8e a9       	ldd	r24, Y+54	; 0x36
    341a:	9f a9       	ldd	r25, Y+55	; 0x37
    341c:	9b ab       	std	Y+51, r25	; 0x33
    341e:	8a ab       	std	Y+50, r24	; 0x32
    3420:	8a a9       	ldd	r24, Y+50	; 0x32
    3422:	9b a9       	ldd	r25, Y+51	; 0x33
    3424:	01 97       	sbiw	r24, 0x01	; 1
    3426:	f1 f7       	brne	.-4      	; 0x3424 <LCD_voidWriteCharctr_4bitMode+0x428>
    3428:	9b ab       	std	Y+51, r25	; 0x33
    342a:	8a ab       	std	Y+50, r24	; 0x32
    342c:	18 c0       	rjmp	.+48     	; 0x345e <LCD_voidWriteCharctr_4bitMode+0x462>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    342e:	fe 01       	movw	r30, r28
    3430:	ef 5b       	subi	r30, 0xBF	; 191
    3432:	ff 4f       	sbci	r31, 0xFF	; 255
    3434:	60 81       	ld	r22, Z
    3436:	71 81       	ldd	r23, Z+1	; 0x01
    3438:	82 81       	ldd	r24, Z+2	; 0x02
    343a:	93 81       	ldd	r25, Z+3	; 0x03
    343c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3440:	dc 01       	movw	r26, r24
    3442:	cb 01       	movw	r24, r22
    3444:	fe 01       	movw	r30, r28
    3446:	e0 5c       	subi	r30, 0xC0	; 192
    3448:	ff 4f       	sbci	r31, 0xFF	; 255
    344a:	80 83       	st	Z, r24
    344c:	fe 01       	movw	r30, r28
    344e:	e0 5c       	subi	r30, 0xC0	; 192
    3450:	ff 4f       	sbci	r31, 0xFF	; 255
    3452:	80 81       	ld	r24, Z
    3454:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3456:	89 a9       	ldd	r24, Y+49	; 0x31
    3458:	8a 95       	dec	r24
    345a:	f1 f7       	brne	.-4      	; 0x3458 <LCD_voidWriteCharctr_4bitMode+0x45c>
    345c:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);

	/* Write Data on Data Pins, sending lower nibble*/
	DIO_voidWritePort(lcd_DATAPORT, (lcd_DATAPORT & 0x0F) | (u8DataCpy <<4));
    345e:	fe 01       	movw	r30, r28
    3460:	ef 59       	subi	r30, 0x9F	; 159
    3462:	ff 4f       	sbci	r31, 0xFF	; 255
    3464:	80 81       	ld	r24, Z
    3466:	88 2f       	mov	r24, r24
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	82 95       	swap	r24
    346c:	92 95       	swap	r25
    346e:	90 7f       	andi	r25, 0xF0	; 240
    3470:	98 27       	eor	r25, r24
    3472:	80 7f       	andi	r24, 0xF0	; 240
    3474:	98 27       	eor	r25, r24
    3476:	81 60       	ori	r24, 0x01	; 1
    3478:	98 2f       	mov	r25, r24
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	69 2f       	mov	r22, r25
    347e:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <DIO_voidWritePort>
	/* Enable Sequence */
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_HIGH);
    3482:	83 e0       	ldi	r24, 0x03	; 3
    3484:	63 e0       	ldi	r22, 0x03	; 3
    3486:	41 e0       	ldi	r20, 0x01	; 1
    3488:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
    348c:	80 e0       	ldi	r24, 0x00	; 0
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	a0 ea       	ldi	r26, 0xA0	; 160
    3492:	b0 e4       	ldi	r27, 0x40	; 64
    3494:	8d a7       	std	Y+45, r24	; 0x2d
    3496:	9e a7       	std	Y+46, r25	; 0x2e
    3498:	af a7       	std	Y+47, r26	; 0x2f
    349a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    349c:	6d a5       	ldd	r22, Y+45	; 0x2d
    349e:	7e a5       	ldd	r23, Y+46	; 0x2e
    34a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    34a2:	98 a9       	ldd	r25, Y+48	; 0x30
    34a4:	2b ea       	ldi	r18, 0xAB	; 171
    34a6:	3a ea       	ldi	r19, 0xAA	; 170
    34a8:	4a e2       	ldi	r20, 0x2A	; 42
    34aa:	50 e4       	ldi	r21, 0x40	; 64
    34ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34b0:	dc 01       	movw	r26, r24
    34b2:	cb 01       	movw	r24, r22
    34b4:	89 a7       	std	Y+41, r24	; 0x29
    34b6:	9a a7       	std	Y+42, r25	; 0x2a
    34b8:	ab a7       	std	Y+43, r26	; 0x2b
    34ba:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    34bc:	69 a5       	ldd	r22, Y+41	; 0x29
    34be:	7a a5       	ldd	r23, Y+42	; 0x2a
    34c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    34c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    34c4:	20 e0       	ldi	r18, 0x00	; 0
    34c6:	30 e0       	ldi	r19, 0x00	; 0
    34c8:	40 e8       	ldi	r20, 0x80	; 128
    34ca:	5f e3       	ldi	r21, 0x3F	; 63
    34cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34d0:	88 23       	and	r24, r24
    34d2:	1c f4       	brge	.+6      	; 0x34da <LCD_voidWriteCharctr_4bitMode+0x4de>
		__ticks = 1;
    34d4:	81 e0       	ldi	r24, 0x01	; 1
    34d6:	88 a7       	std	Y+40, r24	; 0x28
    34d8:	91 c0       	rjmp	.+290    	; 0x35fc <LCD_voidWriteCharctr_4bitMode+0x600>
	else if (__tmp > 255)
    34da:	69 a5       	ldd	r22, Y+41	; 0x29
    34dc:	7a a5       	ldd	r23, Y+42	; 0x2a
    34de:	8b a5       	ldd	r24, Y+43	; 0x2b
    34e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    34e2:	20 e0       	ldi	r18, 0x00	; 0
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	4f e7       	ldi	r20, 0x7F	; 127
    34e8:	53 e4       	ldi	r21, 0x43	; 67
    34ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34ee:	18 16       	cp	r1, r24
    34f0:	0c f0       	brlt	.+2      	; 0x34f4 <LCD_voidWriteCharctr_4bitMode+0x4f8>
    34f2:	7b c0       	rjmp	.+246    	; 0x35ea <LCD_voidWriteCharctr_4bitMode+0x5ee>
	{
		_delay_ms(__us / 1000.0);
    34f4:	6d a5       	ldd	r22, Y+45	; 0x2d
    34f6:	7e a5       	ldd	r23, Y+46	; 0x2e
    34f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    34fa:	98 a9       	ldd	r25, Y+48	; 0x30
    34fc:	20 e0       	ldi	r18, 0x00	; 0
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	4a e7       	ldi	r20, 0x7A	; 122
    3502:	54 e4       	ldi	r21, 0x44	; 68
    3504:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3508:	dc 01       	movw	r26, r24
    350a:	cb 01       	movw	r24, r22
    350c:	8c a3       	std	Y+36, r24	; 0x24
    350e:	9d a3       	std	Y+37, r25	; 0x25
    3510:	ae a3       	std	Y+38, r26	; 0x26
    3512:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3514:	6c a1       	ldd	r22, Y+36	; 0x24
    3516:	7d a1       	ldd	r23, Y+37	; 0x25
    3518:	8e a1       	ldd	r24, Y+38	; 0x26
    351a:	9f a1       	ldd	r25, Y+39	; 0x27
    351c:	20 e0       	ldi	r18, 0x00	; 0
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	4a ef       	ldi	r20, 0xFA	; 250
    3522:	54 e4       	ldi	r21, 0x44	; 68
    3524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3528:	dc 01       	movw	r26, r24
    352a:	cb 01       	movw	r24, r22
    352c:	88 a3       	std	Y+32, r24	; 0x20
    352e:	99 a3       	std	Y+33, r25	; 0x21
    3530:	aa a3       	std	Y+34, r26	; 0x22
    3532:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3534:	68 a1       	ldd	r22, Y+32	; 0x20
    3536:	79 a1       	ldd	r23, Y+33	; 0x21
    3538:	8a a1       	ldd	r24, Y+34	; 0x22
    353a:	9b a1       	ldd	r25, Y+35	; 0x23
    353c:	20 e0       	ldi	r18, 0x00	; 0
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	40 e8       	ldi	r20, 0x80	; 128
    3542:	5f e3       	ldi	r21, 0x3F	; 63
    3544:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3548:	88 23       	and	r24, r24
    354a:	2c f4       	brge	.+10     	; 0x3556 <LCD_voidWriteCharctr_4bitMode+0x55a>
		__ticks = 1;
    354c:	81 e0       	ldi	r24, 0x01	; 1
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	9f 8f       	std	Y+31, r25	; 0x1f
    3552:	8e 8f       	std	Y+30, r24	; 0x1e
    3554:	3f c0       	rjmp	.+126    	; 0x35d4 <LCD_voidWriteCharctr_4bitMode+0x5d8>
	else if (__tmp > 65535)
    3556:	68 a1       	ldd	r22, Y+32	; 0x20
    3558:	79 a1       	ldd	r23, Y+33	; 0x21
    355a:	8a a1       	ldd	r24, Y+34	; 0x22
    355c:	9b a1       	ldd	r25, Y+35	; 0x23
    355e:	20 e0       	ldi	r18, 0x00	; 0
    3560:	3f ef       	ldi	r19, 0xFF	; 255
    3562:	4f e7       	ldi	r20, 0x7F	; 127
    3564:	57 e4       	ldi	r21, 0x47	; 71
    3566:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    356a:	18 16       	cp	r1, r24
    356c:	4c f5       	brge	.+82     	; 0x35c0 <LCD_voidWriteCharctr_4bitMode+0x5c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    356e:	6c a1       	ldd	r22, Y+36	; 0x24
    3570:	7d a1       	ldd	r23, Y+37	; 0x25
    3572:	8e a1       	ldd	r24, Y+38	; 0x26
    3574:	9f a1       	ldd	r25, Y+39	; 0x27
    3576:	20 e0       	ldi	r18, 0x00	; 0
    3578:	30 e0       	ldi	r19, 0x00	; 0
    357a:	40 e2       	ldi	r20, 0x20	; 32
    357c:	51 e4       	ldi	r21, 0x41	; 65
    357e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3582:	dc 01       	movw	r26, r24
    3584:	cb 01       	movw	r24, r22
    3586:	bc 01       	movw	r22, r24
    3588:	cd 01       	movw	r24, r26
    358a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    358e:	dc 01       	movw	r26, r24
    3590:	cb 01       	movw	r24, r22
    3592:	9f 8f       	std	Y+31, r25	; 0x1f
    3594:	8e 8f       	std	Y+30, r24	; 0x1e
    3596:	0f c0       	rjmp	.+30     	; 0x35b6 <LCD_voidWriteCharctr_4bitMode+0x5ba>
    3598:	88 ec       	ldi	r24, 0xC8	; 200
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	9d 8f       	std	Y+29, r25	; 0x1d
    359e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35a0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    35a2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    35a4:	01 97       	sbiw	r24, 0x01	; 1
    35a6:	f1 f7       	brne	.-4      	; 0x35a4 <LCD_voidWriteCharctr_4bitMode+0x5a8>
    35a8:	9d 8f       	std	Y+29, r25	; 0x1d
    35aa:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    35ae:	9f 8d       	ldd	r25, Y+31	; 0x1f
    35b0:	01 97       	sbiw	r24, 0x01	; 1
    35b2:	9f 8f       	std	Y+31, r25	; 0x1f
    35b4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    35b8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    35ba:	00 97       	sbiw	r24, 0x00	; 0
    35bc:	69 f7       	brne	.-38     	; 0x3598 <LCD_voidWriteCharctr_4bitMode+0x59c>
    35be:	24 c0       	rjmp	.+72     	; 0x3608 <LCD_voidWriteCharctr_4bitMode+0x60c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35c0:	68 a1       	ldd	r22, Y+32	; 0x20
    35c2:	79 a1       	ldd	r23, Y+33	; 0x21
    35c4:	8a a1       	ldd	r24, Y+34	; 0x22
    35c6:	9b a1       	ldd	r25, Y+35	; 0x23
    35c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35cc:	dc 01       	movw	r26, r24
    35ce:	cb 01       	movw	r24, r22
    35d0:	9f 8f       	std	Y+31, r25	; 0x1f
    35d2:	8e 8f       	std	Y+30, r24	; 0x1e
    35d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    35d6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    35d8:	9b 8f       	std	Y+27, r25	; 0x1b
    35da:	8a 8f       	std	Y+26, r24	; 0x1a
    35dc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    35de:	9b 8d       	ldd	r25, Y+27	; 0x1b
    35e0:	01 97       	sbiw	r24, 0x01	; 1
    35e2:	f1 f7       	brne	.-4      	; 0x35e0 <LCD_voidWriteCharctr_4bitMode+0x5e4>
    35e4:	9b 8f       	std	Y+27, r25	; 0x1b
    35e6:	8a 8f       	std	Y+26, r24	; 0x1a
    35e8:	0f c0       	rjmp	.+30     	; 0x3608 <LCD_voidWriteCharctr_4bitMode+0x60c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    35ea:	69 a5       	ldd	r22, Y+41	; 0x29
    35ec:	7a a5       	ldd	r23, Y+42	; 0x2a
    35ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    35f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    35f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f6:	dc 01       	movw	r26, r24
    35f8:	cb 01       	movw	r24, r22
    35fa:	88 a7       	std	Y+40, r24	; 0x28
    35fc:	88 a5       	ldd	r24, Y+40	; 0x28
    35fe:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3600:	89 8d       	ldd	r24, Y+25	; 0x19
    3602:	8a 95       	dec	r24
    3604:	f1 f7       	brne	.-4      	; 0x3602 <LCD_voidWriteCharctr_4bitMode+0x606>
    3606:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(5);
	DIO_voidWritePin(lcd_CONTROLPORT, lcd_EPIN , DIO_LOW);
    3608:	83 e0       	ldi	r24, 0x03	; 3
    360a:	63 e0       	ldi	r22, 0x03	; 3
    360c:	40 e0       	ldi	r20, 0x00	; 0
    360e:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
    3612:	80 e0       	ldi	r24, 0x00	; 0
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	a8 e4       	ldi	r26, 0x48	; 72
    3618:	b3 e4       	ldi	r27, 0x43	; 67
    361a:	8d 8b       	std	Y+21, r24	; 0x15
    361c:	9e 8b       	std	Y+22, r25	; 0x16
    361e:	af 8b       	std	Y+23, r26	; 0x17
    3620:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3622:	6d 89       	ldd	r22, Y+21	; 0x15
    3624:	7e 89       	ldd	r23, Y+22	; 0x16
    3626:	8f 89       	ldd	r24, Y+23	; 0x17
    3628:	98 8d       	ldd	r25, Y+24	; 0x18
    362a:	2b ea       	ldi	r18, 0xAB	; 171
    362c:	3a ea       	ldi	r19, 0xAA	; 170
    362e:	4a e2       	ldi	r20, 0x2A	; 42
    3630:	50 e4       	ldi	r21, 0x40	; 64
    3632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3636:	dc 01       	movw	r26, r24
    3638:	cb 01       	movw	r24, r22
    363a:	89 8b       	std	Y+17, r24	; 0x11
    363c:	9a 8b       	std	Y+18, r25	; 0x12
    363e:	ab 8b       	std	Y+19, r26	; 0x13
    3640:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3642:	69 89       	ldd	r22, Y+17	; 0x11
    3644:	7a 89       	ldd	r23, Y+18	; 0x12
    3646:	8b 89       	ldd	r24, Y+19	; 0x13
    3648:	9c 89       	ldd	r25, Y+20	; 0x14
    364a:	20 e0       	ldi	r18, 0x00	; 0
    364c:	30 e0       	ldi	r19, 0x00	; 0
    364e:	40 e8       	ldi	r20, 0x80	; 128
    3650:	5f e3       	ldi	r21, 0x3F	; 63
    3652:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3656:	88 23       	and	r24, r24
    3658:	1c f4       	brge	.+6      	; 0x3660 <LCD_voidWriteCharctr_4bitMode+0x664>
		__ticks = 1;
    365a:	81 e0       	ldi	r24, 0x01	; 1
    365c:	88 8b       	std	Y+16, r24	; 0x10
    365e:	91 c0       	rjmp	.+290    	; 0x3782 <LCD_voidWriteCharctr_4bitMode+0x786>
	else if (__tmp > 255)
    3660:	69 89       	ldd	r22, Y+17	; 0x11
    3662:	7a 89       	ldd	r23, Y+18	; 0x12
    3664:	8b 89       	ldd	r24, Y+19	; 0x13
    3666:	9c 89       	ldd	r25, Y+20	; 0x14
    3668:	20 e0       	ldi	r18, 0x00	; 0
    366a:	30 e0       	ldi	r19, 0x00	; 0
    366c:	4f e7       	ldi	r20, 0x7F	; 127
    366e:	53 e4       	ldi	r21, 0x43	; 67
    3670:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3674:	18 16       	cp	r1, r24
    3676:	0c f0       	brlt	.+2      	; 0x367a <LCD_voidWriteCharctr_4bitMode+0x67e>
    3678:	7b c0       	rjmp	.+246    	; 0x3770 <LCD_voidWriteCharctr_4bitMode+0x774>
	{
		_delay_ms(__us / 1000.0);
    367a:	6d 89       	ldd	r22, Y+21	; 0x15
    367c:	7e 89       	ldd	r23, Y+22	; 0x16
    367e:	8f 89       	ldd	r24, Y+23	; 0x17
    3680:	98 8d       	ldd	r25, Y+24	; 0x18
    3682:	20 e0       	ldi	r18, 0x00	; 0
    3684:	30 e0       	ldi	r19, 0x00	; 0
    3686:	4a e7       	ldi	r20, 0x7A	; 122
    3688:	54 e4       	ldi	r21, 0x44	; 68
    368a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    368e:	dc 01       	movw	r26, r24
    3690:	cb 01       	movw	r24, r22
    3692:	8c 87       	std	Y+12, r24	; 0x0c
    3694:	9d 87       	std	Y+13, r25	; 0x0d
    3696:	ae 87       	std	Y+14, r26	; 0x0e
    3698:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    369a:	6c 85       	ldd	r22, Y+12	; 0x0c
    369c:	7d 85       	ldd	r23, Y+13	; 0x0d
    369e:	8e 85       	ldd	r24, Y+14	; 0x0e
    36a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    36a2:	20 e0       	ldi	r18, 0x00	; 0
    36a4:	30 e0       	ldi	r19, 0x00	; 0
    36a6:	4a ef       	ldi	r20, 0xFA	; 250
    36a8:	54 e4       	ldi	r21, 0x44	; 68
    36aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ae:	dc 01       	movw	r26, r24
    36b0:	cb 01       	movw	r24, r22
    36b2:	88 87       	std	Y+8, r24	; 0x08
    36b4:	99 87       	std	Y+9, r25	; 0x09
    36b6:	aa 87       	std	Y+10, r26	; 0x0a
    36b8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    36ba:	68 85       	ldd	r22, Y+8	; 0x08
    36bc:	79 85       	ldd	r23, Y+9	; 0x09
    36be:	8a 85       	ldd	r24, Y+10	; 0x0a
    36c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    36c2:	20 e0       	ldi	r18, 0x00	; 0
    36c4:	30 e0       	ldi	r19, 0x00	; 0
    36c6:	40 e8       	ldi	r20, 0x80	; 128
    36c8:	5f e3       	ldi	r21, 0x3F	; 63
    36ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36ce:	88 23       	and	r24, r24
    36d0:	2c f4       	brge	.+10     	; 0x36dc <LCD_voidWriteCharctr_4bitMode+0x6e0>
		__ticks = 1;
    36d2:	81 e0       	ldi	r24, 0x01	; 1
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	9f 83       	std	Y+7, r25	; 0x07
    36d8:	8e 83       	std	Y+6, r24	; 0x06
    36da:	3f c0       	rjmp	.+126    	; 0x375a <LCD_voidWriteCharctr_4bitMode+0x75e>
	else if (__tmp > 65535)
    36dc:	68 85       	ldd	r22, Y+8	; 0x08
    36de:	79 85       	ldd	r23, Y+9	; 0x09
    36e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    36e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    36e4:	20 e0       	ldi	r18, 0x00	; 0
    36e6:	3f ef       	ldi	r19, 0xFF	; 255
    36e8:	4f e7       	ldi	r20, 0x7F	; 127
    36ea:	57 e4       	ldi	r21, 0x47	; 71
    36ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36f0:	18 16       	cp	r1, r24
    36f2:	4c f5       	brge	.+82     	; 0x3746 <LCD_voidWriteCharctr_4bitMode+0x74a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36f4:	6c 85       	ldd	r22, Y+12	; 0x0c
    36f6:	7d 85       	ldd	r23, Y+13	; 0x0d
    36f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    36fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    36fc:	20 e0       	ldi	r18, 0x00	; 0
    36fe:	30 e0       	ldi	r19, 0x00	; 0
    3700:	40 e2       	ldi	r20, 0x20	; 32
    3702:	51 e4       	ldi	r21, 0x41	; 65
    3704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3708:	dc 01       	movw	r26, r24
    370a:	cb 01       	movw	r24, r22
    370c:	bc 01       	movw	r22, r24
    370e:	cd 01       	movw	r24, r26
    3710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3714:	dc 01       	movw	r26, r24
    3716:	cb 01       	movw	r24, r22
    3718:	9f 83       	std	Y+7, r25	; 0x07
    371a:	8e 83       	std	Y+6, r24	; 0x06
    371c:	0f c0       	rjmp	.+30     	; 0x373c <LCD_voidWriteCharctr_4bitMode+0x740>
    371e:	88 ec       	ldi	r24, 0xC8	; 200
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	9d 83       	std	Y+5, r25	; 0x05
    3724:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3726:	8c 81       	ldd	r24, Y+4	; 0x04
    3728:	9d 81       	ldd	r25, Y+5	; 0x05
    372a:	01 97       	sbiw	r24, 0x01	; 1
    372c:	f1 f7       	brne	.-4      	; 0x372a <LCD_voidWriteCharctr_4bitMode+0x72e>
    372e:	9d 83       	std	Y+5, r25	; 0x05
    3730:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3732:	8e 81       	ldd	r24, Y+6	; 0x06
    3734:	9f 81       	ldd	r25, Y+7	; 0x07
    3736:	01 97       	sbiw	r24, 0x01	; 1
    3738:	9f 83       	std	Y+7, r25	; 0x07
    373a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    373c:	8e 81       	ldd	r24, Y+6	; 0x06
    373e:	9f 81       	ldd	r25, Y+7	; 0x07
    3740:	00 97       	sbiw	r24, 0x00	; 0
    3742:	69 f7       	brne	.-38     	; 0x371e <LCD_voidWriteCharctr_4bitMode+0x722>
    3744:	24 c0       	rjmp	.+72     	; 0x378e <LCD_voidWriteCharctr_4bitMode+0x792>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3746:	68 85       	ldd	r22, Y+8	; 0x08
    3748:	79 85       	ldd	r23, Y+9	; 0x09
    374a:	8a 85       	ldd	r24, Y+10	; 0x0a
    374c:	9b 85       	ldd	r25, Y+11	; 0x0b
    374e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3752:	dc 01       	movw	r26, r24
    3754:	cb 01       	movw	r24, r22
    3756:	9f 83       	std	Y+7, r25	; 0x07
    3758:	8e 83       	std	Y+6, r24	; 0x06
    375a:	8e 81       	ldd	r24, Y+6	; 0x06
    375c:	9f 81       	ldd	r25, Y+7	; 0x07
    375e:	9b 83       	std	Y+3, r25	; 0x03
    3760:	8a 83       	std	Y+2, r24	; 0x02
    3762:	8a 81       	ldd	r24, Y+2	; 0x02
    3764:	9b 81       	ldd	r25, Y+3	; 0x03
    3766:	01 97       	sbiw	r24, 0x01	; 1
    3768:	f1 f7       	brne	.-4      	; 0x3766 <LCD_voidWriteCharctr_4bitMode+0x76a>
    376a:	9b 83       	std	Y+3, r25	; 0x03
    376c:	8a 83       	std	Y+2, r24	; 0x02
    376e:	0f c0       	rjmp	.+30     	; 0x378e <LCD_voidWriteCharctr_4bitMode+0x792>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3770:	69 89       	ldd	r22, Y+17	; 0x11
    3772:	7a 89       	ldd	r23, Y+18	; 0x12
    3774:	8b 89       	ldd	r24, Y+19	; 0x13
    3776:	9c 89       	ldd	r25, Y+20	; 0x14
    3778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    377c:	dc 01       	movw	r26, r24
    377e:	cb 01       	movw	r24, r22
    3780:	88 8b       	std	Y+16, r24	; 0x10
    3782:	88 89       	ldd	r24, Y+16	; 0x10
    3784:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3786:	89 81       	ldd	r24, Y+1	; 0x01
    3788:	8a 95       	dec	r24
    378a:	f1 f7       	brne	.-4      	; 0x3788 <LCD_voidWriteCharctr_4bitMode+0x78c>
    378c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);

}
    378e:	cf 59       	subi	r28, 0x9F	; 159
    3790:	df 4f       	sbci	r29, 0xFF	; 255
    3792:	0f b6       	in	r0, 0x3f	; 63
    3794:	f8 94       	cli
    3796:	de bf       	out	0x3e, r29	; 62
    3798:	0f be       	out	0x3f, r0	; 63
    379a:	cd bf       	out	0x3d, r28	; 61
    379c:	cf 91       	pop	r28
    379e:	df 91       	pop	r29
    37a0:	1f 91       	pop	r17
    37a2:	0f 91       	pop	r16
    37a4:	08 95       	ret

000037a6 <LCD_voidWriteString>:
void LCD_voidWriteString(uint8 *pu8StringCpy, uint8 u8Index){	//LCD_voidWriteString('Tasneem')
    37a6:	df 93       	push	r29
    37a8:	cf 93       	push	r28
    37aa:	00 d0       	rcall	.+0      	; 0x37ac <LCD_voidWriteString+0x6>
    37ac:	00 d0       	rcall	.+0      	; 0x37ae <LCD_voidWriteString+0x8>
    37ae:	cd b7       	in	r28, 0x3d	; 61
    37b0:	de b7       	in	r29, 0x3e	; 62
    37b2:	9b 83       	std	Y+3, r25	; 0x03
    37b4:	8a 83       	std	Y+2, r24	; 0x02
    37b6:	6c 83       	std	Y+4, r22	; 0x04
	/*uint8 i=0;
	 *while(pu8StringCpy[i] != '\0'){
	 *		LCD_voidWriteCharctr(pu8StringCpy[i]);
	 *		i++;
	 *}*/
	for(uint8 i=0; i<u8Index; i++){
    37b8:	19 82       	std	Y+1, r1	; 0x01
    37ba:	0e c0       	rjmp	.+28     	; 0x37d8 <LCD_voidWriteString+0x32>
		LCD_voidWriteCharctr(pu8StringCpy[i]);
    37bc:	89 81       	ldd	r24, Y+1	; 0x01
    37be:	28 2f       	mov	r18, r24
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	8a 81       	ldd	r24, Y+2	; 0x02
    37c4:	9b 81       	ldd	r25, Y+3	; 0x03
    37c6:	fc 01       	movw	r30, r24
    37c8:	e2 0f       	add	r30, r18
    37ca:	f3 1f       	adc	r31, r19
    37cc:	80 81       	ld	r24, Z
    37ce:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCD_voidWriteCharctr>
	/*uint8 i=0;
	 *while(pu8StringCpy[i] != '\0'){
	 *		LCD_voidWriteCharctr(pu8StringCpy[i]);
	 *		i++;
	 *}*/
	for(uint8 i=0; i<u8Index; i++){
    37d2:	89 81       	ldd	r24, Y+1	; 0x01
    37d4:	8f 5f       	subi	r24, 0xFF	; 255
    37d6:	89 83       	std	Y+1, r24	; 0x01
    37d8:	99 81       	ldd	r25, Y+1	; 0x01
    37da:	8c 81       	ldd	r24, Y+4	; 0x04
    37dc:	98 17       	cp	r25, r24
    37de:	70 f3       	brcs	.-36     	; 0x37bc <LCD_voidWriteString+0x16>
		LCD_voidWriteCharctr(pu8StringCpy[i]);
	}
}
    37e0:	0f 90       	pop	r0
    37e2:	0f 90       	pop	r0
    37e4:	0f 90       	pop	r0
    37e6:	0f 90       	pop	r0
    37e8:	cf 91       	pop	r28
    37ea:	df 91       	pop	r29
    37ec:	08 95       	ret

000037ee <LCD_voidWriteString_4bitMode>:
void LCD_voidWriteString_4bitMode(uint8 *pu8StringCpy, uint8 u8Index){	//LCD_voidWriteString('Tasneem')
    37ee:	df 93       	push	r29
    37f0:	cf 93       	push	r28
    37f2:	00 d0       	rcall	.+0      	; 0x37f4 <LCD_voidWriteString_4bitMode+0x6>
    37f4:	00 d0       	rcall	.+0      	; 0x37f6 <LCD_voidWriteString_4bitMode+0x8>
    37f6:	cd b7       	in	r28, 0x3d	; 61
    37f8:	de b7       	in	r29, 0x3e	; 62
    37fa:	9b 83       	std	Y+3, r25	; 0x03
    37fc:	8a 83       	std	Y+2, r24	; 0x02
    37fe:	6c 83       	std	Y+4, r22	; 0x04
	for(uint8 i=0; i<u8Index; i++){
    3800:	19 82       	std	Y+1, r1	; 0x01
    3802:	0e c0       	rjmp	.+28     	; 0x3820 <LCD_voidWriteString_4bitMode+0x32>
		LCD_voidWriteCharctr_4bitMode(pu8StringCpy[i]);
    3804:	89 81       	ldd	r24, Y+1	; 0x01
    3806:	28 2f       	mov	r18, r24
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	8a 81       	ldd	r24, Y+2	; 0x02
    380c:	9b 81       	ldd	r25, Y+3	; 0x03
    380e:	fc 01       	movw	r30, r24
    3810:	e2 0f       	add	r30, r18
    3812:	f3 1f       	adc	r31, r19
    3814:	80 81       	ld	r24, Z
    3816:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <LCD_voidWriteCharctr_4bitMode>
	for(uint8 i=0; i<u8Index; i++){
		LCD_voidWriteCharctr(pu8StringCpy[i]);
	}
}
void LCD_voidWriteString_4bitMode(uint8 *pu8StringCpy, uint8 u8Index){	//LCD_voidWriteString('Tasneem')
	for(uint8 i=0; i<u8Index; i++){
    381a:	89 81       	ldd	r24, Y+1	; 0x01
    381c:	8f 5f       	subi	r24, 0xFF	; 255
    381e:	89 83       	std	Y+1, r24	; 0x01
    3820:	99 81       	ldd	r25, Y+1	; 0x01
    3822:	8c 81       	ldd	r24, Y+4	; 0x04
    3824:	98 17       	cp	r25, r24
    3826:	70 f3       	brcs	.-36     	; 0x3804 <LCD_voidWriteString_4bitMode+0x16>
		LCD_voidWriteCharctr_4bitMode(pu8StringCpy[i]);
	}
}
    3828:	0f 90       	pop	r0
    382a:	0f 90       	pop	r0
    382c:	0f 90       	pop	r0
    382e:	0f 90       	pop	r0
    3830:	cf 91       	pop	r28
    3832:	df 91       	pop	r29
    3834:	08 95       	ret

00003836 <Gotoxy>:
void Gotoxy(uint8 x, uint8 y){
    3836:	df 93       	push	r29
    3838:	cf 93       	push	r28
    383a:	00 d0       	rcall	.+0      	; 0x383c <Gotoxy+0x6>
    383c:	00 d0       	rcall	.+0      	; 0x383e <Gotoxy+0x8>
    383e:	cd b7       	in	r28, 0x3d	; 61
    3840:	de b7       	in	r29, 0x3e	; 62
    3842:	89 83       	std	Y+1, r24	; 0x01
    3844:	6a 83       	std	Y+2, r22	; 0x02
	if(x>=0 && x<16)
    3846:	89 81       	ldd	r24, Y+1	; 0x01
    3848:	80 31       	cpi	r24, 0x10	; 16
    384a:	c8 f4       	brcc	.+50     	; 0x387e <Gotoxy+0x48>
	{
		switch(y){
    384c:	8a 81       	ldd	r24, Y+2	; 0x02
    384e:	28 2f       	mov	r18, r24
    3850:	30 e0       	ldi	r19, 0x00	; 0
    3852:	3c 83       	std	Y+4, r19	; 0x04
    3854:	2b 83       	std	Y+3, r18	; 0x03
    3856:	8b 81       	ldd	r24, Y+3	; 0x03
    3858:	9c 81       	ldd	r25, Y+4	; 0x04
    385a:	81 30       	cpi	r24, 0x01	; 1
    385c:	91 05       	cpc	r25, r1
    385e:	31 f0       	breq	.+12     	; 0x386c <Gotoxy+0x36>
    3860:	2b 81       	ldd	r18, Y+3	; 0x03
    3862:	3c 81       	ldd	r19, Y+4	; 0x04
    3864:	22 30       	cpi	r18, 0x02	; 2
    3866:	31 05       	cpc	r19, r1
    3868:	31 f0       	breq	.+12     	; 0x3876 <Gotoxy+0x40>
    386a:	09 c0       	rjmp	.+18     	; 0x387e <Gotoxy+0x48>
		case LineOne:
			LCD_voidSendCommand(LineOneStart+x);	//set DDRAM address
    386c:	89 81       	ldd	r24, Y+1	; 0x01
    386e:	80 58       	subi	r24, 0x80	; 128
    3870:	0e 94 f7 12 	call	0x25ee	; 0x25ee <LCD_voidSendCommand>
    3874:	04 c0       	rjmp	.+8      	; 0x387e <Gotoxy+0x48>
			break;
		case LineTwo:
			LCD_voidSendCommand(LineTwoStart+x);	//set DDRAM address
    3876:	89 81       	ldd	r24, Y+1	; 0x01
    3878:	80 54       	subi	r24, 0x40	; 64
    387a:	0e 94 f7 12 	call	0x25ee	; 0x25ee <LCD_voidSendCommand>
	}
	else
	{
		//do nothing
	}
}
    387e:	0f 90       	pop	r0
    3880:	0f 90       	pop	r0
    3882:	0f 90       	pop	r0
    3884:	0f 90       	pop	r0
    3886:	cf 91       	pop	r28
    3888:	df 91       	pop	r29
    388a:	08 95       	ret

0000388c <LCD_voidGotoxy_4bitMode>:

void LCD_voidGotoxy_4bitMode(uint8 x, uint8 y){
    388c:	df 93       	push	r29
    388e:	cf 93       	push	r28
    3890:	00 d0       	rcall	.+0      	; 0x3892 <LCD_voidGotoxy_4bitMode+0x6>
    3892:	00 d0       	rcall	.+0      	; 0x3894 <LCD_voidGotoxy_4bitMode+0x8>
    3894:	cd b7       	in	r28, 0x3d	; 61
    3896:	de b7       	in	r29, 0x3e	; 62
    3898:	89 83       	std	Y+1, r24	; 0x01
    389a:	6a 83       	std	Y+2, r22	; 0x02
	if(x>=0 && x<16)
    389c:	89 81       	ldd	r24, Y+1	; 0x01
    389e:	80 31       	cpi	r24, 0x10	; 16
    38a0:	c8 f4       	brcc	.+50     	; 0x38d4 <LCD_voidGotoxy_4bitMode+0x48>
	{
		switch(y){
    38a2:	8a 81       	ldd	r24, Y+2	; 0x02
    38a4:	28 2f       	mov	r18, r24
    38a6:	30 e0       	ldi	r19, 0x00	; 0
    38a8:	3c 83       	std	Y+4, r19	; 0x04
    38aa:	2b 83       	std	Y+3, r18	; 0x03
    38ac:	8b 81       	ldd	r24, Y+3	; 0x03
    38ae:	9c 81       	ldd	r25, Y+4	; 0x04
    38b0:	81 30       	cpi	r24, 0x01	; 1
    38b2:	91 05       	cpc	r25, r1
    38b4:	31 f0       	breq	.+12     	; 0x38c2 <LCD_voidGotoxy_4bitMode+0x36>
    38b6:	2b 81       	ldd	r18, Y+3	; 0x03
    38b8:	3c 81       	ldd	r19, Y+4	; 0x04
    38ba:	22 30       	cpi	r18, 0x02	; 2
    38bc:	31 05       	cpc	r19, r1
    38be:	31 f0       	breq	.+12     	; 0x38cc <LCD_voidGotoxy_4bitMode+0x40>
    38c0:	09 c0       	rjmp	.+18     	; 0x38d4 <LCD_voidGotoxy_4bitMode+0x48>
		case LineOne:
			LCD_voidSendCommand_4bitMode(LineOneStart+x);	//set DDRAM address
    38c2:	89 81       	ldd	r24, Y+1	; 0x01
    38c4:	80 58       	subi	r24, 0x80	; 128
    38c6:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_voidSendCommand_4bitMode>
    38ca:	04 c0       	rjmp	.+8      	; 0x38d4 <LCD_voidGotoxy_4bitMode+0x48>
			break;
		case LineTwo:
			LCD_voidSendCommand_4bitMode(LineTwoStart+x);	//set DDRAM address
    38cc:	89 81       	ldd	r24, Y+1	; 0x01
    38ce:	80 54       	subi	r24, 0x40	; 64
    38d0:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_voidSendCommand_4bitMode>
	}
	else
	{
		//do nothing
	}
}
    38d4:	0f 90       	pop	r0
    38d6:	0f 90       	pop	r0
    38d8:	0f 90       	pop	r0
    38da:	0f 90       	pop	r0
    38dc:	cf 91       	pop	r28
    38de:	df 91       	pop	r29
    38e0:	08 95       	ret

000038e2 <LCD_voidWriteExtraChar>:
void LCD_voidWriteExtraChar(uint8 Y, uint8 X){
    38e2:	df 93       	push	r29
    38e4:	cf 93       	push	r28
    38e6:	00 d0       	rcall	.+0      	; 0x38e8 <LCD_voidWriteExtraChar+0x6>
    38e8:	cd b7       	in	r28, 0x3d	; 61
    38ea:	de b7       	in	r29, 0x3e	; 62
    38ec:	89 83       	std	Y+1, r24	; 0x01
    38ee:	6a 83       	std	Y+2, r22	; 0x02

}
    38f0:	0f 90       	pop	r0
    38f2:	0f 90       	pop	r0
    38f4:	cf 91       	pop	r28
    38f6:	df 91       	pop	r29
    38f8:	08 95       	ret

000038fa <LCD_voidDisplayKeys>:

void LCD_voidDisplayKeys(uint8 *u8key, uint8 *index){
    38fa:	df 93       	push	r29
    38fc:	cf 93       	push	r28
    38fe:	cd b7       	in	r28, 0x3d	; 61
    3900:	de b7       	in	r29, 0x3e	; 62
    3902:	a0 97       	sbiw	r28, 0x20	; 32
    3904:	0f b6       	in	r0, 0x3f	; 63
    3906:	f8 94       	cli
    3908:	de bf       	out	0x3e, r29	; 62
    390a:	0f be       	out	0x3f, r0	; 63
    390c:	cd bf       	out	0x3d, r28	; 61
    390e:	9e 8f       	std	Y+30, r25	; 0x1e
    3910:	8d 8f       	std	Y+29, r24	; 0x1d
    3912:	78 a3       	std	Y+32, r23	; 0x20
    3914:	6f 8f       	std	Y+31, r22	; 0x1f
	LCD_voidGotoxy_4bitMode(*index, LineTwo);
    3916:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3918:	f8 a1       	ldd	r31, Y+32	; 0x20
    391a:	80 81       	ld	r24, Z
    391c:	62 e0       	ldi	r22, 0x02	; 2
    391e:	0e 94 46 1c 	call	0x388c	; 0x388c <LCD_voidGotoxy_4bitMode>
	if ((u8key[*index] >= '0' && u8key[*index] <= '9') || (u8key[*index] >= 'A' && u8key[*index] <= 'D') || (u8key[*index] =='*')||(u8key[*index] =='#')) {
    3922:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3924:	f8 a1       	ldd	r31, Y+32	; 0x20
    3926:	80 81       	ld	r24, Z
    3928:	28 2f       	mov	r18, r24
    392a:	30 e0       	ldi	r19, 0x00	; 0
    392c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    392e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3930:	fc 01       	movw	r30, r24
    3932:	e2 0f       	add	r30, r18
    3934:	f3 1f       	adc	r31, r19
    3936:	80 81       	ld	r24, Z
    3938:	80 33       	cpi	r24, 0x30	; 48
    393a:	68 f0       	brcs	.+26     	; 0x3956 <LCD_voidDisplayKeys+0x5c>
    393c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    393e:	f8 a1       	ldd	r31, Y+32	; 0x20
    3940:	80 81       	ld	r24, Z
    3942:	28 2f       	mov	r18, r24
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3948:	9e 8d       	ldd	r25, Y+30	; 0x1e
    394a:	fc 01       	movw	r30, r24
    394c:	e2 0f       	add	r30, r18
    394e:	f3 1f       	adc	r31, r19
    3950:	80 81       	ld	r24, Z
    3952:	8a 33       	cpi	r24, 0x3A	; 58
    3954:	a8 f1       	brcs	.+106    	; 0x39c0 <LCD_voidDisplayKeys+0xc6>
    3956:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3958:	f8 a1       	ldd	r31, Y+32	; 0x20
    395a:	80 81       	ld	r24, Z
    395c:	28 2f       	mov	r18, r24
    395e:	30 e0       	ldi	r19, 0x00	; 0
    3960:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3962:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3964:	fc 01       	movw	r30, r24
    3966:	e2 0f       	add	r30, r18
    3968:	f3 1f       	adc	r31, r19
    396a:	80 81       	ld	r24, Z
    396c:	81 34       	cpi	r24, 0x41	; 65
    396e:	68 f0       	brcs	.+26     	; 0x398a <LCD_voidDisplayKeys+0x90>
    3970:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3972:	f8 a1       	ldd	r31, Y+32	; 0x20
    3974:	80 81       	ld	r24, Z
    3976:	28 2f       	mov	r18, r24
    3978:	30 e0       	ldi	r19, 0x00	; 0
    397a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    397c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    397e:	fc 01       	movw	r30, r24
    3980:	e2 0f       	add	r30, r18
    3982:	f3 1f       	adc	r31, r19
    3984:	80 81       	ld	r24, Z
    3986:	85 34       	cpi	r24, 0x45	; 69
    3988:	d8 f0       	brcs	.+54     	; 0x39c0 <LCD_voidDisplayKeys+0xc6>
    398a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    398c:	f8 a1       	ldd	r31, Y+32	; 0x20
    398e:	80 81       	ld	r24, Z
    3990:	28 2f       	mov	r18, r24
    3992:	30 e0       	ldi	r19, 0x00	; 0
    3994:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3996:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3998:	fc 01       	movw	r30, r24
    399a:	e2 0f       	add	r30, r18
    399c:	f3 1f       	adc	r31, r19
    399e:	80 81       	ld	r24, Z
    39a0:	8a 32       	cpi	r24, 0x2A	; 42
    39a2:	71 f0       	breq	.+28     	; 0x39c0 <LCD_voidDisplayKeys+0xc6>
    39a4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    39a6:	f8 a1       	ldd	r31, Y+32	; 0x20
    39a8:	80 81       	ld	r24, Z
    39aa:	28 2f       	mov	r18, r24
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39b2:	fc 01       	movw	r30, r24
    39b4:	e2 0f       	add	r30, r18
    39b6:	f3 1f       	adc	r31, r19
    39b8:	80 81       	ld	r24, Z
    39ba:	83 32       	cpi	r24, 0x23	; 35
    39bc:	09 f0       	breq	.+2      	; 0x39c0 <LCD_voidDisplayKeys+0xc6>
    39be:	01 c1       	rjmp	.+514    	; 0x3bc2 <LCD_voidDisplayKeys+0x2c8>
		LCD_voidWriteCharctr_4bitMode(u8key[*index]);
    39c0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    39c2:	f8 a1       	ldd	r31, Y+32	; 0x20
    39c4:	80 81       	ld	r24, Z
    39c6:	28 2f       	mov	r18, r24
    39c8:	30 e0       	ldi	r19, 0x00	; 0
    39ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39ce:	fc 01       	movw	r30, r24
    39d0:	e2 0f       	add	r30, r18
    39d2:	f3 1f       	adc	r31, r19
    39d4:	80 81       	ld	r24, Z
    39d6:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <LCD_voidWriteCharctr_4bitMode>
		LCD_voidGotoxy_4bitMode(*index, LineTwo);
    39da:	ef 8d       	ldd	r30, Y+31	; 0x1f
    39dc:	f8 a1       	ldd	r31, Y+32	; 0x20
    39de:	80 81       	ld	r24, Z
    39e0:	62 e0       	ldi	r22, 0x02	; 2
    39e2:	0e 94 46 1c 	call	0x388c	; 0x388c <LCD_voidGotoxy_4bitMode>
    39e6:	80 e0       	ldi	r24, 0x00	; 0
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	a8 e4       	ldi	r26, 0x48	; 72
    39ec:	b3 e4       	ldi	r27, 0x43	; 67
    39ee:	89 8f       	std	Y+25, r24	; 0x19
    39f0:	9a 8f       	std	Y+26, r25	; 0x1a
    39f2:	ab 8f       	std	Y+27, r26	; 0x1b
    39f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39f6:	69 8d       	ldd	r22, Y+25	; 0x19
    39f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39fe:	20 e0       	ldi	r18, 0x00	; 0
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	4a ef       	ldi	r20, 0xFA	; 250
    3a04:	54 e4       	ldi	r21, 0x44	; 68
    3a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a0a:	dc 01       	movw	r26, r24
    3a0c:	cb 01       	movw	r24, r22
    3a0e:	8d 8b       	std	Y+21, r24	; 0x15
    3a10:	9e 8b       	std	Y+22, r25	; 0x16
    3a12:	af 8b       	std	Y+23, r26	; 0x17
    3a14:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a16:	6d 89       	ldd	r22, Y+21	; 0x15
    3a18:	7e 89       	ldd	r23, Y+22	; 0x16
    3a1a:	8f 89       	ldd	r24, Y+23	; 0x17
    3a1c:	98 8d       	ldd	r25, Y+24	; 0x18
    3a1e:	20 e0       	ldi	r18, 0x00	; 0
    3a20:	30 e0       	ldi	r19, 0x00	; 0
    3a22:	40 e8       	ldi	r20, 0x80	; 128
    3a24:	5f e3       	ldi	r21, 0x3F	; 63
    3a26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a2a:	88 23       	and	r24, r24
    3a2c:	2c f4       	brge	.+10     	; 0x3a38 <LCD_voidDisplayKeys+0x13e>
		__ticks = 1;
    3a2e:	81 e0       	ldi	r24, 0x01	; 1
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	9c 8b       	std	Y+20, r25	; 0x14
    3a34:	8b 8b       	std	Y+19, r24	; 0x13
    3a36:	3f c0       	rjmp	.+126    	; 0x3ab6 <LCD_voidDisplayKeys+0x1bc>
	else if (__tmp > 65535)
    3a38:	6d 89       	ldd	r22, Y+21	; 0x15
    3a3a:	7e 89       	ldd	r23, Y+22	; 0x16
    3a3c:	8f 89       	ldd	r24, Y+23	; 0x17
    3a3e:	98 8d       	ldd	r25, Y+24	; 0x18
    3a40:	20 e0       	ldi	r18, 0x00	; 0
    3a42:	3f ef       	ldi	r19, 0xFF	; 255
    3a44:	4f e7       	ldi	r20, 0x7F	; 127
    3a46:	57 e4       	ldi	r21, 0x47	; 71
    3a48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a4c:	18 16       	cp	r1, r24
    3a4e:	4c f5       	brge	.+82     	; 0x3aa2 <LCD_voidDisplayKeys+0x1a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a50:	69 8d       	ldd	r22, Y+25	; 0x19
    3a52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a58:	20 e0       	ldi	r18, 0x00	; 0
    3a5a:	30 e0       	ldi	r19, 0x00	; 0
    3a5c:	40 e2       	ldi	r20, 0x20	; 32
    3a5e:	51 e4       	ldi	r21, 0x41	; 65
    3a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a64:	dc 01       	movw	r26, r24
    3a66:	cb 01       	movw	r24, r22
    3a68:	bc 01       	movw	r22, r24
    3a6a:	cd 01       	movw	r24, r26
    3a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a70:	dc 01       	movw	r26, r24
    3a72:	cb 01       	movw	r24, r22
    3a74:	9c 8b       	std	Y+20, r25	; 0x14
    3a76:	8b 8b       	std	Y+19, r24	; 0x13
    3a78:	0f c0       	rjmp	.+30     	; 0x3a98 <LCD_voidDisplayKeys+0x19e>
    3a7a:	88 ec       	ldi	r24, 0xC8	; 200
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	9a 8b       	std	Y+18, r25	; 0x12
    3a80:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a82:	89 89       	ldd	r24, Y+17	; 0x11
    3a84:	9a 89       	ldd	r25, Y+18	; 0x12
    3a86:	01 97       	sbiw	r24, 0x01	; 1
    3a88:	f1 f7       	brne	.-4      	; 0x3a86 <LCD_voidDisplayKeys+0x18c>
    3a8a:	9a 8b       	std	Y+18, r25	; 0x12
    3a8c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a8e:	8b 89       	ldd	r24, Y+19	; 0x13
    3a90:	9c 89       	ldd	r25, Y+20	; 0x14
    3a92:	01 97       	sbiw	r24, 0x01	; 1
    3a94:	9c 8b       	std	Y+20, r25	; 0x14
    3a96:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a98:	8b 89       	ldd	r24, Y+19	; 0x13
    3a9a:	9c 89       	ldd	r25, Y+20	; 0x14
    3a9c:	00 97       	sbiw	r24, 0x00	; 0
    3a9e:	69 f7       	brne	.-38     	; 0x3a7a <LCD_voidDisplayKeys+0x180>
    3aa0:	14 c0       	rjmp	.+40     	; 0x3aca <LCD_voidDisplayKeys+0x1d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aa2:	6d 89       	ldd	r22, Y+21	; 0x15
    3aa4:	7e 89       	ldd	r23, Y+22	; 0x16
    3aa6:	8f 89       	ldd	r24, Y+23	; 0x17
    3aa8:	98 8d       	ldd	r25, Y+24	; 0x18
    3aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aae:	dc 01       	movw	r26, r24
    3ab0:	cb 01       	movw	r24, r22
    3ab2:	9c 8b       	std	Y+20, r25	; 0x14
    3ab4:	8b 8b       	std	Y+19, r24	; 0x13
    3ab6:	8b 89       	ldd	r24, Y+19	; 0x13
    3ab8:	9c 89       	ldd	r25, Y+20	; 0x14
    3aba:	98 8b       	std	Y+16, r25	; 0x10
    3abc:	8f 87       	std	Y+15, r24	; 0x0f
    3abe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ac0:	98 89       	ldd	r25, Y+16	; 0x10
    3ac2:	01 97       	sbiw	r24, 0x01	; 1
    3ac4:	f1 f7       	brne	.-4      	; 0x3ac2 <LCD_voidDisplayKeys+0x1c8>
    3ac6:	98 8b       	std	Y+16, r25	; 0x10
    3ac8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		LCD_voidWriteCharctr_4bitMode('*');
    3aca:	8a e2       	ldi	r24, 0x2A	; 42
    3acc:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <LCD_voidWriteCharctr_4bitMode>
    3ad0:	80 e0       	ldi	r24, 0x00	; 0
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	a8 ec       	ldi	r26, 0xC8	; 200
    3ad6:	b2 e4       	ldi	r27, 0x42	; 66
    3ad8:	8b 87       	std	Y+11, r24	; 0x0b
    3ada:	9c 87       	std	Y+12, r25	; 0x0c
    3adc:	ad 87       	std	Y+13, r26	; 0x0d
    3ade:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ae0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ae2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ae4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ae6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ae8:	20 e0       	ldi	r18, 0x00	; 0
    3aea:	30 e0       	ldi	r19, 0x00	; 0
    3aec:	4a ef       	ldi	r20, 0xFA	; 250
    3aee:	54 e4       	ldi	r21, 0x44	; 68
    3af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af4:	dc 01       	movw	r26, r24
    3af6:	cb 01       	movw	r24, r22
    3af8:	8f 83       	std	Y+7, r24	; 0x07
    3afa:	98 87       	std	Y+8, r25	; 0x08
    3afc:	a9 87       	std	Y+9, r26	; 0x09
    3afe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b00:	6f 81       	ldd	r22, Y+7	; 0x07
    3b02:	78 85       	ldd	r23, Y+8	; 0x08
    3b04:	89 85       	ldd	r24, Y+9	; 0x09
    3b06:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	40 e8       	ldi	r20, 0x80	; 128
    3b0e:	5f e3       	ldi	r21, 0x3F	; 63
    3b10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b14:	88 23       	and	r24, r24
    3b16:	2c f4       	brge	.+10     	; 0x3b22 <LCD_voidDisplayKeys+0x228>
		__ticks = 1;
    3b18:	81 e0       	ldi	r24, 0x01	; 1
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	9e 83       	std	Y+6, r25	; 0x06
    3b1e:	8d 83       	std	Y+5, r24	; 0x05
    3b20:	3f c0       	rjmp	.+126    	; 0x3ba0 <LCD_voidDisplayKeys+0x2a6>
	else if (__tmp > 65535)
    3b22:	6f 81       	ldd	r22, Y+7	; 0x07
    3b24:	78 85       	ldd	r23, Y+8	; 0x08
    3b26:	89 85       	ldd	r24, Y+9	; 0x09
    3b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b2a:	20 e0       	ldi	r18, 0x00	; 0
    3b2c:	3f ef       	ldi	r19, 0xFF	; 255
    3b2e:	4f e7       	ldi	r20, 0x7F	; 127
    3b30:	57 e4       	ldi	r21, 0x47	; 71
    3b32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b36:	18 16       	cp	r1, r24
    3b38:	4c f5       	brge	.+82     	; 0x3b8c <LCD_voidDisplayKeys+0x292>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b40:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b42:	20 e0       	ldi	r18, 0x00	; 0
    3b44:	30 e0       	ldi	r19, 0x00	; 0
    3b46:	40 e2       	ldi	r20, 0x20	; 32
    3b48:	51 e4       	ldi	r21, 0x41	; 65
    3b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b4e:	dc 01       	movw	r26, r24
    3b50:	cb 01       	movw	r24, r22
    3b52:	bc 01       	movw	r22, r24
    3b54:	cd 01       	movw	r24, r26
    3b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b5a:	dc 01       	movw	r26, r24
    3b5c:	cb 01       	movw	r24, r22
    3b5e:	9e 83       	std	Y+6, r25	; 0x06
    3b60:	8d 83       	std	Y+5, r24	; 0x05
    3b62:	0f c0       	rjmp	.+30     	; 0x3b82 <LCD_voidDisplayKeys+0x288>
    3b64:	88 ec       	ldi	r24, 0xC8	; 200
    3b66:	90 e0       	ldi	r25, 0x00	; 0
    3b68:	9c 83       	std	Y+4, r25	; 0x04
    3b6a:	8b 83       	std	Y+3, r24	; 0x03
    3b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b70:	01 97       	sbiw	r24, 0x01	; 1
    3b72:	f1 f7       	brne	.-4      	; 0x3b70 <LCD_voidDisplayKeys+0x276>
    3b74:	9c 83       	std	Y+4, r25	; 0x04
    3b76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b78:	8d 81       	ldd	r24, Y+5	; 0x05
    3b7a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b7c:	01 97       	sbiw	r24, 0x01	; 1
    3b7e:	9e 83       	std	Y+6, r25	; 0x06
    3b80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b82:	8d 81       	ldd	r24, Y+5	; 0x05
    3b84:	9e 81       	ldd	r25, Y+6	; 0x06
    3b86:	00 97       	sbiw	r24, 0x00	; 0
    3b88:	69 f7       	brne	.-38     	; 0x3b64 <LCD_voidDisplayKeys+0x26a>
    3b8a:	14 c0       	rjmp	.+40     	; 0x3bb4 <LCD_voidDisplayKeys+0x2ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b8c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b8e:	78 85       	ldd	r23, Y+8	; 0x08
    3b90:	89 85       	ldd	r24, Y+9	; 0x09
    3b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b98:	dc 01       	movw	r26, r24
    3b9a:	cb 01       	movw	r24, r22
    3b9c:	9e 83       	std	Y+6, r25	; 0x06
    3b9e:	8d 83       	std	Y+5, r24	; 0x05
    3ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ba4:	9a 83       	std	Y+2, r25	; 0x02
    3ba6:	89 83       	std	Y+1, r24	; 0x01
    3ba8:	89 81       	ldd	r24, Y+1	; 0x01
    3baa:	9a 81       	ldd	r25, Y+2	; 0x02
    3bac:	01 97       	sbiw	r24, 0x01	; 1
    3bae:	f1 f7       	brne	.-4      	; 0x3bac <LCD_voidDisplayKeys+0x2b2>
    3bb0:	9a 83       	std	Y+2, r25	; 0x02
    3bb2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		(*index)++;
    3bb4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3bb6:	f8 a1       	ldd	r31, Y+32	; 0x20
    3bb8:	80 81       	ld	r24, Z
    3bba:	8f 5f       	subi	r24, 0xFF	; 255
    3bbc:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3bbe:	f8 a1       	ldd	r31, Y+32	; 0x20
    3bc0:	80 83       	st	Z, r24
	}
}
    3bc2:	a0 96       	adiw	r28, 0x20	; 32
    3bc4:	0f b6       	in	r0, 0x3f	; 63
    3bc6:	f8 94       	cli
    3bc8:	de bf       	out	0x3e, r29	; 62
    3bca:	0f be       	out	0x3f, r0	; 63
    3bcc:	cd bf       	out	0x3d, r28	; 61
    3bce:	cf 91       	pop	r28
    3bd0:	df 91       	pop	r29
    3bd2:	08 95       	ret

00003bd4 <KPD_voidInit>:
					 { '4', '5', '6', 'B'},
					 { '1', '2', '3', 'C'},
					 { '*', '0', '#', 'D'}};


void KPD_voidInit(void){
    3bd4:	df 93       	push	r29
    3bd6:	cf 93       	push	r28
    3bd8:	0f 92       	push	r0
    3bda:	cd b7       	in	r28, 0x3d	; 61
    3bdc:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	for(i=ROW_START; i<=ROW_END; i++){
    3bde:	19 82       	std	Y+1, r1	; 0x01
    3be0:	08 c0       	rjmp	.+16     	; 0x3bf2 <KPD_voidInit+0x1e>
		//make all rows input pull up
		DIO_voidPullUpState(KPD_ROW_PORT,i, ENABLE_PULLUP);
    3be2:	84 e0       	ldi	r24, 0x04	; 4
    3be4:	69 81       	ldd	r22, Y+1	; 0x01
    3be6:	41 e0       	ldi	r20, 0x01	; 1
    3be8:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <DIO_voidPullUpState>
					 { '*', '0', '#', 'D'}};


void KPD_voidInit(void){
	uint8 i;
	for(i=ROW_START; i<=ROW_END; i++){
    3bec:	89 81       	ldd	r24, Y+1	; 0x01
    3bee:	8f 5f       	subi	r24, 0xFF	; 255
    3bf0:	89 83       	std	Y+1, r24	; 0x01
    3bf2:	89 81       	ldd	r24, Y+1	; 0x01
    3bf4:	84 30       	cpi	r24, 0x04	; 4
    3bf6:	a8 f3       	brcs	.-22     	; 0x3be2 <KPD_voidInit+0xe>
		//make all rows input pull up
		DIO_voidPullUpState(KPD_ROW_PORT,i, ENABLE_PULLUP);
	}
	for(i=COLUMN_START; i<=COLUMN_END; i++){
    3bf8:	84 e0       	ldi	r24, 0x04	; 4
    3bfa:	89 83       	std	Y+1, r24	; 0x01
    3bfc:	08 c0       	rjmp	.+16     	; 0x3c0e <KPD_voidInit+0x3a>
		//make all column pins high
		//DIO_voidWritePin(KPD_PORT,i, DIO_INPUT);
		DIO_voidWritePin(KPD_COLUMN_PORT,i, DIO_HIGH);
    3bfe:	83 e0       	ldi	r24, 0x03	; 3
    3c00:	69 81       	ldd	r22, Y+1	; 0x01
    3c02:	41 e0       	ldi	r20, 0x01	; 1
    3c04:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
	uint8 i;
	for(i=ROW_START; i<=ROW_END; i++){
		//make all rows input pull up
		DIO_voidPullUpState(KPD_ROW_PORT,i, ENABLE_PULLUP);
	}
	for(i=COLUMN_START; i<=COLUMN_END; i++){
    3c08:	89 81       	ldd	r24, Y+1	; 0x01
    3c0a:	8f 5f       	subi	r24, 0xFF	; 255
    3c0c:	89 83       	std	Y+1, r24	; 0x01
    3c0e:	89 81       	ldd	r24, Y+1	; 0x01
    3c10:	88 30       	cpi	r24, 0x08	; 8
    3c12:	a8 f3       	brcs	.-22     	; 0x3bfe <KPD_voidInit+0x2a>
		//make all column pins high
		//DIO_voidWritePin(KPD_PORT,i, DIO_INPUT);
		DIO_voidWritePin(KPD_COLUMN_PORT,i, DIO_HIGH);
		}
}
    3c14:	0f 90       	pop	r0
    3c16:	cf 91       	pop	r28
    3c18:	df 91       	pop	r29
    3c1a:	08 95       	ret

00003c1c <KPD_u8GetKey>:

uint8 KPD_u8GetKey(void){
    3c1c:	df 93       	push	r29
    3c1e:	cf 93       	push	r28
    3c20:	cd b7       	in	r28, 0x3d	; 61
    3c22:	de b7       	in	r29, 0x3e	; 62
    3c24:	64 97       	sbiw	r28, 0x14	; 20
    3c26:	0f b6       	in	r0, 0x3f	; 63
    3c28:	f8 94       	cli
    3c2a:	de bf       	out	0x3e, r29	; 62
    3c2c:	0f be       	out	0x3f, r0	; 63
    3c2e:	cd bf       	out	0x3d, r28	; 61
	uint8 key = NoPressedKey;
    3c30:	8f ef       	ldi	r24, 0xFF	; 255
    3c32:	8c 8b       	std	Y+20, r24	; 0x14
	uint8 i=0, j=0, k=0;
    3c34:	1b 8a       	std	Y+19, r1	; 0x13
    3c36:	1a 8a       	std	Y+18, r1	; 0x12
    3c38:	19 8a       	std	Y+17, r1	; 0x11
	uint8 result, exitflag = DIO_LOW;
    3c3a:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;i<4;i++){			//loop over columns
    3c3c:	1b 8a       	std	Y+19, r1	; 0x13
    3c3e:	b6 c0       	rjmp	.+364    	; 0x3dac <KPD_u8GetKey+0x190>
		//set all columns high
		for(k=COLUMN_START; k<=COLUMN_END;k++){
    3c40:	84 e0       	ldi	r24, 0x04	; 4
    3c42:	89 8b       	std	Y+17, r24	; 0x11
    3c44:	08 c0       	rjmp	.+16     	; 0x3c56 <KPD_u8GetKey+0x3a>
			DIO_voidWritePin(KPD_COLUMN_PORT,k, DIO_HIGH);
    3c46:	83 e0       	ldi	r24, 0x03	; 3
    3c48:	69 89       	ldd	r22, Y+17	; 0x11
    3c4a:	41 e0       	ldi	r20, 0x01	; 1
    3c4c:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
	uint8 key = NoPressedKey;
	uint8 i=0, j=0, k=0;
	uint8 result, exitflag = DIO_LOW;
	for(i=0;i<4;i++){			//loop over columns
		//set all columns high
		for(k=COLUMN_START; k<=COLUMN_END;k++){
    3c50:	89 89       	ldd	r24, Y+17	; 0x11
    3c52:	8f 5f       	subi	r24, 0xFF	; 255
    3c54:	89 8b       	std	Y+17, r24	; 0x11
    3c56:	89 89       	ldd	r24, Y+17	; 0x11
    3c58:	88 30       	cpi	r24, 0x08	; 8
    3c5a:	a8 f3       	brcs	.-22     	; 0x3c46 <KPD_u8GetKey+0x2a>
			DIO_voidWritePin(KPD_COLUMN_PORT,k, DIO_HIGH);
		}
		//set column low
		DIO_voidWritePin(KPD_COLUMN_PORT,(COLUMN_START+i), DIO_LOW);
    3c5c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c5e:	98 2f       	mov	r25, r24
    3c60:	9c 5f       	subi	r25, 0xFC	; 252
    3c62:	83 e0       	ldi	r24, 0x03	; 3
    3c64:	69 2f       	mov	r22, r25
    3c66:	40 e0       	ldi	r20, 0x00	; 0
    3c68:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>

		for(j=0;j<4;j++){		//loop over rows
    3c6c:	1a 8a       	std	Y+18, r1	; 0x12
    3c6e:	94 c0       	rjmp	.+296    	; 0x3d98 <KPD_u8GetKey+0x17c>
			result = DIO_u8ReadPin(KPD_ROW_PORT, (ROW_START+j));
    3c70:	84 e0       	ldi	r24, 0x04	; 4
    3c72:	6a 89       	ldd	r22, Y+18	; 0x12
    3c74:	0e 94 61 24 	call	0x48c2	; 0x48c2 <DIO_u8ReadPin>
    3c78:	88 8b       	std	Y+16, r24	; 0x10
    3c7a:	80 e0       	ldi	r24, 0x00	; 0
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	a0 ea       	ldi	r26, 0xA0	; 160
    3c80:	b1 e4       	ldi	r27, 0x41	; 65
    3c82:	8b 87       	std	Y+11, r24	; 0x0b
    3c84:	9c 87       	std	Y+12, r25	; 0x0c
    3c86:	ad 87       	std	Y+13, r26	; 0x0d
    3c88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c90:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c92:	20 e0       	ldi	r18, 0x00	; 0
    3c94:	30 e0       	ldi	r19, 0x00	; 0
    3c96:	4a ef       	ldi	r20, 0xFA	; 250
    3c98:	54 e4       	ldi	r21, 0x44	; 68
    3c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c9e:	dc 01       	movw	r26, r24
    3ca0:	cb 01       	movw	r24, r22
    3ca2:	8f 83       	std	Y+7, r24	; 0x07
    3ca4:	98 87       	std	Y+8, r25	; 0x08
    3ca6:	a9 87       	std	Y+9, r26	; 0x09
    3ca8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3caa:	6f 81       	ldd	r22, Y+7	; 0x07
    3cac:	78 85       	ldd	r23, Y+8	; 0x08
    3cae:	89 85       	ldd	r24, Y+9	; 0x09
    3cb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cb2:	20 e0       	ldi	r18, 0x00	; 0
    3cb4:	30 e0       	ldi	r19, 0x00	; 0
    3cb6:	40 e8       	ldi	r20, 0x80	; 128
    3cb8:	5f e3       	ldi	r21, 0x3F	; 63
    3cba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cbe:	88 23       	and	r24, r24
    3cc0:	2c f4       	brge	.+10     	; 0x3ccc <KPD_u8GetKey+0xb0>
		__ticks = 1;
    3cc2:	81 e0       	ldi	r24, 0x01	; 1
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	9e 83       	std	Y+6, r25	; 0x06
    3cc8:	8d 83       	std	Y+5, r24	; 0x05
    3cca:	3f c0       	rjmp	.+126    	; 0x3d4a <KPD_u8GetKey+0x12e>
	else if (__tmp > 65535)
    3ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    3cce:	78 85       	ldd	r23, Y+8	; 0x08
    3cd0:	89 85       	ldd	r24, Y+9	; 0x09
    3cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cd4:	20 e0       	ldi	r18, 0x00	; 0
    3cd6:	3f ef       	ldi	r19, 0xFF	; 255
    3cd8:	4f e7       	ldi	r20, 0x7F	; 127
    3cda:	57 e4       	ldi	r21, 0x47	; 71
    3cdc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ce0:	18 16       	cp	r1, r24
    3ce2:	4c f5       	brge	.+82     	; 0x3d36 <KPD_u8GetKey+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ce4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ce6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ce8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cea:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cec:	20 e0       	ldi	r18, 0x00	; 0
    3cee:	30 e0       	ldi	r19, 0x00	; 0
    3cf0:	40 e2       	ldi	r20, 0x20	; 32
    3cf2:	51 e4       	ldi	r21, 0x41	; 65
    3cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf8:	dc 01       	movw	r26, r24
    3cfa:	cb 01       	movw	r24, r22
    3cfc:	bc 01       	movw	r22, r24
    3cfe:	cd 01       	movw	r24, r26
    3d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d04:	dc 01       	movw	r26, r24
    3d06:	cb 01       	movw	r24, r22
    3d08:	9e 83       	std	Y+6, r25	; 0x06
    3d0a:	8d 83       	std	Y+5, r24	; 0x05
    3d0c:	0f c0       	rjmp	.+30     	; 0x3d2c <KPD_u8GetKey+0x110>
    3d0e:	88 ec       	ldi	r24, 0xC8	; 200
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	9c 83       	std	Y+4, r25	; 0x04
    3d14:	8b 83       	std	Y+3, r24	; 0x03
    3d16:	8b 81       	ldd	r24, Y+3	; 0x03
    3d18:	9c 81       	ldd	r25, Y+4	; 0x04
    3d1a:	01 97       	sbiw	r24, 0x01	; 1
    3d1c:	f1 f7       	brne	.-4      	; 0x3d1a <KPD_u8GetKey+0xfe>
    3d1e:	9c 83       	std	Y+4, r25	; 0x04
    3d20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d22:	8d 81       	ldd	r24, Y+5	; 0x05
    3d24:	9e 81       	ldd	r25, Y+6	; 0x06
    3d26:	01 97       	sbiw	r24, 0x01	; 1
    3d28:	9e 83       	std	Y+6, r25	; 0x06
    3d2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d30:	00 97       	sbiw	r24, 0x00	; 0
    3d32:	69 f7       	brne	.-38     	; 0x3d0e <KPD_u8GetKey+0xf2>
    3d34:	14 c0       	rjmp	.+40     	; 0x3d5e <KPD_u8GetKey+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d36:	6f 81       	ldd	r22, Y+7	; 0x07
    3d38:	78 85       	ldd	r23, Y+8	; 0x08
    3d3a:	89 85       	ldd	r24, Y+9	; 0x09
    3d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d42:	dc 01       	movw	r26, r24
    3d44:	cb 01       	movw	r24, r22
    3d46:	9e 83       	std	Y+6, r25	; 0x06
    3d48:	8d 83       	std	Y+5, r24	; 0x05
    3d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d4c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d4e:	9a 83       	std	Y+2, r25	; 0x02
    3d50:	89 83       	std	Y+1, r24	; 0x01
    3d52:	89 81       	ldd	r24, Y+1	; 0x01
    3d54:	9a 81       	ldd	r25, Y+2	; 0x02
    3d56:	01 97       	sbiw	r24, 0x01	; 1
    3d58:	f1 f7       	brne	.-4      	; 0x3d56 <KPD_u8GetKey+0x13a>
    3d5a:	9a 83       	std	Y+2, r25	; 0x02
    3d5c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(20);
			if(result == DIO_LOW){
    3d5e:	88 89       	ldd	r24, Y+16	; 0x10
    3d60:	88 23       	and	r24, r24
    3d62:	b9 f4       	brne	.+46     	; 0x3d92 <KPD_u8GetKey+0x176>
				key = KPD_arr[j][i];
    3d64:	8a 89       	ldd	r24, Y+18	; 0x12
    3d66:	48 2f       	mov	r20, r24
    3d68:	50 e0       	ldi	r21, 0x00	; 0
    3d6a:	8b 89       	ldd	r24, Y+19	; 0x13
    3d6c:	28 2f       	mov	r18, r24
    3d6e:	30 e0       	ldi	r19, 0x00	; 0
    3d70:	ca 01       	movw	r24, r20
    3d72:	88 0f       	add	r24, r24
    3d74:	99 1f       	adc	r25, r25
    3d76:	88 0f       	add	r24, r24
    3d78:	99 1f       	adc	r25, r25
    3d7a:	82 0f       	add	r24, r18
    3d7c:	93 1f       	adc	r25, r19
    3d7e:	fc 01       	movw	r30, r24
    3d80:	e1 53       	subi	r30, 0x31	; 49
    3d82:	ff 4f       	sbci	r31, 0xFF	; 255
    3d84:	80 81       	ld	r24, Z
    3d86:	8c 8b       	std	Y+20, r24	; 0x14
				exitflag = DIO_HIGH;
    3d88:	81 e0       	ldi	r24, 0x01	; 1
    3d8a:	8f 87       	std	Y+15, r24	; 0x0f
				if(exitflag ==DIO_HIGH){
    3d8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d8e:	81 30       	cpi	r24, 0x01	; 1
    3d90:	39 f0       	breq	.+14     	; 0x3da0 <KPD_u8GetKey+0x184>
			DIO_voidWritePin(KPD_COLUMN_PORT,k, DIO_HIGH);
		}
		//set column low
		DIO_voidWritePin(KPD_COLUMN_PORT,(COLUMN_START+i), DIO_LOW);

		for(j=0;j<4;j++){		//loop over rows
    3d92:	8a 89       	ldd	r24, Y+18	; 0x12
    3d94:	8f 5f       	subi	r24, 0xFF	; 255
    3d96:	8a 8b       	std	Y+18, r24	; 0x12
    3d98:	8a 89       	ldd	r24, Y+18	; 0x12
    3d9a:	84 30       	cpi	r24, 0x04	; 4
    3d9c:	08 f4       	brcc	.+2      	; 0x3da0 <KPD_u8GetKey+0x184>
    3d9e:	68 cf       	rjmp	.-304    	; 0x3c70 <KPD_u8GetKey+0x54>
				if(exitflag ==DIO_HIGH){
					break;
				}
			}
		}
		if(exitflag == DIO_HIGH){
    3da0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3da2:	81 30       	cpi	r24, 0x01	; 1
    3da4:	39 f0       	breq	.+14     	; 0x3db4 <KPD_u8GetKey+0x198>

uint8 KPD_u8GetKey(void){
	uint8 key = NoPressedKey;
	uint8 i=0, j=0, k=0;
	uint8 result, exitflag = DIO_LOW;
	for(i=0;i<4;i++){			//loop over columns
    3da6:	8b 89       	ldd	r24, Y+19	; 0x13
    3da8:	8f 5f       	subi	r24, 0xFF	; 255
    3daa:	8b 8b       	std	Y+19, r24	; 0x13
    3dac:	8b 89       	ldd	r24, Y+19	; 0x13
    3dae:	84 30       	cpi	r24, 0x04	; 4
    3db0:	08 f4       	brcc	.+2      	; 0x3db4 <KPD_u8GetKey+0x198>
    3db2:	46 cf       	rjmp	.-372    	; 0x3c40 <KPD_u8GetKey+0x24>
		}
		if(exitflag == DIO_HIGH){
			break;
		}
	}
	return key;
    3db4:	8c 89       	ldd	r24, Y+20	; 0x14
}
    3db6:	64 96       	adiw	r28, 0x14	; 20
    3db8:	0f b6       	in	r0, 0x3f	; 63
    3dba:	f8 94       	cli
    3dbc:	de bf       	out	0x3e, r29	; 62
    3dbe:	0f be       	out	0x3f, r0	; 63
    3dc0:	cd bf       	out	0x3d, r28	; 61
    3dc2:	cf 91       	pop	r28
    3dc4:	df 91       	pop	r29
    3dc6:	08 95       	ret

00003dc8 <EXT_INTERRUPT_VID_INIT>:
void (*EXTI0_CALLBACK_PTR)(void)=NULL;
void (*EXTI1_CALLBACK_PTR)(void)=NULL;
void (*EXTI2_CALLBACK_PTR)(void)=NULL;


void EXT_INTERRUPT_VID_INIT(void){
    3dc8:	df 93       	push	r29
    3dca:	cf 93       	push	r28
    3dcc:	cd b7       	in	r28, 0x3d	; 61
    3dce:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,ISC01);
#elif EXT0_MODE==   IOC
	SET_BIT(MCUCR,ISC00);
	CLR_BIT(MCUCR,ISC01);
#elif EXT0_MODE==   FALLING_EDGE
	CLR_BIT(MCUCR,ISC00);
    3dd0:	a5 e5       	ldi	r26, 0x55	; 85
    3dd2:	b0 e0       	ldi	r27, 0x00	; 0
    3dd4:	e5 e5       	ldi	r30, 0x55	; 85
    3dd6:	f0 e0       	ldi	r31, 0x00	; 0
    3dd8:	80 81       	ld	r24, Z
    3dda:	8e 7f       	andi	r24, 0xFE	; 254
    3ddc:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC01);
    3dde:	a5 e5       	ldi	r26, 0x55	; 85
    3de0:	b0 e0       	ldi	r27, 0x00	; 0
    3de2:	e5 e5       	ldi	r30, 0x55	; 85
    3de4:	f0 e0       	ldi	r31, 0x00	; 0
    3de6:	80 81       	ld	r24, Z
    3de8:	82 60       	ori	r24, 0x02	; 2
    3dea:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,ISC11);
#elif EXT1_MODE==   IOC
	SET_BIT(MCUCR,ISC10);
	CLR_BIT(MCUCR,ISC11);
#elif EXT1_MODE==   FALLING_EDGE
	CLR_BIT(MCUCR,ISC10);
    3dec:	a5 e5       	ldi	r26, 0x55	; 85
    3dee:	b0 e0       	ldi	r27, 0x00	; 0
    3df0:	e5 e5       	ldi	r30, 0x55	; 85
    3df2:	f0 e0       	ldi	r31, 0x00	; 0
    3df4:	80 81       	ld	r24, Z
    3df6:	8b 7f       	andi	r24, 0xFB	; 251
    3df8:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC11);
    3dfa:	a5 e5       	ldi	r26, 0x55	; 85
    3dfc:	b0 e0       	ldi	r27, 0x00	; 0
    3dfe:	e5 e5       	ldi	r30, 0x55	; 85
    3e00:	f0 e0       	ldi	r31, 0x00	; 0
    3e02:	80 81       	ld	r24, Z
    3e04:	88 60       	ori	r24, 0x08	; 8
    3e06:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC11);
#else
#endif

#if EXT2_MODE== FALLING_EDGE
	CLR_BIT(MCUCSR,ISC2);
    3e08:	a4 e5       	ldi	r26, 0x54	; 84
    3e0a:	b0 e0       	ldi	r27, 0x00	; 0
    3e0c:	e4 e5       	ldi	r30, 0x54	; 84
    3e0e:	f0 e0       	ldi	r31, 0x00	; 0
    3e10:	80 81       	ld	r24, Z
    3e12:	8f 7b       	andi	r24, 0xBF	; 191
    3e14:	8c 93       	st	X, r24
	SET_BIT(MCUCSR,ISC2);


#else
#endif
}
    3e16:	cf 91       	pop	r28
    3e18:	df 91       	pop	r29
    3e1a:	08 95       	ret

00003e1c <EXT_INTERRUPT_VID_ENABLE>:

void EXT_INTERRUPT_VID_ENABLE(uint8 interrupt_number){
    3e1c:	df 93       	push	r29
    3e1e:	cf 93       	push	r28
    3e20:	00 d0       	rcall	.+0      	; 0x3e22 <EXT_INTERRUPT_VID_ENABLE+0x6>
    3e22:	0f 92       	push	r0
    3e24:	cd b7       	in	r28, 0x3d	; 61
    3e26:	de b7       	in	r29, 0x3e	; 62
    3e28:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt_number){
    3e2a:	89 81       	ldd	r24, Y+1	; 0x01
    3e2c:	28 2f       	mov	r18, r24
    3e2e:	30 e0       	ldi	r19, 0x00	; 0
    3e30:	3b 83       	std	Y+3, r19	; 0x03
    3e32:	2a 83       	std	Y+2, r18	; 0x02
    3e34:	8a 81       	ldd	r24, Y+2	; 0x02
    3e36:	9b 81       	ldd	r25, Y+3	; 0x03
    3e38:	81 30       	cpi	r24, 0x01	; 1
    3e3a:	91 05       	cpc	r25, r1
    3e3c:	89 f0       	breq	.+34     	; 0x3e60 <EXT_INTERRUPT_VID_ENABLE+0x44>
    3e3e:	2a 81       	ldd	r18, Y+2	; 0x02
    3e40:	3b 81       	ldd	r19, Y+3	; 0x03
    3e42:	22 30       	cpi	r18, 0x02	; 2
    3e44:	31 05       	cpc	r19, r1
    3e46:	a1 f0       	breq	.+40     	; 0x3e70 <EXT_INTERRUPT_VID_ENABLE+0x54>
    3e48:	8a 81       	ldd	r24, Y+2	; 0x02
    3e4a:	9b 81       	ldd	r25, Y+3	; 0x03
    3e4c:	00 97       	sbiw	r24, 0x00	; 0
    3e4e:	b9 f4       	brne	.+46     	; 0x3e7e <EXT_INTERRUPT_VID_ENABLE+0x62>
	case EXT0:
		SET_BIT(GICR, INT0);
    3e50:	ab e5       	ldi	r26, 0x5B	; 91
    3e52:	b0 e0       	ldi	r27, 0x00	; 0
    3e54:	eb e5       	ldi	r30, 0x5B	; 91
    3e56:	f0 e0       	ldi	r31, 0x00	; 0
    3e58:	80 81       	ld	r24, Z
    3e5a:	80 64       	ori	r24, 0x40	; 64
    3e5c:	8c 93       	st	X, r24
    3e5e:	0f c0       	rjmp	.+30     	; 0x3e7e <EXT_INTERRUPT_VID_ENABLE+0x62>
		break;
	case EXT1:
		SET_BIT(GICR, INT1);
    3e60:	ab e5       	ldi	r26, 0x5B	; 91
    3e62:	b0 e0       	ldi	r27, 0x00	; 0
    3e64:	eb e5       	ldi	r30, 0x5B	; 91
    3e66:	f0 e0       	ldi	r31, 0x00	; 0
    3e68:	80 81       	ld	r24, Z
    3e6a:	80 68       	ori	r24, 0x80	; 128
    3e6c:	8c 93       	st	X, r24
    3e6e:	07 c0       	rjmp	.+14     	; 0x3e7e <EXT_INTERRUPT_VID_ENABLE+0x62>
		break;
	case EXT2:
		SET_BIT(GICR, INT2);
    3e70:	ab e5       	ldi	r26, 0x5B	; 91
    3e72:	b0 e0       	ldi	r27, 0x00	; 0
    3e74:	eb e5       	ldi	r30, 0x5B	; 91
    3e76:	f0 e0       	ldi	r31, 0x00	; 0
    3e78:	80 81       	ld	r24, Z
    3e7a:	80 62       	ori	r24, 0x20	; 32
    3e7c:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    3e7e:	0f 90       	pop	r0
    3e80:	0f 90       	pop	r0
    3e82:	0f 90       	pop	r0
    3e84:	cf 91       	pop	r28
    3e86:	df 91       	pop	r29
    3e88:	08 95       	ret

00003e8a <EXT_INTERRUPT_VID_DISABLE>:

void EXT_INTERRUPT_VID_DISABLE(uint8 interrupt_number){
    3e8a:	df 93       	push	r29
    3e8c:	cf 93       	push	r28
    3e8e:	00 d0       	rcall	.+0      	; 0x3e90 <EXT_INTERRUPT_VID_DISABLE+0x6>
    3e90:	0f 92       	push	r0
    3e92:	cd b7       	in	r28, 0x3d	; 61
    3e94:	de b7       	in	r29, 0x3e	; 62
    3e96:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt_number){
    3e98:	89 81       	ldd	r24, Y+1	; 0x01
    3e9a:	28 2f       	mov	r18, r24
    3e9c:	30 e0       	ldi	r19, 0x00	; 0
    3e9e:	3b 83       	std	Y+3, r19	; 0x03
    3ea0:	2a 83       	std	Y+2, r18	; 0x02
    3ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ea6:	81 30       	cpi	r24, 0x01	; 1
    3ea8:	91 05       	cpc	r25, r1
    3eaa:	89 f0       	breq	.+34     	; 0x3ece <EXT_INTERRUPT_VID_DISABLE+0x44>
    3eac:	2a 81       	ldd	r18, Y+2	; 0x02
    3eae:	3b 81       	ldd	r19, Y+3	; 0x03
    3eb0:	22 30       	cpi	r18, 0x02	; 2
    3eb2:	31 05       	cpc	r19, r1
    3eb4:	a1 f0       	breq	.+40     	; 0x3ede <EXT_INTERRUPT_VID_DISABLE+0x54>
    3eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb8:	9b 81       	ldd	r25, Y+3	; 0x03
    3eba:	00 97       	sbiw	r24, 0x00	; 0
    3ebc:	b9 f4       	brne	.+46     	; 0x3eec <EXT_INTERRUPT_VID_DISABLE+0x62>
		case EXT0:
			CLR_BIT(GICR, INT0);
    3ebe:	ab e5       	ldi	r26, 0x5B	; 91
    3ec0:	b0 e0       	ldi	r27, 0x00	; 0
    3ec2:	eb e5       	ldi	r30, 0x5B	; 91
    3ec4:	f0 e0       	ldi	r31, 0x00	; 0
    3ec6:	80 81       	ld	r24, Z
    3ec8:	8f 7b       	andi	r24, 0xBF	; 191
    3eca:	8c 93       	st	X, r24
    3ecc:	0f c0       	rjmp	.+30     	; 0x3eec <EXT_INTERRUPT_VID_DISABLE+0x62>
			break;
		case EXT1:
			CLR_BIT(GICR, INT1);
    3ece:	ab e5       	ldi	r26, 0x5B	; 91
    3ed0:	b0 e0       	ldi	r27, 0x00	; 0
    3ed2:	eb e5       	ldi	r30, 0x5B	; 91
    3ed4:	f0 e0       	ldi	r31, 0x00	; 0
    3ed6:	80 81       	ld	r24, Z
    3ed8:	8f 77       	andi	r24, 0x7F	; 127
    3eda:	8c 93       	st	X, r24
    3edc:	07 c0       	rjmp	.+14     	; 0x3eec <EXT_INTERRUPT_VID_DISABLE+0x62>
			break;
		case EXT2:
			CLR_BIT(GICR, INT2);
    3ede:	ab e5       	ldi	r26, 0x5B	; 91
    3ee0:	b0 e0       	ldi	r27, 0x00	; 0
    3ee2:	eb e5       	ldi	r30, 0x5B	; 91
    3ee4:	f0 e0       	ldi	r31, 0x00	; 0
    3ee6:	80 81       	ld	r24, Z
    3ee8:	8f 7d       	andi	r24, 0xDF	; 223
    3eea:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
}
    3eec:	0f 90       	pop	r0
    3eee:	0f 90       	pop	r0
    3ef0:	0f 90       	pop	r0
    3ef2:	cf 91       	pop	r28
    3ef4:	df 91       	pop	r29
    3ef6:	08 95       	ret

00003ef8 <EXT0_VID_SET_CALL_BACK>:

	void EXT0_VID_SET_CALL_BACK(void (*PTR)(void)){
    3ef8:	df 93       	push	r29
    3efa:	cf 93       	push	r28
    3efc:	00 d0       	rcall	.+0      	; 0x3efe <EXT0_VID_SET_CALL_BACK+0x6>
    3efe:	cd b7       	in	r28, 0x3d	; 61
    3f00:	de b7       	in	r29, 0x3e	; 62
    3f02:	9a 83       	std	Y+2, r25	; 0x02
    3f04:	89 83       	std	Y+1, r24	; 0x01
		EXTI0_CALLBACK_PTR=PTR;
    3f06:	89 81       	ldd	r24, Y+1	; 0x01
    3f08:	9a 81       	ldd	r25, Y+2	; 0x02
    3f0a:	90 93 e5 00 	sts	0x00E5, r25
    3f0e:	80 93 e4 00 	sts	0x00E4, r24
	}
    3f12:	0f 90       	pop	r0
    3f14:	0f 90       	pop	r0
    3f16:	cf 91       	pop	r28
    3f18:	df 91       	pop	r29
    3f1a:	08 95       	ret

00003f1c <EXT1_VID_SET_CALL_BACK>:

	void EXT1_VID_SET_CALL_BACK(void (*PTR)(void)){
    3f1c:	df 93       	push	r29
    3f1e:	cf 93       	push	r28
    3f20:	00 d0       	rcall	.+0      	; 0x3f22 <EXT1_VID_SET_CALL_BACK+0x6>
    3f22:	cd b7       	in	r28, 0x3d	; 61
    3f24:	de b7       	in	r29, 0x3e	; 62
    3f26:	9a 83       	std	Y+2, r25	; 0x02
    3f28:	89 83       	std	Y+1, r24	; 0x01
		EXTI1_CALLBACK_PTR=PTR;
    3f2a:	89 81       	ldd	r24, Y+1	; 0x01
    3f2c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f2e:	90 93 e7 00 	sts	0x00E7, r25
    3f32:	80 93 e6 00 	sts	0x00E6, r24
	}
    3f36:	0f 90       	pop	r0
    3f38:	0f 90       	pop	r0
    3f3a:	cf 91       	pop	r28
    3f3c:	df 91       	pop	r29
    3f3e:	08 95       	ret

00003f40 <EXT2_VID_SET_CALL_BACK>:

	void EXT2_VID_SET_CALL_BACK(void (*PTR)(void)){
    3f40:	df 93       	push	r29
    3f42:	cf 93       	push	r28
    3f44:	00 d0       	rcall	.+0      	; 0x3f46 <EXT2_VID_SET_CALL_BACK+0x6>
    3f46:	cd b7       	in	r28, 0x3d	; 61
    3f48:	de b7       	in	r29, 0x3e	; 62
    3f4a:	9a 83       	std	Y+2, r25	; 0x02
    3f4c:	89 83       	std	Y+1, r24	; 0x01
		EXTI2_CALLBACK_PTR=PTR;
    3f4e:	89 81       	ldd	r24, Y+1	; 0x01
    3f50:	9a 81       	ldd	r25, Y+2	; 0x02
    3f52:	90 93 e9 00 	sts	0x00E9, r25
    3f56:	80 93 e8 00 	sts	0x00E8, r24
	}
    3f5a:	0f 90       	pop	r0
    3f5c:	0f 90       	pop	r0
    3f5e:	cf 91       	pop	r28
    3f60:	df 91       	pop	r29
    3f62:	08 95       	ret

00003f64 <__vector_1>:


	void __vector_1 (void) __attribute__ ((signal,used, externally_visible)) ; \
	void __vector_1 (void){
    3f64:	1f 92       	push	r1
    3f66:	0f 92       	push	r0
    3f68:	0f b6       	in	r0, 0x3f	; 63
    3f6a:	0f 92       	push	r0
    3f6c:	11 24       	eor	r1, r1
    3f6e:	2f 93       	push	r18
    3f70:	3f 93       	push	r19
    3f72:	4f 93       	push	r20
    3f74:	5f 93       	push	r21
    3f76:	6f 93       	push	r22
    3f78:	7f 93       	push	r23
    3f7a:	8f 93       	push	r24
    3f7c:	9f 93       	push	r25
    3f7e:	af 93       	push	r26
    3f80:	bf 93       	push	r27
    3f82:	ef 93       	push	r30
    3f84:	ff 93       	push	r31
    3f86:	df 93       	push	r29
    3f88:	cf 93       	push	r28
    3f8a:	cd b7       	in	r28, 0x3d	; 61
    3f8c:	de b7       	in	r29, 0x3e	; 62
		EXTI0_CALLBACK_PTR();
    3f8e:	e0 91 e4 00 	lds	r30, 0x00E4
    3f92:	f0 91 e5 00 	lds	r31, 0x00E5
    3f96:	09 95       	icall
	}
    3f98:	cf 91       	pop	r28
    3f9a:	df 91       	pop	r29
    3f9c:	ff 91       	pop	r31
    3f9e:	ef 91       	pop	r30
    3fa0:	bf 91       	pop	r27
    3fa2:	af 91       	pop	r26
    3fa4:	9f 91       	pop	r25
    3fa6:	8f 91       	pop	r24
    3fa8:	7f 91       	pop	r23
    3faa:	6f 91       	pop	r22
    3fac:	5f 91       	pop	r21
    3fae:	4f 91       	pop	r20
    3fb0:	3f 91       	pop	r19
    3fb2:	2f 91       	pop	r18
    3fb4:	0f 90       	pop	r0
    3fb6:	0f be       	out	0x3f, r0	; 63
    3fb8:	0f 90       	pop	r0
    3fba:	1f 90       	pop	r1
    3fbc:	18 95       	reti

00003fbe <__vector_2>:

	void __vector_2 (void) __attribute__ ((signal,used, externally_visible)) ; \
	void __vector_2 (void){
    3fbe:	1f 92       	push	r1
    3fc0:	0f 92       	push	r0
    3fc2:	0f b6       	in	r0, 0x3f	; 63
    3fc4:	0f 92       	push	r0
    3fc6:	11 24       	eor	r1, r1
    3fc8:	2f 93       	push	r18
    3fca:	3f 93       	push	r19
    3fcc:	4f 93       	push	r20
    3fce:	5f 93       	push	r21
    3fd0:	6f 93       	push	r22
    3fd2:	7f 93       	push	r23
    3fd4:	8f 93       	push	r24
    3fd6:	9f 93       	push	r25
    3fd8:	af 93       	push	r26
    3fda:	bf 93       	push	r27
    3fdc:	ef 93       	push	r30
    3fde:	ff 93       	push	r31
    3fe0:	df 93       	push	r29
    3fe2:	cf 93       	push	r28
    3fe4:	cd b7       	in	r28, 0x3d	; 61
    3fe6:	de b7       	in	r29, 0x3e	; 62
		EXTI1_CALLBACK_PTR();
    3fe8:	e0 91 e6 00 	lds	r30, 0x00E6
    3fec:	f0 91 e7 00 	lds	r31, 0x00E7
    3ff0:	09 95       	icall
	}
    3ff2:	cf 91       	pop	r28
    3ff4:	df 91       	pop	r29
    3ff6:	ff 91       	pop	r31
    3ff8:	ef 91       	pop	r30
    3ffa:	bf 91       	pop	r27
    3ffc:	af 91       	pop	r26
    3ffe:	9f 91       	pop	r25
    4000:	8f 91       	pop	r24
    4002:	7f 91       	pop	r23
    4004:	6f 91       	pop	r22
    4006:	5f 91       	pop	r21
    4008:	4f 91       	pop	r20
    400a:	3f 91       	pop	r19
    400c:	2f 91       	pop	r18
    400e:	0f 90       	pop	r0
    4010:	0f be       	out	0x3f, r0	; 63
    4012:	0f 90       	pop	r0
    4014:	1f 90       	pop	r1
    4016:	18 95       	reti

00004018 <__vector_3>:


	void __vector_3 (void) __attribute__ ((signal,used, externally_visible)) ; \
	void __vector_3 (void){
    4018:	1f 92       	push	r1
    401a:	0f 92       	push	r0
    401c:	0f b6       	in	r0, 0x3f	; 63
    401e:	0f 92       	push	r0
    4020:	11 24       	eor	r1, r1
    4022:	2f 93       	push	r18
    4024:	3f 93       	push	r19
    4026:	4f 93       	push	r20
    4028:	5f 93       	push	r21
    402a:	6f 93       	push	r22
    402c:	7f 93       	push	r23
    402e:	8f 93       	push	r24
    4030:	9f 93       	push	r25
    4032:	af 93       	push	r26
    4034:	bf 93       	push	r27
    4036:	ef 93       	push	r30
    4038:	ff 93       	push	r31
    403a:	df 93       	push	r29
    403c:	cf 93       	push	r28
    403e:	cd b7       	in	r28, 0x3d	; 61
    4040:	de b7       	in	r29, 0x3e	; 62
		EXTI2_CALLBACK_PTR();
    4042:	e0 91 e8 00 	lds	r30, 0x00E8
    4046:	f0 91 e9 00 	lds	r31, 0x00E9
    404a:	09 95       	icall
	}
    404c:	cf 91       	pop	r28
    404e:	df 91       	pop	r29
    4050:	ff 91       	pop	r31
    4052:	ef 91       	pop	r30
    4054:	bf 91       	pop	r27
    4056:	af 91       	pop	r26
    4058:	9f 91       	pop	r25
    405a:	8f 91       	pop	r24
    405c:	7f 91       	pop	r23
    405e:	6f 91       	pop	r22
    4060:	5f 91       	pop	r21
    4062:	4f 91       	pop	r20
    4064:	3f 91       	pop	r19
    4066:	2f 91       	pop	r18
    4068:	0f 90       	pop	r0
    406a:	0f be       	out	0x3f, r0	; 63
    406c:	0f 90       	pop	r0
    406e:	1f 90       	pop	r1
    4070:	18 95       	reti

00004072 <Global_Interrupt_Enable>:
#include "../BIT_Math.h"
#include "Global_Interrupt_register.h"
#include "Global_Interrupt_interface.h"

void Global_Interrupt_Enable(void)
{
    4072:	df 93       	push	r29
    4074:	cf 93       	push	r28
    4076:	cd b7       	in	r28, 0x3d	; 61
    4078:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I);
    407a:	af e5       	ldi	r26, 0x5F	; 95
    407c:	b0 e0       	ldi	r27, 0x00	; 0
    407e:	ef e5       	ldi	r30, 0x5F	; 95
    4080:	f0 e0       	ldi	r31, 0x00	; 0
    4082:	80 81       	ld	r24, Z
    4084:	80 68       	ori	r24, 0x80	; 128
    4086:	8c 93       	st	X, r24
}
    4088:	cf 91       	pop	r28
    408a:	df 91       	pop	r29
    408c:	08 95       	ret

0000408e <Global_Interrupt_Disable>:
void Global_Interrupt_Disable(void)
{
    408e:	df 93       	push	r29
    4090:	cf 93       	push	r28
    4092:	cd b7       	in	r28, 0x3d	; 61
    4094:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
    4096:	af e5       	ldi	r26, 0x5F	; 95
    4098:	b0 e0       	ldi	r27, 0x00	; 0
    409a:	ef e5       	ldi	r30, 0x5F	; 95
    409c:	f0 e0       	ldi	r31, 0x00	; 0
    409e:	80 81       	ld	r24, Z
    40a0:	8f 77       	andi	r24, 0x7F	; 127
    40a2:	8c 93       	st	X, r24
}
    40a4:	cf 91       	pop	r28
    40a6:	df 91       	pop	r29
    40a8:	08 95       	ret

000040aa <EEPROM_voidRead>:
#include "EEPROM_config.h"



void EEPROM_voidRead(uint8 u8LocationAddressCpy , uint8* pu8DataCpy)
{
    40aa:	df 93       	push	r29
    40ac:	cf 93       	push	r28
    40ae:	00 d0       	rcall	.+0      	; 0x40b0 <EEPROM_voidRead+0x6>
    40b0:	0f 92       	push	r0
    40b2:	cd b7       	in	r28, 0x3d	; 61
    40b4:	de b7       	in	r29, 0x3e	; 62
    40b6:	89 83       	std	Y+1, r24	; 0x01
    40b8:	7b 83       	std	Y+3, r23	; 0x03
    40ba:	6a 83       	std	Y+2, r22	; 0x02
	/* Start condition  */
	TWI_enStartCondition();
    40bc:	0e 94 f7 21 	call	0x43ee	; 0x43ee <TWI_enStartCondition>
	/* Send SLA With Write */
	TWI_enSetSlaveAddress_Write(SLAVE_ADDRESS_WRITE);
    40c0:	80 ea       	ldi	r24, 0xA0	; 160
    40c2:	0e 94 59 22 	call	0x44b2	; 0x44b2 <TWI_enSetSlaveAddress_Write>
	/* Send Memory location */
	TWI_enMasterWriteData(u8LocationAddressCpy);
    40c6:	89 81       	ldd	r24, Y+1	; 0x01
    40c8:	0e 94 cf 22 	call	0x459e	; 0x459e <TWI_enMasterWriteData>
	/* Repeat Start to change Write operation to Read operation */
	TWI_enRepeatStart();
    40cc:	0e 94 28 22 	call	0x4450	; 0x4450 <TWI_enRepeatStart>
	//	TWI_enSetSlaveAddress_Write(SLAVE_ADDRESS_READ);   //will be also read successfully
	TWI_enSetSlaveAddress_Read(SLAVE_ADDRESS_WRITE);
    40d0:	80 ea       	ldi	r24, 0xA0	; 160
    40d2:	0e 94 97 22 	call	0x452e	; 0x452e <TWI_enSetSlaveAddress_Read>
	/* Master Receive Data*/
	TWI_enMasterReadData(pu8DataCpy);
    40d6:	8a 81       	ldd	r24, Y+2	; 0x02
    40d8:	9b 81       	ldd	r25, Y+3	; 0x03
    40da:	0e 94 ff 22 	call	0x45fe	; 0x45fe <TWI_enMasterReadData>
	TWI_voidStopCondition();
    40de:	0e 94 3b 23 	call	0x4676	; 0x4676 <TWI_voidStopCondition>

}
    40e2:	0f 90       	pop	r0
    40e4:	0f 90       	pop	r0
    40e6:	0f 90       	pop	r0
    40e8:	cf 91       	pop	r28
    40ea:	df 91       	pop	r29
    40ec:	08 95       	ret

000040ee <EEPROM_voidWrite>:

void EEPROM_voidWrite(uint8 u8LocationAddressCpy , uint8 u8DataCpy){
    40ee:	df 93       	push	r29
    40f0:	cf 93       	push	r28
    40f2:	cd b7       	in	r28, 0x3d	; 61
    40f4:	de b7       	in	r29, 0x3e	; 62
    40f6:	60 97       	sbiw	r28, 0x10	; 16
    40f8:	0f b6       	in	r0, 0x3f	; 63
    40fa:	f8 94       	cli
    40fc:	de bf       	out	0x3e, r29	; 62
    40fe:	0f be       	out	0x3f, r0	; 63
    4100:	cd bf       	out	0x3d, r28	; 61
    4102:	8f 87       	std	Y+15, r24	; 0x0f
    4104:	68 8b       	std	Y+16, r22	; 0x10

	/* Start condition  */
	TWI_enStartCondition();
    4106:	0e 94 f7 21 	call	0x43ee	; 0x43ee <TWI_enStartCondition>
	/* Send SLA With Write */
	TWI_enSetSlaveAddress_Write(SLAVE_ADDRESS_WRITE);
    410a:	80 ea       	ldi	r24, 0xA0	; 160
    410c:	0e 94 59 22 	call	0x44b2	; 0x44b2 <TWI_enSetSlaveAddress_Write>
	/* Send Memory location */
	TWI_enMasterWriteData(u8LocationAddressCpy);
    4110:	8f 85       	ldd	r24, Y+15	; 0x0f
    4112:	0e 94 cf 22 	call	0x459e	; 0x459e <TWI_enMasterWriteData>
	TWI_enMasterWriteData(u8DataCpy);
    4116:	88 89       	ldd	r24, Y+16	; 0x10
    4118:	0e 94 cf 22 	call	0x459e	; 0x459e <TWI_enMasterWriteData>
	TWI_voidStopCondition();
    411c:	0e 94 3b 23 	call	0x4676	; 0x4676 <TWI_voidStopCondition>
    4120:	80 e0       	ldi	r24, 0x00	; 0
    4122:	90 e0       	ldi	r25, 0x00	; 0
    4124:	a8 e4       	ldi	r26, 0x48	; 72
    4126:	b3 e4       	ldi	r27, 0x43	; 67
    4128:	8b 87       	std	Y+11, r24	; 0x0b
    412a:	9c 87       	std	Y+12, r25	; 0x0c
    412c:	ad 87       	std	Y+13, r26	; 0x0d
    412e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4130:	6b 85       	ldd	r22, Y+11	; 0x0b
    4132:	7c 85       	ldd	r23, Y+12	; 0x0c
    4134:	8d 85       	ldd	r24, Y+13	; 0x0d
    4136:	9e 85       	ldd	r25, Y+14	; 0x0e
    4138:	20 e0       	ldi	r18, 0x00	; 0
    413a:	30 e0       	ldi	r19, 0x00	; 0
    413c:	4a ef       	ldi	r20, 0xFA	; 250
    413e:	54 e4       	ldi	r21, 0x44	; 68
    4140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4144:	dc 01       	movw	r26, r24
    4146:	cb 01       	movw	r24, r22
    4148:	8f 83       	std	Y+7, r24	; 0x07
    414a:	98 87       	std	Y+8, r25	; 0x08
    414c:	a9 87       	std	Y+9, r26	; 0x09
    414e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4150:	6f 81       	ldd	r22, Y+7	; 0x07
    4152:	78 85       	ldd	r23, Y+8	; 0x08
    4154:	89 85       	ldd	r24, Y+9	; 0x09
    4156:	9a 85       	ldd	r25, Y+10	; 0x0a
    4158:	20 e0       	ldi	r18, 0x00	; 0
    415a:	30 e0       	ldi	r19, 0x00	; 0
    415c:	40 e8       	ldi	r20, 0x80	; 128
    415e:	5f e3       	ldi	r21, 0x3F	; 63
    4160:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4164:	88 23       	and	r24, r24
    4166:	2c f4       	brge	.+10     	; 0x4172 <EEPROM_voidWrite+0x84>
		__ticks = 1;
    4168:	81 e0       	ldi	r24, 0x01	; 1
    416a:	90 e0       	ldi	r25, 0x00	; 0
    416c:	9e 83       	std	Y+6, r25	; 0x06
    416e:	8d 83       	std	Y+5, r24	; 0x05
    4170:	3f c0       	rjmp	.+126    	; 0x41f0 <EEPROM_voidWrite+0x102>
	else if (__tmp > 65535)
    4172:	6f 81       	ldd	r22, Y+7	; 0x07
    4174:	78 85       	ldd	r23, Y+8	; 0x08
    4176:	89 85       	ldd	r24, Y+9	; 0x09
    4178:	9a 85       	ldd	r25, Y+10	; 0x0a
    417a:	20 e0       	ldi	r18, 0x00	; 0
    417c:	3f ef       	ldi	r19, 0xFF	; 255
    417e:	4f e7       	ldi	r20, 0x7F	; 127
    4180:	57 e4       	ldi	r21, 0x47	; 71
    4182:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4186:	18 16       	cp	r1, r24
    4188:	4c f5       	brge	.+82     	; 0x41dc <EEPROM_voidWrite+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    418a:	6b 85       	ldd	r22, Y+11	; 0x0b
    418c:	7c 85       	ldd	r23, Y+12	; 0x0c
    418e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4190:	9e 85       	ldd	r25, Y+14	; 0x0e
    4192:	20 e0       	ldi	r18, 0x00	; 0
    4194:	30 e0       	ldi	r19, 0x00	; 0
    4196:	40 e2       	ldi	r20, 0x20	; 32
    4198:	51 e4       	ldi	r21, 0x41	; 65
    419a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    419e:	dc 01       	movw	r26, r24
    41a0:	cb 01       	movw	r24, r22
    41a2:	bc 01       	movw	r22, r24
    41a4:	cd 01       	movw	r24, r26
    41a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41aa:	dc 01       	movw	r26, r24
    41ac:	cb 01       	movw	r24, r22
    41ae:	9e 83       	std	Y+6, r25	; 0x06
    41b0:	8d 83       	std	Y+5, r24	; 0x05
    41b2:	0f c0       	rjmp	.+30     	; 0x41d2 <EEPROM_voidWrite+0xe4>
    41b4:	88 ec       	ldi	r24, 0xC8	; 200
    41b6:	90 e0       	ldi	r25, 0x00	; 0
    41b8:	9c 83       	std	Y+4, r25	; 0x04
    41ba:	8b 83       	std	Y+3, r24	; 0x03
    41bc:	8b 81       	ldd	r24, Y+3	; 0x03
    41be:	9c 81       	ldd	r25, Y+4	; 0x04
    41c0:	01 97       	sbiw	r24, 0x01	; 1
    41c2:	f1 f7       	brne	.-4      	; 0x41c0 <EEPROM_voidWrite+0xd2>
    41c4:	9c 83       	std	Y+4, r25	; 0x04
    41c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41c8:	8d 81       	ldd	r24, Y+5	; 0x05
    41ca:	9e 81       	ldd	r25, Y+6	; 0x06
    41cc:	01 97       	sbiw	r24, 0x01	; 1
    41ce:	9e 83       	std	Y+6, r25	; 0x06
    41d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41d2:	8d 81       	ldd	r24, Y+5	; 0x05
    41d4:	9e 81       	ldd	r25, Y+6	; 0x06
    41d6:	00 97       	sbiw	r24, 0x00	; 0
    41d8:	69 f7       	brne	.-38     	; 0x41b4 <EEPROM_voidWrite+0xc6>
    41da:	14 c0       	rjmp	.+40     	; 0x4204 <EEPROM_voidWrite+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41dc:	6f 81       	ldd	r22, Y+7	; 0x07
    41de:	78 85       	ldd	r23, Y+8	; 0x08
    41e0:	89 85       	ldd	r24, Y+9	; 0x09
    41e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    41e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41e8:	dc 01       	movw	r26, r24
    41ea:	cb 01       	movw	r24, r22
    41ec:	9e 83       	std	Y+6, r25	; 0x06
    41ee:	8d 83       	std	Y+5, r24	; 0x05
    41f0:	8d 81       	ldd	r24, Y+5	; 0x05
    41f2:	9e 81       	ldd	r25, Y+6	; 0x06
    41f4:	9a 83       	std	Y+2, r25	; 0x02
    41f6:	89 83       	std	Y+1, r24	; 0x01
    41f8:	89 81       	ldd	r24, Y+1	; 0x01
    41fa:	9a 81       	ldd	r25, Y+2	; 0x02
    41fc:	01 97       	sbiw	r24, 0x01	; 1
    41fe:	f1 f7       	brne	.-4      	; 0x41fc <EEPROM_voidWrite+0x10e>
    4200:	9a 83       	std	Y+2, r25	; 0x02
    4202:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);

}
    4204:	60 96       	adiw	r28, 0x10	; 16
    4206:	0f b6       	in	r0, 0x3f	; 63
    4208:	f8 94       	cli
    420a:	de bf       	out	0x3e, r29	; 62
    420c:	0f be       	out	0x3f, r0	; 63
    420e:	cd bf       	out	0x3d, r28	; 61
    4210:	cf 91       	pop	r28
    4212:	df 91       	pop	r29
    4214:	08 95       	ret

00004216 <EEPROM_voidWritePage>:

void EEPROM_voidWritePage(uint8 u8LocationAddressCpy , uint8* pu8DataCpy, uint8 length){
    4216:	df 93       	push	r29
    4218:	cf 93       	push	r28
    421a:	cd b7       	in	r28, 0x3d	; 61
    421c:	de b7       	in	r29, 0x3e	; 62
    421e:	63 97       	sbiw	r28, 0x13	; 19
    4220:	0f b6       	in	r0, 0x3f	; 63
    4222:	f8 94       	cli
    4224:	de bf       	out	0x3e, r29	; 62
    4226:	0f be       	out	0x3f, r0	; 63
    4228:	cd bf       	out	0x3d, r28	; 61
    422a:	88 8b       	std	Y+16, r24	; 0x10
    422c:	7a 8b       	std	Y+18, r23	; 0x12
    422e:	69 8b       	std	Y+17, r22	; 0x11
    4230:	4b 8b       	std	Y+19, r20	; 0x13

	/* Start condition  */
	TWI_enStartCondition();
    4232:	0e 94 f7 21 	call	0x43ee	; 0x43ee <TWI_enStartCondition>
	/* Send SLA With Write */
	TWI_enSetSlaveAddress_Write(SLAVE_ADDRESS_WRITE);
    4236:	80 ea       	ldi	r24, 0xA0	; 160
    4238:	0e 94 59 22 	call	0x44b2	; 0x44b2 <TWI_enSetSlaveAddress_Write>
	/* Send Memory location */
	TWI_enMasterWriteData(u8LocationAddressCpy);
    423c:	88 89       	ldd	r24, Y+16	; 0x10
    423e:	0e 94 cf 22 	call	0x459e	; 0x459e <TWI_enMasterWriteData>
	for(uint8 i=0; i<length; i++){
    4242:	1f 86       	std	Y+15, r1	; 0x0f
    4244:	80 c0       	rjmp	.+256    	; 0x4346 <EEPROM_voidWritePage+0x130>
		TWI_enMasterWriteData(pu8DataCpy[i]);
    4246:	8f 85       	ldd	r24, Y+15	; 0x0f
    4248:	28 2f       	mov	r18, r24
    424a:	30 e0       	ldi	r19, 0x00	; 0
    424c:	89 89       	ldd	r24, Y+17	; 0x11
    424e:	9a 89       	ldd	r25, Y+18	; 0x12
    4250:	fc 01       	movw	r30, r24
    4252:	e2 0f       	add	r30, r18
    4254:	f3 1f       	adc	r31, r19
    4256:	80 81       	ld	r24, Z
    4258:	0e 94 cf 22 	call	0x459e	; 0x459e <TWI_enMasterWriteData>
    425c:	80 e0       	ldi	r24, 0x00	; 0
    425e:	90 e0       	ldi	r25, 0x00	; 0
    4260:	a0 ea       	ldi	r26, 0xA0	; 160
    4262:	b0 e4       	ldi	r27, 0x40	; 64
    4264:	8b 87       	std	Y+11, r24	; 0x0b
    4266:	9c 87       	std	Y+12, r25	; 0x0c
    4268:	ad 87       	std	Y+13, r26	; 0x0d
    426a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    426c:	6b 85       	ldd	r22, Y+11	; 0x0b
    426e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4270:	8d 85       	ldd	r24, Y+13	; 0x0d
    4272:	9e 85       	ldd	r25, Y+14	; 0x0e
    4274:	20 e0       	ldi	r18, 0x00	; 0
    4276:	30 e0       	ldi	r19, 0x00	; 0
    4278:	4a ef       	ldi	r20, 0xFA	; 250
    427a:	54 e4       	ldi	r21, 0x44	; 68
    427c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4280:	dc 01       	movw	r26, r24
    4282:	cb 01       	movw	r24, r22
    4284:	8f 83       	std	Y+7, r24	; 0x07
    4286:	98 87       	std	Y+8, r25	; 0x08
    4288:	a9 87       	std	Y+9, r26	; 0x09
    428a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    428c:	6f 81       	ldd	r22, Y+7	; 0x07
    428e:	78 85       	ldd	r23, Y+8	; 0x08
    4290:	89 85       	ldd	r24, Y+9	; 0x09
    4292:	9a 85       	ldd	r25, Y+10	; 0x0a
    4294:	20 e0       	ldi	r18, 0x00	; 0
    4296:	30 e0       	ldi	r19, 0x00	; 0
    4298:	40 e8       	ldi	r20, 0x80	; 128
    429a:	5f e3       	ldi	r21, 0x3F	; 63
    429c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42a0:	88 23       	and	r24, r24
    42a2:	2c f4       	brge	.+10     	; 0x42ae <EEPROM_voidWritePage+0x98>
		__ticks = 1;
    42a4:	81 e0       	ldi	r24, 0x01	; 1
    42a6:	90 e0       	ldi	r25, 0x00	; 0
    42a8:	9e 83       	std	Y+6, r25	; 0x06
    42aa:	8d 83       	std	Y+5, r24	; 0x05
    42ac:	3f c0       	rjmp	.+126    	; 0x432c <EEPROM_voidWritePage+0x116>
	else if (__tmp > 65535)
    42ae:	6f 81       	ldd	r22, Y+7	; 0x07
    42b0:	78 85       	ldd	r23, Y+8	; 0x08
    42b2:	89 85       	ldd	r24, Y+9	; 0x09
    42b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    42b6:	20 e0       	ldi	r18, 0x00	; 0
    42b8:	3f ef       	ldi	r19, 0xFF	; 255
    42ba:	4f e7       	ldi	r20, 0x7F	; 127
    42bc:	57 e4       	ldi	r21, 0x47	; 71
    42be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42c2:	18 16       	cp	r1, r24
    42c4:	4c f5       	brge	.+82     	; 0x4318 <EEPROM_voidWritePage+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    42c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    42ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    42cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    42ce:	20 e0       	ldi	r18, 0x00	; 0
    42d0:	30 e0       	ldi	r19, 0x00	; 0
    42d2:	40 e2       	ldi	r20, 0x20	; 32
    42d4:	51 e4       	ldi	r21, 0x41	; 65
    42d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42da:	dc 01       	movw	r26, r24
    42dc:	cb 01       	movw	r24, r22
    42de:	bc 01       	movw	r22, r24
    42e0:	cd 01       	movw	r24, r26
    42e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42e6:	dc 01       	movw	r26, r24
    42e8:	cb 01       	movw	r24, r22
    42ea:	9e 83       	std	Y+6, r25	; 0x06
    42ec:	8d 83       	std	Y+5, r24	; 0x05
    42ee:	0f c0       	rjmp	.+30     	; 0x430e <EEPROM_voidWritePage+0xf8>
    42f0:	88 ec       	ldi	r24, 0xC8	; 200
    42f2:	90 e0       	ldi	r25, 0x00	; 0
    42f4:	9c 83       	std	Y+4, r25	; 0x04
    42f6:	8b 83       	std	Y+3, r24	; 0x03
    42f8:	8b 81       	ldd	r24, Y+3	; 0x03
    42fa:	9c 81       	ldd	r25, Y+4	; 0x04
    42fc:	01 97       	sbiw	r24, 0x01	; 1
    42fe:	f1 f7       	brne	.-4      	; 0x42fc <EEPROM_voidWritePage+0xe6>
    4300:	9c 83       	std	Y+4, r25	; 0x04
    4302:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4304:	8d 81       	ldd	r24, Y+5	; 0x05
    4306:	9e 81       	ldd	r25, Y+6	; 0x06
    4308:	01 97       	sbiw	r24, 0x01	; 1
    430a:	9e 83       	std	Y+6, r25	; 0x06
    430c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    430e:	8d 81       	ldd	r24, Y+5	; 0x05
    4310:	9e 81       	ldd	r25, Y+6	; 0x06
    4312:	00 97       	sbiw	r24, 0x00	; 0
    4314:	69 f7       	brne	.-38     	; 0x42f0 <EEPROM_voidWritePage+0xda>
    4316:	14 c0       	rjmp	.+40     	; 0x4340 <EEPROM_voidWritePage+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4318:	6f 81       	ldd	r22, Y+7	; 0x07
    431a:	78 85       	ldd	r23, Y+8	; 0x08
    431c:	89 85       	ldd	r24, Y+9	; 0x09
    431e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4324:	dc 01       	movw	r26, r24
    4326:	cb 01       	movw	r24, r22
    4328:	9e 83       	std	Y+6, r25	; 0x06
    432a:	8d 83       	std	Y+5, r24	; 0x05
    432c:	8d 81       	ldd	r24, Y+5	; 0x05
    432e:	9e 81       	ldd	r25, Y+6	; 0x06
    4330:	9a 83       	std	Y+2, r25	; 0x02
    4332:	89 83       	std	Y+1, r24	; 0x01
    4334:	89 81       	ldd	r24, Y+1	; 0x01
    4336:	9a 81       	ldd	r25, Y+2	; 0x02
    4338:	01 97       	sbiw	r24, 0x01	; 1
    433a:	f1 f7       	brne	.-4      	; 0x4338 <EEPROM_voidWritePage+0x122>
    433c:	9a 83       	std	Y+2, r25	; 0x02
    433e:	89 83       	std	Y+1, r24	; 0x01
	TWI_enStartCondition();
	/* Send SLA With Write */
	TWI_enSetSlaveAddress_Write(SLAVE_ADDRESS_WRITE);
	/* Send Memory location */
	TWI_enMasterWriteData(u8LocationAddressCpy);
	for(uint8 i=0; i<length; i++){
    4340:	8f 85       	ldd	r24, Y+15	; 0x0f
    4342:	8f 5f       	subi	r24, 0xFF	; 255
    4344:	8f 87       	std	Y+15, r24	; 0x0f
    4346:	9f 85       	ldd	r25, Y+15	; 0x0f
    4348:	8b 89       	ldd	r24, Y+19	; 0x13
    434a:	98 17       	cp	r25, r24
    434c:	08 f4       	brcc	.+2      	; 0x4350 <EEPROM_voidWritePage+0x13a>
    434e:	7b cf       	rjmp	.-266    	; 0x4246 <EEPROM_voidWritePage+0x30>
		TWI_enMasterWriteData(pu8DataCpy[i]);
		_delay_ms(5);

	}

	TWI_voidStopCondition();
    4350:	0e 94 3b 23 	call	0x4676	; 0x4676 <TWI_voidStopCondition>

}
    4354:	63 96       	adiw	r28, 0x13	; 19
    4356:	0f b6       	in	r0, 0x3f	; 63
    4358:	f8 94       	cli
    435a:	de bf       	out	0x3e, r29	; 62
    435c:	0f be       	out	0x3f, r0	; 63
    435e:	cd bf       	out	0x3d, r28	; 61
    4360:	cf 91       	pop	r28
    4362:	df 91       	pop	r29
    4364:	08 95       	ret

00004366 <TWI_voidMasterInit>:
#include "../BIT_Math.h"
#include "TWI_interface.h"
#include "TWI_private.h"
#include "TWI_config.h"

void TWI_voidMasterInit(void){
    4366:	df 93       	push	r29
    4368:	cf 93       	push	r28
    436a:	cd b7       	in	r28, 0x3d	; 61
    436c:	de b7       	in	r29, 0x3e	; 62
	/* Set Clock configuration  TWBR = 2 */
	TWBR = 2;
    436e:	e0 e2       	ldi	r30, 0x20	; 32
    4370:	f0 e0       	ldi	r31, 0x00	; 0
    4372:	82 e0       	ldi	r24, 0x02	; 2
    4374:	80 83       	st	Z, r24
	CLR_BIT(TWSR , TWSR_TWPS0);
    4376:	a1 e2       	ldi	r26, 0x21	; 33
    4378:	b0 e0       	ldi	r27, 0x00	; 0
    437a:	e1 e2       	ldi	r30, 0x21	; 33
    437c:	f0 e0       	ldi	r31, 0x00	; 0
    437e:	80 81       	ld	r24, Z
    4380:	8e 7f       	andi	r24, 0xFE	; 254
    4382:	8c 93       	st	X, r24
	CLR_BIT(TWSR , TWSR_TWPS1);
    4384:	a1 e2       	ldi	r26, 0x21	; 33
    4386:	b0 e0       	ldi	r27, 0x00	; 0
    4388:	e1 e2       	ldi	r30, 0x21	; 33
    438a:	f0 e0       	ldi	r31, 0x00	; 0
    438c:	80 81       	ld	r24, Z
    438e:	8d 7f       	andi	r24, 0xFD	; 253
    4390:	8c 93       	st	X, r24

	/* Enable Acknowledge bit */
	SET_BIT(TWCR , TWCR_TWEA);
    4392:	a6 e5       	ldi	r26, 0x56	; 86
    4394:	b0 e0       	ldi	r27, 0x00	; 0
    4396:	e6 e5       	ldi	r30, 0x56	; 86
    4398:	f0 e0       	ldi	r31, 0x00	; 0
    439a:	80 81       	ld	r24, Z
    439c:	80 64       	ori	r24, 0x40	; 64
    439e:	8c 93       	st	X, r24
	/* Set my own Address */
	TWAR = MASTER_ADDRESS << 1;
    43a0:	e2 e2       	ldi	r30, 0x22	; 34
    43a2:	f0 e0       	ldi	r31, 0x00	; 0
    43a4:	84 e6       	ldi	r24, 0x64	; 100
    43a6:	80 83       	st	Z, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    43a8:	a6 e5       	ldi	r26, 0x56	; 86
    43aa:	b0 e0       	ldi	r27, 0x00	; 0
    43ac:	e6 e5       	ldi	r30, 0x56	; 86
    43ae:	f0 e0       	ldi	r31, 0x00	; 0
    43b0:	80 81       	ld	r24, Z
    43b2:	84 60       	ori	r24, 0x04	; 4
    43b4:	8c 93       	st	X, r24

}
    43b6:	cf 91       	pop	r28
    43b8:	df 91       	pop	r29
    43ba:	08 95       	ret

000043bc <TWI_voidSlaveInit>:
void TWI_voidSlaveInit(void){
    43bc:	df 93       	push	r29
    43be:	cf 93       	push	r28
    43c0:	cd b7       	in	r28, 0x3d	; 61
    43c2:	de b7       	in	r29, 0x3e	; 62
	/* Enable Acknowledge bit */
	SET_BIT(TWCR , TWCR_TWEA);
    43c4:	a6 e5       	ldi	r26, 0x56	; 86
    43c6:	b0 e0       	ldi	r27, 0x00	; 0
    43c8:	e6 e5       	ldi	r30, 0x56	; 86
    43ca:	f0 e0       	ldi	r31, 0x00	; 0
    43cc:	80 81       	ld	r24, Z
    43ce:	80 64       	ori	r24, 0x40	; 64
    43d0:	8c 93       	st	X, r24
	/* Set my own Address */
	TWAR = SLAVE_ADDRESS << 1;
    43d2:	e2 e2       	ldi	r30, 0x22	; 34
    43d4:	f0 e0       	ldi	r31, 0x00	; 0
    43d6:	88 e2       	ldi	r24, 0x28	; 40
    43d8:	80 83       	st	Z, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    43da:	a6 e5       	ldi	r26, 0x56	; 86
    43dc:	b0 e0       	ldi	r27, 0x00	; 0
    43de:	e6 e5       	ldi	r30, 0x56	; 86
    43e0:	f0 e0       	ldi	r31, 0x00	; 0
    43e2:	80 81       	ld	r24, Z
    43e4:	84 60       	ori	r24, 0x04	; 4
    43e6:	8c 93       	st	X, r24
}
    43e8:	cf 91       	pop	r28
    43ea:	df 91       	pop	r29
    43ec:	08 95       	ret

000043ee <TWI_enStartCondition>:

TWI_ErrorState_t TWI_enStartCondition(void){
    43ee:	df 93       	push	r29
    43f0:	cf 93       	push	r28
    43f2:	0f 92       	push	r0
    43f4:	cd b7       	in	r28, 0x3d	; 61
    43f6:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    43f8:	19 82       	std	Y+1, r1	; 0x01
	/* enable start condition */
	SET_BIT(TWCR , TWCR_TWSTA);
    43fa:	a6 e5       	ldi	r26, 0x56	; 86
    43fc:	b0 e0       	ldi	r27, 0x00	; 0
    43fe:	e6 e5       	ldi	r30, 0x56	; 86
    4400:	f0 e0       	ldi	r31, 0x00	; 0
    4402:	80 81       	ld	r24, Z
    4404:	80 62       	ori	r24, 0x20	; 32
    4406:	8c 93       	st	X, r24
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    4408:	a6 e5       	ldi	r26, 0x56	; 86
    440a:	b0 e0       	ldi	r27, 0x00	; 0
    440c:	e6 e5       	ldi	r30, 0x56	; 86
    440e:	f0 e0       	ldi	r31, 0x00	; 0
    4410:	80 81       	ld	r24, Z
    4412:	80 68       	ori	r24, 0x80	; 128
    4414:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    4416:	a6 e5       	ldi	r26, 0x56	; 86
    4418:	b0 e0       	ldi	r27, 0x00	; 0
    441a:	e6 e5       	ldi	r30, 0x56	; 86
    441c:	f0 e0       	ldi	r31, 0x00	; 0
    441e:	80 81       	ld	r24, Z
    4420:	84 60       	ori	r24, 0x04	; 4
    4422:	8c 93       	st	X, r24

	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    4424:	e6 e5       	ldi	r30, 0x56	; 86
    4426:	f0 e0       	ldi	r31, 0x00	; 0
    4428:	80 81       	ld	r24, Z
    442a:	88 23       	and	r24, r24
    442c:	dc f7       	brge	.-10     	; 0x4424 <TWI_enStartCondition+0x36>

	if((TWSR & 0XF8) != START_CONDITION)
    442e:	e1 e2       	ldi	r30, 0x21	; 33
    4430:	f0 e0       	ldi	r31, 0x00	; 0
    4432:	80 81       	ld	r24, Z
    4434:	88 2f       	mov	r24, r24
    4436:	90 e0       	ldi	r25, 0x00	; 0
    4438:	88 7f       	andi	r24, 0xF8	; 248
    443a:	90 70       	andi	r25, 0x00	; 0
    443c:	88 30       	cpi	r24, 0x08	; 8
    443e:	91 05       	cpc	r25, r1
    4440:	11 f0       	breq	.+4      	; 0x4446 <TWI_enStartCondition+0x58>
	{
		Local_ErrorState = START_CONDITION_ERR;
    4442:	81 e0       	ldi	r24, 0x01	; 1
    4444:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do Nothing */
	}

	return Local_ErrorState;
    4446:	89 81       	ldd	r24, Y+1	; 0x01


}
    4448:	0f 90       	pop	r0
    444a:	cf 91       	pop	r28
    444c:	df 91       	pop	r29
    444e:	08 95       	ret

00004450 <TWI_enRepeatStart>:
TWI_ErrorState_t TWI_enRepeatStart(void){
    4450:	df 93       	push	r29
    4452:	cf 93       	push	r28
    4454:	0f 92       	push	r0
    4456:	cd b7       	in	r28, 0x3d	; 61
    4458:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    445a:	19 82       	std	Y+1, r1	; 0x01
	/* enable start condition */
	SET_BIT(TWCR , TWCR_TWSTA);
    445c:	a6 e5       	ldi	r26, 0x56	; 86
    445e:	b0 e0       	ldi	r27, 0x00	; 0
    4460:	e6 e5       	ldi	r30, 0x56	; 86
    4462:	f0 e0       	ldi	r31, 0x00	; 0
    4464:	80 81       	ld	r24, Z
    4466:	80 62       	ori	r24, 0x20	; 32
    4468:	8c 93       	st	X, r24
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    446a:	a6 e5       	ldi	r26, 0x56	; 86
    446c:	b0 e0       	ldi	r27, 0x00	; 0
    446e:	e6 e5       	ldi	r30, 0x56	; 86
    4470:	f0 e0       	ldi	r31, 0x00	; 0
    4472:	80 81       	ld	r24, Z
    4474:	80 68       	ori	r24, 0x80	; 128
    4476:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    4478:	a6 e5       	ldi	r26, 0x56	; 86
    447a:	b0 e0       	ldi	r27, 0x00	; 0
    447c:	e6 e5       	ldi	r30, 0x56	; 86
    447e:	f0 e0       	ldi	r31, 0x00	; 0
    4480:	80 81       	ld	r24, Z
    4482:	84 60       	ori	r24, 0x04	; 4
    4484:	8c 93       	st	X, r24

	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    4486:	e6 e5       	ldi	r30, 0x56	; 86
    4488:	f0 e0       	ldi	r31, 0x00	; 0
    448a:	80 81       	ld	r24, Z
    448c:	88 23       	and	r24, r24
    448e:	dc f7       	brge	.-10     	; 0x4486 <TWI_enRepeatStart+0x36>

	if((TWSR & 0XF8) != REPEATE_START_CONDITION)
    4490:	e1 e2       	ldi	r30, 0x21	; 33
    4492:	f0 e0       	ldi	r31, 0x00	; 0
    4494:	80 81       	ld	r24, Z
    4496:	88 2f       	mov	r24, r24
    4498:	90 e0       	ldi	r25, 0x00	; 0
    449a:	88 7f       	andi	r24, 0xF8	; 248
    449c:	90 70       	andi	r25, 0x00	; 0
    449e:	80 31       	cpi	r24, 0x10	; 16
    44a0:	91 05       	cpc	r25, r1
    44a2:	11 f0       	breq	.+4      	; 0x44a8 <TWI_enRepeatStart+0x58>
	{
		Local_ErrorState = REPEAT_START_ERR;
    44a4:	82 e0       	ldi	r24, 0x02	; 2
    44a6:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do Nothing */
	}

	return Local_ErrorState;
    44a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    44aa:	0f 90       	pop	r0
    44ac:	cf 91       	pop	r28
    44ae:	df 91       	pop	r29
    44b0:	08 95       	ret

000044b2 <TWI_enSetSlaveAddress_Write>:
TWI_ErrorState_t TWI_enSetSlaveAddress_Write(uint8 u8SlaveAddressCpy){
    44b2:	df 93       	push	r29
    44b4:	cf 93       	push	r28
    44b6:	00 d0       	rcall	.+0      	; 0x44b8 <TWI_enSetSlaveAddress_Write+0x6>
    44b8:	cd b7       	in	r28, 0x3d	; 61
    44ba:	de b7       	in	r29, 0x3e	; 62
    44bc:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    44be:	19 82       	std	Y+1, r1	; 0x01

	/* Set Slave address in TWDR register */
	TWDR = u8SlaveAddressCpy;
    44c0:	e3 e2       	ldi	r30, 0x23	; 35
    44c2:	f0 e0       	ldi	r31, 0x00	; 0
    44c4:	8a 81       	ldd	r24, Y+2	; 0x02
    44c6:	80 83       	st	Z, r24

	/* Clear the start condition bit */
	CLR_BIT(TWCR , TWCR_TWSTA);
    44c8:	a6 e5       	ldi	r26, 0x56	; 86
    44ca:	b0 e0       	ldi	r27, 0x00	; 0
    44cc:	e6 e5       	ldi	r30, 0x56	; 86
    44ce:	f0 e0       	ldi	r31, 0x00	; 0
    44d0:	80 81       	ld	r24, Z
    44d2:	8f 7d       	andi	r24, 0xDF	; 223
    44d4:	8c 93       	st	X, r24
	/* Clear bit 0 to make write operation */
	CLR_BIT(TWDR , TWDR_TWD0);
    44d6:	a3 e2       	ldi	r26, 0x23	; 35
    44d8:	b0 e0       	ldi	r27, 0x00	; 0
    44da:	e3 e2       	ldi	r30, 0x23	; 35
    44dc:	f0 e0       	ldi	r31, 0x00	; 0
    44de:	80 81       	ld	r24, Z
    44e0:	8e 7f       	andi	r24, 0xFE	; 254
    44e2:	8c 93       	st	X, r24

	/*************************************************/
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    44e4:	a6 e5       	ldi	r26, 0x56	; 86
    44e6:	b0 e0       	ldi	r27, 0x00	; 0
    44e8:	e6 e5       	ldi	r30, 0x56	; 86
    44ea:	f0 e0       	ldi	r31, 0x00	; 0
    44ec:	80 81       	ld	r24, Z
    44ee:	80 68       	ori	r24, 0x80	; 128
    44f0:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    44f2:	a6 e5       	ldi	r26, 0x56	; 86
    44f4:	b0 e0       	ldi	r27, 0x00	; 0
    44f6:	e6 e5       	ldi	r30, 0x56	; 86
    44f8:	f0 e0       	ldi	r31, 0x00	; 0
    44fa:	80 81       	ld	r24, Z
    44fc:	84 60       	ori	r24, 0x04	; 4
    44fe:	8c 93       	st	X, r24
	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    4500:	e6 e5       	ldi	r30, 0x56	; 86
    4502:	f0 e0       	ldi	r31, 0x00	; 0
    4504:	80 81       	ld	r24, Z
    4506:	88 23       	and	r24, r24
    4508:	dc f7       	brge	.-10     	; 0x4500 <TWI_enSetSlaveAddress_Write+0x4e>

	if((TWSR & 0XF8) == SLA_WITH_W_NOACK)
    450a:	e1 e2       	ldi	r30, 0x21	; 33
    450c:	f0 e0       	ldi	r31, 0x00	; 0
    450e:	80 81       	ld	r24, Z
    4510:	88 2f       	mov	r24, r24
    4512:	90 e0       	ldi	r25, 0x00	; 0
    4514:	88 7f       	andi	r24, 0xF8	; 248
    4516:	90 70       	andi	r25, 0x00	; 0
    4518:	80 32       	cpi	r24, 0x20	; 32
    451a:	91 05       	cpc	r25, r1
    451c:	11 f4       	brne	.+4      	; 0x4522 <TWI_enSetSlaveAddress_Write+0x70>
	{
		Local_ErrorState = SLA_W_NOACK_ERR;
    451e:	83 e0       	ldi	r24, 0x03	; 3
    4520:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/* Do Nothing */
	}
	return Local_ErrorState;
    4522:	89 81       	ldd	r24, Y+1	; 0x01
}
    4524:	0f 90       	pop	r0
    4526:	0f 90       	pop	r0
    4528:	cf 91       	pop	r28
    452a:	df 91       	pop	r29
    452c:	08 95       	ret

0000452e <TWI_enSetSlaveAddress_Read>:
TWI_ErrorState_t TWI_enSetSlaveAddress_Read(uint8 u8SlaveAddressCpy){
    452e:	df 93       	push	r29
    4530:	cf 93       	push	r28
    4532:	00 d0       	rcall	.+0      	; 0x4534 <TWI_enSetSlaveAddress_Read+0x6>
    4534:	cd b7       	in	r28, 0x3d	; 61
    4536:	de b7       	in	r29, 0x3e	; 62
    4538:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    453a:	19 82       	std	Y+1, r1	; 0x01

	/* Set Slave address in TWDR register */
	TWDR = u8SlaveAddressCpy | 1;   //first bit will be 1
    453c:	e3 e2       	ldi	r30, 0x23	; 35
    453e:	f0 e0       	ldi	r31, 0x00	; 0
    4540:	8a 81       	ldd	r24, Y+2	; 0x02
    4542:	81 60       	ori	r24, 0x01	; 1
    4544:	80 83       	st	Z, r24

	/* Clear the start condition bit */
	CLR_BIT(TWCR , TWCR_TWSTA);
    4546:	a6 e5       	ldi	r26, 0x56	; 86
    4548:	b0 e0       	ldi	r27, 0x00	; 0
    454a:	e6 e5       	ldi	r30, 0x56	; 86
    454c:	f0 e0       	ldi	r31, 0x00	; 0
    454e:	80 81       	ld	r24, Z
    4550:	8f 7d       	andi	r24, 0xDF	; 223
    4552:	8c 93       	st	X, r24
	/* Set bit 0 to make Read operation */
	//SET_BIT(TWDR , TWDR_TWD0);		//already is set to 1

	/*************************************************/
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    4554:	a6 e5       	ldi	r26, 0x56	; 86
    4556:	b0 e0       	ldi	r27, 0x00	; 0
    4558:	e6 e5       	ldi	r30, 0x56	; 86
    455a:	f0 e0       	ldi	r31, 0x00	; 0
    455c:	80 81       	ld	r24, Z
    455e:	80 68       	ori	r24, 0x80	; 128
    4560:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    4562:	a6 e5       	ldi	r26, 0x56	; 86
    4564:	b0 e0       	ldi	r27, 0x00	; 0
    4566:	e6 e5       	ldi	r30, 0x56	; 86
    4568:	f0 e0       	ldi	r31, 0x00	; 0
    456a:	80 81       	ld	r24, Z
    456c:	84 60       	ori	r24, 0x04	; 4
    456e:	8c 93       	st	X, r24
	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    4570:	e6 e5       	ldi	r30, 0x56	; 86
    4572:	f0 e0       	ldi	r31, 0x00	; 0
    4574:	80 81       	ld	r24, Z
    4576:	88 23       	and	r24, r24
    4578:	dc f7       	brge	.-10     	; 0x4570 <TWI_enSetSlaveAddress_Read+0x42>

	if((TWSR & 0XF8) == SLA_WITH_R_NOACK)
    457a:	e1 e2       	ldi	r30, 0x21	; 33
    457c:	f0 e0       	ldi	r31, 0x00	; 0
    457e:	80 81       	ld	r24, Z
    4580:	88 2f       	mov	r24, r24
    4582:	90 e0       	ldi	r25, 0x00	; 0
    4584:	88 7f       	andi	r24, 0xF8	; 248
    4586:	90 70       	andi	r25, 0x00	; 0
    4588:	88 33       	cpi	r24, 0x38	; 56
    458a:	91 05       	cpc	r25, r1
    458c:	11 f4       	brne	.+4      	; 0x4592 <TWI_enSetSlaveAddress_Read+0x64>
	{
		Local_ErrorState = SLA_R_NOACK_ERR;
    458e:	84 e0       	ldi	r24, 0x04	; 4
    4590:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/* Do Nothing */
	}
	return Local_ErrorState;
    4592:	89 81       	ldd	r24, Y+1	; 0x01
}
    4594:	0f 90       	pop	r0
    4596:	0f 90       	pop	r0
    4598:	cf 91       	pop	r28
    459a:	df 91       	pop	r29
    459c:	08 95       	ret

0000459e <TWI_enMasterWriteData>:
TWI_ErrorState_t TWI_enMasterWriteData(uint8 u8DataCpy){
    459e:	df 93       	push	r29
    45a0:	cf 93       	push	r28
    45a2:	00 d0       	rcall	.+0      	; 0x45a4 <TWI_enMasterWriteData+0x6>
    45a4:	cd b7       	in	r28, 0x3d	; 61
    45a6:	de b7       	in	r29, 0x3e	; 62
    45a8:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    45aa:	19 82       	std	Y+1, r1	; 0x01
	/* Write data to TWDR */
	TWDR = u8DataCpy;
    45ac:	e3 e2       	ldi	r30, 0x23	; 35
    45ae:	f0 e0       	ldi	r31, 0x00	; 0
    45b0:	8a 81       	ldd	r24, Y+2	; 0x02
    45b2:	80 83       	st	Z, r24

	/*************************************************/
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    45b4:	a6 e5       	ldi	r26, 0x56	; 86
    45b6:	b0 e0       	ldi	r27, 0x00	; 0
    45b8:	e6 e5       	ldi	r30, 0x56	; 86
    45ba:	f0 e0       	ldi	r31, 0x00	; 0
    45bc:	80 81       	ld	r24, Z
    45be:	80 68       	ori	r24, 0x80	; 128
    45c0:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    45c2:	a6 e5       	ldi	r26, 0x56	; 86
    45c4:	b0 e0       	ldi	r27, 0x00	; 0
    45c6:	e6 e5       	ldi	r30, 0x56	; 86
    45c8:	f0 e0       	ldi	r31, 0x00	; 0
    45ca:	80 81       	ld	r24, Z
    45cc:	84 60       	ori	r24, 0x04	; 4
    45ce:	8c 93       	st	X, r24
	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    45d0:	e6 e5       	ldi	r30, 0x56	; 86
    45d2:	f0 e0       	ldi	r31, 0x00	; 0
    45d4:	80 81       	ld	r24, Z
    45d6:	88 23       	and	r24, r24
    45d8:	dc f7       	brge	.-10     	; 0x45d0 <TWI_enMasterWriteData+0x32>

	if((TWSR & 0XF8) == MASTER_SEND_DATA_NOACK)
    45da:	e1 e2       	ldi	r30, 0x21	; 33
    45dc:	f0 e0       	ldi	r31, 0x00	; 0
    45de:	80 81       	ld	r24, Z
    45e0:	88 2f       	mov	r24, r24
    45e2:	90 e0       	ldi	r25, 0x00	; 0
    45e4:	88 7f       	andi	r24, 0xF8	; 248
    45e6:	90 70       	andi	r25, 0x00	; 0
    45e8:	80 33       	cpi	r24, 0x30	; 48
    45ea:	91 05       	cpc	r25, r1
    45ec:	11 f4       	brne	.+4      	; 0x45f2 <TWI_enMasterWriteData+0x54>
	{
		Local_ErrorState = MASTER_SEND_DATA_ERR;
    45ee:	85 e0       	ldi	r24, 0x05	; 5
    45f0:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do Nothing */
	}

	return Local_ErrorState;
    45f2:	89 81       	ldd	r24, Y+1	; 0x01

}
    45f4:	0f 90       	pop	r0
    45f6:	0f 90       	pop	r0
    45f8:	cf 91       	pop	r28
    45fa:	df 91       	pop	r29
    45fc:	08 95       	ret

000045fe <TWI_enMasterReadData>:
TWI_ErrorState_t TWI_enMasterReadData(uint8* u8DataCpy){
    45fe:	df 93       	push	r29
    4600:	cf 93       	push	r28
    4602:	00 d0       	rcall	.+0      	; 0x4604 <TWI_enMasterReadData+0x6>
    4604:	0f 92       	push	r0
    4606:	cd b7       	in	r28, 0x3d	; 61
    4608:	de b7       	in	r29, 0x3e	; 62
    460a:	9b 83       	std	Y+3, r25	; 0x03
    460c:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    460e:	19 82       	std	Y+1, r1	; 0x01

		/* Clear interrupt flag to start the operation */
		SET_BIT(TWCR , TWCR_TWINT);
    4610:	a6 e5       	ldi	r26, 0x56	; 86
    4612:	b0 e0       	ldi	r27, 0x00	; 0
    4614:	e6 e5       	ldi	r30, 0x56	; 86
    4616:	f0 e0       	ldi	r31, 0x00	; 0
    4618:	80 81       	ld	r24, Z
    461a:	80 68       	ori	r24, 0x80	; 128
    461c:	8c 93       	st	X, r24
		/* Enable TWI */
		SET_BIT(TWCR , TWCR_TWEN);
    461e:	a6 e5       	ldi	r26, 0x56	; 86
    4620:	b0 e0       	ldi	r27, 0x00	; 0
    4622:	e6 e5       	ldi	r30, 0x56	; 86
    4624:	f0 e0       	ldi	r31, 0x00	; 0
    4626:	80 81       	ld	r24, Z
    4628:	84 60       	ori	r24, 0x04	; 4
    462a:	8c 93       	st	X, r24
		CLR_BIT(TWCR, TWCR_TWEA);
    462c:	a6 e5       	ldi	r26, 0x56	; 86
    462e:	b0 e0       	ldi	r27, 0x00	; 0
    4630:	e6 e5       	ldi	r30, 0x56	; 86
    4632:	f0 e0       	ldi	r31, 0x00	; 0
    4634:	80 81       	ld	r24, Z
    4636:	8f 7b       	andi	r24, 0xBF	; 191
    4638:	8c 93       	st	X, r24
		/*Wait until the interrupt flag us raised again  */
		while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    463a:	e6 e5       	ldi	r30, 0x56	; 86
    463c:	f0 e0       	ldi	r31, 0x00	; 0
    463e:	80 81       	ld	r24, Z
    4640:	88 23       	and	r24, r24
    4642:	dc f7       	brge	.-10     	; 0x463a <TWI_enMasterReadData+0x3c>

		if((TWSR & 0XF8) == MASTER_RECEIVE_DATA_NOACK)
    4644:	e1 e2       	ldi	r30, 0x21	; 33
    4646:	f0 e0       	ldi	r31, 0x00	; 0
    4648:	80 81       	ld	r24, Z
    464a:	88 2f       	mov	r24, r24
    464c:	90 e0       	ldi	r25, 0x00	; 0
    464e:	88 7f       	andi	r24, 0xF8	; 248
    4650:	90 70       	andi	r25, 0x00	; 0
    4652:	88 35       	cpi	r24, 0x58	; 88
    4654:	91 05       	cpc	r25, r1
    4656:	11 f4       	brne	.+4      	; 0x465c <TWI_enMasterReadData+0x5e>
		{
			Local_ErrorState = MASTER_RECEIVE_DATA_ERR;
    4658:	86 e0       	ldi	r24, 0x06	; 6
    465a:	89 83       	std	Y+1, r24	; 0x01
		}
		else
		{
		}
			*u8DataCpy = TWDR;
    465c:	e3 e2       	ldi	r30, 0x23	; 35
    465e:	f0 e0       	ldi	r31, 0x00	; 0
    4660:	80 81       	ld	r24, Z
    4662:	ea 81       	ldd	r30, Y+2	; 0x02
    4664:	fb 81       	ldd	r31, Y+3	; 0x03
    4666:	80 83       	st	Z, r24

		return Local_ErrorState;
    4668:	89 81       	ldd	r24, Y+1	; 0x01

}
    466a:	0f 90       	pop	r0
    466c:	0f 90       	pop	r0
    466e:	0f 90       	pop	r0
    4670:	cf 91       	pop	r28
    4672:	df 91       	pop	r29
    4674:	08 95       	ret

00004676 <TWI_voidStopCondition>:

void TWI_voidStopCondition(void){
    4676:	df 93       	push	r29
    4678:	cf 93       	push	r28
    467a:	cd b7       	in	r28, 0x3d	; 61
    467c:	de b7       	in	r29, 0x3e	; 62
	/* Set bit TWSTO to make stop condition */
	SET_BIT(TWCR , TWCR_TWSTO);
    467e:	a6 e5       	ldi	r26, 0x56	; 86
    4680:	b0 e0       	ldi	r27, 0x00	; 0
    4682:	e6 e5       	ldi	r30, 0x56	; 86
    4684:	f0 e0       	ldi	r31, 0x00	; 0
    4686:	80 81       	ld	r24, Z
    4688:	80 61       	ori	r24, 0x10	; 16
    468a:	8c 93       	st	X, r24

	/************************************************/
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    468c:	a6 e5       	ldi	r26, 0x56	; 86
    468e:	b0 e0       	ldi	r27, 0x00	; 0
    4690:	e6 e5       	ldi	r30, 0x56	; 86
    4692:	f0 e0       	ldi	r31, 0x00	; 0
    4694:	80 81       	ld	r24, Z
    4696:	80 68       	ori	r24, 0x80	; 128
    4698:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    469a:	a6 e5       	ldi	r26, 0x56	; 86
    469c:	b0 e0       	ldi	r27, 0x00	; 0
    469e:	e6 e5       	ldi	r30, 0x56	; 86
    46a0:	f0 e0       	ldi	r31, 0x00	; 0
    46a2:	80 81       	ld	r24, Z
    46a4:	84 60       	ori	r24, 0x04	; 4
    46a6:	8c 93       	st	X, r24
}
    46a8:	cf 91       	pop	r28
    46aa:	df 91       	pop	r29
    46ac:	08 95       	ret

000046ae <DIO_voidInit>:
#include "DIO_private.h"
#include "DIO_config.h"


void DIO_voidInit(void)
{
    46ae:	df 93       	push	r29
    46b0:	cf 93       	push	r28
    46b2:	cd b7       	in	r28, 0x3d	; 61
    46b4:	de b7       	in	r29, 0x3e	; 62
	DDRA=CONCAT(DIO_PIN_NUM_A7_DIR,DIO_PIN_NUM_A6_DIR,DIO_PIN_NUM_A5_DIR,DIO_PIN_NUM_A4_DIR,DIO_PIN_NUM_A3_DIR,DIO_PIN_NUM_A2_DIR,DIO_PIN_NUM_A1_DIR,DIO_PIN_NUM_A0_DIR);
    46b6:	ea e3       	ldi	r30, 0x3A	; 58
    46b8:	f0 e0       	ldi	r31, 0x00	; 0
    46ba:	8c ef       	ldi	r24, 0xFC	; 252
    46bc:	80 83       	st	Z, r24
	DDRB=CONCAT(DIO_PIN_NUM_B7_DIR,DIO_PIN_NUM_B6_DIR,DIO_PIN_NUM_B5_DIR,DIO_PIN_NUM_B4_DIR,DIO_PIN_NUM_B3_DIR,DIO_PIN_NUM_B2_DIR,DIO_PIN_NUM_B1_DIR,DIO_PIN_NUM_B0_DIR);
    46be:	e7 e3       	ldi	r30, 0x37	; 55
    46c0:	f0 e0       	ldi	r31, 0x00	; 0
    46c2:	8b eb       	ldi	r24, 0xBB	; 187
    46c4:	80 83       	st	Z, r24
	DDRC=CONCAT(DIO_PIN_NUM_C7_DIR,DIO_PIN_NUM_C6_DIR,DIO_PIN_NUM_C5_DIR,DIO_PIN_NUM_C4_DIR,DIO_PIN_NUM_C3_DIR,DIO_PIN_NUM_C2_DIR,DIO_PIN_NUM_C1_DIR,DIO_PIN_NUM_C0_DIR);
    46c6:	e4 e3       	ldi	r30, 0x34	; 52
    46c8:	f0 e0       	ldi	r31, 0x00	; 0
    46ca:	8f ef       	ldi	r24, 0xFF	; 255
    46cc:	80 83       	st	Z, r24
	DDRD=CONCAT(DIO_PIN_NUM_D7_DIR,DIO_PIN_NUM_D6_DIR,DIO_PIN_NUM_D5_DIR,DIO_PIN_NUM_D4_DIR,DIO_PIN_NUM_D3_DIR,DIO_PIN_NUM_D2_DIR,DIO_PIN_NUM_D1_DIR,DIO_PIN_NUM_D0_DIR);
    46ce:	e1 e3       	ldi	r30, 0x31	; 49
    46d0:	f0 e0       	ldi	r31, 0x00	; 0
    46d2:	80 ef       	ldi	r24, 0xF0	; 240
    46d4:	80 83       	st	Z, r24
}
    46d6:	cf 91       	pop	r28
    46d8:	df 91       	pop	r29
    46da:	08 95       	ret

000046dc <DIO_voidWritePin>:
void DIO_voidWritePin(uint8 u8PortCpy, uint8 u8PinCpy, uint8 u8ValueCpy)
{
    46dc:	df 93       	push	r29
    46de:	cf 93       	push	r28
    46e0:	00 d0       	rcall	.+0      	; 0x46e2 <DIO_voidWritePin+0x6>
    46e2:	00 d0       	rcall	.+0      	; 0x46e4 <DIO_voidWritePin+0x8>
    46e4:	0f 92       	push	r0
    46e6:	cd b7       	in	r28, 0x3d	; 61
    46e8:	de b7       	in	r29, 0x3e	; 62
    46ea:	89 83       	std	Y+1, r24	; 0x01
    46ec:	6a 83       	std	Y+2, r22	; 0x02
    46ee:	4b 83       	std	Y+3, r20	; 0x03
	switch(u8PortCpy){
    46f0:	89 81       	ldd	r24, Y+1	; 0x01
    46f2:	28 2f       	mov	r18, r24
    46f4:	30 e0       	ldi	r19, 0x00	; 0
    46f6:	3d 83       	std	Y+5, r19	; 0x05
    46f8:	2c 83       	std	Y+4, r18	; 0x04
    46fa:	8c 81       	ldd	r24, Y+4	; 0x04
    46fc:	9d 81       	ldd	r25, Y+5	; 0x05
    46fe:	82 30       	cpi	r24, 0x02	; 2
    4700:	91 05       	cpc	r25, r1
    4702:	09 f4       	brne	.+2      	; 0x4706 <DIO_voidWritePin+0x2a>
    4704:	48 c0       	rjmp	.+144    	; 0x4796 <DIO_voidWritePin+0xba>
    4706:	2c 81       	ldd	r18, Y+4	; 0x04
    4708:	3d 81       	ldd	r19, Y+5	; 0x05
    470a:	23 30       	cpi	r18, 0x03	; 3
    470c:	31 05       	cpc	r19, r1
    470e:	34 f4       	brge	.+12     	; 0x471c <DIO_voidWritePin+0x40>
    4710:	8c 81       	ldd	r24, Y+4	; 0x04
    4712:	9d 81       	ldd	r25, Y+5	; 0x05
    4714:	81 30       	cpi	r24, 0x01	; 1
    4716:	91 05       	cpc	r25, r1
    4718:	71 f0       	breq	.+28     	; 0x4736 <DIO_voidWritePin+0x5a>
    471a:	cb c0       	rjmp	.+406    	; 0x48b2 <DIO_voidWritePin+0x1d6>
    471c:	2c 81       	ldd	r18, Y+4	; 0x04
    471e:	3d 81       	ldd	r19, Y+5	; 0x05
    4720:	23 30       	cpi	r18, 0x03	; 3
    4722:	31 05       	cpc	r19, r1
    4724:	09 f4       	brne	.+2      	; 0x4728 <DIO_voidWritePin+0x4c>
    4726:	67 c0       	rjmp	.+206    	; 0x47f6 <DIO_voidWritePin+0x11a>
    4728:	8c 81       	ldd	r24, Y+4	; 0x04
    472a:	9d 81       	ldd	r25, Y+5	; 0x05
    472c:	84 30       	cpi	r24, 0x04	; 4
    472e:	91 05       	cpc	r25, r1
    4730:	09 f4       	brne	.+2      	; 0x4734 <DIO_voidWritePin+0x58>
    4732:	91 c0       	rjmp	.+290    	; 0x4856 <DIO_voidWritePin+0x17a>
    4734:	be c0       	rjmp	.+380    	; 0x48b2 <DIO_voidWritePin+0x1d6>
	case PORT_A:
		if (u8ValueCpy == DIO_HIGH)
    4736:	8b 81       	ldd	r24, Y+3	; 0x03
    4738:	81 30       	cpi	r24, 0x01	; 1
    473a:	a1 f4       	brne	.+40     	; 0x4764 <DIO_voidWritePin+0x88>
		{
			SET_BIT(PORTA, u8PinCpy);
    473c:	ab e3       	ldi	r26, 0x3B	; 59
    473e:	b0 e0       	ldi	r27, 0x00	; 0
    4740:	eb e3       	ldi	r30, 0x3B	; 59
    4742:	f0 e0       	ldi	r31, 0x00	; 0
    4744:	80 81       	ld	r24, Z
    4746:	48 2f       	mov	r20, r24
    4748:	8a 81       	ldd	r24, Y+2	; 0x02
    474a:	28 2f       	mov	r18, r24
    474c:	30 e0       	ldi	r19, 0x00	; 0
    474e:	81 e0       	ldi	r24, 0x01	; 1
    4750:	90 e0       	ldi	r25, 0x00	; 0
    4752:	02 2e       	mov	r0, r18
    4754:	02 c0       	rjmp	.+4      	; 0x475a <DIO_voidWritePin+0x7e>
    4756:	88 0f       	add	r24, r24
    4758:	99 1f       	adc	r25, r25
    475a:	0a 94       	dec	r0
    475c:	e2 f7       	brpl	.-8      	; 0x4756 <DIO_voidWritePin+0x7a>
    475e:	84 2b       	or	r24, r20
    4760:	8c 93       	st	X, r24
    4762:	a7 c0       	rjmp	.+334    	; 0x48b2 <DIO_voidWritePin+0x1d6>
		}
		else if(u8ValueCpy == DIO_LOW)
    4764:	8b 81       	ldd	r24, Y+3	; 0x03
    4766:	88 23       	and	r24, r24
    4768:	09 f0       	breq	.+2      	; 0x476c <DIO_voidWritePin+0x90>
    476a:	a3 c0       	rjmp	.+326    	; 0x48b2 <DIO_voidWritePin+0x1d6>
		{
			CLR_BIT(PORTA, u8PinCpy);
    476c:	ab e3       	ldi	r26, 0x3B	; 59
    476e:	b0 e0       	ldi	r27, 0x00	; 0
    4770:	eb e3       	ldi	r30, 0x3B	; 59
    4772:	f0 e0       	ldi	r31, 0x00	; 0
    4774:	80 81       	ld	r24, Z
    4776:	48 2f       	mov	r20, r24
    4778:	8a 81       	ldd	r24, Y+2	; 0x02
    477a:	28 2f       	mov	r18, r24
    477c:	30 e0       	ldi	r19, 0x00	; 0
    477e:	81 e0       	ldi	r24, 0x01	; 1
    4780:	90 e0       	ldi	r25, 0x00	; 0
    4782:	02 2e       	mov	r0, r18
    4784:	02 c0       	rjmp	.+4      	; 0x478a <DIO_voidWritePin+0xae>
    4786:	88 0f       	add	r24, r24
    4788:	99 1f       	adc	r25, r25
    478a:	0a 94       	dec	r0
    478c:	e2 f7       	brpl	.-8      	; 0x4786 <DIO_voidWritePin+0xaa>
    478e:	80 95       	com	r24
    4790:	84 23       	and	r24, r20
    4792:	8c 93       	st	X, r24
    4794:	8e c0       	rjmp	.+284    	; 0x48b2 <DIO_voidWritePin+0x1d6>
		}
		break;
	case PORT_B:
		if (u8ValueCpy == DIO_HIGH)
    4796:	8b 81       	ldd	r24, Y+3	; 0x03
    4798:	81 30       	cpi	r24, 0x01	; 1
    479a:	a1 f4       	brne	.+40     	; 0x47c4 <DIO_voidWritePin+0xe8>
		{
			SET_BIT(PORTB, u8PinCpy);
    479c:	a8 e3       	ldi	r26, 0x38	; 56
    479e:	b0 e0       	ldi	r27, 0x00	; 0
    47a0:	e8 e3       	ldi	r30, 0x38	; 56
    47a2:	f0 e0       	ldi	r31, 0x00	; 0
    47a4:	80 81       	ld	r24, Z
    47a6:	48 2f       	mov	r20, r24
    47a8:	8a 81       	ldd	r24, Y+2	; 0x02
    47aa:	28 2f       	mov	r18, r24
    47ac:	30 e0       	ldi	r19, 0x00	; 0
    47ae:	81 e0       	ldi	r24, 0x01	; 1
    47b0:	90 e0       	ldi	r25, 0x00	; 0
    47b2:	02 2e       	mov	r0, r18
    47b4:	02 c0       	rjmp	.+4      	; 0x47ba <DIO_voidWritePin+0xde>
    47b6:	88 0f       	add	r24, r24
    47b8:	99 1f       	adc	r25, r25
    47ba:	0a 94       	dec	r0
    47bc:	e2 f7       	brpl	.-8      	; 0x47b6 <DIO_voidWritePin+0xda>
    47be:	84 2b       	or	r24, r20
    47c0:	8c 93       	st	X, r24
    47c2:	77 c0       	rjmp	.+238    	; 0x48b2 <DIO_voidWritePin+0x1d6>
		}
		else if(u8ValueCpy == DIO_LOW)
    47c4:	8b 81       	ldd	r24, Y+3	; 0x03
    47c6:	88 23       	and	r24, r24
    47c8:	09 f0       	breq	.+2      	; 0x47cc <DIO_voidWritePin+0xf0>
    47ca:	73 c0       	rjmp	.+230    	; 0x48b2 <DIO_voidWritePin+0x1d6>
		{
			CLR_BIT(PORTB, u8PinCpy);
    47cc:	a8 e3       	ldi	r26, 0x38	; 56
    47ce:	b0 e0       	ldi	r27, 0x00	; 0
    47d0:	e8 e3       	ldi	r30, 0x38	; 56
    47d2:	f0 e0       	ldi	r31, 0x00	; 0
    47d4:	80 81       	ld	r24, Z
    47d6:	48 2f       	mov	r20, r24
    47d8:	8a 81       	ldd	r24, Y+2	; 0x02
    47da:	28 2f       	mov	r18, r24
    47dc:	30 e0       	ldi	r19, 0x00	; 0
    47de:	81 e0       	ldi	r24, 0x01	; 1
    47e0:	90 e0       	ldi	r25, 0x00	; 0
    47e2:	02 2e       	mov	r0, r18
    47e4:	02 c0       	rjmp	.+4      	; 0x47ea <DIO_voidWritePin+0x10e>
    47e6:	88 0f       	add	r24, r24
    47e8:	99 1f       	adc	r25, r25
    47ea:	0a 94       	dec	r0
    47ec:	e2 f7       	brpl	.-8      	; 0x47e6 <DIO_voidWritePin+0x10a>
    47ee:	80 95       	com	r24
    47f0:	84 23       	and	r24, r20
    47f2:	8c 93       	st	X, r24
    47f4:	5e c0       	rjmp	.+188    	; 0x48b2 <DIO_voidWritePin+0x1d6>
		}
		break;
	case PORT_C:
		if (u8ValueCpy == DIO_HIGH)
    47f6:	8b 81       	ldd	r24, Y+3	; 0x03
    47f8:	81 30       	cpi	r24, 0x01	; 1
    47fa:	a1 f4       	brne	.+40     	; 0x4824 <DIO_voidWritePin+0x148>
		{
			SET_BIT(PORTC, u8PinCpy);
    47fc:	a5 e3       	ldi	r26, 0x35	; 53
    47fe:	b0 e0       	ldi	r27, 0x00	; 0
    4800:	e5 e3       	ldi	r30, 0x35	; 53
    4802:	f0 e0       	ldi	r31, 0x00	; 0
    4804:	80 81       	ld	r24, Z
    4806:	48 2f       	mov	r20, r24
    4808:	8a 81       	ldd	r24, Y+2	; 0x02
    480a:	28 2f       	mov	r18, r24
    480c:	30 e0       	ldi	r19, 0x00	; 0
    480e:	81 e0       	ldi	r24, 0x01	; 1
    4810:	90 e0       	ldi	r25, 0x00	; 0
    4812:	02 2e       	mov	r0, r18
    4814:	02 c0       	rjmp	.+4      	; 0x481a <DIO_voidWritePin+0x13e>
    4816:	88 0f       	add	r24, r24
    4818:	99 1f       	adc	r25, r25
    481a:	0a 94       	dec	r0
    481c:	e2 f7       	brpl	.-8      	; 0x4816 <DIO_voidWritePin+0x13a>
    481e:	84 2b       	or	r24, r20
    4820:	8c 93       	st	X, r24
    4822:	47 c0       	rjmp	.+142    	; 0x48b2 <DIO_voidWritePin+0x1d6>
		}
		else if(u8ValueCpy == DIO_LOW){
    4824:	8b 81       	ldd	r24, Y+3	; 0x03
    4826:	88 23       	and	r24, r24
    4828:	09 f0       	breq	.+2      	; 0x482c <DIO_voidWritePin+0x150>
    482a:	43 c0       	rjmp	.+134    	; 0x48b2 <DIO_voidWritePin+0x1d6>
			CLR_BIT(PORTC, u8PinCpy);
    482c:	a5 e3       	ldi	r26, 0x35	; 53
    482e:	b0 e0       	ldi	r27, 0x00	; 0
    4830:	e5 e3       	ldi	r30, 0x35	; 53
    4832:	f0 e0       	ldi	r31, 0x00	; 0
    4834:	80 81       	ld	r24, Z
    4836:	48 2f       	mov	r20, r24
    4838:	8a 81       	ldd	r24, Y+2	; 0x02
    483a:	28 2f       	mov	r18, r24
    483c:	30 e0       	ldi	r19, 0x00	; 0
    483e:	81 e0       	ldi	r24, 0x01	; 1
    4840:	90 e0       	ldi	r25, 0x00	; 0
    4842:	02 2e       	mov	r0, r18
    4844:	02 c0       	rjmp	.+4      	; 0x484a <DIO_voidWritePin+0x16e>
    4846:	88 0f       	add	r24, r24
    4848:	99 1f       	adc	r25, r25
    484a:	0a 94       	dec	r0
    484c:	e2 f7       	brpl	.-8      	; 0x4846 <DIO_voidWritePin+0x16a>
    484e:	80 95       	com	r24
    4850:	84 23       	and	r24, r20
    4852:	8c 93       	st	X, r24
    4854:	2e c0       	rjmp	.+92     	; 0x48b2 <DIO_voidWritePin+0x1d6>
		}
		break;
	case PORT_D:
		if (u8ValueCpy == DIO_HIGH){
    4856:	8b 81       	ldd	r24, Y+3	; 0x03
    4858:	81 30       	cpi	r24, 0x01	; 1
    485a:	a1 f4       	brne	.+40     	; 0x4884 <DIO_voidWritePin+0x1a8>
			SET_BIT(PORTD, u8PinCpy);
    485c:	a2 e3       	ldi	r26, 0x32	; 50
    485e:	b0 e0       	ldi	r27, 0x00	; 0
    4860:	e2 e3       	ldi	r30, 0x32	; 50
    4862:	f0 e0       	ldi	r31, 0x00	; 0
    4864:	80 81       	ld	r24, Z
    4866:	48 2f       	mov	r20, r24
    4868:	8a 81       	ldd	r24, Y+2	; 0x02
    486a:	28 2f       	mov	r18, r24
    486c:	30 e0       	ldi	r19, 0x00	; 0
    486e:	81 e0       	ldi	r24, 0x01	; 1
    4870:	90 e0       	ldi	r25, 0x00	; 0
    4872:	02 2e       	mov	r0, r18
    4874:	02 c0       	rjmp	.+4      	; 0x487a <DIO_voidWritePin+0x19e>
    4876:	88 0f       	add	r24, r24
    4878:	99 1f       	adc	r25, r25
    487a:	0a 94       	dec	r0
    487c:	e2 f7       	brpl	.-8      	; 0x4876 <DIO_voidWritePin+0x19a>
    487e:	84 2b       	or	r24, r20
    4880:	8c 93       	st	X, r24
    4882:	17 c0       	rjmp	.+46     	; 0x48b2 <DIO_voidWritePin+0x1d6>
		}
		else if(u8ValueCpy == DIO_LOW){
    4884:	8b 81       	ldd	r24, Y+3	; 0x03
    4886:	88 23       	and	r24, r24
    4888:	a1 f4       	brne	.+40     	; 0x48b2 <DIO_voidWritePin+0x1d6>
			CLR_BIT(PORTD, u8PinCpy);
    488a:	a2 e3       	ldi	r26, 0x32	; 50
    488c:	b0 e0       	ldi	r27, 0x00	; 0
    488e:	e2 e3       	ldi	r30, 0x32	; 50
    4890:	f0 e0       	ldi	r31, 0x00	; 0
    4892:	80 81       	ld	r24, Z
    4894:	48 2f       	mov	r20, r24
    4896:	8a 81       	ldd	r24, Y+2	; 0x02
    4898:	28 2f       	mov	r18, r24
    489a:	30 e0       	ldi	r19, 0x00	; 0
    489c:	81 e0       	ldi	r24, 0x01	; 1
    489e:	90 e0       	ldi	r25, 0x00	; 0
    48a0:	02 2e       	mov	r0, r18
    48a2:	02 c0       	rjmp	.+4      	; 0x48a8 <DIO_voidWritePin+0x1cc>
    48a4:	88 0f       	add	r24, r24
    48a6:	99 1f       	adc	r25, r25
    48a8:	0a 94       	dec	r0
    48aa:	e2 f7       	brpl	.-8      	; 0x48a4 <DIO_voidWritePin+0x1c8>
    48ac:	80 95       	com	r24
    48ae:	84 23       	and	r24, r20
    48b0:	8c 93       	st	X, r24
		}
		break;
		}
}
    48b2:	0f 90       	pop	r0
    48b4:	0f 90       	pop	r0
    48b6:	0f 90       	pop	r0
    48b8:	0f 90       	pop	r0
    48ba:	0f 90       	pop	r0
    48bc:	cf 91       	pop	r28
    48be:	df 91       	pop	r29
    48c0:	08 95       	ret

000048c2 <DIO_u8ReadPin>:
uint8 DIO_u8ReadPin(uint8 u8PortCpy, uint8 u8PinCpy)
{
    48c2:	df 93       	push	r29
    48c4:	cf 93       	push	r28
    48c6:	00 d0       	rcall	.+0      	; 0x48c8 <DIO_u8ReadPin+0x6>
    48c8:	00 d0       	rcall	.+0      	; 0x48ca <DIO_u8ReadPin+0x8>
    48ca:	0f 92       	push	r0
    48cc:	cd b7       	in	r28, 0x3d	; 61
    48ce:	de b7       	in	r29, 0x3e	; 62
    48d0:	8a 83       	std	Y+2, r24	; 0x02
    48d2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 u8PinVal;
	switch(u8PortCpy)
    48d4:	8a 81       	ldd	r24, Y+2	; 0x02
    48d6:	28 2f       	mov	r18, r24
    48d8:	30 e0       	ldi	r19, 0x00	; 0
    48da:	3d 83       	std	Y+5, r19	; 0x05
    48dc:	2c 83       	std	Y+4, r18	; 0x04
    48de:	4c 81       	ldd	r20, Y+4	; 0x04
    48e0:	5d 81       	ldd	r21, Y+5	; 0x05
    48e2:	42 30       	cpi	r20, 0x02	; 2
    48e4:	51 05       	cpc	r21, r1
    48e6:	41 f1       	breq	.+80     	; 0x4938 <DIO_u8ReadPin+0x76>
    48e8:	8c 81       	ldd	r24, Y+4	; 0x04
    48ea:	9d 81       	ldd	r25, Y+5	; 0x05
    48ec:	83 30       	cpi	r24, 0x03	; 3
    48ee:	91 05       	cpc	r25, r1
    48f0:	34 f4       	brge	.+12     	; 0x48fe <DIO_u8ReadPin+0x3c>
    48f2:	2c 81       	ldd	r18, Y+4	; 0x04
    48f4:	3d 81       	ldd	r19, Y+5	; 0x05
    48f6:	21 30       	cpi	r18, 0x01	; 1
    48f8:	31 05       	cpc	r19, r1
    48fa:	61 f0       	breq	.+24     	; 0x4914 <DIO_u8ReadPin+0x52>
    48fc:	52 c0       	rjmp	.+164    	; 0x49a2 <DIO_u8ReadPin+0xe0>
    48fe:	4c 81       	ldd	r20, Y+4	; 0x04
    4900:	5d 81       	ldd	r21, Y+5	; 0x05
    4902:	43 30       	cpi	r20, 0x03	; 3
    4904:	51 05       	cpc	r21, r1
    4906:	51 f1       	breq	.+84     	; 0x495c <DIO_u8ReadPin+0x9a>
    4908:	8c 81       	ldd	r24, Y+4	; 0x04
    490a:	9d 81       	ldd	r25, Y+5	; 0x05
    490c:	84 30       	cpi	r24, 0x04	; 4
    490e:	91 05       	cpc	r25, r1
    4910:	b9 f1       	breq	.+110    	; 0x4980 <DIO_u8ReadPin+0xbe>
    4912:	47 c0       	rjmp	.+142    	; 0x49a2 <DIO_u8ReadPin+0xe0>
	{
		case PORT_A:
			u8PinVal=GET_BIT(PINA,u8PinCpy);
    4914:	e9 e3       	ldi	r30, 0x39	; 57
    4916:	f0 e0       	ldi	r31, 0x00	; 0
    4918:	80 81       	ld	r24, Z
    491a:	28 2f       	mov	r18, r24
    491c:	30 e0       	ldi	r19, 0x00	; 0
    491e:	8b 81       	ldd	r24, Y+3	; 0x03
    4920:	88 2f       	mov	r24, r24
    4922:	90 e0       	ldi	r25, 0x00	; 0
    4924:	a9 01       	movw	r20, r18
    4926:	02 c0       	rjmp	.+4      	; 0x492c <DIO_u8ReadPin+0x6a>
    4928:	55 95       	asr	r21
    492a:	47 95       	ror	r20
    492c:	8a 95       	dec	r24
    492e:	e2 f7       	brpl	.-8      	; 0x4928 <DIO_u8ReadPin+0x66>
    4930:	ca 01       	movw	r24, r20
    4932:	81 70       	andi	r24, 0x01	; 1
    4934:	89 83       	std	Y+1, r24	; 0x01
    4936:	35 c0       	rjmp	.+106    	; 0x49a2 <DIO_u8ReadPin+0xe0>
			break;
		case PORT_B:
			u8PinVal=GET_BIT(PINB,u8PinCpy);
    4938:	e6 e3       	ldi	r30, 0x36	; 54
    493a:	f0 e0       	ldi	r31, 0x00	; 0
    493c:	80 81       	ld	r24, Z
    493e:	28 2f       	mov	r18, r24
    4940:	30 e0       	ldi	r19, 0x00	; 0
    4942:	8b 81       	ldd	r24, Y+3	; 0x03
    4944:	88 2f       	mov	r24, r24
    4946:	90 e0       	ldi	r25, 0x00	; 0
    4948:	a9 01       	movw	r20, r18
    494a:	02 c0       	rjmp	.+4      	; 0x4950 <DIO_u8ReadPin+0x8e>
    494c:	55 95       	asr	r21
    494e:	47 95       	ror	r20
    4950:	8a 95       	dec	r24
    4952:	e2 f7       	brpl	.-8      	; 0x494c <DIO_u8ReadPin+0x8a>
    4954:	ca 01       	movw	r24, r20
    4956:	81 70       	andi	r24, 0x01	; 1
    4958:	89 83       	std	Y+1, r24	; 0x01
    495a:	23 c0       	rjmp	.+70     	; 0x49a2 <DIO_u8ReadPin+0xe0>
			break;
		case PORT_C:
			u8PinVal=GET_BIT(PINC,u8PinCpy);
    495c:	e3 e3       	ldi	r30, 0x33	; 51
    495e:	f0 e0       	ldi	r31, 0x00	; 0
    4960:	80 81       	ld	r24, Z
    4962:	28 2f       	mov	r18, r24
    4964:	30 e0       	ldi	r19, 0x00	; 0
    4966:	8b 81       	ldd	r24, Y+3	; 0x03
    4968:	88 2f       	mov	r24, r24
    496a:	90 e0       	ldi	r25, 0x00	; 0
    496c:	a9 01       	movw	r20, r18
    496e:	02 c0       	rjmp	.+4      	; 0x4974 <DIO_u8ReadPin+0xb2>
    4970:	55 95       	asr	r21
    4972:	47 95       	ror	r20
    4974:	8a 95       	dec	r24
    4976:	e2 f7       	brpl	.-8      	; 0x4970 <DIO_u8ReadPin+0xae>
    4978:	ca 01       	movw	r24, r20
    497a:	81 70       	andi	r24, 0x01	; 1
    497c:	89 83       	std	Y+1, r24	; 0x01
    497e:	11 c0       	rjmp	.+34     	; 0x49a2 <DIO_u8ReadPin+0xe0>
			break;
		case PORT_D:
			u8PinVal=GET_BIT(PIND,u8PinCpy);
    4980:	e0 e3       	ldi	r30, 0x30	; 48
    4982:	f0 e0       	ldi	r31, 0x00	; 0
    4984:	80 81       	ld	r24, Z
    4986:	28 2f       	mov	r18, r24
    4988:	30 e0       	ldi	r19, 0x00	; 0
    498a:	8b 81       	ldd	r24, Y+3	; 0x03
    498c:	88 2f       	mov	r24, r24
    498e:	90 e0       	ldi	r25, 0x00	; 0
    4990:	a9 01       	movw	r20, r18
    4992:	02 c0       	rjmp	.+4      	; 0x4998 <DIO_u8ReadPin+0xd6>
    4994:	55 95       	asr	r21
    4996:	47 95       	ror	r20
    4998:	8a 95       	dec	r24
    499a:	e2 f7       	brpl	.-8      	; 0x4994 <DIO_u8ReadPin+0xd2>
    499c:	ca 01       	movw	r24, r20
    499e:	81 70       	andi	r24, 0x01	; 1
    49a0:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return u8PinVal;
    49a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    49a4:	0f 90       	pop	r0
    49a6:	0f 90       	pop	r0
    49a8:	0f 90       	pop	r0
    49aa:	0f 90       	pop	r0
    49ac:	0f 90       	pop	r0
    49ae:	cf 91       	pop	r28
    49b0:	df 91       	pop	r29
    49b2:	08 95       	ret

000049b4 <DIO_voidTogglePin>:

void DIO_voidTogglePin(uint8 u8PortCpy, uint8 u8PinCpy)
{
    49b4:	df 93       	push	r29
    49b6:	cf 93       	push	r28
    49b8:	00 d0       	rcall	.+0      	; 0x49ba <DIO_voidTogglePin+0x6>
    49ba:	00 d0       	rcall	.+0      	; 0x49bc <DIO_voidTogglePin+0x8>
    49bc:	cd b7       	in	r28, 0x3d	; 61
    49be:	de b7       	in	r29, 0x3e	; 62
    49c0:	89 83       	std	Y+1, r24	; 0x01
    49c2:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortCpy)
    49c4:	89 81       	ldd	r24, Y+1	; 0x01
    49c6:	28 2f       	mov	r18, r24
    49c8:	30 e0       	ldi	r19, 0x00	; 0
    49ca:	3c 83       	std	Y+4, r19	; 0x04
    49cc:	2b 83       	std	Y+3, r18	; 0x03
    49ce:	8b 81       	ldd	r24, Y+3	; 0x03
    49d0:	9c 81       	ldd	r25, Y+4	; 0x04
    49d2:	82 30       	cpi	r24, 0x02	; 2
    49d4:	91 05       	cpc	r25, r1
    49d6:	51 f1       	breq	.+84     	; 0x4a2c <DIO_voidTogglePin+0x78>
    49d8:	2b 81       	ldd	r18, Y+3	; 0x03
    49da:	3c 81       	ldd	r19, Y+4	; 0x04
    49dc:	23 30       	cpi	r18, 0x03	; 3
    49de:	31 05       	cpc	r19, r1
    49e0:	34 f4       	brge	.+12     	; 0x49ee <DIO_voidTogglePin+0x3a>
    49e2:	8b 81       	ldd	r24, Y+3	; 0x03
    49e4:	9c 81       	ldd	r25, Y+4	; 0x04
    49e6:	81 30       	cpi	r24, 0x01	; 1
    49e8:	91 05       	cpc	r25, r1
    49ea:	61 f0       	breq	.+24     	; 0x4a04 <DIO_voidTogglePin+0x50>
    49ec:	5a c0       	rjmp	.+180    	; 0x4aa2 <DIO_voidTogglePin+0xee>
    49ee:	2b 81       	ldd	r18, Y+3	; 0x03
    49f0:	3c 81       	ldd	r19, Y+4	; 0x04
    49f2:	23 30       	cpi	r18, 0x03	; 3
    49f4:	31 05       	cpc	r19, r1
    49f6:	71 f1       	breq	.+92     	; 0x4a54 <DIO_voidTogglePin+0xa0>
    49f8:	8b 81       	ldd	r24, Y+3	; 0x03
    49fa:	9c 81       	ldd	r25, Y+4	; 0x04
    49fc:	84 30       	cpi	r24, 0x04	; 4
    49fe:	91 05       	cpc	r25, r1
    4a00:	e9 f1       	breq	.+122    	; 0x4a7c <DIO_voidTogglePin+0xc8>
    4a02:	4f c0       	rjmp	.+158    	; 0x4aa2 <DIO_voidTogglePin+0xee>
	{
		case PORT_A:
			TOG_BIT(PORTA,u8PinCpy);
    4a04:	ab e3       	ldi	r26, 0x3B	; 59
    4a06:	b0 e0       	ldi	r27, 0x00	; 0
    4a08:	eb e3       	ldi	r30, 0x3B	; 59
    4a0a:	f0 e0       	ldi	r31, 0x00	; 0
    4a0c:	80 81       	ld	r24, Z
    4a0e:	48 2f       	mov	r20, r24
    4a10:	8a 81       	ldd	r24, Y+2	; 0x02
    4a12:	28 2f       	mov	r18, r24
    4a14:	30 e0       	ldi	r19, 0x00	; 0
    4a16:	81 e0       	ldi	r24, 0x01	; 1
    4a18:	90 e0       	ldi	r25, 0x00	; 0
    4a1a:	02 2e       	mov	r0, r18
    4a1c:	02 c0       	rjmp	.+4      	; 0x4a22 <DIO_voidTogglePin+0x6e>
    4a1e:	88 0f       	add	r24, r24
    4a20:	99 1f       	adc	r25, r25
    4a22:	0a 94       	dec	r0
    4a24:	e2 f7       	brpl	.-8      	; 0x4a1e <DIO_voidTogglePin+0x6a>
    4a26:	84 27       	eor	r24, r20
    4a28:	8c 93       	st	X, r24
    4a2a:	3b c0       	rjmp	.+118    	; 0x4aa2 <DIO_voidTogglePin+0xee>
			break;
		case PORT_B:
			TOG_BIT(PORTB,u8PinCpy);
    4a2c:	a8 e3       	ldi	r26, 0x38	; 56
    4a2e:	b0 e0       	ldi	r27, 0x00	; 0
    4a30:	e8 e3       	ldi	r30, 0x38	; 56
    4a32:	f0 e0       	ldi	r31, 0x00	; 0
    4a34:	80 81       	ld	r24, Z
    4a36:	48 2f       	mov	r20, r24
    4a38:	8a 81       	ldd	r24, Y+2	; 0x02
    4a3a:	28 2f       	mov	r18, r24
    4a3c:	30 e0       	ldi	r19, 0x00	; 0
    4a3e:	81 e0       	ldi	r24, 0x01	; 1
    4a40:	90 e0       	ldi	r25, 0x00	; 0
    4a42:	02 2e       	mov	r0, r18
    4a44:	02 c0       	rjmp	.+4      	; 0x4a4a <DIO_voidTogglePin+0x96>
    4a46:	88 0f       	add	r24, r24
    4a48:	99 1f       	adc	r25, r25
    4a4a:	0a 94       	dec	r0
    4a4c:	e2 f7       	brpl	.-8      	; 0x4a46 <DIO_voidTogglePin+0x92>
    4a4e:	84 27       	eor	r24, r20
    4a50:	8c 93       	st	X, r24
    4a52:	27 c0       	rjmp	.+78     	; 0x4aa2 <DIO_voidTogglePin+0xee>
			break;
		case PORT_C:
			TOG_BIT(PORTC,u8PinCpy);
    4a54:	a5 e3       	ldi	r26, 0x35	; 53
    4a56:	b0 e0       	ldi	r27, 0x00	; 0
    4a58:	e5 e3       	ldi	r30, 0x35	; 53
    4a5a:	f0 e0       	ldi	r31, 0x00	; 0
    4a5c:	80 81       	ld	r24, Z
    4a5e:	48 2f       	mov	r20, r24
    4a60:	8a 81       	ldd	r24, Y+2	; 0x02
    4a62:	28 2f       	mov	r18, r24
    4a64:	30 e0       	ldi	r19, 0x00	; 0
    4a66:	81 e0       	ldi	r24, 0x01	; 1
    4a68:	90 e0       	ldi	r25, 0x00	; 0
    4a6a:	02 2e       	mov	r0, r18
    4a6c:	02 c0       	rjmp	.+4      	; 0x4a72 <DIO_voidTogglePin+0xbe>
    4a6e:	88 0f       	add	r24, r24
    4a70:	99 1f       	adc	r25, r25
    4a72:	0a 94       	dec	r0
    4a74:	e2 f7       	brpl	.-8      	; 0x4a6e <DIO_voidTogglePin+0xba>
    4a76:	84 27       	eor	r24, r20
    4a78:	8c 93       	st	X, r24
    4a7a:	13 c0       	rjmp	.+38     	; 0x4aa2 <DIO_voidTogglePin+0xee>
			break;
		case PORT_D:
			TOG_BIT(PORTD,u8PinCpy);
    4a7c:	a2 e3       	ldi	r26, 0x32	; 50
    4a7e:	b0 e0       	ldi	r27, 0x00	; 0
    4a80:	e2 e3       	ldi	r30, 0x32	; 50
    4a82:	f0 e0       	ldi	r31, 0x00	; 0
    4a84:	80 81       	ld	r24, Z
    4a86:	48 2f       	mov	r20, r24
    4a88:	8a 81       	ldd	r24, Y+2	; 0x02
    4a8a:	28 2f       	mov	r18, r24
    4a8c:	30 e0       	ldi	r19, 0x00	; 0
    4a8e:	81 e0       	ldi	r24, 0x01	; 1
    4a90:	90 e0       	ldi	r25, 0x00	; 0
    4a92:	02 2e       	mov	r0, r18
    4a94:	02 c0       	rjmp	.+4      	; 0x4a9a <DIO_voidTogglePin+0xe6>
    4a96:	88 0f       	add	r24, r24
    4a98:	99 1f       	adc	r25, r25
    4a9a:	0a 94       	dec	r0
    4a9c:	e2 f7       	brpl	.-8      	; 0x4a96 <DIO_voidTogglePin+0xe2>
    4a9e:	84 27       	eor	r24, r20
    4aa0:	8c 93       	st	X, r24
			break;
	}

}
    4aa2:	0f 90       	pop	r0
    4aa4:	0f 90       	pop	r0
    4aa6:	0f 90       	pop	r0
    4aa8:	0f 90       	pop	r0
    4aaa:	cf 91       	pop	r28
    4aac:	df 91       	pop	r29
    4aae:	08 95       	ret

00004ab0 <DIO_voidWritePort>:
/* DIO_voidWritePort(PORT_A, 0x20) -> ob0010 0000-----> this means bit 0 will be 0 and bit5 will be 1 */
void DIO_voidWritePort(uint8 u8PortCpy, uint8 u8ValueCpy)
{
    4ab0:	df 93       	push	r29
    4ab2:	cf 93       	push	r28
    4ab4:	00 d0       	rcall	.+0      	; 0x4ab6 <DIO_voidWritePort+0x6>
    4ab6:	00 d0       	rcall	.+0      	; 0x4ab8 <DIO_voidWritePort+0x8>
    4ab8:	cd b7       	in	r28, 0x3d	; 61
    4aba:	de b7       	in	r29, 0x3e	; 62
    4abc:	89 83       	std	Y+1, r24	; 0x01
    4abe:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortCpy){
    4ac0:	89 81       	ldd	r24, Y+1	; 0x01
    4ac2:	28 2f       	mov	r18, r24
    4ac4:	30 e0       	ldi	r19, 0x00	; 0
    4ac6:	3c 83       	std	Y+4, r19	; 0x04
    4ac8:	2b 83       	std	Y+3, r18	; 0x03
    4aca:	8b 81       	ldd	r24, Y+3	; 0x03
    4acc:	9c 81       	ldd	r25, Y+4	; 0x04
    4ace:	82 30       	cpi	r24, 0x02	; 2
    4ad0:	91 05       	cpc	r25, r1
    4ad2:	d9 f0       	breq	.+54     	; 0x4b0a <DIO_voidWritePort+0x5a>
    4ad4:	2b 81       	ldd	r18, Y+3	; 0x03
    4ad6:	3c 81       	ldd	r19, Y+4	; 0x04
    4ad8:	23 30       	cpi	r18, 0x03	; 3
    4ada:	31 05       	cpc	r19, r1
    4adc:	34 f4       	brge	.+12     	; 0x4aea <DIO_voidWritePort+0x3a>
    4ade:	8b 81       	ldd	r24, Y+3	; 0x03
    4ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    4ae2:	81 30       	cpi	r24, 0x01	; 1
    4ae4:	91 05       	cpc	r25, r1
    4ae6:	61 f0       	breq	.+24     	; 0x4b00 <DIO_voidWritePort+0x50>
    4ae8:	1e c0       	rjmp	.+60     	; 0x4b26 <DIO_voidWritePort+0x76>
    4aea:	2b 81       	ldd	r18, Y+3	; 0x03
    4aec:	3c 81       	ldd	r19, Y+4	; 0x04
    4aee:	23 30       	cpi	r18, 0x03	; 3
    4af0:	31 05       	cpc	r19, r1
    4af2:	81 f0       	breq	.+32     	; 0x4b14 <DIO_voidWritePort+0x64>
    4af4:	8b 81       	ldd	r24, Y+3	; 0x03
    4af6:	9c 81       	ldd	r25, Y+4	; 0x04
    4af8:	84 30       	cpi	r24, 0x04	; 4
    4afa:	91 05       	cpc	r25, r1
    4afc:	81 f0       	breq	.+32     	; 0x4b1e <DIO_voidWritePort+0x6e>
    4afe:	13 c0       	rjmp	.+38     	; 0x4b26 <DIO_voidWritePort+0x76>
	case PORT_A:
		PORTA = u8ValueCpy;
    4b00:	eb e3       	ldi	r30, 0x3B	; 59
    4b02:	f0 e0       	ldi	r31, 0x00	; 0
    4b04:	8a 81       	ldd	r24, Y+2	; 0x02
    4b06:	80 83       	st	Z, r24
    4b08:	0e c0       	rjmp	.+28     	; 0x4b26 <DIO_voidWritePort+0x76>
		break;
	case PORT_B:
		PORTB = u8ValueCpy;
    4b0a:	e8 e3       	ldi	r30, 0x38	; 56
    4b0c:	f0 e0       	ldi	r31, 0x00	; 0
    4b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b10:	80 83       	st	Z, r24
    4b12:	09 c0       	rjmp	.+18     	; 0x4b26 <DIO_voidWritePort+0x76>
		break;
	case PORT_C:
		PORTC = u8ValueCpy;
    4b14:	e5 e3       	ldi	r30, 0x35	; 53
    4b16:	f0 e0       	ldi	r31, 0x00	; 0
    4b18:	8a 81       	ldd	r24, Y+2	; 0x02
    4b1a:	80 83       	st	Z, r24
    4b1c:	04 c0       	rjmp	.+8      	; 0x4b26 <DIO_voidWritePort+0x76>
		break;
	case PORT_D:
		PORTD = u8ValueCpy;
    4b1e:	e2 e3       	ldi	r30, 0x32	; 50
    4b20:	f0 e0       	ldi	r31, 0x00	; 0
    4b22:	8a 81       	ldd	r24, Y+2	; 0x02
    4b24:	80 83       	st	Z, r24
		break;

	}
}
    4b26:	0f 90       	pop	r0
    4b28:	0f 90       	pop	r0
    4b2a:	0f 90       	pop	r0
    4b2c:	0f 90       	pop	r0
    4b2e:	cf 91       	pop	r28
    4b30:	df 91       	pop	r29
    4b32:	08 95       	ret

00004b34 <DIO_voidPullUpState>:
void DIO_voidPullUpState(uint8 u8PortCpy , uint8 u8PinCpy,uint8 u8State)
{
    4b34:	df 93       	push	r29
    4b36:	cf 93       	push	r28
    4b38:	00 d0       	rcall	.+0      	; 0x4b3a <DIO_voidPullUpState+0x6>
    4b3a:	00 d0       	rcall	.+0      	; 0x4b3c <DIO_voidPullUpState+0x8>
    4b3c:	00 d0       	rcall	.+0      	; 0x4b3e <DIO_voidPullUpState+0xa>
    4b3e:	cd b7       	in	r28, 0x3d	; 61
    4b40:	de b7       	in	r29, 0x3e	; 62
    4b42:	8a 83       	std	Y+2, r24	; 0x02
    4b44:	6b 83       	std	Y+3, r22	; 0x03
    4b46:	4c 83       	std	Y+4, r20	; 0x04
	uint8 u8Direction ;
	switch(u8PortCpy)
    4b48:	8a 81       	ldd	r24, Y+2	; 0x02
    4b4a:	28 2f       	mov	r18, r24
    4b4c:	30 e0       	ldi	r19, 0x00	; 0
    4b4e:	3e 83       	std	Y+6, r19	; 0x06
    4b50:	2d 83       	std	Y+5, r18	; 0x05
    4b52:	4d 81       	ldd	r20, Y+5	; 0x05
    4b54:	5e 81       	ldd	r21, Y+6	; 0x06
    4b56:	42 30       	cpi	r20, 0x02	; 2
    4b58:	51 05       	cpc	r21, r1
    4b5a:	41 f1       	breq	.+80     	; 0x4bac <DIO_voidPullUpState+0x78>
    4b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    4b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    4b60:	83 30       	cpi	r24, 0x03	; 3
    4b62:	91 05       	cpc	r25, r1
    4b64:	34 f4       	brge	.+12     	; 0x4b72 <DIO_voidPullUpState+0x3e>
    4b66:	2d 81       	ldd	r18, Y+5	; 0x05
    4b68:	3e 81       	ldd	r19, Y+6	; 0x06
    4b6a:	21 30       	cpi	r18, 0x01	; 1
    4b6c:	31 05       	cpc	r19, r1
    4b6e:	61 f0       	breq	.+24     	; 0x4b88 <DIO_voidPullUpState+0x54>
    4b70:	52 c0       	rjmp	.+164    	; 0x4c16 <DIO_voidPullUpState+0xe2>
    4b72:	4d 81       	ldd	r20, Y+5	; 0x05
    4b74:	5e 81       	ldd	r21, Y+6	; 0x06
    4b76:	43 30       	cpi	r20, 0x03	; 3
    4b78:	51 05       	cpc	r21, r1
    4b7a:	51 f1       	breq	.+84     	; 0x4bd0 <DIO_voidPullUpState+0x9c>
    4b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    4b7e:	9e 81       	ldd	r25, Y+6	; 0x06
    4b80:	84 30       	cpi	r24, 0x04	; 4
    4b82:	91 05       	cpc	r25, r1
    4b84:	b9 f1       	breq	.+110    	; 0x4bf4 <DIO_voidPullUpState+0xc0>
    4b86:	47 c0       	rjmp	.+142    	; 0x4c16 <DIO_voidPullUpState+0xe2>
	{
	case PORT_A :
		u8Direction=GET_BIT(DDRA,u8PinCpy);
    4b88:	ea e3       	ldi	r30, 0x3A	; 58
    4b8a:	f0 e0       	ldi	r31, 0x00	; 0
    4b8c:	80 81       	ld	r24, Z
    4b8e:	28 2f       	mov	r18, r24
    4b90:	30 e0       	ldi	r19, 0x00	; 0
    4b92:	8b 81       	ldd	r24, Y+3	; 0x03
    4b94:	88 2f       	mov	r24, r24
    4b96:	90 e0       	ldi	r25, 0x00	; 0
    4b98:	a9 01       	movw	r20, r18
    4b9a:	02 c0       	rjmp	.+4      	; 0x4ba0 <DIO_voidPullUpState+0x6c>
    4b9c:	55 95       	asr	r21
    4b9e:	47 95       	ror	r20
    4ba0:	8a 95       	dec	r24
    4ba2:	e2 f7       	brpl	.-8      	; 0x4b9c <DIO_voidPullUpState+0x68>
    4ba4:	ca 01       	movw	r24, r20
    4ba6:	81 70       	andi	r24, 0x01	; 1
    4ba8:	89 83       	std	Y+1, r24	; 0x01
    4baa:	35 c0       	rjmp	.+106    	; 0x4c16 <DIO_voidPullUpState+0xe2>
		break;
	case PORT_B :
		u8Direction=GET_BIT(DDRB,u8PinCpy);
    4bac:	e7 e3       	ldi	r30, 0x37	; 55
    4bae:	f0 e0       	ldi	r31, 0x00	; 0
    4bb0:	80 81       	ld	r24, Z
    4bb2:	28 2f       	mov	r18, r24
    4bb4:	30 e0       	ldi	r19, 0x00	; 0
    4bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    4bb8:	88 2f       	mov	r24, r24
    4bba:	90 e0       	ldi	r25, 0x00	; 0
    4bbc:	a9 01       	movw	r20, r18
    4bbe:	02 c0       	rjmp	.+4      	; 0x4bc4 <DIO_voidPullUpState+0x90>
    4bc0:	55 95       	asr	r21
    4bc2:	47 95       	ror	r20
    4bc4:	8a 95       	dec	r24
    4bc6:	e2 f7       	brpl	.-8      	; 0x4bc0 <DIO_voidPullUpState+0x8c>
    4bc8:	ca 01       	movw	r24, r20
    4bca:	81 70       	andi	r24, 0x01	; 1
    4bcc:	89 83       	std	Y+1, r24	; 0x01
    4bce:	23 c0       	rjmp	.+70     	; 0x4c16 <DIO_voidPullUpState+0xe2>
		break;

	case PORT_C :
		u8Direction=GET_BIT(DDRC,u8PinCpy);
    4bd0:	e4 e3       	ldi	r30, 0x34	; 52
    4bd2:	f0 e0       	ldi	r31, 0x00	; 0
    4bd4:	80 81       	ld	r24, Z
    4bd6:	28 2f       	mov	r18, r24
    4bd8:	30 e0       	ldi	r19, 0x00	; 0
    4bda:	8b 81       	ldd	r24, Y+3	; 0x03
    4bdc:	88 2f       	mov	r24, r24
    4bde:	90 e0       	ldi	r25, 0x00	; 0
    4be0:	a9 01       	movw	r20, r18
    4be2:	02 c0       	rjmp	.+4      	; 0x4be8 <DIO_voidPullUpState+0xb4>
    4be4:	55 95       	asr	r21
    4be6:	47 95       	ror	r20
    4be8:	8a 95       	dec	r24
    4bea:	e2 f7       	brpl	.-8      	; 0x4be4 <DIO_voidPullUpState+0xb0>
    4bec:	ca 01       	movw	r24, r20
    4bee:	81 70       	andi	r24, 0x01	; 1
    4bf0:	89 83       	std	Y+1, r24	; 0x01
    4bf2:	11 c0       	rjmp	.+34     	; 0x4c16 <DIO_voidPullUpState+0xe2>
		break;

	case PORT_D :
		u8Direction=GET_BIT(DDRD,u8PinCpy);
    4bf4:	e1 e3       	ldi	r30, 0x31	; 49
    4bf6:	f0 e0       	ldi	r31, 0x00	; 0
    4bf8:	80 81       	ld	r24, Z
    4bfa:	28 2f       	mov	r18, r24
    4bfc:	30 e0       	ldi	r19, 0x00	; 0
    4bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    4c00:	88 2f       	mov	r24, r24
    4c02:	90 e0       	ldi	r25, 0x00	; 0
    4c04:	a9 01       	movw	r20, r18
    4c06:	02 c0       	rjmp	.+4      	; 0x4c0c <DIO_voidPullUpState+0xd8>
    4c08:	55 95       	asr	r21
    4c0a:	47 95       	ror	r20
    4c0c:	8a 95       	dec	r24
    4c0e:	e2 f7       	brpl	.-8      	; 0x4c08 <DIO_voidPullUpState+0xd4>
    4c10:	ca 01       	movw	r24, r20
    4c12:	81 70       	andi	r24, 0x01	; 1
    4c14:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	if (u8Direction==DIO_INPUT)			//if zero, write zero in pin
    4c16:	89 81       	ldd	r24, Y+1	; 0x01
    4c18:	88 23       	and	r24, r24
    4c1a:	29 f4       	brne	.+10     	; 0x4c26 <DIO_voidPullUpState+0xf2>
	{
		DIO_voidWritePin(u8PortCpy,u8PinCpy,u8State);
    4c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    4c1e:	6b 81       	ldd	r22, Y+3	; 0x03
    4c20:	4c 81       	ldd	r20, Y+4	; 0x04
    4c22:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
	}
	else
	{
		//do nothing
	}
}
    4c26:	26 96       	adiw	r28, 0x06	; 6
    4c28:	0f b6       	in	r0, 0x3f	; 63
    4c2a:	f8 94       	cli
    4c2c:	de bf       	out	0x3e, r29	; 62
    4c2e:	0f be       	out	0x3f, r0	; 63
    4c30:	cd bf       	out	0x3d, r28	; 61
    4c32:	cf 91       	pop	r28
    4c34:	df 91       	pop	r29
    4c36:	08 95       	ret

00004c38 <DCM_voidRotateCW>:
#include "DC_Motor_config.h"
#include "DC_Motor_interface.h"
#include "../DIO/DIO_interface.h"


void DCM_voidRotateCW(void){
    4c38:	df 93       	push	r29
    4c3a:	cf 93       	push	r28
    4c3c:	cd b7       	in	r28, 0x3d	; 61
    4c3e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidWritePin(DCM_PORT, DCM_PIN0, DIO_LOW);
    4c40:	81 e0       	ldi	r24, 0x01	; 1
    4c42:	62 e0       	ldi	r22, 0x02	; 2
    4c44:	40 e0       	ldi	r20, 0x00	; 0
    4c46:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
	DIO_voidWritePin(DCM_PORT, DCM_PIN1, DIO_HIGH);
    4c4a:	81 e0       	ldi	r24, 0x01	; 1
    4c4c:	63 e0       	ldi	r22, 0x03	; 3
    4c4e:	41 e0       	ldi	r20, 0x01	; 1
    4c50:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
}
    4c54:	cf 91       	pop	r28
    4c56:	df 91       	pop	r29
    4c58:	08 95       	ret

00004c5a <DCM_voidRotateCCW>:
void DCM_voidRotateCCW(void){
    4c5a:	df 93       	push	r29
    4c5c:	cf 93       	push	r28
    4c5e:	cd b7       	in	r28, 0x3d	; 61
    4c60:	de b7       	in	r29, 0x3e	; 62
	DIO_voidWritePin(DCM_PORT, DCM_PIN0, DIO_HIGH);
    4c62:	81 e0       	ldi	r24, 0x01	; 1
    4c64:	62 e0       	ldi	r22, 0x02	; 2
    4c66:	41 e0       	ldi	r20, 0x01	; 1
    4c68:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
	DIO_voidWritePin(DCM_PORT, DCM_PIN1, DIO_LOW);
    4c6c:	81 e0       	ldi	r24, 0x01	; 1
    4c6e:	63 e0       	ldi	r22, 0x03	; 3
    4c70:	40 e0       	ldi	r20, 0x00	; 0
    4c72:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
}
    4c76:	cf 91       	pop	r28
    4c78:	df 91       	pop	r29
    4c7a:	08 95       	ret

00004c7c <DCM_voidStop>:
void DCM_voidStop(void){
    4c7c:	df 93       	push	r29
    4c7e:	cf 93       	push	r28
    4c80:	cd b7       	in	r28, 0x3d	; 61
    4c82:	de b7       	in	r29, 0x3e	; 62
	DIO_voidWritePin(DCM_PORT, DCM_PIN0, DIO_LOW);
    4c84:	81 e0       	ldi	r24, 0x01	; 1
    4c86:	62 e0       	ldi	r22, 0x02	; 2
    4c88:	40 e0       	ldi	r20, 0x00	; 0
    4c8a:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
	DIO_voidWritePin(DCM_PORT, DCM_PIN1, DIO_LOW);
    4c8e:	81 e0       	ldi	r24, 0x01	; 1
    4c90:	63 e0       	ldi	r22, 0x03	; 3
    4c92:	40 e0       	ldi	r20, 0x00	; 0
    4c94:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
}
    4c98:	cf 91       	pop	r28
    4c9a:	df 91       	pop	r29
    4c9c:	08 95       	ret

00004c9e <ADC_Init>:
#include "ADC_register.h"

void (*ADC_CALLBACK_PTR)(void) = NULL;


void ADC_Init (void){
    4c9e:	df 93       	push	r29
    4ca0:	cf 93       	push	r28
    4ca2:	cd b7       	in	r28, 0x3d	; 61
    4ca4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADMUX, REFS1);
    4ca6:	a7 e2       	ldi	r26, 0x27	; 39
    4ca8:	b0 e0       	ldi	r27, 0x00	; 0
    4caa:	e7 e2       	ldi	r30, 0x27	; 39
    4cac:	f0 e0       	ldi	r31, 0x00	; 0
    4cae:	80 81       	ld	r24, Z
    4cb0:	8f 77       	andi	r24, 0x7F	; 127
    4cb2:	8c 93       	st	X, r24
	SET_BIT(ADMUX, REFS0);
    4cb4:	a7 e2       	ldi	r26, 0x27	; 39
    4cb6:	b0 e0       	ldi	r27, 0x00	; 0
    4cb8:	e7 e2       	ldi	r30, 0x27	; 39
    4cba:	f0 e0       	ldi	r31, 0x00	; 0
    4cbc:	80 81       	ld	r24, Z
    4cbe:	80 64       	ori	r24, 0x40	; 64
    4cc0:	8c 93       	st	X, r24

	CLR_BIT(ADMUX, ADLAR);
    4cc2:	a7 e2       	ldi	r26, 0x27	; 39
    4cc4:	b0 e0       	ldi	r27, 0x00	; 0
    4cc6:	e7 e2       	ldi	r30, 0x27	; 39
    4cc8:	f0 e0       	ldi	r31, 0x00	; 0
    4cca:	80 81       	ld	r24, Z
    4ccc:	8f 7d       	andi	r24, 0xDF	; 223
    4cce:	8c 93       	st	X, r24

	//clock
	SET_BIT(ADCSRA, ADPS0);
    4cd0:	a6 e2       	ldi	r26, 0x26	; 38
    4cd2:	b0 e0       	ldi	r27, 0x00	; 0
    4cd4:	e6 e2       	ldi	r30, 0x26	; 38
    4cd6:	f0 e0       	ldi	r31, 0x00	; 0
    4cd8:	80 81       	ld	r24, Z
    4cda:	81 60       	ori	r24, 0x01	; 1
    4cdc:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS1);
    4cde:	a6 e2       	ldi	r26, 0x26	; 38
    4ce0:	b0 e0       	ldi	r27, 0x00	; 0
    4ce2:	e6 e2       	ldi	r30, 0x26	; 38
    4ce4:	f0 e0       	ldi	r31, 0x00	; 0
    4ce6:	80 81       	ld	r24, Z
    4ce8:	82 60       	ori	r24, 0x02	; 2
    4cea:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS2);
    4cec:	a6 e2       	ldi	r26, 0x26	; 38
    4cee:	b0 e0       	ldi	r27, 0x00	; 0
    4cf0:	e6 e2       	ldi	r30, 0x26	; 38
    4cf2:	f0 e0       	ldi	r31, 0x00	; 0
    4cf4:	80 81       	ld	r24, Z
    4cf6:	84 60       	ori	r24, 0x04	; 4
    4cf8:	8c 93       	st	X, r24

	SET_BIT(ADCSRA, ADEN);
    4cfa:	a6 e2       	ldi	r26, 0x26	; 38
    4cfc:	b0 e0       	ldi	r27, 0x00	; 0
    4cfe:	e6 e2       	ldi	r30, 0x26	; 38
    4d00:	f0 e0       	ldi	r31, 0x00	; 0
    4d02:	80 81       	ld	r24, Z
    4d04:	80 68       	ori	r24, 0x80	; 128
    4d06:	8c 93       	st	X, r24

}
    4d08:	cf 91       	pop	r28
    4d0a:	df 91       	pop	r29
    4d0c:	08 95       	ret

00004d0e <ADC_Read_SYNCH>:


uint16 ADC_Read_SYNCH (uint8 Channel){
    4d0e:	df 93       	push	r29
    4d10:	cf 93       	push	r28
    4d12:	0f 92       	push	r0
    4d14:	cd b7       	in	r28, 0x3d	; 61
    4d16:	de b7       	in	r29, 0x3e	; 62
    4d18:	89 83       	std	Y+1, r24	; 0x01
	//bit masking   ADMUX = (111 00000 & 010 10101) | 000 01010 = 010 01010
	ADMUX=(ADMUX&0b11100000) | (Channel);
    4d1a:	a7 e2       	ldi	r26, 0x27	; 39
    4d1c:	b0 e0       	ldi	r27, 0x00	; 0
    4d1e:	e7 e2       	ldi	r30, 0x27	; 39
    4d20:	f0 e0       	ldi	r31, 0x00	; 0
    4d22:	80 81       	ld	r24, Z
    4d24:	98 2f       	mov	r25, r24
    4d26:	90 7e       	andi	r25, 0xE0	; 224
    4d28:	89 81       	ldd	r24, Y+1	; 0x01
    4d2a:	89 2b       	or	r24, r25
    4d2c:	8c 93       	st	X, r24

	SET_BIT(ADCSRA, ADSC);				//start conversion
    4d2e:	a6 e2       	ldi	r26, 0x26	; 38
    4d30:	b0 e0       	ldi	r27, 0x00	; 0
    4d32:	e6 e2       	ldi	r30, 0x26	; 38
    4d34:	f0 e0       	ldi	r31, 0x00	; 0
    4d36:	80 81       	ld	r24, Z
    4d38:	80 64       	ori	r24, 0x40	; 64
    4d3a:	8c 93       	st	X, r24

	while(GET_BIT(ADCSRA, ADIF) == 0);
    4d3c:	e6 e2       	ldi	r30, 0x26	; 38
    4d3e:	f0 e0       	ldi	r31, 0x00	; 0
    4d40:	80 81       	ld	r24, Z
    4d42:	82 95       	swap	r24
    4d44:	8f 70       	andi	r24, 0x0F	; 15
    4d46:	88 2f       	mov	r24, r24
    4d48:	90 e0       	ldi	r25, 0x00	; 0
    4d4a:	81 70       	andi	r24, 0x01	; 1
    4d4c:	90 70       	andi	r25, 0x00	; 0
    4d4e:	00 97       	sbiw	r24, 0x00	; 0
    4d50:	a9 f3       	breq	.-22     	; 0x4d3c <ADC_Read_SYNCH+0x2e>

	SET_BIT(ADCSRA, ADIF); 				//set flag
    4d52:	a6 e2       	ldi	r26, 0x26	; 38
    4d54:	b0 e0       	ldi	r27, 0x00	; 0
    4d56:	e6 e2       	ldi	r30, 0x26	; 38
    4d58:	f0 e0       	ldi	r31, 0x00	; 0
    4d5a:	80 81       	ld	r24, Z
    4d5c:	80 61       	ori	r24, 0x10	; 16
    4d5e:	8c 93       	st	X, r24
	return ADC_Reg;
    4d60:	e4 e2       	ldi	r30, 0x24	; 36
    4d62:	f0 e0       	ldi	r31, 0x00	; 0
    4d64:	80 81       	ld	r24, Z
    4d66:	91 81       	ldd	r25, Z+1	; 0x01
}
    4d68:	0f 90       	pop	r0
    4d6a:	cf 91       	pop	r28
    4d6c:	df 91       	pop	r29
    4d6e:	08 95       	ret

00004d70 <ADC_Start_ASYNC>:
//-------------------------------------------------------------------------------
void ADC_Start_ASYNC (uint8 Channel)
{
    4d70:	df 93       	push	r29
    4d72:	cf 93       	push	r28
    4d74:	0f 92       	push	r0
    4d76:	cd b7       	in	r28, 0x3d	; 61
    4d78:	de b7       	in	r29, 0x3e	; 62
    4d7a:	89 83       	std	Y+1, r24	; 0x01
	if (GET_BIT(ADCSRA, ADSC) == 0)
    4d7c:	e6 e2       	ldi	r30, 0x26	; 38
    4d7e:	f0 e0       	ldi	r31, 0x00	; 0
    4d80:	80 81       	ld	r24, Z
    4d82:	82 95       	swap	r24
    4d84:	86 95       	lsr	r24
    4d86:	86 95       	lsr	r24
    4d88:	83 70       	andi	r24, 0x03	; 3
    4d8a:	88 2f       	mov	r24, r24
    4d8c:	90 e0       	ldi	r25, 0x00	; 0
    4d8e:	81 70       	andi	r24, 0x01	; 1
    4d90:	90 70       	andi	r25, 0x00	; 0
    4d92:	00 97       	sbiw	r24, 0x00	; 0
    4d94:	89 f4       	brne	.+34     	; 0x4db8 <ADC_Start_ASYNC+0x48>
	{
		ADMUX = ((ADMUX & 0b11100000)|(Channel));
    4d96:	a7 e2       	ldi	r26, 0x27	; 39
    4d98:	b0 e0       	ldi	r27, 0x00	; 0
    4d9a:	e7 e2       	ldi	r30, 0x27	; 39
    4d9c:	f0 e0       	ldi	r31, 0x00	; 0
    4d9e:	80 81       	ld	r24, Z
    4da0:	98 2f       	mov	r25, r24
    4da2:	90 7e       	andi	r25, 0xE0	; 224
    4da4:	89 81       	ldd	r24, Y+1	; 0x01
    4da6:	89 2b       	or	r24, r25
    4da8:	8c 93       	st	X, r24
		SET_BIT(ADCSRA, ADSC);
    4daa:	a6 e2       	ldi	r26, 0x26	; 38
    4dac:	b0 e0       	ldi	r27, 0x00	; 0
    4dae:	e6 e2       	ldi	r30, 0x26	; 38
    4db0:	f0 e0       	ldi	r31, 0x00	; 0
    4db2:	80 81       	ld	r24, Z
    4db4:	80 64       	ori	r24, 0x40	; 64
    4db6:	8c 93       	st	X, r24
	}
}
    4db8:	0f 90       	pop	r0
    4dba:	cf 91       	pop	r28
    4dbc:	df 91       	pop	r29
    4dbe:	08 95       	ret

00004dc0 <ADC_Read_ASYNC>:
uint16 ADC_Read_ASYNC(void)
{
    4dc0:	df 93       	push	r29
    4dc2:	cf 93       	push	r28
    4dc4:	cd b7       	in	r28, 0x3d	; 61
    4dc6:	de b7       	in	r29, 0x3e	; 62
	return ADC_Reg;
    4dc8:	e4 e2       	ldi	r30, 0x24	; 36
    4dca:	f0 e0       	ldi	r31, 0x00	; 0
    4dcc:	80 81       	ld	r24, Z
    4dce:	91 81       	ldd	r25, Z+1	; 0x01
}
    4dd0:	cf 91       	pop	r28
    4dd2:	df 91       	pop	r29
    4dd4:	08 95       	ret

00004dd6 <ADC_void_SET_CALL_BACK>:
void ADC_void_SET_CALL_BACK(void (*ptr)(void))
{
    4dd6:	df 93       	push	r29
    4dd8:	cf 93       	push	r28
    4dda:	00 d0       	rcall	.+0      	; 0x4ddc <ADC_void_SET_CALL_BACK+0x6>
    4ddc:	cd b7       	in	r28, 0x3d	; 61
    4dde:	de b7       	in	r29, 0x3e	; 62
    4de0:	9a 83       	std	Y+2, r25	; 0x02
    4de2:	89 83       	std	Y+1, r24	; 0x01
	ADC_CALLBACK_PTR = ptr;
    4de4:	89 81       	ldd	r24, Y+1	; 0x01
    4de6:	9a 81       	ldd	r25, Y+2	; 0x02
    4de8:	90 93 eb 00 	sts	0x00EB, r25
    4dec:	80 93 ea 00 	sts	0x00EA, r24
}
    4df0:	0f 90       	pop	r0
    4df2:	0f 90       	pop	r0
    4df4:	cf 91       	pop	r28
    4df6:	df 91       	pop	r29
    4df8:	08 95       	ret

00004dfa <__vector_16>:

void __vector_16 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_16 (void){
    4dfa:	1f 92       	push	r1
    4dfc:	0f 92       	push	r0
    4dfe:	0f b6       	in	r0, 0x3f	; 63
    4e00:	0f 92       	push	r0
    4e02:	11 24       	eor	r1, r1
    4e04:	2f 93       	push	r18
    4e06:	3f 93       	push	r19
    4e08:	4f 93       	push	r20
    4e0a:	5f 93       	push	r21
    4e0c:	6f 93       	push	r22
    4e0e:	7f 93       	push	r23
    4e10:	8f 93       	push	r24
    4e12:	9f 93       	push	r25
    4e14:	af 93       	push	r26
    4e16:	bf 93       	push	r27
    4e18:	ef 93       	push	r30
    4e1a:	ff 93       	push	r31
    4e1c:	df 93       	push	r29
    4e1e:	cf 93       	push	r28
    4e20:	cd b7       	in	r28, 0x3d	; 61
    4e22:	de b7       	in	r29, 0x3e	; 62
	ADC_CALLBACK_PTR();
    4e24:	e0 91 ea 00 	lds	r30, 0x00EA
    4e28:	f0 91 eb 00 	lds	r31, 0x00EB
    4e2c:	09 95       	icall
}
    4e2e:	cf 91       	pop	r28
    4e30:	df 91       	pop	r29
    4e32:	ff 91       	pop	r31
    4e34:	ef 91       	pop	r30
    4e36:	bf 91       	pop	r27
    4e38:	af 91       	pop	r26
    4e3a:	9f 91       	pop	r25
    4e3c:	8f 91       	pop	r24
    4e3e:	7f 91       	pop	r23
    4e40:	6f 91       	pop	r22
    4e42:	5f 91       	pop	r21
    4e44:	4f 91       	pop	r20
    4e46:	3f 91       	pop	r19
    4e48:	2f 91       	pop	r18
    4e4a:	0f 90       	pop	r0
    4e4c:	0f be       	out	0x3f, r0	; 63
    4e4e:	0f 90       	pop	r0
    4e50:	1f 90       	pop	r1
    4e52:	18 95       	reti

00004e54 <main>:

void ArrivalButton(void);
void EntranceButton(void);
void voidReadSensor(void);

int main(void){
    4e54:	0f 93       	push	r16
    4e56:	1f 93       	push	r17
    4e58:	df 93       	push	r29
    4e5a:	cf 93       	push	r28
    4e5c:	cd b7       	in	r28, 0x3d	; 61
    4e5e:	de b7       	in	r29, 0x3e	; 62
    4e60:	67 97       	sbiw	r28, 0x17	; 23
    4e62:	0f b6       	in	r0, 0x3f	; 63
    4e64:	f8 94       	cli
    4e66:	de bf       	out	0x3e, r29	; 62
    4e68:	0f be       	out	0x3f, r0	; 63
    4e6a:	cd bf       	out	0x3d, r28	; 61
	uint16 u16Temperature   = 0;
    4e6c:	1e 8a       	std	Y+22, r1	; 0x16
    4e6e:	1d 8a       	std	Y+21, r1	; 0x15
	uint16 u16TempAnalogSignal=0;
    4e70:	1c 8a       	std	Y+20, r1	; 0x14
    4e72:	1b 8a       	std	Y+19, r1	; 0x13
	uint16 u16LightAnalogSignal=0;
    4e74:	1a 8a       	std	Y+18, r1	; 0x12
    4e76:	19 8a       	std	Y+17, r1	; 0x11

	DIO_voidInit();
    4e78:	0e 94 57 23 	call	0x46ae	; 0x46ae <DIO_voidInit>
	ADC_Init();
    4e7c:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <ADC_Init>
//	KPD_voidInit();
	UART_voidInit();
    4e80:	0e 94 4f 06 	call	0xc9e	; 0xc9e <UART_voidInit>
	LCD_voidInit_4bitMode();
    4e84:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_voidInit_4bitMode>
	TWI_voidMasterInit();
    4e88:	0e 94 b3 21 	call	0x4366	; 0x4366 <TWI_voidMasterInit>
	SPI_voidMasterInit();
    4e8c:	0e 94 ba 0b 	call	0x1774	; 0x1774 <SPI_voidMasterInit>
	EXT_INTERRUPT_VID_INIT();
    4e90:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <EXT_INTERRUPT_VID_INIT>



	DIO_voidWritePin(PORT_D, DIO_PIN_NUM_D7, DIO_LOW);
    4e94:	84 e0       	ldi	r24, 0x04	; 4
    4e96:	67 e0       	ldi	r22, 0x07	; 7
    4e98:	40 e0       	ldi	r20, 0x00	; 0
    4e9a:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
	DIO_voidWritePin(PORT_B, DIO_PIN_NUM_B3, DIO_LOW);
    4e9e:	82 e0       	ldi	r24, 0x02	; 2
    4ea0:	63 e0       	ldi	r22, 0x03	; 3
    4ea2:	40 e0       	ldi	r20, 0x00	; 0
    4ea4:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
	DIO_voidWritePin(PORT_B, DIO_PIN_NUM_B2, ENABLE_PULLUP);
    4ea8:	82 e0       	ldi	r24, 0x02	; 2
    4eaa:	62 e0       	ldi	r22, 0x02	; 2
    4eac:	41 e0       	ldi	r20, 0x01	; 1
    4eae:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
	//	DIO_voidWritePin(PORT_D, DIO_PIN_NUM_D3, ENABLE_PULLUP);


	// Ask owner to set password
	LCD_voidWriteString_4bitMode("Set Password:", 13);
    4eb2:	80 e6       	ldi	r24, 0x60	; 96
    4eb4:	90 e0       	ldi	r25, 0x00	; 0
    4eb6:	6d e0       	ldi	r22, 0x0D	; 13
    4eb8:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <LCD_voidWriteString_4bitMode>

	// Set password on keypad
	uint8 u8PasswordSize = sizeof(u8key)/sizeof(u8key[0]);
    4ebc:	85 e0       	ldi	r24, 0x05	; 5
    4ebe:	88 8b       	std	Y+16, r24	; 0x10
//		LCD_voidDisplayKeys(u8key, &i);							//print password on LCD
//		_delay_ms(200);
//	}

	// Set password using TTL_UART
	for(uint8 i=0;i<u8PasswordSize; ){
    4ec0:	1f 8a       	std	Y+23, r1	; 0x17
    4ec2:	83 c0       	rjmp	.+262    	; 0x4fca <main+0x176>
		u8key[i] = UART_u8ReceiveData();						//get password from user
    4ec4:	8f 89       	ldd	r24, Y+23	; 0x17
    4ec6:	08 2f       	mov	r16, r24
    4ec8:	10 e0       	ldi	r17, 0x00	; 0
    4eca:	0e 94 bd 06 	call	0xd7a	; 0xd7a <UART_u8ReceiveData>
    4ece:	f8 01       	movw	r30, r16
    4ed0:	e8 50       	subi	r30, 0x08	; 8
    4ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ed4:	80 83       	st	Z, r24
		LCD_voidDisplayKeys(u8key, &i);							//print password on LCD
    4ed6:	88 ef       	ldi	r24, 0xF8	; 248
    4ed8:	90 e0       	ldi	r25, 0x00	; 0
    4eda:	9e 01       	movw	r18, r28
    4edc:	29 5e       	subi	r18, 0xE9	; 233
    4ede:	3f 4f       	sbci	r19, 0xFF	; 255
    4ee0:	b9 01       	movw	r22, r18
    4ee2:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <LCD_voidDisplayKeys>
    4ee6:	80 e0       	ldi	r24, 0x00	; 0
    4ee8:	90 e0       	ldi	r25, 0x00	; 0
    4eea:	a8 e4       	ldi	r26, 0x48	; 72
    4eec:	b3 e4       	ldi	r27, 0x43	; 67
    4eee:	8b 87       	std	Y+11, r24	; 0x0b
    4ef0:	9c 87       	std	Y+12, r25	; 0x0c
    4ef2:	ad 87       	std	Y+13, r26	; 0x0d
    4ef4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ef6:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ef8:	7c 85       	ldd	r23, Y+12	; 0x0c
    4efa:	8d 85       	ldd	r24, Y+13	; 0x0d
    4efc:	9e 85       	ldd	r25, Y+14	; 0x0e
    4efe:	20 e0       	ldi	r18, 0x00	; 0
    4f00:	30 e0       	ldi	r19, 0x00	; 0
    4f02:	4a ef       	ldi	r20, 0xFA	; 250
    4f04:	54 e4       	ldi	r21, 0x44	; 68
    4f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f0a:	dc 01       	movw	r26, r24
    4f0c:	cb 01       	movw	r24, r22
    4f0e:	8f 83       	std	Y+7, r24	; 0x07
    4f10:	98 87       	std	Y+8, r25	; 0x08
    4f12:	a9 87       	std	Y+9, r26	; 0x09
    4f14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f16:	6f 81       	ldd	r22, Y+7	; 0x07
    4f18:	78 85       	ldd	r23, Y+8	; 0x08
    4f1a:	89 85       	ldd	r24, Y+9	; 0x09
    4f1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f1e:	20 e0       	ldi	r18, 0x00	; 0
    4f20:	30 e0       	ldi	r19, 0x00	; 0
    4f22:	40 e8       	ldi	r20, 0x80	; 128
    4f24:	5f e3       	ldi	r21, 0x3F	; 63
    4f26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f2a:	88 23       	and	r24, r24
    4f2c:	2c f4       	brge	.+10     	; 0x4f38 <main+0xe4>
		__ticks = 1;
    4f2e:	81 e0       	ldi	r24, 0x01	; 1
    4f30:	90 e0       	ldi	r25, 0x00	; 0
    4f32:	9e 83       	std	Y+6, r25	; 0x06
    4f34:	8d 83       	std	Y+5, r24	; 0x05
    4f36:	3f c0       	rjmp	.+126    	; 0x4fb6 <main+0x162>
	else if (__tmp > 65535)
    4f38:	6f 81       	ldd	r22, Y+7	; 0x07
    4f3a:	78 85       	ldd	r23, Y+8	; 0x08
    4f3c:	89 85       	ldd	r24, Y+9	; 0x09
    4f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f40:	20 e0       	ldi	r18, 0x00	; 0
    4f42:	3f ef       	ldi	r19, 0xFF	; 255
    4f44:	4f e7       	ldi	r20, 0x7F	; 127
    4f46:	57 e4       	ldi	r21, 0x47	; 71
    4f48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f4c:	18 16       	cp	r1, r24
    4f4e:	4c f5       	brge	.+82     	; 0x4fa2 <main+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f50:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f52:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f54:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f56:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f58:	20 e0       	ldi	r18, 0x00	; 0
    4f5a:	30 e0       	ldi	r19, 0x00	; 0
    4f5c:	40 e2       	ldi	r20, 0x20	; 32
    4f5e:	51 e4       	ldi	r21, 0x41	; 65
    4f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f64:	dc 01       	movw	r26, r24
    4f66:	cb 01       	movw	r24, r22
    4f68:	bc 01       	movw	r22, r24
    4f6a:	cd 01       	movw	r24, r26
    4f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f70:	dc 01       	movw	r26, r24
    4f72:	cb 01       	movw	r24, r22
    4f74:	9e 83       	std	Y+6, r25	; 0x06
    4f76:	8d 83       	std	Y+5, r24	; 0x05
    4f78:	0f c0       	rjmp	.+30     	; 0x4f98 <main+0x144>
    4f7a:	88 ec       	ldi	r24, 0xC8	; 200
    4f7c:	90 e0       	ldi	r25, 0x00	; 0
    4f7e:	9c 83       	std	Y+4, r25	; 0x04
    4f80:	8b 83       	std	Y+3, r24	; 0x03
    4f82:	8b 81       	ldd	r24, Y+3	; 0x03
    4f84:	9c 81       	ldd	r25, Y+4	; 0x04
    4f86:	01 97       	sbiw	r24, 0x01	; 1
    4f88:	f1 f7       	brne	.-4      	; 0x4f86 <main+0x132>
    4f8a:	9c 83       	std	Y+4, r25	; 0x04
    4f8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    4f90:	9e 81       	ldd	r25, Y+6	; 0x06
    4f92:	01 97       	sbiw	r24, 0x01	; 1
    4f94:	9e 83       	std	Y+6, r25	; 0x06
    4f96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f98:	8d 81       	ldd	r24, Y+5	; 0x05
    4f9a:	9e 81       	ldd	r25, Y+6	; 0x06
    4f9c:	00 97       	sbiw	r24, 0x00	; 0
    4f9e:	69 f7       	brne	.-38     	; 0x4f7a <main+0x126>
    4fa0:	14 c0       	rjmp	.+40     	; 0x4fca <main+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fa2:	6f 81       	ldd	r22, Y+7	; 0x07
    4fa4:	78 85       	ldd	r23, Y+8	; 0x08
    4fa6:	89 85       	ldd	r24, Y+9	; 0x09
    4fa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fae:	dc 01       	movw	r26, r24
    4fb0:	cb 01       	movw	r24, r22
    4fb2:	9e 83       	std	Y+6, r25	; 0x06
    4fb4:	8d 83       	std	Y+5, r24	; 0x05
    4fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    4fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    4fba:	9a 83       	std	Y+2, r25	; 0x02
    4fbc:	89 83       	std	Y+1, r24	; 0x01
    4fbe:	89 81       	ldd	r24, Y+1	; 0x01
    4fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    4fc2:	01 97       	sbiw	r24, 0x01	; 1
    4fc4:	f1 f7       	brne	.-4      	; 0x4fc2 <main+0x16e>
    4fc6:	9a 83       	std	Y+2, r25	; 0x02
    4fc8:	89 83       	std	Y+1, r24	; 0x01
//		LCD_voidDisplayKeys(u8key, &i);							//print password on LCD
//		_delay_ms(200);
//	}

	// Set password using TTL_UART
	for(uint8 i=0;i<u8PasswordSize; ){
    4fca:	9f 89       	ldd	r25, Y+23	; 0x17
    4fcc:	88 89       	ldd	r24, Y+16	; 0x10
    4fce:	98 17       	cp	r25, r24
    4fd0:	08 f4       	brcc	.+2      	; 0x4fd4 <main+0x180>
    4fd2:	78 cf       	rjmp	.-272    	; 0x4ec4 <main+0x70>
		_delay_ms(200);
	}


	//save the password in EEPROM
	for(uint8 i=0;i<u8PasswordSize;i++){
    4fd4:	1f 86       	std	Y+15, r1	; 0x0f
    4fd6:	0e c0       	rjmp	.+28     	; 0x4ff4 <main+0x1a0>
		EEPROM_voidWrite(EEPROM_START_ADDRESS+i,u8key[i]);
    4fd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    4fda:	88 2f       	mov	r24, r24
    4fdc:	90 e0       	ldi	r25, 0x00	; 0
    4fde:	fc 01       	movw	r30, r24
    4fe0:	e8 50       	subi	r30, 0x08	; 8
    4fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    4fe4:	90 81       	ld	r25, Z
    4fe6:	8f 85       	ldd	r24, Y+15	; 0x0f
    4fe8:	69 2f       	mov	r22, r25
    4fea:	0e 94 77 20 	call	0x40ee	; 0x40ee <EEPROM_voidWrite>
		_delay_ms(200);
	}


	//save the password in EEPROM
	for(uint8 i=0;i<u8PasswordSize;i++){
    4fee:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ff0:	8f 5f       	subi	r24, 0xFF	; 255
    4ff2:	8f 87       	std	Y+15, r24	; 0x0f
    4ff4:	9f 85       	ldd	r25, Y+15	; 0x0f
    4ff6:	88 89       	ldd	r24, Y+16	; 0x10
    4ff8:	98 17       	cp	r25, r24
    4ffa:	70 f3       	brcs	.-36     	; 0x4fd8 <main+0x184>
		EEPROM_voidWrite(EEPROM_START_ADDRESS+i,u8key[i]);
	}

	// Print House Number
	LCD_voidSendCommand_4bitMode(lcd_Clear);
    4ffc:	81 e0       	ldi	r24, 0x01	; 1
    4ffe:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_voidSendCommand_4bitMode>
	LCD_voidGotoxy_4bitMode(6,LineOne);
    5002:	86 e0       	ldi	r24, 0x06	; 6
    5004:	61 e0       	ldi	r22, 0x01	; 1
    5006:	0e 94 46 1c 	call	0x388c	; 0x388c <LCD_voidGotoxy_4bitMode>
	LCD_voidWriteString_4bitMode("22B1", 4);
    500a:	8e e6       	ldi	r24, 0x6E	; 110
    500c:	90 e0       	ldi	r25, 0x00	; 0
    500e:	64 e0       	ldi	r22, 0x04	; 4
    5010:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <LCD_voidWriteString_4bitMode>
	LCD_voidGotoxy_4bitMode(5,LineTwo);
    5014:	85 e0       	ldi	r24, 0x05	; 5
    5016:	62 e0       	ldi	r22, 0x02	; 2
    5018:	0e 94 46 1c 	call	0x388c	; 0x388c <LCD_voidGotoxy_4bitMode>
	LCD_voidWriteString_4bitMode("------", 6);
    501c:	83 e7       	ldi	r24, 0x73	; 115
    501e:	90 e0       	ldi	r25, 0x00	; 0
    5020:	66 e0       	ldi	r22, 0x06	; 6
    5022:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <LCD_voidWriteString_4bitMode>

	//Temperature callback
	//	ADC_void_SET_CALL_BACK(voidReadSensor);

	//Fire an interrupt if the renter pressed the arrival button
	EXT_INTERRUPT_VID_ENABLE(EXT2);
    5026:	82 e0       	ldi	r24, 0x02	; 2
    5028:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <EXT_INTERRUPT_VID_ENABLE>
	EXT2_VID_SET_CALL_BACK(ArrivalButton);
    502c:	89 e8       	ldi	r24, 0x89	; 137
    502e:	98 e2       	ldi	r25, 0x28	; 40
    5030:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <EXT2_VID_SET_CALL_BACK>
	//fire an interrupt if the renter pressed the entrance button
	//	EXT_INTERRUPT_VID_ENABLE(EXT1);
	//	EXT2_VID_SET_CALL_BACK(EntranceButton);

	Global_Interrupt_Enable();
    5034:	0e 94 39 20 	call	0x4072	; 0x4072 <Global_Interrupt_Enable>

	while(1){
		if(u8WelcomeInFlag){
    5038:	80 91 0c 01 	lds	r24, 0x010C
    503c:	88 23       	and	r24, r24
    503e:	e1 f3       	breq	.-8      	; 0x5038 <main+0x1e4>
			//VENTILATION SYSTEM
			//--------------------
			//	ADC_Start_ASYNC(Channel_A1);
			u16TempAnalogSignal = ((uint32)(ADC_Read_SYNCH(Channel_A1))*(REFERNCE_VOLTAGE))/(ADC_RESOLUTION);
    5040:	81 e0       	ldi	r24, 0x01	; 1
    5042:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <ADC_Read_SYNCH>
    5046:	cc 01       	movw	r24, r24
    5048:	a0 e0       	ldi	r26, 0x00	; 0
    504a:	b0 e0       	ldi	r27, 0x00	; 0
    504c:	28 e8       	ldi	r18, 0x88	; 136
    504e:	33 e1       	ldi	r19, 0x13	; 19
    5050:	40 e0       	ldi	r20, 0x00	; 0
    5052:	50 e0       	ldi	r21, 0x00	; 0
    5054:	bc 01       	movw	r22, r24
    5056:	cd 01       	movw	r24, r26
    5058:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <__mulsi3>
    505c:	dc 01       	movw	r26, r24
    505e:	cb 01       	movw	r24, r22
    5060:	07 2e       	mov	r0, r23
    5062:	7a e0       	ldi	r23, 0x0A	; 10
    5064:	b6 95       	lsr	r27
    5066:	a7 95       	ror	r26
    5068:	97 95       	ror	r25
    506a:	87 95       	ror	r24
    506c:	7a 95       	dec	r23
    506e:	d1 f7       	brne	.-12     	; 0x5064 <main+0x210>
    5070:	70 2d       	mov	r23, r0
    5072:	9c 8b       	std	Y+20, r25	; 0x14
    5074:	8b 8b       	std	Y+19, r24	; 0x13
			u16Temperature = u16TempAnalogSignal / LM1300_CONVERSION;
    5076:	8b 89       	ldd	r24, Y+19	; 0x13
    5078:	9c 89       	ldd	r25, Y+20	; 0x14
    507a:	2a e0       	ldi	r18, 0x0A	; 10
    507c:	30 e0       	ldi	r19, 0x00	; 0
    507e:	b9 01       	movw	r22, r18
    5080:	0e 94 42 2f 	call	0x5e84	; 0x5e84 <__udivmodhi4>
    5084:	cb 01       	movw	r24, r22
    5086:	9e 8b       	std	Y+22, r25	; 0x16
    5088:	8d 8b       	std	Y+21, r24	; 0x15

			// Turn On the Fan in case the potentiometer (Temperature) > 25c
			if(u16Temperature>= 250){
    508a:	8d 89       	ldd	r24, Y+21	; 0x15
    508c:	9e 89       	ldd	r25, Y+22	; 0x16
    508e:	8a 3f       	cpi	r24, 0xFA	; 250
    5090:	91 05       	cpc	r25, r1
    5092:	18 f0       	brcs	.+6      	; 0x509a <main+0x246>
				DCM_voidRotateCCW();		//DC motor using PWM ON (fan)
    5094:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <DCM_voidRotateCCW>
    5098:	02 c0       	rjmp	.+4      	; 0x509e <main+0x24a>
			}
			else{
				DCM_voidStop();				//shut the fan off in case of working
    509a:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <DCM_voidStop>
			}

			//LIGHTNING SYSTEM
			//--------------------
			u16LightAnalogSignal = ((uint32)(ADC_Read_SYNCH(Channel_A0))*(REFERNCE_VOLTAGE))/(ADC_RESOLUTION);
    509e:	80 e0       	ldi	r24, 0x00	; 0
    50a0:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <ADC_Read_SYNCH>
    50a4:	cc 01       	movw	r24, r24
    50a6:	a0 e0       	ldi	r26, 0x00	; 0
    50a8:	b0 e0       	ldi	r27, 0x00	; 0
    50aa:	28 e8       	ldi	r18, 0x88	; 136
    50ac:	33 e1       	ldi	r19, 0x13	; 19
    50ae:	40 e0       	ldi	r20, 0x00	; 0
    50b0:	50 e0       	ldi	r21, 0x00	; 0
    50b2:	bc 01       	movw	r22, r24
    50b4:	cd 01       	movw	r24, r26
    50b6:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <__mulsi3>
    50ba:	dc 01       	movw	r26, r24
    50bc:	cb 01       	movw	r24, r22
    50be:	07 2e       	mov	r0, r23
    50c0:	7a e0       	ldi	r23, 0x0A	; 10
    50c2:	b6 95       	lsr	r27
    50c4:	a7 95       	ror	r26
    50c6:	97 95       	ror	r25
    50c8:	87 95       	ror	r24
    50ca:	7a 95       	dec	r23
    50cc:	d1 f7       	brne	.-12     	; 0x50c2 <main+0x26e>
    50ce:	70 2d       	mov	r23, r0
    50d0:	9a 8b       	std	Y+18, r25	; 0x12
    50d2:	89 8b       	std	Y+17, r24	; 0x11
			u16LightAnalogSignal = ((uint32)(u16LightAnalogSignal) * (255)) / (REFERNCE_VOLTAGE);
    50d4:	89 89       	ldd	r24, Y+17	; 0x11
    50d6:	9a 89       	ldd	r25, Y+18	; 0x12
    50d8:	cc 01       	movw	r24, r24
    50da:	a0 e0       	ldi	r26, 0x00	; 0
    50dc:	b0 e0       	ldi	r27, 0x00	; 0
    50de:	2f ef       	ldi	r18, 0xFF	; 255
    50e0:	30 e0       	ldi	r19, 0x00	; 0
    50e2:	40 e0       	ldi	r20, 0x00	; 0
    50e4:	50 e0       	ldi	r21, 0x00	; 0
    50e6:	bc 01       	movw	r22, r24
    50e8:	cd 01       	movw	r24, r26
    50ea:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <__mulsi3>
    50ee:	dc 01       	movw	r26, r24
    50f0:	cb 01       	movw	r24, r22
    50f2:	28 e8       	ldi	r18, 0x88	; 136
    50f4:	33 e1       	ldi	r19, 0x13	; 19
    50f6:	40 e0       	ldi	r20, 0x00	; 0
    50f8:	50 e0       	ldi	r21, 0x00	; 0
    50fa:	bc 01       	movw	r22, r24
    50fc:	cd 01       	movw	r24, r26
    50fe:	0e 94 56 2f 	call	0x5eac	; 0x5eac <__udivmodsi4>
    5102:	da 01       	movw	r26, r20
    5104:	c9 01       	movw	r24, r18
    5106:	9a 8b       	std	Y+18, r25	; 0x12
    5108:	89 8b       	std	Y+17, r24	; 0x11
			TIMER0_voidSetOCRValue(u16LightAnalogSignal);
    510a:	89 89       	ldd	r24, Y+17	; 0x11
    510c:	0e 94 18 0b 	call	0x1630	; 0x1630 <TIMER0_voidSetOCRValue>
    5110:	93 cf       	rjmp	.-218    	; 0x5038 <main+0x1e4>

00005112 <ArrivalButton>:
		else{
			//do nth
		}
	}
}
void ArrivalButton(){
    5112:	0f 93       	push	r16
    5114:	1f 93       	push	r17
    5116:	df 93       	push	r29
    5118:	cf 93       	push	r28
    511a:	cd b7       	in	r28, 0x3d	; 61
    511c:	de b7       	in	r29, 0x3e	; 62
    511e:	c5 57       	subi	r28, 0x75	; 117
    5120:	d0 40       	sbci	r29, 0x00	; 0
    5122:	0f b6       	in	r0, 0x3f	; 63
    5124:	f8 94       	cli
    5126:	de bf       	out	0x3e, r29	; 62
    5128:	0f be       	out	0x3f, r0	; 63
    512a:	cd bf       	out	0x3d, r28	; 61
	uint8 u8ErrorDetected=0;
    512c:	fe 01       	movw	r30, r28
    512e:	ec 58       	subi	r30, 0x8C	; 140
    5130:	ff 4f       	sbci	r31, 0xFF	; 255
    5132:	10 82       	st	Z, r1
	uint8 u8PasswordSize = sizeof(u8InputPassword)/sizeof(u8InputPassword[0]);
    5134:	fe 01       	movw	r30, r28
    5136:	ed 58       	subi	r30, 0x8D	; 141
    5138:	ff 4f       	sbci	r31, 0xFF	; 255
    513a:	85 e0       	ldi	r24, 0x05	; 5
    513c:	80 83       	st	Z, r24

	//Enable timer0 to save power
	TIM1_voidInit();
    513e:	0e 94 bb 07 	call	0xf76	; 0xf76 <TIM1_voidInit>
	TIM1_voidSetIcuRegValue(20000);
    5142:	80 e2       	ldi	r24, 0x20	; 32
    5144:	9e e4       	ldi	r25, 0x4E	; 78
    5146:	0e 94 77 09 	call	0x12ee	; 0x12ee <TIM1_voidSetIcuRegValue>
	TIM1_voidEnable(TIMER1_PRESCALER_8);
    514a:	82 e0       	ldi	r24, 0x02	; 2
    514c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <TIM1_voidEnable>

	//welcome message then ask renter to enter password
	LCD_voidSendCommand_4bitMode(lcd_Clear);
    5150:	81 e0       	ldi	r24, 0x01	; 1
    5152:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_voidSendCommand_4bitMode>
	LCD_voidGotoxy_4bitMode(5, LineOne);
    5156:	85 e0       	ldi	r24, 0x05	; 5
    5158:	61 e0       	ldi	r22, 0x01	; 1
    515a:	0e 94 46 1c 	call	0x388c	; 0x388c <LCD_voidGotoxy_4bitMode>
	LCD_voidWriteString_4bitMode("WELCOME", 7);
    515e:	8a e7       	ldi	r24, 0x7A	; 122
    5160:	90 e0       	ldi	r25, 0x00	; 0
    5162:	67 e0       	ldi	r22, 0x07	; 7
    5164:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <LCD_voidWriteString_4bitMode>
    5168:	fe 01       	movw	r30, r28
    516a:	e3 59       	subi	r30, 0x93	; 147
    516c:	ff 4f       	sbci	r31, 0xFF	; 255
    516e:	80 e0       	ldi	r24, 0x00	; 0
    5170:	90 e8       	ldi	r25, 0x80	; 128
    5172:	ab eb       	ldi	r26, 0xBB	; 187
    5174:	b4 e4       	ldi	r27, 0x44	; 68
    5176:	80 83       	st	Z, r24
    5178:	91 83       	std	Z+1, r25	; 0x01
    517a:	a2 83       	std	Z+2, r26	; 0x02
    517c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    517e:	8e 01       	movw	r16, r28
    5180:	07 59       	subi	r16, 0x97	; 151
    5182:	1f 4f       	sbci	r17, 0xFF	; 255
    5184:	fe 01       	movw	r30, r28
    5186:	e3 59       	subi	r30, 0x93	; 147
    5188:	ff 4f       	sbci	r31, 0xFF	; 255
    518a:	60 81       	ld	r22, Z
    518c:	71 81       	ldd	r23, Z+1	; 0x01
    518e:	82 81       	ldd	r24, Z+2	; 0x02
    5190:	93 81       	ldd	r25, Z+3	; 0x03
    5192:	20 e0       	ldi	r18, 0x00	; 0
    5194:	30 e0       	ldi	r19, 0x00	; 0
    5196:	4a ef       	ldi	r20, 0xFA	; 250
    5198:	54 e4       	ldi	r21, 0x44	; 68
    519a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    519e:	dc 01       	movw	r26, r24
    51a0:	cb 01       	movw	r24, r22
    51a2:	f8 01       	movw	r30, r16
    51a4:	80 83       	st	Z, r24
    51a6:	91 83       	std	Z+1, r25	; 0x01
    51a8:	a2 83       	std	Z+2, r26	; 0x02
    51aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    51ac:	fe 01       	movw	r30, r28
    51ae:	e7 59       	subi	r30, 0x97	; 151
    51b0:	ff 4f       	sbci	r31, 0xFF	; 255
    51b2:	60 81       	ld	r22, Z
    51b4:	71 81       	ldd	r23, Z+1	; 0x01
    51b6:	82 81       	ldd	r24, Z+2	; 0x02
    51b8:	93 81       	ldd	r25, Z+3	; 0x03
    51ba:	20 e0       	ldi	r18, 0x00	; 0
    51bc:	30 e0       	ldi	r19, 0x00	; 0
    51be:	40 e8       	ldi	r20, 0x80	; 128
    51c0:	5f e3       	ldi	r21, 0x3F	; 63
    51c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    51c6:	88 23       	and	r24, r24
    51c8:	44 f4       	brge	.+16     	; 0x51da <ArrivalButton+0xc8>
		__ticks = 1;
    51ca:	fe 01       	movw	r30, r28
    51cc:	e9 59       	subi	r30, 0x99	; 153
    51ce:	ff 4f       	sbci	r31, 0xFF	; 255
    51d0:	81 e0       	ldi	r24, 0x01	; 1
    51d2:	90 e0       	ldi	r25, 0x00	; 0
    51d4:	91 83       	std	Z+1, r25	; 0x01
    51d6:	80 83       	st	Z, r24
    51d8:	64 c0       	rjmp	.+200    	; 0x52a2 <ArrivalButton+0x190>
	else if (__tmp > 65535)
    51da:	fe 01       	movw	r30, r28
    51dc:	e7 59       	subi	r30, 0x97	; 151
    51de:	ff 4f       	sbci	r31, 0xFF	; 255
    51e0:	60 81       	ld	r22, Z
    51e2:	71 81       	ldd	r23, Z+1	; 0x01
    51e4:	82 81       	ldd	r24, Z+2	; 0x02
    51e6:	93 81       	ldd	r25, Z+3	; 0x03
    51e8:	20 e0       	ldi	r18, 0x00	; 0
    51ea:	3f ef       	ldi	r19, 0xFF	; 255
    51ec:	4f e7       	ldi	r20, 0x7F	; 127
    51ee:	57 e4       	ldi	r21, 0x47	; 71
    51f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    51f4:	18 16       	cp	r1, r24
    51f6:	0c f0       	brlt	.+2      	; 0x51fa <ArrivalButton+0xe8>
    51f8:	43 c0       	rjmp	.+134    	; 0x5280 <ArrivalButton+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51fa:	fe 01       	movw	r30, r28
    51fc:	e3 59       	subi	r30, 0x93	; 147
    51fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5200:	60 81       	ld	r22, Z
    5202:	71 81       	ldd	r23, Z+1	; 0x01
    5204:	82 81       	ldd	r24, Z+2	; 0x02
    5206:	93 81       	ldd	r25, Z+3	; 0x03
    5208:	20 e0       	ldi	r18, 0x00	; 0
    520a:	30 e0       	ldi	r19, 0x00	; 0
    520c:	40 e2       	ldi	r20, 0x20	; 32
    520e:	51 e4       	ldi	r21, 0x41	; 65
    5210:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5214:	dc 01       	movw	r26, r24
    5216:	cb 01       	movw	r24, r22
    5218:	8e 01       	movw	r16, r28
    521a:	09 59       	subi	r16, 0x99	; 153
    521c:	1f 4f       	sbci	r17, 0xFF	; 255
    521e:	bc 01       	movw	r22, r24
    5220:	cd 01       	movw	r24, r26
    5222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5226:	dc 01       	movw	r26, r24
    5228:	cb 01       	movw	r24, r22
    522a:	f8 01       	movw	r30, r16
    522c:	91 83       	std	Z+1, r25	; 0x01
    522e:	80 83       	st	Z, r24
    5230:	1f c0       	rjmp	.+62     	; 0x5270 <ArrivalButton+0x15e>
    5232:	fe 01       	movw	r30, r28
    5234:	eb 59       	subi	r30, 0x9B	; 155
    5236:	ff 4f       	sbci	r31, 0xFF	; 255
    5238:	88 ec       	ldi	r24, 0xC8	; 200
    523a:	90 e0       	ldi	r25, 0x00	; 0
    523c:	91 83       	std	Z+1, r25	; 0x01
    523e:	80 83       	st	Z, r24
    5240:	fe 01       	movw	r30, r28
    5242:	eb 59       	subi	r30, 0x9B	; 155
    5244:	ff 4f       	sbci	r31, 0xFF	; 255
    5246:	80 81       	ld	r24, Z
    5248:	91 81       	ldd	r25, Z+1	; 0x01
    524a:	01 97       	sbiw	r24, 0x01	; 1
    524c:	f1 f7       	brne	.-4      	; 0x524a <ArrivalButton+0x138>
    524e:	fe 01       	movw	r30, r28
    5250:	eb 59       	subi	r30, 0x9B	; 155
    5252:	ff 4f       	sbci	r31, 0xFF	; 255
    5254:	91 83       	std	Z+1, r25	; 0x01
    5256:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5258:	de 01       	movw	r26, r28
    525a:	a9 59       	subi	r26, 0x99	; 153
    525c:	bf 4f       	sbci	r27, 0xFF	; 255
    525e:	fe 01       	movw	r30, r28
    5260:	e9 59       	subi	r30, 0x99	; 153
    5262:	ff 4f       	sbci	r31, 0xFF	; 255
    5264:	80 81       	ld	r24, Z
    5266:	91 81       	ldd	r25, Z+1	; 0x01
    5268:	01 97       	sbiw	r24, 0x01	; 1
    526a:	11 96       	adiw	r26, 0x01	; 1
    526c:	9c 93       	st	X, r25
    526e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5270:	fe 01       	movw	r30, r28
    5272:	e9 59       	subi	r30, 0x99	; 153
    5274:	ff 4f       	sbci	r31, 0xFF	; 255
    5276:	80 81       	ld	r24, Z
    5278:	91 81       	ldd	r25, Z+1	; 0x01
    527a:	00 97       	sbiw	r24, 0x00	; 0
    527c:	d1 f6       	brne	.-76     	; 0x5232 <ArrivalButton+0x120>
    527e:	9a c4       	rjmp	.+2356   	; 0x5bb4 <ArrivalButton+0xaa2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5280:	8e 01       	movw	r16, r28
    5282:	09 59       	subi	r16, 0x99	; 153
    5284:	1f 4f       	sbci	r17, 0xFF	; 255
    5286:	fe 01       	movw	r30, r28
    5288:	e7 59       	subi	r30, 0x97	; 151
    528a:	ff 4f       	sbci	r31, 0xFF	; 255
    528c:	60 81       	ld	r22, Z
    528e:	71 81       	ldd	r23, Z+1	; 0x01
    5290:	82 81       	ldd	r24, Z+2	; 0x02
    5292:	93 81       	ldd	r25, Z+3	; 0x03
    5294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5298:	dc 01       	movw	r26, r24
    529a:	cb 01       	movw	r24, r22
    529c:	f8 01       	movw	r30, r16
    529e:	91 83       	std	Z+1, r25	; 0x01
    52a0:	80 83       	st	Z, r24
    52a2:	de 01       	movw	r26, r28
    52a4:	ad 59       	subi	r26, 0x9D	; 157
    52a6:	bf 4f       	sbci	r27, 0xFF	; 255
    52a8:	fe 01       	movw	r30, r28
    52aa:	e9 59       	subi	r30, 0x99	; 153
    52ac:	ff 4f       	sbci	r31, 0xFF	; 255
    52ae:	80 81       	ld	r24, Z
    52b0:	91 81       	ldd	r25, Z+1	; 0x01
    52b2:	11 96       	adiw	r26, 0x01	; 1
    52b4:	9c 93       	st	X, r25
    52b6:	8e 93       	st	-X, r24
    52b8:	fe 01       	movw	r30, r28
    52ba:	ed 59       	subi	r30, 0x9D	; 157
    52bc:	ff 4f       	sbci	r31, 0xFF	; 255
    52be:	80 81       	ld	r24, Z
    52c0:	91 81       	ldd	r25, Z+1	; 0x01
    52c2:	01 97       	sbiw	r24, 0x01	; 1
    52c4:	f1 f7       	brne	.-4      	; 0x52c2 <ArrivalButton+0x1b0>
    52c6:	fe 01       	movw	r30, r28
    52c8:	ed 59       	subi	r30, 0x9D	; 157
    52ca:	ff 4f       	sbci	r31, 0xFF	; 255
    52cc:	91 83       	std	Z+1, r25	; 0x01
    52ce:	80 83       	st	Z, r24
    52d0:	71 c4       	rjmp	.+2274   	; 0x5bb4 <ArrivalButton+0xaa2>
	_delay_ms(1500);

	while(u8ErrorDetected <2){
		LCD_voidSendCommand_4bitMode(lcd_Clear);
    52d2:	81 e0       	ldi	r24, 0x01	; 1
    52d4:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_voidSendCommand_4bitMode>
		LCD_voidWriteString_4bitMode("Enter Password:", 15);
    52d8:	82 e8       	ldi	r24, 0x82	; 130
    52da:	90 e0       	ldi	r25, 0x00	; 0
    52dc:	6f e0       	ldi	r22, 0x0F	; 15
    52de:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <LCD_voidWriteString_4bitMode>
		LCD_voidGotoxy_4bitMode(0,LineTwo);
    52e2:	80 e0       	ldi	r24, 0x00	; 0
    52e4:	62 e0       	ldi	r22, 0x02	; 2
    52e6:	0e 94 46 1c 	call	0x388c	; 0x388c <LCD_voidGotoxy_4bitMode>
//			LCD_voidDisplayKeys(u8InputPassword, &i);  				//print password on LCD
//			_delay_ms(200);
//		}

		// Set password using TTL_UART
		for(uint8 i=0;i<u8PasswordSize;){
    52ea:	fe 01       	movw	r30, r28
    52ec:	eb 58       	subi	r30, 0x8B	; 139
    52ee:	ff 4f       	sbci	r31, 0xFF	; 255
    52f0:	10 82       	st	Z, r1
    52f2:	cf c0       	rjmp	.+414    	; 0x5492 <ArrivalButton+0x380>
			LCD_voidGotoxy_4bitMode(i, LineTwo);
    52f4:	fe 01       	movw	r30, r28
    52f6:	eb 58       	subi	r30, 0x8B	; 139
    52f8:	ff 4f       	sbci	r31, 0xFF	; 255
    52fa:	80 81       	ld	r24, Z
    52fc:	62 e0       	ldi	r22, 0x02	; 2
    52fe:	0e 94 46 1c 	call	0x388c	; 0x388c <LCD_voidGotoxy_4bitMode>
			u8InputPassword[i] = UART_u8ReceiveData();
    5302:	fe 01       	movw	r30, r28
    5304:	eb 58       	subi	r30, 0x8B	; 139
    5306:	ff 4f       	sbci	r31, 0xFF	; 255
    5308:	80 81       	ld	r24, Z
    530a:	08 2f       	mov	r16, r24
    530c:	10 e0       	ldi	r17, 0x00	; 0
    530e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <UART_u8ReceiveData>
    5312:	f8 01       	movw	r30, r16
    5314:	e9 5f       	subi	r30, 0xF9	; 249
    5316:	fe 4f       	sbci	r31, 0xFE	; 254
    5318:	80 83       	st	Z, r24
			LCD_voidDisplayKeys(u8InputPassword, &i);  				//print password on LCD
    531a:	87 e0       	ldi	r24, 0x07	; 7
    531c:	91 e0       	ldi	r25, 0x01	; 1
    531e:	9e 01       	movw	r18, r28
    5320:	2b 58       	subi	r18, 0x8B	; 139
    5322:	3f 4f       	sbci	r19, 0xFF	; 255
    5324:	b9 01       	movw	r22, r18
    5326:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <LCD_voidDisplayKeys>
    532a:	fe 01       	movw	r30, r28
    532c:	e1 5a       	subi	r30, 0xA1	; 161
    532e:	ff 4f       	sbci	r31, 0xFF	; 255
    5330:	80 e0       	ldi	r24, 0x00	; 0
    5332:	90 e0       	ldi	r25, 0x00	; 0
    5334:	a8 e4       	ldi	r26, 0x48	; 72
    5336:	b3 e4       	ldi	r27, 0x43	; 67
    5338:	80 83       	st	Z, r24
    533a:	91 83       	std	Z+1, r25	; 0x01
    533c:	a2 83       	std	Z+2, r26	; 0x02
    533e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5340:	8e 01       	movw	r16, r28
    5342:	05 5a       	subi	r16, 0xA5	; 165
    5344:	1f 4f       	sbci	r17, 0xFF	; 255
    5346:	fe 01       	movw	r30, r28
    5348:	e1 5a       	subi	r30, 0xA1	; 161
    534a:	ff 4f       	sbci	r31, 0xFF	; 255
    534c:	60 81       	ld	r22, Z
    534e:	71 81       	ldd	r23, Z+1	; 0x01
    5350:	82 81       	ldd	r24, Z+2	; 0x02
    5352:	93 81       	ldd	r25, Z+3	; 0x03
    5354:	20 e0       	ldi	r18, 0x00	; 0
    5356:	30 e0       	ldi	r19, 0x00	; 0
    5358:	4a ef       	ldi	r20, 0xFA	; 250
    535a:	54 e4       	ldi	r21, 0x44	; 68
    535c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5360:	dc 01       	movw	r26, r24
    5362:	cb 01       	movw	r24, r22
    5364:	f8 01       	movw	r30, r16
    5366:	80 83       	st	Z, r24
    5368:	91 83       	std	Z+1, r25	; 0x01
    536a:	a2 83       	std	Z+2, r26	; 0x02
    536c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    536e:	fe 01       	movw	r30, r28
    5370:	e5 5a       	subi	r30, 0xA5	; 165
    5372:	ff 4f       	sbci	r31, 0xFF	; 255
    5374:	60 81       	ld	r22, Z
    5376:	71 81       	ldd	r23, Z+1	; 0x01
    5378:	82 81       	ldd	r24, Z+2	; 0x02
    537a:	93 81       	ldd	r25, Z+3	; 0x03
    537c:	20 e0       	ldi	r18, 0x00	; 0
    537e:	30 e0       	ldi	r19, 0x00	; 0
    5380:	40 e8       	ldi	r20, 0x80	; 128
    5382:	5f e3       	ldi	r21, 0x3F	; 63
    5384:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5388:	88 23       	and	r24, r24
    538a:	44 f4       	brge	.+16     	; 0x539c <ArrivalButton+0x28a>
		__ticks = 1;
    538c:	fe 01       	movw	r30, r28
    538e:	e7 5a       	subi	r30, 0xA7	; 167
    5390:	ff 4f       	sbci	r31, 0xFF	; 255
    5392:	81 e0       	ldi	r24, 0x01	; 1
    5394:	90 e0       	ldi	r25, 0x00	; 0
    5396:	91 83       	std	Z+1, r25	; 0x01
    5398:	80 83       	st	Z, r24
    539a:	64 c0       	rjmp	.+200    	; 0x5464 <ArrivalButton+0x352>
	else if (__tmp > 65535)
    539c:	fe 01       	movw	r30, r28
    539e:	e5 5a       	subi	r30, 0xA5	; 165
    53a0:	ff 4f       	sbci	r31, 0xFF	; 255
    53a2:	60 81       	ld	r22, Z
    53a4:	71 81       	ldd	r23, Z+1	; 0x01
    53a6:	82 81       	ldd	r24, Z+2	; 0x02
    53a8:	93 81       	ldd	r25, Z+3	; 0x03
    53aa:	20 e0       	ldi	r18, 0x00	; 0
    53ac:	3f ef       	ldi	r19, 0xFF	; 255
    53ae:	4f e7       	ldi	r20, 0x7F	; 127
    53b0:	57 e4       	ldi	r21, 0x47	; 71
    53b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    53b6:	18 16       	cp	r1, r24
    53b8:	0c f0       	brlt	.+2      	; 0x53bc <ArrivalButton+0x2aa>
    53ba:	43 c0       	rjmp	.+134    	; 0x5442 <ArrivalButton+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53bc:	fe 01       	movw	r30, r28
    53be:	e1 5a       	subi	r30, 0xA1	; 161
    53c0:	ff 4f       	sbci	r31, 0xFF	; 255
    53c2:	60 81       	ld	r22, Z
    53c4:	71 81       	ldd	r23, Z+1	; 0x01
    53c6:	82 81       	ldd	r24, Z+2	; 0x02
    53c8:	93 81       	ldd	r25, Z+3	; 0x03
    53ca:	20 e0       	ldi	r18, 0x00	; 0
    53cc:	30 e0       	ldi	r19, 0x00	; 0
    53ce:	40 e2       	ldi	r20, 0x20	; 32
    53d0:	51 e4       	ldi	r21, 0x41	; 65
    53d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53d6:	dc 01       	movw	r26, r24
    53d8:	cb 01       	movw	r24, r22
    53da:	8e 01       	movw	r16, r28
    53dc:	07 5a       	subi	r16, 0xA7	; 167
    53de:	1f 4f       	sbci	r17, 0xFF	; 255
    53e0:	bc 01       	movw	r22, r24
    53e2:	cd 01       	movw	r24, r26
    53e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53e8:	dc 01       	movw	r26, r24
    53ea:	cb 01       	movw	r24, r22
    53ec:	f8 01       	movw	r30, r16
    53ee:	91 83       	std	Z+1, r25	; 0x01
    53f0:	80 83       	st	Z, r24
    53f2:	1f c0       	rjmp	.+62     	; 0x5432 <ArrivalButton+0x320>
    53f4:	fe 01       	movw	r30, r28
    53f6:	e9 5a       	subi	r30, 0xA9	; 169
    53f8:	ff 4f       	sbci	r31, 0xFF	; 255
    53fa:	88 ec       	ldi	r24, 0xC8	; 200
    53fc:	90 e0       	ldi	r25, 0x00	; 0
    53fe:	91 83       	std	Z+1, r25	; 0x01
    5400:	80 83       	st	Z, r24
    5402:	fe 01       	movw	r30, r28
    5404:	e9 5a       	subi	r30, 0xA9	; 169
    5406:	ff 4f       	sbci	r31, 0xFF	; 255
    5408:	80 81       	ld	r24, Z
    540a:	91 81       	ldd	r25, Z+1	; 0x01
    540c:	01 97       	sbiw	r24, 0x01	; 1
    540e:	f1 f7       	brne	.-4      	; 0x540c <ArrivalButton+0x2fa>
    5410:	fe 01       	movw	r30, r28
    5412:	e9 5a       	subi	r30, 0xA9	; 169
    5414:	ff 4f       	sbci	r31, 0xFF	; 255
    5416:	91 83       	std	Z+1, r25	; 0x01
    5418:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    541a:	de 01       	movw	r26, r28
    541c:	a7 5a       	subi	r26, 0xA7	; 167
    541e:	bf 4f       	sbci	r27, 0xFF	; 255
    5420:	fe 01       	movw	r30, r28
    5422:	e7 5a       	subi	r30, 0xA7	; 167
    5424:	ff 4f       	sbci	r31, 0xFF	; 255
    5426:	80 81       	ld	r24, Z
    5428:	91 81       	ldd	r25, Z+1	; 0x01
    542a:	01 97       	sbiw	r24, 0x01	; 1
    542c:	11 96       	adiw	r26, 0x01	; 1
    542e:	9c 93       	st	X, r25
    5430:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5432:	fe 01       	movw	r30, r28
    5434:	e7 5a       	subi	r30, 0xA7	; 167
    5436:	ff 4f       	sbci	r31, 0xFF	; 255
    5438:	80 81       	ld	r24, Z
    543a:	91 81       	ldd	r25, Z+1	; 0x01
    543c:	00 97       	sbiw	r24, 0x00	; 0
    543e:	d1 f6       	brne	.-76     	; 0x53f4 <ArrivalButton+0x2e2>
    5440:	28 c0       	rjmp	.+80     	; 0x5492 <ArrivalButton+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5442:	8e 01       	movw	r16, r28
    5444:	07 5a       	subi	r16, 0xA7	; 167
    5446:	1f 4f       	sbci	r17, 0xFF	; 255
    5448:	fe 01       	movw	r30, r28
    544a:	e5 5a       	subi	r30, 0xA5	; 165
    544c:	ff 4f       	sbci	r31, 0xFF	; 255
    544e:	60 81       	ld	r22, Z
    5450:	71 81       	ldd	r23, Z+1	; 0x01
    5452:	82 81       	ldd	r24, Z+2	; 0x02
    5454:	93 81       	ldd	r25, Z+3	; 0x03
    5456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    545a:	dc 01       	movw	r26, r24
    545c:	cb 01       	movw	r24, r22
    545e:	f8 01       	movw	r30, r16
    5460:	91 83       	std	Z+1, r25	; 0x01
    5462:	80 83       	st	Z, r24
    5464:	de 01       	movw	r26, r28
    5466:	ab 5a       	subi	r26, 0xAB	; 171
    5468:	bf 4f       	sbci	r27, 0xFF	; 255
    546a:	fe 01       	movw	r30, r28
    546c:	e7 5a       	subi	r30, 0xA7	; 167
    546e:	ff 4f       	sbci	r31, 0xFF	; 255
    5470:	80 81       	ld	r24, Z
    5472:	91 81       	ldd	r25, Z+1	; 0x01
    5474:	11 96       	adiw	r26, 0x01	; 1
    5476:	9c 93       	st	X, r25
    5478:	8e 93       	st	-X, r24
    547a:	fe 01       	movw	r30, r28
    547c:	eb 5a       	subi	r30, 0xAB	; 171
    547e:	ff 4f       	sbci	r31, 0xFF	; 255
    5480:	80 81       	ld	r24, Z
    5482:	91 81       	ldd	r25, Z+1	; 0x01
    5484:	01 97       	sbiw	r24, 0x01	; 1
    5486:	f1 f7       	brne	.-4      	; 0x5484 <ArrivalButton+0x372>
    5488:	fe 01       	movw	r30, r28
    548a:	eb 5a       	subi	r30, 0xAB	; 171
    548c:	ff 4f       	sbci	r31, 0xFF	; 255
    548e:	91 83       	std	Z+1, r25	; 0x01
    5490:	80 83       	st	Z, r24
//			LCD_voidDisplayKeys(u8InputPassword, &i);  				//print password on LCD
//			_delay_ms(200);
//		}

		// Set password using TTL_UART
		for(uint8 i=0;i<u8PasswordSize;){
    5492:	fe 01       	movw	r30, r28
    5494:	eb 58       	subi	r30, 0x8B	; 139
    5496:	ff 4f       	sbci	r31, 0xFF	; 255
    5498:	90 81       	ld	r25, Z
    549a:	fe 01       	movw	r30, r28
    549c:	ed 58       	subi	r30, 0x8D	; 141
    549e:	ff 4f       	sbci	r31, 0xFF	; 255
    54a0:	80 81       	ld	r24, Z
    54a2:	98 17       	cp	r25, r24
    54a4:	08 f4       	brcc	.+2      	; 0x54a8 <ArrivalButton+0x396>
    54a6:	26 cf       	rjmp	.-436    	; 0x52f4 <ArrivalButton+0x1e2>
			LCD_voidDisplayKeys(u8InputPassword, &i);  				//print password on LCD
			_delay_ms(200);
		}

		//error detection
		for(uint8 i=0; i<u8PasswordSize; i++){
    54a8:	fe 01       	movw	r30, r28
    54aa:	ee 58       	subi	r30, 0x8E	; 142
    54ac:	ff 4f       	sbci	r31, 0xFF	; 255
    54ae:	10 82       	st	Z, r1
    54b0:	3b c0       	rjmp	.+118    	; 0x5528 <ArrivalButton+0x416>
			EEPROM_voidRead(EEPROM_START_ADDRESS+i, &u8EEPROMData[i]);
    54b2:	fe 01       	movw	r30, r28
    54b4:	ee 58       	subi	r30, 0x8E	; 142
    54b6:	ff 4f       	sbci	r31, 0xFF	; 255
    54b8:	80 81       	ld	r24, Z
    54ba:	88 2f       	mov	r24, r24
    54bc:	90 e0       	ldi	r25, 0x00	; 0
    54be:	9c 01       	movw	r18, r24
    54c0:	2e 5e       	subi	r18, 0xEE	; 238
    54c2:	3e 4f       	sbci	r19, 0xFE	; 254
    54c4:	fe 01       	movw	r30, r28
    54c6:	ee 58       	subi	r30, 0x8E	; 142
    54c8:	ff 4f       	sbci	r31, 0xFF	; 255
    54ca:	80 81       	ld	r24, Z
    54cc:	b9 01       	movw	r22, r18
    54ce:	0e 94 55 20 	call	0x40aa	; 0x40aa <EEPROM_voidRead>
			u8Error[i] = PASS_u8ComparePassword(u8EEPROMData[i], u8InputPassword[i]);
    54d2:	fe 01       	movw	r30, r28
    54d4:	ee 58       	subi	r30, 0x8E	; 142
    54d6:	ff 4f       	sbci	r31, 0xFF	; 255
    54d8:	80 81       	ld	r24, Z
    54da:	08 2f       	mov	r16, r24
    54dc:	10 e0       	ldi	r17, 0x00	; 0
    54de:	fe 01       	movw	r30, r28
    54e0:	ee 58       	subi	r30, 0x8E	; 142
    54e2:	ff 4f       	sbci	r31, 0xFF	; 255
    54e4:	80 81       	ld	r24, Z
    54e6:	88 2f       	mov	r24, r24
    54e8:	90 e0       	ldi	r25, 0x00	; 0
    54ea:	fc 01       	movw	r30, r24
    54ec:	ee 5e       	subi	r30, 0xEE	; 238
    54ee:	fe 4f       	sbci	r31, 0xFE	; 254
    54f0:	20 81       	ld	r18, Z
    54f2:	fe 01       	movw	r30, r28
    54f4:	ee 58       	subi	r30, 0x8E	; 142
    54f6:	ff 4f       	sbci	r31, 0xFF	; 255
    54f8:	80 81       	ld	r24, Z
    54fa:	88 2f       	mov	r24, r24
    54fc:	90 e0       	ldi	r25, 0x00	; 0
    54fe:	fc 01       	movw	r30, r24
    5500:	e9 5f       	subi	r30, 0xF9	; 249
    5502:	fe 4f       	sbci	r31, 0xFE	; 254
    5504:	90 81       	ld	r25, Z
    5506:	82 2f       	mov	r24, r18
    5508:	69 2f       	mov	r22, r25
    550a:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <PASS_u8ComparePassword>
    550e:	f8 01       	movw	r30, r16
    5510:	e3 5f       	subi	r30, 0xF3	; 243
    5512:	fe 4f       	sbci	r31, 0xFE	; 254
    5514:	80 83       	st	Z, r24
			LCD_voidDisplayKeys(u8InputPassword, &i);  				//print password on LCD
			_delay_ms(200);
		}

		//error detection
		for(uint8 i=0; i<u8PasswordSize; i++){
    5516:	de 01       	movw	r26, r28
    5518:	ae 58       	subi	r26, 0x8E	; 142
    551a:	bf 4f       	sbci	r27, 0xFF	; 255
    551c:	fe 01       	movw	r30, r28
    551e:	ee 58       	subi	r30, 0x8E	; 142
    5520:	ff 4f       	sbci	r31, 0xFF	; 255
    5522:	80 81       	ld	r24, Z
    5524:	8f 5f       	subi	r24, 0xFF	; 255
    5526:	8c 93       	st	X, r24
    5528:	fe 01       	movw	r30, r28
    552a:	ee 58       	subi	r30, 0x8E	; 142
    552c:	ff 4f       	sbci	r31, 0xFF	; 255
    552e:	de 01       	movw	r26, r28
    5530:	ad 58       	subi	r26, 0x8D	; 141
    5532:	bf 4f       	sbci	r27, 0xFF	; 255
    5534:	90 81       	ld	r25, Z
    5536:	8c 91       	ld	r24, X
    5538:	98 17       	cp	r25, r24
    553a:	08 f4       	brcc	.+2      	; 0x553e <ArrivalButton+0x42c>
    553c:	ba cf       	rjmp	.-140    	; 0x54b2 <ArrivalButton+0x3a0>
		}



		//incorrect passwordu8EEPROMData
		for(uint8 i =0; i<5;i++){
    553e:	fe 01       	movw	r30, r28
    5540:	ef 58       	subi	r30, 0x8F	; 143
    5542:	ff 4f       	sbci	r31, 0xFF	; 255
    5544:	10 82       	st	Z, r1
    5546:	23 c0       	rjmp	.+70     	; 0x558e <ArrivalButton+0x47c>
			if(u8Error[i]==1){
    5548:	fe 01       	movw	r30, r28
    554a:	ef 58       	subi	r30, 0x8F	; 143
    554c:	ff 4f       	sbci	r31, 0xFF	; 255
    554e:	80 81       	ld	r24, Z
    5550:	88 2f       	mov	r24, r24
    5552:	90 e0       	ldi	r25, 0x00	; 0
    5554:	fc 01       	movw	r30, r24
    5556:	e3 5f       	subi	r30, 0xF3	; 243
    5558:	fe 4f       	sbci	r31, 0xFE	; 254
    555a:	80 81       	ld	r24, Z
    555c:	81 30       	cpi	r24, 0x01	; 1
    555e:	51 f4       	brne	.+20     	; 0x5574 <ArrivalButton+0x462>
				u8ErrorDetected++;
    5560:	de 01       	movw	r26, r28
    5562:	ac 58       	subi	r26, 0x8C	; 140
    5564:	bf 4f       	sbci	r27, 0xFF	; 255
    5566:	fe 01       	movw	r30, r28
    5568:	ec 58       	subi	r30, 0x8C	; 140
    556a:	ff 4f       	sbci	r31, 0xFF	; 255
    556c:	80 81       	ld	r24, Z
    556e:	8f 5f       	subi	r24, 0xFF	; 255
    5570:	8c 93       	st	X, r24
    5572:	13 c0       	rjmp	.+38     	; 0x559a <ArrivalButton+0x488>
				break;
			}
			else {
				u8ErrorDetected=0;
    5574:	fe 01       	movw	r30, r28
    5576:	ec 58       	subi	r30, 0x8C	; 140
    5578:	ff 4f       	sbci	r31, 0xFF	; 255
    557a:	10 82       	st	Z, r1
		}



		//incorrect passwordu8EEPROMData
		for(uint8 i =0; i<5;i++){
    557c:	de 01       	movw	r26, r28
    557e:	af 58       	subi	r26, 0x8F	; 143
    5580:	bf 4f       	sbci	r27, 0xFF	; 255
    5582:	fe 01       	movw	r30, r28
    5584:	ef 58       	subi	r30, 0x8F	; 143
    5586:	ff 4f       	sbci	r31, 0xFF	; 255
    5588:	80 81       	ld	r24, Z
    558a:	8f 5f       	subi	r24, 0xFF	; 255
    558c:	8c 93       	st	X, r24
    558e:	fe 01       	movw	r30, r28
    5590:	ef 58       	subi	r30, 0x8F	; 143
    5592:	ff 4f       	sbci	r31, 0xFF	; 255
    5594:	80 81       	ld	r24, Z
    5596:	85 30       	cpi	r24, 0x05	; 5
    5598:	b8 f2       	brcs	.-82     	; 0x5548 <ArrivalButton+0x436>
			}
			else {
				u8ErrorDetected=0;
			}
		}
		if(u8ErrorDetected){
    559a:	fe 01       	movw	r30, r28
    559c:	ec 58       	subi	r30, 0x8C	; 140
    559e:	ff 4f       	sbci	r31, 0xFF	; 255
    55a0:	80 81       	ld	r24, Z
    55a2:	88 23       	and	r24, r24
    55a4:	09 f4       	brne	.+2      	; 0x55a8 <ArrivalButton+0x496>
    55a6:	c4 c0       	rjmp	.+392    	; 0x5730 <ArrivalButton+0x61e>
			LCD_voidSendCommand_4bitMode(lcd_Clear);
    55a8:	81 e0       	ldi	r24, 0x01	; 1
    55aa:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_voidSendCommand_4bitMode>
			LCD_voidGotoxy_4bitMode(0, LineOne);
    55ae:	80 e0       	ldi	r24, 0x00	; 0
    55b0:	61 e0       	ldi	r22, 0x01	; 1
    55b2:	0e 94 46 1c 	call	0x388c	; 0x388c <LCD_voidGotoxy_4bitMode>
			LCD_voidWriteString_4bitMode("Wrong! Try Again", 16);
    55b6:	82 e9       	ldi	r24, 0x92	; 146
    55b8:	90 e0       	ldi	r25, 0x00	; 0
    55ba:	60 e1       	ldi	r22, 0x10	; 16
    55bc:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <LCD_voidWriteString_4bitMode>
			SPI_u8TransceiverDataSynch(5);					// Count number of trials up
    55c0:	85 e0       	ldi	r24, 0x05	; 5
    55c2:	0e 94 23 0c 	call	0x1846	; 0x1846 <SPI_u8TransceiverDataSynch>
    55c6:	fe 01       	movw	r30, r28
    55c8:	ef 5a       	subi	r30, 0xAF	; 175
    55ca:	ff 4f       	sbci	r31, 0xFF	; 255
    55cc:	80 e0       	ldi	r24, 0x00	; 0
    55ce:	90 e0       	ldi	r25, 0x00	; 0
    55d0:	aa ef       	ldi	r26, 0xFA	; 250
    55d2:	b3 e4       	ldi	r27, 0x43	; 67
    55d4:	80 83       	st	Z, r24
    55d6:	91 83       	std	Z+1, r25	; 0x01
    55d8:	a2 83       	std	Z+2, r26	; 0x02
    55da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55dc:	8e 01       	movw	r16, r28
    55de:	03 5b       	subi	r16, 0xB3	; 179
    55e0:	1f 4f       	sbci	r17, 0xFF	; 255
    55e2:	fe 01       	movw	r30, r28
    55e4:	ef 5a       	subi	r30, 0xAF	; 175
    55e6:	ff 4f       	sbci	r31, 0xFF	; 255
    55e8:	60 81       	ld	r22, Z
    55ea:	71 81       	ldd	r23, Z+1	; 0x01
    55ec:	82 81       	ldd	r24, Z+2	; 0x02
    55ee:	93 81       	ldd	r25, Z+3	; 0x03
    55f0:	20 e0       	ldi	r18, 0x00	; 0
    55f2:	30 e0       	ldi	r19, 0x00	; 0
    55f4:	4a ef       	ldi	r20, 0xFA	; 250
    55f6:	54 e4       	ldi	r21, 0x44	; 68
    55f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55fc:	dc 01       	movw	r26, r24
    55fe:	cb 01       	movw	r24, r22
    5600:	f8 01       	movw	r30, r16
    5602:	80 83       	st	Z, r24
    5604:	91 83       	std	Z+1, r25	; 0x01
    5606:	a2 83       	std	Z+2, r26	; 0x02
    5608:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    560a:	fe 01       	movw	r30, r28
    560c:	e3 5b       	subi	r30, 0xB3	; 179
    560e:	ff 4f       	sbci	r31, 0xFF	; 255
    5610:	60 81       	ld	r22, Z
    5612:	71 81       	ldd	r23, Z+1	; 0x01
    5614:	82 81       	ldd	r24, Z+2	; 0x02
    5616:	93 81       	ldd	r25, Z+3	; 0x03
    5618:	20 e0       	ldi	r18, 0x00	; 0
    561a:	30 e0       	ldi	r19, 0x00	; 0
    561c:	40 e8       	ldi	r20, 0x80	; 128
    561e:	5f e3       	ldi	r21, 0x3F	; 63
    5620:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5624:	88 23       	and	r24, r24
    5626:	44 f4       	brge	.+16     	; 0x5638 <ArrivalButton+0x526>
		__ticks = 1;
    5628:	fe 01       	movw	r30, r28
    562a:	e5 5b       	subi	r30, 0xB5	; 181
    562c:	ff 4f       	sbci	r31, 0xFF	; 255
    562e:	81 e0       	ldi	r24, 0x01	; 1
    5630:	90 e0       	ldi	r25, 0x00	; 0
    5632:	91 83       	std	Z+1, r25	; 0x01
    5634:	80 83       	st	Z, r24
    5636:	64 c0       	rjmp	.+200    	; 0x5700 <ArrivalButton+0x5ee>
	else if (__tmp > 65535)
    5638:	fe 01       	movw	r30, r28
    563a:	e3 5b       	subi	r30, 0xB3	; 179
    563c:	ff 4f       	sbci	r31, 0xFF	; 255
    563e:	60 81       	ld	r22, Z
    5640:	71 81       	ldd	r23, Z+1	; 0x01
    5642:	82 81       	ldd	r24, Z+2	; 0x02
    5644:	93 81       	ldd	r25, Z+3	; 0x03
    5646:	20 e0       	ldi	r18, 0x00	; 0
    5648:	3f ef       	ldi	r19, 0xFF	; 255
    564a:	4f e7       	ldi	r20, 0x7F	; 127
    564c:	57 e4       	ldi	r21, 0x47	; 71
    564e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5652:	18 16       	cp	r1, r24
    5654:	0c f0       	brlt	.+2      	; 0x5658 <ArrivalButton+0x546>
    5656:	43 c0       	rjmp	.+134    	; 0x56de <ArrivalButton+0x5cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5658:	fe 01       	movw	r30, r28
    565a:	ef 5a       	subi	r30, 0xAF	; 175
    565c:	ff 4f       	sbci	r31, 0xFF	; 255
    565e:	60 81       	ld	r22, Z
    5660:	71 81       	ldd	r23, Z+1	; 0x01
    5662:	82 81       	ldd	r24, Z+2	; 0x02
    5664:	93 81       	ldd	r25, Z+3	; 0x03
    5666:	20 e0       	ldi	r18, 0x00	; 0
    5668:	30 e0       	ldi	r19, 0x00	; 0
    566a:	40 e2       	ldi	r20, 0x20	; 32
    566c:	51 e4       	ldi	r21, 0x41	; 65
    566e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5672:	dc 01       	movw	r26, r24
    5674:	cb 01       	movw	r24, r22
    5676:	8e 01       	movw	r16, r28
    5678:	05 5b       	subi	r16, 0xB5	; 181
    567a:	1f 4f       	sbci	r17, 0xFF	; 255
    567c:	bc 01       	movw	r22, r24
    567e:	cd 01       	movw	r24, r26
    5680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5684:	dc 01       	movw	r26, r24
    5686:	cb 01       	movw	r24, r22
    5688:	f8 01       	movw	r30, r16
    568a:	91 83       	std	Z+1, r25	; 0x01
    568c:	80 83       	st	Z, r24
    568e:	1f c0       	rjmp	.+62     	; 0x56ce <ArrivalButton+0x5bc>
    5690:	fe 01       	movw	r30, r28
    5692:	e7 5b       	subi	r30, 0xB7	; 183
    5694:	ff 4f       	sbci	r31, 0xFF	; 255
    5696:	88 ec       	ldi	r24, 0xC8	; 200
    5698:	90 e0       	ldi	r25, 0x00	; 0
    569a:	91 83       	std	Z+1, r25	; 0x01
    569c:	80 83       	st	Z, r24
    569e:	fe 01       	movw	r30, r28
    56a0:	e7 5b       	subi	r30, 0xB7	; 183
    56a2:	ff 4f       	sbci	r31, 0xFF	; 255
    56a4:	80 81       	ld	r24, Z
    56a6:	91 81       	ldd	r25, Z+1	; 0x01
    56a8:	01 97       	sbiw	r24, 0x01	; 1
    56aa:	f1 f7       	brne	.-4      	; 0x56a8 <ArrivalButton+0x596>
    56ac:	fe 01       	movw	r30, r28
    56ae:	e7 5b       	subi	r30, 0xB7	; 183
    56b0:	ff 4f       	sbci	r31, 0xFF	; 255
    56b2:	91 83       	std	Z+1, r25	; 0x01
    56b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56b6:	de 01       	movw	r26, r28
    56b8:	a5 5b       	subi	r26, 0xB5	; 181
    56ba:	bf 4f       	sbci	r27, 0xFF	; 255
    56bc:	fe 01       	movw	r30, r28
    56be:	e5 5b       	subi	r30, 0xB5	; 181
    56c0:	ff 4f       	sbci	r31, 0xFF	; 255
    56c2:	80 81       	ld	r24, Z
    56c4:	91 81       	ldd	r25, Z+1	; 0x01
    56c6:	01 97       	sbiw	r24, 0x01	; 1
    56c8:	11 96       	adiw	r26, 0x01	; 1
    56ca:	9c 93       	st	X, r25
    56cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56ce:	fe 01       	movw	r30, r28
    56d0:	e5 5b       	subi	r30, 0xB5	; 181
    56d2:	ff 4f       	sbci	r31, 0xFF	; 255
    56d4:	80 81       	ld	r24, Z
    56d6:	91 81       	ldd	r25, Z+1	; 0x01
    56d8:	00 97       	sbiw	r24, 0x00	; 0
    56da:	d1 f6       	brne	.-76     	; 0x5690 <ArrivalButton+0x57e>
    56dc:	6b c2       	rjmp	.+1238   	; 0x5bb4 <ArrivalButton+0xaa2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56de:	8e 01       	movw	r16, r28
    56e0:	05 5b       	subi	r16, 0xB5	; 181
    56e2:	1f 4f       	sbci	r17, 0xFF	; 255
    56e4:	fe 01       	movw	r30, r28
    56e6:	e3 5b       	subi	r30, 0xB3	; 179
    56e8:	ff 4f       	sbci	r31, 0xFF	; 255
    56ea:	60 81       	ld	r22, Z
    56ec:	71 81       	ldd	r23, Z+1	; 0x01
    56ee:	82 81       	ldd	r24, Z+2	; 0x02
    56f0:	93 81       	ldd	r25, Z+3	; 0x03
    56f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56f6:	dc 01       	movw	r26, r24
    56f8:	cb 01       	movw	r24, r22
    56fa:	f8 01       	movw	r30, r16
    56fc:	91 83       	std	Z+1, r25	; 0x01
    56fe:	80 83       	st	Z, r24
    5700:	de 01       	movw	r26, r28
    5702:	a9 5b       	subi	r26, 0xB9	; 185
    5704:	bf 4f       	sbci	r27, 0xFF	; 255
    5706:	fe 01       	movw	r30, r28
    5708:	e5 5b       	subi	r30, 0xB5	; 181
    570a:	ff 4f       	sbci	r31, 0xFF	; 255
    570c:	80 81       	ld	r24, Z
    570e:	91 81       	ldd	r25, Z+1	; 0x01
    5710:	11 96       	adiw	r26, 0x01	; 1
    5712:	9c 93       	st	X, r25
    5714:	8e 93       	st	-X, r24
    5716:	fe 01       	movw	r30, r28
    5718:	e9 5b       	subi	r30, 0xB9	; 185
    571a:	ff 4f       	sbci	r31, 0xFF	; 255
    571c:	80 81       	ld	r24, Z
    571e:	91 81       	ldd	r25, Z+1	; 0x01
    5720:	01 97       	sbiw	r24, 0x01	; 1
    5722:	f1 f7       	brne	.-4      	; 0x5720 <ArrivalButton+0x60e>
    5724:	fe 01       	movw	r30, r28
    5726:	e9 5b       	subi	r30, 0xB9	; 185
    5728:	ff 4f       	sbci	r31, 0xFF	; 255
    572a:	91 83       	std	Z+1, r25	; 0x01
    572c:	80 83       	st	Z, r24
    572e:	42 c2       	rjmp	.+1156   	; 0x5bb4 <ArrivalButton+0xaa2>
			_delay_ms(500);
		}

		else{
			LCD_voidSendCommand_4bitMode(lcd_Clear);
    5730:	81 e0       	ldi	r24, 0x01	; 1
    5732:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_voidSendCommand_4bitMode>
			LCD_voidGotoxy_4bitMode(0, LineOne);
    5736:	80 e0       	ldi	r24, 0x00	; 0
    5738:	61 e0       	ldi	r22, 0x01	; 1
    573a:	0e 94 46 1c 	call	0x388c	; 0x388c <LCD_voidGotoxy_4bitMode>
			LCD_voidWriteString_4bitMode("****CORRECT****", 16);
    573e:	83 ea       	ldi	r24, 0xA3	; 163
    5740:	90 e0       	ldi	r25, 0x00	; 0
    5742:	60 e1       	ldi	r22, 0x10	; 16
    5744:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <LCD_voidWriteString_4bitMode>
    5748:	fe 01       	movw	r30, r28
    574a:	ed 5b       	subi	r30, 0xBD	; 189
    574c:	ff 4f       	sbci	r31, 0xFF	; 255
    574e:	80 e0       	ldi	r24, 0x00	; 0
    5750:	90 e0       	ldi	r25, 0x00	; 0
    5752:	aa ef       	ldi	r26, 0xFA	; 250
    5754:	b3 e4       	ldi	r27, 0x43	; 67
    5756:	80 83       	st	Z, r24
    5758:	91 83       	std	Z+1, r25	; 0x01
    575a:	a2 83       	std	Z+2, r26	; 0x02
    575c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    575e:	8e 01       	movw	r16, r28
    5760:	01 5c       	subi	r16, 0xC1	; 193
    5762:	1f 4f       	sbci	r17, 0xFF	; 255
    5764:	fe 01       	movw	r30, r28
    5766:	ed 5b       	subi	r30, 0xBD	; 189
    5768:	ff 4f       	sbci	r31, 0xFF	; 255
    576a:	60 81       	ld	r22, Z
    576c:	71 81       	ldd	r23, Z+1	; 0x01
    576e:	82 81       	ldd	r24, Z+2	; 0x02
    5770:	93 81       	ldd	r25, Z+3	; 0x03
    5772:	20 e0       	ldi	r18, 0x00	; 0
    5774:	30 e0       	ldi	r19, 0x00	; 0
    5776:	4a ef       	ldi	r20, 0xFA	; 250
    5778:	54 e4       	ldi	r21, 0x44	; 68
    577a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    577e:	dc 01       	movw	r26, r24
    5780:	cb 01       	movw	r24, r22
    5782:	f8 01       	movw	r30, r16
    5784:	80 83       	st	Z, r24
    5786:	91 83       	std	Z+1, r25	; 0x01
    5788:	a2 83       	std	Z+2, r26	; 0x02
    578a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    578c:	fe 01       	movw	r30, r28
    578e:	ff 96       	adiw	r30, 0x3f	; 63
    5790:	60 81       	ld	r22, Z
    5792:	71 81       	ldd	r23, Z+1	; 0x01
    5794:	82 81       	ldd	r24, Z+2	; 0x02
    5796:	93 81       	ldd	r25, Z+3	; 0x03
    5798:	20 e0       	ldi	r18, 0x00	; 0
    579a:	30 e0       	ldi	r19, 0x00	; 0
    579c:	40 e8       	ldi	r20, 0x80	; 128
    579e:	5f e3       	ldi	r21, 0x3F	; 63
    57a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    57a4:	88 23       	and	r24, r24
    57a6:	2c f4       	brge	.+10     	; 0x57b2 <ArrivalButton+0x6a0>
		__ticks = 1;
    57a8:	81 e0       	ldi	r24, 0x01	; 1
    57aa:	90 e0       	ldi	r25, 0x00	; 0
    57ac:	9e af       	std	Y+62, r25	; 0x3e
    57ae:	8d af       	std	Y+61, r24	; 0x3d
    57b0:	46 c0       	rjmp	.+140    	; 0x583e <ArrivalButton+0x72c>
	else if (__tmp > 65535)
    57b2:	fe 01       	movw	r30, r28
    57b4:	ff 96       	adiw	r30, 0x3f	; 63
    57b6:	60 81       	ld	r22, Z
    57b8:	71 81       	ldd	r23, Z+1	; 0x01
    57ba:	82 81       	ldd	r24, Z+2	; 0x02
    57bc:	93 81       	ldd	r25, Z+3	; 0x03
    57be:	20 e0       	ldi	r18, 0x00	; 0
    57c0:	3f ef       	ldi	r19, 0xFF	; 255
    57c2:	4f e7       	ldi	r20, 0x7F	; 127
    57c4:	57 e4       	ldi	r21, 0x47	; 71
    57c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    57ca:	18 16       	cp	r1, r24
    57cc:	64 f5       	brge	.+88     	; 0x5826 <ArrivalButton+0x714>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57ce:	fe 01       	movw	r30, r28
    57d0:	ed 5b       	subi	r30, 0xBD	; 189
    57d2:	ff 4f       	sbci	r31, 0xFF	; 255
    57d4:	60 81       	ld	r22, Z
    57d6:	71 81       	ldd	r23, Z+1	; 0x01
    57d8:	82 81       	ldd	r24, Z+2	; 0x02
    57da:	93 81       	ldd	r25, Z+3	; 0x03
    57dc:	20 e0       	ldi	r18, 0x00	; 0
    57de:	30 e0       	ldi	r19, 0x00	; 0
    57e0:	40 e2       	ldi	r20, 0x20	; 32
    57e2:	51 e4       	ldi	r21, 0x41	; 65
    57e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57e8:	dc 01       	movw	r26, r24
    57ea:	cb 01       	movw	r24, r22
    57ec:	bc 01       	movw	r22, r24
    57ee:	cd 01       	movw	r24, r26
    57f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57f4:	dc 01       	movw	r26, r24
    57f6:	cb 01       	movw	r24, r22
    57f8:	9e af       	std	Y+62, r25	; 0x3e
    57fa:	8d af       	std	Y+61, r24	; 0x3d
    57fc:	0f c0       	rjmp	.+30     	; 0x581c <ArrivalButton+0x70a>
    57fe:	88 ec       	ldi	r24, 0xC8	; 200
    5800:	90 e0       	ldi	r25, 0x00	; 0
    5802:	9c af       	std	Y+60, r25	; 0x3c
    5804:	8b af       	std	Y+59, r24	; 0x3b
    5806:	8b ad       	ldd	r24, Y+59	; 0x3b
    5808:	9c ad       	ldd	r25, Y+60	; 0x3c
    580a:	01 97       	sbiw	r24, 0x01	; 1
    580c:	f1 f7       	brne	.-4      	; 0x580a <ArrivalButton+0x6f8>
    580e:	9c af       	std	Y+60, r25	; 0x3c
    5810:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5812:	8d ad       	ldd	r24, Y+61	; 0x3d
    5814:	9e ad       	ldd	r25, Y+62	; 0x3e
    5816:	01 97       	sbiw	r24, 0x01	; 1
    5818:	9e af       	std	Y+62, r25	; 0x3e
    581a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    581c:	8d ad       	ldd	r24, Y+61	; 0x3d
    581e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5820:	00 97       	sbiw	r24, 0x00	; 0
    5822:	69 f7       	brne	.-38     	; 0x57fe <ArrivalButton+0x6ec>
    5824:	16 c0       	rjmp	.+44     	; 0x5852 <ArrivalButton+0x740>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5826:	fe 01       	movw	r30, r28
    5828:	ff 96       	adiw	r30, 0x3f	; 63
    582a:	60 81       	ld	r22, Z
    582c:	71 81       	ldd	r23, Z+1	; 0x01
    582e:	82 81       	ldd	r24, Z+2	; 0x02
    5830:	93 81       	ldd	r25, Z+3	; 0x03
    5832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5836:	dc 01       	movw	r26, r24
    5838:	cb 01       	movw	r24, r22
    583a:	9e af       	std	Y+62, r25	; 0x3e
    583c:	8d af       	std	Y+61, r24	; 0x3d
    583e:	8d ad       	ldd	r24, Y+61	; 0x3d
    5840:	9e ad       	ldd	r25, Y+62	; 0x3e
    5842:	9a af       	std	Y+58, r25	; 0x3a
    5844:	89 af       	std	Y+57, r24	; 0x39
    5846:	89 ad       	ldd	r24, Y+57	; 0x39
    5848:	9a ad       	ldd	r25, Y+58	; 0x3a
    584a:	01 97       	sbiw	r24, 0x01	; 1
    584c:	f1 f7       	brne	.-4      	; 0x584a <ArrivalButton+0x738>
    584e:	9a af       	std	Y+58, r25	; 0x3a
    5850:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(500);
			//u8ErrorCounts=0
			SPI_u8TransceiverDataSynch(10);
    5852:	8a e0       	ldi	r24, 0x0A	; 10
    5854:	0e 94 23 0c 	call	0x1846	; 0x1846 <SPI_u8TransceiverDataSynch>
			LCD_voidSendCommand_4bitMode(lcd_Clear);
    5858:	81 e0       	ldi	r24, 0x01	; 1
    585a:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_voidSendCommand_4bitMode>
			LCD_voidGotoxy_4bitMode(3, LineOne);
    585e:	83 e0       	ldi	r24, 0x03	; 3
    5860:	61 e0       	ldi	r22, 0x01	; 1
    5862:	0e 94 46 1c 	call	0x388c	; 0x388c <LCD_voidGotoxy_4bitMode>
			LCD_voidWriteString_4bitMode("WELCOME IN", 11);
    5866:	83 eb       	ldi	r24, 0xB3	; 179
    5868:	90 e0       	ldi	r25, 0x00	; 0
    586a:	6b e0       	ldi	r22, 0x0B	; 11
    586c:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <LCD_voidWriteString_4bitMode>
			u8WelcomeInFlag =1;
    5870:	81 e0       	ldi	r24, 0x01	; 1
    5872:	80 93 0c 01 	sts	0x010C, r24

			for (u16ServoCounter = 750 ; u16ServoCounter<1624; u16ServoCounter++)		// Open the door
    5876:	8e ee       	ldi	r24, 0xEE	; 238
    5878:	92 e0       	ldi	r25, 0x02	; 2
    587a:	90 93 ed 00 	sts	0x00ED, r25
    587e:	80 93 ec 00 	sts	0x00EC, r24
    5882:	81 c0       	rjmp	.+258    	; 0x5986 <ArrivalButton+0x874>
			{
				TIM1_voidSetCmpARegValue(u16ServoCounter);           //OCR1A
    5884:	80 91 ec 00 	lds	r24, 0x00EC
    5888:	90 91 ed 00 	lds	r25, 0x00ED
    588c:	0e 94 49 09 	call	0x1292	; 0x1292 <TIM1_voidSetCmpARegValue>
    5890:	80 e0       	ldi	r24, 0x00	; 0
    5892:	90 e0       	ldi	r25, 0x00	; 0
    5894:	a0 e2       	ldi	r26, 0x20	; 32
    5896:	b1 e4       	ldi	r27, 0x41	; 65
    5898:	8d ab       	std	Y+53, r24	; 0x35
    589a:	9e ab       	std	Y+54, r25	; 0x36
    589c:	af ab       	std	Y+55, r26	; 0x37
    589e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58a0:	6d a9       	ldd	r22, Y+53	; 0x35
    58a2:	7e a9       	ldd	r23, Y+54	; 0x36
    58a4:	8f a9       	ldd	r24, Y+55	; 0x37
    58a6:	98 ad       	ldd	r25, Y+56	; 0x38
    58a8:	20 e0       	ldi	r18, 0x00	; 0
    58aa:	30 e0       	ldi	r19, 0x00	; 0
    58ac:	4a ef       	ldi	r20, 0xFA	; 250
    58ae:	54 e4       	ldi	r21, 0x44	; 68
    58b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58b4:	dc 01       	movw	r26, r24
    58b6:	cb 01       	movw	r24, r22
    58b8:	89 ab       	std	Y+49, r24	; 0x31
    58ba:	9a ab       	std	Y+50, r25	; 0x32
    58bc:	ab ab       	std	Y+51, r26	; 0x33
    58be:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    58c0:	69 a9       	ldd	r22, Y+49	; 0x31
    58c2:	7a a9       	ldd	r23, Y+50	; 0x32
    58c4:	8b a9       	ldd	r24, Y+51	; 0x33
    58c6:	9c a9       	ldd	r25, Y+52	; 0x34
    58c8:	20 e0       	ldi	r18, 0x00	; 0
    58ca:	30 e0       	ldi	r19, 0x00	; 0
    58cc:	40 e8       	ldi	r20, 0x80	; 128
    58ce:	5f e3       	ldi	r21, 0x3F	; 63
    58d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    58d4:	88 23       	and	r24, r24
    58d6:	2c f4       	brge	.+10     	; 0x58e2 <ArrivalButton+0x7d0>
		__ticks = 1;
    58d8:	81 e0       	ldi	r24, 0x01	; 1
    58da:	90 e0       	ldi	r25, 0x00	; 0
    58dc:	98 ab       	std	Y+48, r25	; 0x30
    58de:	8f a7       	std	Y+47, r24	; 0x2f
    58e0:	3f c0       	rjmp	.+126    	; 0x5960 <ArrivalButton+0x84e>
	else if (__tmp > 65535)
    58e2:	69 a9       	ldd	r22, Y+49	; 0x31
    58e4:	7a a9       	ldd	r23, Y+50	; 0x32
    58e6:	8b a9       	ldd	r24, Y+51	; 0x33
    58e8:	9c a9       	ldd	r25, Y+52	; 0x34
    58ea:	20 e0       	ldi	r18, 0x00	; 0
    58ec:	3f ef       	ldi	r19, 0xFF	; 255
    58ee:	4f e7       	ldi	r20, 0x7F	; 127
    58f0:	57 e4       	ldi	r21, 0x47	; 71
    58f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    58f6:	18 16       	cp	r1, r24
    58f8:	4c f5       	brge	.+82     	; 0x594c <ArrivalButton+0x83a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58fa:	6d a9       	ldd	r22, Y+53	; 0x35
    58fc:	7e a9       	ldd	r23, Y+54	; 0x36
    58fe:	8f a9       	ldd	r24, Y+55	; 0x37
    5900:	98 ad       	ldd	r25, Y+56	; 0x38
    5902:	20 e0       	ldi	r18, 0x00	; 0
    5904:	30 e0       	ldi	r19, 0x00	; 0
    5906:	40 e2       	ldi	r20, 0x20	; 32
    5908:	51 e4       	ldi	r21, 0x41	; 65
    590a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    590e:	dc 01       	movw	r26, r24
    5910:	cb 01       	movw	r24, r22
    5912:	bc 01       	movw	r22, r24
    5914:	cd 01       	movw	r24, r26
    5916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    591a:	dc 01       	movw	r26, r24
    591c:	cb 01       	movw	r24, r22
    591e:	98 ab       	std	Y+48, r25	; 0x30
    5920:	8f a7       	std	Y+47, r24	; 0x2f
    5922:	0f c0       	rjmp	.+30     	; 0x5942 <ArrivalButton+0x830>
    5924:	88 ec       	ldi	r24, 0xC8	; 200
    5926:	90 e0       	ldi	r25, 0x00	; 0
    5928:	9e a7       	std	Y+46, r25	; 0x2e
    592a:	8d a7       	std	Y+45, r24	; 0x2d
    592c:	8d a5       	ldd	r24, Y+45	; 0x2d
    592e:	9e a5       	ldd	r25, Y+46	; 0x2e
    5930:	01 97       	sbiw	r24, 0x01	; 1
    5932:	f1 f7       	brne	.-4      	; 0x5930 <ArrivalButton+0x81e>
    5934:	9e a7       	std	Y+46, r25	; 0x2e
    5936:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5938:	8f a5       	ldd	r24, Y+47	; 0x2f
    593a:	98 a9       	ldd	r25, Y+48	; 0x30
    593c:	01 97       	sbiw	r24, 0x01	; 1
    593e:	98 ab       	std	Y+48, r25	; 0x30
    5940:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5942:	8f a5       	ldd	r24, Y+47	; 0x2f
    5944:	98 a9       	ldd	r25, Y+48	; 0x30
    5946:	00 97       	sbiw	r24, 0x00	; 0
    5948:	69 f7       	brne	.-38     	; 0x5924 <ArrivalButton+0x812>
    594a:	14 c0       	rjmp	.+40     	; 0x5974 <ArrivalButton+0x862>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    594c:	69 a9       	ldd	r22, Y+49	; 0x31
    594e:	7a a9       	ldd	r23, Y+50	; 0x32
    5950:	8b a9       	ldd	r24, Y+51	; 0x33
    5952:	9c a9       	ldd	r25, Y+52	; 0x34
    5954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5958:	dc 01       	movw	r26, r24
    595a:	cb 01       	movw	r24, r22
    595c:	98 ab       	std	Y+48, r25	; 0x30
    595e:	8f a7       	std	Y+47, r24	; 0x2f
    5960:	8f a5       	ldd	r24, Y+47	; 0x2f
    5962:	98 a9       	ldd	r25, Y+48	; 0x30
    5964:	9c a7       	std	Y+44, r25	; 0x2c
    5966:	8b a7       	std	Y+43, r24	; 0x2b
    5968:	8b a5       	ldd	r24, Y+43	; 0x2b
    596a:	9c a5       	ldd	r25, Y+44	; 0x2c
    596c:	01 97       	sbiw	r24, 0x01	; 1
    596e:	f1 f7       	brne	.-4      	; 0x596c <ArrivalButton+0x85a>
    5970:	9c a7       	std	Y+44, r25	; 0x2c
    5972:	8b a7       	std	Y+43, r24	; 0x2b
			LCD_voidSendCommand_4bitMode(lcd_Clear);
			LCD_voidGotoxy_4bitMode(3, LineOne);
			LCD_voidWriteString_4bitMode("WELCOME IN", 11);
			u8WelcomeInFlag =1;

			for (u16ServoCounter = 750 ; u16ServoCounter<1624; u16ServoCounter++)		// Open the door
    5974:	80 91 ec 00 	lds	r24, 0x00EC
    5978:	90 91 ed 00 	lds	r25, 0x00ED
    597c:	01 96       	adiw	r24, 0x01	; 1
    597e:	90 93 ed 00 	sts	0x00ED, r25
    5982:	80 93 ec 00 	sts	0x00EC, r24
    5986:	80 91 ec 00 	lds	r24, 0x00EC
    598a:	90 91 ed 00 	lds	r25, 0x00ED
    598e:	f6 e0       	ldi	r31, 0x06	; 6
    5990:	88 35       	cpi	r24, 0x58	; 88
    5992:	9f 07       	cpc	r25, r31
    5994:	08 f4       	brcc	.+2      	; 0x5998 <ArrivalButton+0x886>
    5996:	76 cf       	rjmp	.-276    	; 0x5884 <ArrivalButton+0x772>
			{
				TIM1_voidSetCmpARegValue(u16ServoCounter);           //OCR1A
				_delay_ms(10);
			}
			DIO_voidWritePin(PORT_D, DIO_PIN_NUM_D7, DIO_HIGH);  						//Turn On the lights
    5998:	84 e0       	ldi	r24, 0x04	; 4
    599a:	67 e0       	ldi	r22, 0x07	; 7
    599c:	41 e0       	ldi	r20, 0x01	; 1
    599e:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
			DIO_voidWritePin(PORT_B, DIO_PIN_NUM_B3, DIO_HIGH);
    59a2:	82 e0       	ldi	r24, 0x02	; 2
    59a4:	63 e0       	ldi	r22, 0x03	; 3
    59a6:	41 e0       	ldi	r20, 0x01	; 1
    59a8:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>
    59ac:	80 e0       	ldi	r24, 0x00	; 0
    59ae:	90 e0       	ldi	r25, 0x00	; 0
    59b0:	aa ef       	ldi	r26, 0xFA	; 250
    59b2:	b4 e4       	ldi	r27, 0x44	; 68
    59b4:	8f a3       	std	Y+39, r24	; 0x27
    59b6:	98 a7       	std	Y+40, r25	; 0x28
    59b8:	a9 a7       	std	Y+41, r26	; 0x29
    59ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59bc:	6f a1       	ldd	r22, Y+39	; 0x27
    59be:	78 a5       	ldd	r23, Y+40	; 0x28
    59c0:	89 a5       	ldd	r24, Y+41	; 0x29
    59c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    59c4:	20 e0       	ldi	r18, 0x00	; 0
    59c6:	30 e0       	ldi	r19, 0x00	; 0
    59c8:	4a ef       	ldi	r20, 0xFA	; 250
    59ca:	54 e4       	ldi	r21, 0x44	; 68
    59cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59d0:	dc 01       	movw	r26, r24
    59d2:	cb 01       	movw	r24, r22
    59d4:	8b a3       	std	Y+35, r24	; 0x23
    59d6:	9c a3       	std	Y+36, r25	; 0x24
    59d8:	ad a3       	std	Y+37, r26	; 0x25
    59da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    59dc:	6b a1       	ldd	r22, Y+35	; 0x23
    59de:	7c a1       	ldd	r23, Y+36	; 0x24
    59e0:	8d a1       	ldd	r24, Y+37	; 0x25
    59e2:	9e a1       	ldd	r25, Y+38	; 0x26
    59e4:	20 e0       	ldi	r18, 0x00	; 0
    59e6:	30 e0       	ldi	r19, 0x00	; 0
    59e8:	40 e8       	ldi	r20, 0x80	; 128
    59ea:	5f e3       	ldi	r21, 0x3F	; 63
    59ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    59f0:	88 23       	and	r24, r24
    59f2:	2c f4       	brge	.+10     	; 0x59fe <ArrivalButton+0x8ec>
		__ticks = 1;
    59f4:	81 e0       	ldi	r24, 0x01	; 1
    59f6:	90 e0       	ldi	r25, 0x00	; 0
    59f8:	9a a3       	std	Y+34, r25	; 0x22
    59fa:	89 a3       	std	Y+33, r24	; 0x21
    59fc:	3f c0       	rjmp	.+126    	; 0x5a7c <ArrivalButton+0x96a>
	else if (__tmp > 65535)
    59fe:	6b a1       	ldd	r22, Y+35	; 0x23
    5a00:	7c a1       	ldd	r23, Y+36	; 0x24
    5a02:	8d a1       	ldd	r24, Y+37	; 0x25
    5a04:	9e a1       	ldd	r25, Y+38	; 0x26
    5a06:	20 e0       	ldi	r18, 0x00	; 0
    5a08:	3f ef       	ldi	r19, 0xFF	; 255
    5a0a:	4f e7       	ldi	r20, 0x7F	; 127
    5a0c:	57 e4       	ldi	r21, 0x47	; 71
    5a0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5a12:	18 16       	cp	r1, r24
    5a14:	4c f5       	brge	.+82     	; 0x5a68 <ArrivalButton+0x956>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a16:	6f a1       	ldd	r22, Y+39	; 0x27
    5a18:	78 a5       	ldd	r23, Y+40	; 0x28
    5a1a:	89 a5       	ldd	r24, Y+41	; 0x29
    5a1c:	9a a5       	ldd	r25, Y+42	; 0x2a
    5a1e:	20 e0       	ldi	r18, 0x00	; 0
    5a20:	30 e0       	ldi	r19, 0x00	; 0
    5a22:	40 e2       	ldi	r20, 0x20	; 32
    5a24:	51 e4       	ldi	r21, 0x41	; 65
    5a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a2a:	dc 01       	movw	r26, r24
    5a2c:	cb 01       	movw	r24, r22
    5a2e:	bc 01       	movw	r22, r24
    5a30:	cd 01       	movw	r24, r26
    5a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a36:	dc 01       	movw	r26, r24
    5a38:	cb 01       	movw	r24, r22
    5a3a:	9a a3       	std	Y+34, r25	; 0x22
    5a3c:	89 a3       	std	Y+33, r24	; 0x21
    5a3e:	0f c0       	rjmp	.+30     	; 0x5a5e <ArrivalButton+0x94c>
    5a40:	88 ec       	ldi	r24, 0xC8	; 200
    5a42:	90 e0       	ldi	r25, 0x00	; 0
    5a44:	98 a3       	std	Y+32, r25	; 0x20
    5a46:	8f 8f       	std	Y+31, r24	; 0x1f
    5a48:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5a4a:	98 a1       	ldd	r25, Y+32	; 0x20
    5a4c:	01 97       	sbiw	r24, 0x01	; 1
    5a4e:	f1 f7       	brne	.-4      	; 0x5a4c <ArrivalButton+0x93a>
    5a50:	98 a3       	std	Y+32, r25	; 0x20
    5a52:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a54:	89 a1       	ldd	r24, Y+33	; 0x21
    5a56:	9a a1       	ldd	r25, Y+34	; 0x22
    5a58:	01 97       	sbiw	r24, 0x01	; 1
    5a5a:	9a a3       	std	Y+34, r25	; 0x22
    5a5c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a5e:	89 a1       	ldd	r24, Y+33	; 0x21
    5a60:	9a a1       	ldd	r25, Y+34	; 0x22
    5a62:	00 97       	sbiw	r24, 0x00	; 0
    5a64:	69 f7       	brne	.-38     	; 0x5a40 <ArrivalButton+0x92e>
    5a66:	14 c0       	rjmp	.+40     	; 0x5a90 <ArrivalButton+0x97e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a68:	6b a1       	ldd	r22, Y+35	; 0x23
    5a6a:	7c a1       	ldd	r23, Y+36	; 0x24
    5a6c:	8d a1       	ldd	r24, Y+37	; 0x25
    5a6e:	9e a1       	ldd	r25, Y+38	; 0x26
    5a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a74:	dc 01       	movw	r26, r24
    5a76:	cb 01       	movw	r24, r22
    5a78:	9a a3       	std	Y+34, r25	; 0x22
    5a7a:	89 a3       	std	Y+33, r24	; 0x21
    5a7c:	89 a1       	ldd	r24, Y+33	; 0x21
    5a7e:	9a a1       	ldd	r25, Y+34	; 0x22
    5a80:	9e 8f       	std	Y+30, r25	; 0x1e
    5a82:	8d 8f       	std	Y+29, r24	; 0x1d
    5a84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5a86:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5a88:	01 97       	sbiw	r24, 0x01	; 1
    5a8a:	f1 f7       	brne	.-4      	; 0x5a88 <ArrivalButton+0x976>
    5a8c:	9e 8f       	std	Y+30, r25	; 0x1e
    5a8e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(2000);
			for (u16ServoCounter =1624; u16ServoCounter>750;u16ServoCounter--)			// Close the door
    5a90:	88 e5       	ldi	r24, 0x58	; 88
    5a92:	96 e0       	ldi	r25, 0x06	; 6
    5a94:	90 93 ed 00 	sts	0x00ED, r25
    5a98:	80 93 ec 00 	sts	0x00EC, r24
    5a9c:	81 c0       	rjmp	.+258    	; 0x5ba0 <ArrivalButton+0xa8e>
			{
				TIM1_voidSetCmpARegValue(u16ServoCounter);
    5a9e:	80 91 ec 00 	lds	r24, 0x00EC
    5aa2:	90 91 ed 00 	lds	r25, 0x00ED
    5aa6:	0e 94 49 09 	call	0x1292	; 0x1292 <TIM1_voidSetCmpARegValue>
    5aaa:	80 e0       	ldi	r24, 0x00	; 0
    5aac:	90 e0       	ldi	r25, 0x00	; 0
    5aae:	a0 e2       	ldi	r26, 0x20	; 32
    5ab0:	b1 e4       	ldi	r27, 0x41	; 65
    5ab2:	89 8f       	std	Y+25, r24	; 0x19
    5ab4:	9a 8f       	std	Y+26, r25	; 0x1a
    5ab6:	ab 8f       	std	Y+27, r26	; 0x1b
    5ab8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5aba:	69 8d       	ldd	r22, Y+25	; 0x19
    5abc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5abe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5ac0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5ac2:	20 e0       	ldi	r18, 0x00	; 0
    5ac4:	30 e0       	ldi	r19, 0x00	; 0
    5ac6:	4a ef       	ldi	r20, 0xFA	; 250
    5ac8:	54 e4       	ldi	r21, 0x44	; 68
    5aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ace:	dc 01       	movw	r26, r24
    5ad0:	cb 01       	movw	r24, r22
    5ad2:	8d 8b       	std	Y+21, r24	; 0x15
    5ad4:	9e 8b       	std	Y+22, r25	; 0x16
    5ad6:	af 8b       	std	Y+23, r26	; 0x17
    5ad8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5ada:	6d 89       	ldd	r22, Y+21	; 0x15
    5adc:	7e 89       	ldd	r23, Y+22	; 0x16
    5ade:	8f 89       	ldd	r24, Y+23	; 0x17
    5ae0:	98 8d       	ldd	r25, Y+24	; 0x18
    5ae2:	20 e0       	ldi	r18, 0x00	; 0
    5ae4:	30 e0       	ldi	r19, 0x00	; 0
    5ae6:	40 e8       	ldi	r20, 0x80	; 128
    5ae8:	5f e3       	ldi	r21, 0x3F	; 63
    5aea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5aee:	88 23       	and	r24, r24
    5af0:	2c f4       	brge	.+10     	; 0x5afc <ArrivalButton+0x9ea>
		__ticks = 1;
    5af2:	81 e0       	ldi	r24, 0x01	; 1
    5af4:	90 e0       	ldi	r25, 0x00	; 0
    5af6:	9c 8b       	std	Y+20, r25	; 0x14
    5af8:	8b 8b       	std	Y+19, r24	; 0x13
    5afa:	3f c0       	rjmp	.+126    	; 0x5b7a <ArrivalButton+0xa68>
	else if (__tmp > 65535)
    5afc:	6d 89       	ldd	r22, Y+21	; 0x15
    5afe:	7e 89       	ldd	r23, Y+22	; 0x16
    5b00:	8f 89       	ldd	r24, Y+23	; 0x17
    5b02:	98 8d       	ldd	r25, Y+24	; 0x18
    5b04:	20 e0       	ldi	r18, 0x00	; 0
    5b06:	3f ef       	ldi	r19, 0xFF	; 255
    5b08:	4f e7       	ldi	r20, 0x7F	; 127
    5b0a:	57 e4       	ldi	r21, 0x47	; 71
    5b0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b10:	18 16       	cp	r1, r24
    5b12:	4c f5       	brge	.+82     	; 0x5b66 <ArrivalButton+0xa54>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b14:	69 8d       	ldd	r22, Y+25	; 0x19
    5b16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5b18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5b1c:	20 e0       	ldi	r18, 0x00	; 0
    5b1e:	30 e0       	ldi	r19, 0x00	; 0
    5b20:	40 e2       	ldi	r20, 0x20	; 32
    5b22:	51 e4       	ldi	r21, 0x41	; 65
    5b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b28:	dc 01       	movw	r26, r24
    5b2a:	cb 01       	movw	r24, r22
    5b2c:	bc 01       	movw	r22, r24
    5b2e:	cd 01       	movw	r24, r26
    5b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b34:	dc 01       	movw	r26, r24
    5b36:	cb 01       	movw	r24, r22
    5b38:	9c 8b       	std	Y+20, r25	; 0x14
    5b3a:	8b 8b       	std	Y+19, r24	; 0x13
    5b3c:	0f c0       	rjmp	.+30     	; 0x5b5c <ArrivalButton+0xa4a>
    5b3e:	88 ec       	ldi	r24, 0xC8	; 200
    5b40:	90 e0       	ldi	r25, 0x00	; 0
    5b42:	9a 8b       	std	Y+18, r25	; 0x12
    5b44:	89 8b       	std	Y+17, r24	; 0x11
    5b46:	89 89       	ldd	r24, Y+17	; 0x11
    5b48:	9a 89       	ldd	r25, Y+18	; 0x12
    5b4a:	01 97       	sbiw	r24, 0x01	; 1
    5b4c:	f1 f7       	brne	.-4      	; 0x5b4a <ArrivalButton+0xa38>
    5b4e:	9a 8b       	std	Y+18, r25	; 0x12
    5b50:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b52:	8b 89       	ldd	r24, Y+19	; 0x13
    5b54:	9c 89       	ldd	r25, Y+20	; 0x14
    5b56:	01 97       	sbiw	r24, 0x01	; 1
    5b58:	9c 8b       	std	Y+20, r25	; 0x14
    5b5a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b5c:	8b 89       	ldd	r24, Y+19	; 0x13
    5b5e:	9c 89       	ldd	r25, Y+20	; 0x14
    5b60:	00 97       	sbiw	r24, 0x00	; 0
    5b62:	69 f7       	brne	.-38     	; 0x5b3e <ArrivalButton+0xa2c>
    5b64:	14 c0       	rjmp	.+40     	; 0x5b8e <ArrivalButton+0xa7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b66:	6d 89       	ldd	r22, Y+21	; 0x15
    5b68:	7e 89       	ldd	r23, Y+22	; 0x16
    5b6a:	8f 89       	ldd	r24, Y+23	; 0x17
    5b6c:	98 8d       	ldd	r25, Y+24	; 0x18
    5b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b72:	dc 01       	movw	r26, r24
    5b74:	cb 01       	movw	r24, r22
    5b76:	9c 8b       	std	Y+20, r25	; 0x14
    5b78:	8b 8b       	std	Y+19, r24	; 0x13
    5b7a:	8b 89       	ldd	r24, Y+19	; 0x13
    5b7c:	9c 89       	ldd	r25, Y+20	; 0x14
    5b7e:	98 8b       	std	Y+16, r25	; 0x10
    5b80:	8f 87       	std	Y+15, r24	; 0x0f
    5b82:	8f 85       	ldd	r24, Y+15	; 0x0f
    5b84:	98 89       	ldd	r25, Y+16	; 0x10
    5b86:	01 97       	sbiw	r24, 0x01	; 1
    5b88:	f1 f7       	brne	.-4      	; 0x5b86 <ArrivalButton+0xa74>
    5b8a:	98 8b       	std	Y+16, r25	; 0x10
    5b8c:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(10);
			}
			DIO_voidWritePin(PORT_D, DIO_PIN_NUM_D7, DIO_HIGH);  						//Turn On the lights
			DIO_voidWritePin(PORT_B, DIO_PIN_NUM_B3, DIO_HIGH);
			_delay_ms(2000);
			for (u16ServoCounter =1624; u16ServoCounter>750;u16ServoCounter--)			// Close the door
    5b8e:	80 91 ec 00 	lds	r24, 0x00EC
    5b92:	90 91 ed 00 	lds	r25, 0x00ED
    5b96:	01 97       	sbiw	r24, 0x01	; 1
    5b98:	90 93 ed 00 	sts	0x00ED, r25
    5b9c:	80 93 ec 00 	sts	0x00EC, r24
    5ba0:	80 91 ec 00 	lds	r24, 0x00EC
    5ba4:	90 91 ed 00 	lds	r25, 0x00ED
    5ba8:	22 e0       	ldi	r18, 0x02	; 2
    5baa:	8f 3e       	cpi	r24, 0xEF	; 239
    5bac:	92 07       	cpc	r25, r18
    5bae:	08 f0       	brcs	.+2      	; 0x5bb2 <ArrivalButton+0xaa0>
    5bb0:	76 cf       	rjmp	.-276    	; 0x5a9e <ArrivalButton+0x98c>
    5bb2:	07 c0       	rjmp	.+14     	; 0x5bc2 <ArrivalButton+0xab0>
	LCD_voidSendCommand_4bitMode(lcd_Clear);
	LCD_voidGotoxy_4bitMode(5, LineOne);
	LCD_voidWriteString_4bitMode("WELCOME", 7);
	_delay_ms(1500);

	while(u8ErrorDetected <2){
    5bb4:	fe 01       	movw	r30, r28
    5bb6:	ec 58       	subi	r30, 0x8C	; 140
    5bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    5bba:	80 81       	ld	r24, Z
    5bbc:	82 30       	cpi	r24, 0x02	; 2
    5bbe:	08 f4       	brcc	.+2      	; 0x5bc2 <ArrivalButton+0xab0>
    5bc0:	88 cb       	rjmp	.-2288   	; 0x52d2 <ArrivalButton+0x1c0>
			}
			break;
		}
	}

	if(u8ErrorDetected>=2){
    5bc2:	fe 01       	movw	r30, r28
    5bc4:	ec 58       	subi	r30, 0x8C	; 140
    5bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    5bc8:	80 81       	ld	r24, Z
    5bca:	82 30       	cpi	r24, 0x02	; 2
    5bcc:	08 f4       	brcc	.+2      	; 0x5bd0 <ArrivalButton+0xabe>
    5bce:	81 c0       	rjmp	.+258    	; 0x5cd2 <ArrivalButton+0xbc0>
		SPI_u8TransceiverDataSynch(3);
    5bd0:	83 e0       	ldi	r24, 0x03	; 3
    5bd2:	0e 94 23 0c 	call	0x1846	; 0x1846 <SPI_u8TransceiverDataSynch>
		LCD_voidSendCommand_4bitMode(lcd_Clear);
    5bd6:	81 e0       	ldi	r24, 0x01	; 1
    5bd8:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_voidSendCommand_4bitMode>
		LCD_voidGotoxy_4bitMode(4, LineOne);
    5bdc:	84 e0       	ldi	r24, 0x04	; 4
    5bde:	61 e0       	ldi	r22, 0x01	; 1
    5be0:	0e 94 46 1c 	call	0x388c	; 0x388c <LCD_voidGotoxy_4bitMode>
		LCD_voidWriteString_4bitMode("INTRUDER", 8);
    5be4:	8e eb       	ldi	r24, 0xBE	; 190
    5be6:	90 e0       	ldi	r25, 0x00	; 0
    5be8:	68 e0       	ldi	r22, 0x08	; 8
    5bea:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <LCD_voidWriteString_4bitMode>
    5bee:	80 e0       	ldi	r24, 0x00	; 0
    5bf0:	90 e4       	ldi	r25, 0x40	; 64
    5bf2:	ac e9       	ldi	r26, 0x9C	; 156
    5bf4:	b5 e4       	ldi	r27, 0x45	; 69
    5bf6:	8b 87       	std	Y+11, r24	; 0x0b
    5bf8:	9c 87       	std	Y+12, r25	; 0x0c
    5bfa:	ad 87       	std	Y+13, r26	; 0x0d
    5bfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5bfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c00:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c02:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c04:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c06:	20 e0       	ldi	r18, 0x00	; 0
    5c08:	30 e0       	ldi	r19, 0x00	; 0
    5c0a:	4a ef       	ldi	r20, 0xFA	; 250
    5c0c:	54 e4       	ldi	r21, 0x44	; 68
    5c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c12:	dc 01       	movw	r26, r24
    5c14:	cb 01       	movw	r24, r22
    5c16:	8f 83       	std	Y+7, r24	; 0x07
    5c18:	98 87       	std	Y+8, r25	; 0x08
    5c1a:	a9 87       	std	Y+9, r26	; 0x09
    5c1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5c1e:	6f 81       	ldd	r22, Y+7	; 0x07
    5c20:	78 85       	ldd	r23, Y+8	; 0x08
    5c22:	89 85       	ldd	r24, Y+9	; 0x09
    5c24:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c26:	20 e0       	ldi	r18, 0x00	; 0
    5c28:	30 e0       	ldi	r19, 0x00	; 0
    5c2a:	40 e8       	ldi	r20, 0x80	; 128
    5c2c:	5f e3       	ldi	r21, 0x3F	; 63
    5c2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5c32:	88 23       	and	r24, r24
    5c34:	2c f4       	brge	.+10     	; 0x5c40 <ArrivalButton+0xb2e>
		__ticks = 1;
    5c36:	81 e0       	ldi	r24, 0x01	; 1
    5c38:	90 e0       	ldi	r25, 0x00	; 0
    5c3a:	9e 83       	std	Y+6, r25	; 0x06
    5c3c:	8d 83       	std	Y+5, r24	; 0x05
    5c3e:	3f c0       	rjmp	.+126    	; 0x5cbe <ArrivalButton+0xbac>
	else if (__tmp > 65535)
    5c40:	6f 81       	ldd	r22, Y+7	; 0x07
    5c42:	78 85       	ldd	r23, Y+8	; 0x08
    5c44:	89 85       	ldd	r24, Y+9	; 0x09
    5c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c48:	20 e0       	ldi	r18, 0x00	; 0
    5c4a:	3f ef       	ldi	r19, 0xFF	; 255
    5c4c:	4f e7       	ldi	r20, 0x7F	; 127
    5c4e:	57 e4       	ldi	r21, 0x47	; 71
    5c50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5c54:	18 16       	cp	r1, r24
    5c56:	4c f5       	brge	.+82     	; 0x5caa <ArrivalButton+0xb98>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c58:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c60:	20 e0       	ldi	r18, 0x00	; 0
    5c62:	30 e0       	ldi	r19, 0x00	; 0
    5c64:	40 e2       	ldi	r20, 0x20	; 32
    5c66:	51 e4       	ldi	r21, 0x41	; 65
    5c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c6c:	dc 01       	movw	r26, r24
    5c6e:	cb 01       	movw	r24, r22
    5c70:	bc 01       	movw	r22, r24
    5c72:	cd 01       	movw	r24, r26
    5c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c78:	dc 01       	movw	r26, r24
    5c7a:	cb 01       	movw	r24, r22
    5c7c:	9e 83       	std	Y+6, r25	; 0x06
    5c7e:	8d 83       	std	Y+5, r24	; 0x05
    5c80:	0f c0       	rjmp	.+30     	; 0x5ca0 <ArrivalButton+0xb8e>
    5c82:	88 ec       	ldi	r24, 0xC8	; 200
    5c84:	90 e0       	ldi	r25, 0x00	; 0
    5c86:	9c 83       	std	Y+4, r25	; 0x04
    5c88:	8b 83       	std	Y+3, r24	; 0x03
    5c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    5c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    5c8e:	01 97       	sbiw	r24, 0x01	; 1
    5c90:	f1 f7       	brne	.-4      	; 0x5c8e <ArrivalButton+0xb7c>
    5c92:	9c 83       	std	Y+4, r25	; 0x04
    5c94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c96:	8d 81       	ldd	r24, Y+5	; 0x05
    5c98:	9e 81       	ldd	r25, Y+6	; 0x06
    5c9a:	01 97       	sbiw	r24, 0x01	; 1
    5c9c:	9e 83       	std	Y+6, r25	; 0x06
    5c9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    5ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    5ca4:	00 97       	sbiw	r24, 0x00	; 0
    5ca6:	69 f7       	brne	.-38     	; 0x5c82 <ArrivalButton+0xb70>
    5ca8:	14 c0       	rjmp	.+40     	; 0x5cd2 <ArrivalButton+0xbc0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5caa:	6f 81       	ldd	r22, Y+7	; 0x07
    5cac:	78 85       	ldd	r23, Y+8	; 0x08
    5cae:	89 85       	ldd	r24, Y+9	; 0x09
    5cb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cb6:	dc 01       	movw	r26, r24
    5cb8:	cb 01       	movw	r24, r22
    5cba:	9e 83       	std	Y+6, r25	; 0x06
    5cbc:	8d 83       	std	Y+5, r24	; 0x05
    5cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    5cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    5cc2:	9a 83       	std	Y+2, r25	; 0x02
    5cc4:	89 83       	std	Y+1, r24	; 0x01
    5cc6:	89 81       	ldd	r24, Y+1	; 0x01
    5cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    5cca:	01 97       	sbiw	r24, 0x01	; 1
    5ccc:	f1 f7       	brne	.-4      	; 0x5cca <ArrivalButton+0xbb8>
    5cce:	9a 83       	std	Y+2, r25	; 0x02
    5cd0:	89 83       	std	Y+1, r24	; 0x01
	}
	else{

	}
	//Enable timer0 to save power
	TIMER0_voidInit();
    5cd2:	0e 94 88 0a 	call	0x1510	; 0x1510 <TIMER0_voidInit>
	TIMER0_voidEnable(TIMER0_PRESCALER_8);
    5cd6:	82 e0       	ldi	r24, 0x02	; 2
    5cd8:	0e 94 ab 0a 	call	0x1556	; 0x1556 <TIMER0_voidEnable>

}
    5cdc:	cb 58       	subi	r28, 0x8B	; 139
    5cde:	df 4f       	sbci	r29, 0xFF	; 255
    5ce0:	0f b6       	in	r0, 0x3f	; 63
    5ce2:	f8 94       	cli
    5ce4:	de bf       	out	0x3e, r29	; 62
    5ce6:	0f be       	out	0x3f, r0	; 63
    5ce8:	cd bf       	out	0x3d, r28	; 61
    5cea:	cf 91       	pop	r28
    5cec:	df 91       	pop	r29
    5cee:	1f 91       	pop	r17
    5cf0:	0f 91       	pop	r16
    5cf2:	08 95       	ret

00005cf4 <EntranceButton>:


void EntranceButton(void){
    5cf4:	df 93       	push	r29
    5cf6:	cf 93       	push	r28
    5cf8:	cd b7       	in	r28, 0x3d	; 61
    5cfa:	de b7       	in	r29, 0x3e	; 62
    5cfc:	2e 97       	sbiw	r28, 0x0e	; 14
    5cfe:	0f b6       	in	r0, 0x3f	; 63
    5d00:	f8 94       	cli
    5d02:	de bf       	out	0x3e, r29	; 62
    5d04:	0f be       	out	0x3f, r0	; 63
    5d06:	cd bf       	out	0x3d, r28	; 61
	DIO_voidWritePin(PORT_D, DIO_PIN_NUM_D7, DIO_LOW);
    5d08:	84 e0       	ldi	r24, 0x04	; 4
    5d0a:	67 e0       	ldi	r22, 0x07	; 7
    5d0c:	40 e0       	ldi	r20, 0x00	; 0
    5d0e:	0e 94 6e 23 	call	0x46dc	; 0x46dc <DIO_voidWritePin>

	//-90 degrees to servo (shut the door) using PWM
	for (u16ServoCounter =875; u16ServoCounter>750;u16ServoCounter--)
    5d12:	8b e6       	ldi	r24, 0x6B	; 107
    5d14:	93 e0       	ldi	r25, 0x03	; 3
    5d16:	90 93 ed 00 	sts	0x00ED, r25
    5d1a:	80 93 ec 00 	sts	0x00EC, r24
    5d1e:	81 c0       	rjmp	.+258    	; 0x5e22 <EntranceButton+0x12e>
	{
		TIM1_voidSetCmpARegValue(u16ServoCounter);
    5d20:	80 91 ec 00 	lds	r24, 0x00EC
    5d24:	90 91 ed 00 	lds	r25, 0x00ED
    5d28:	0e 94 49 09 	call	0x1292	; 0x1292 <TIM1_voidSetCmpARegValue>
    5d2c:	80 e0       	ldi	r24, 0x00	; 0
    5d2e:	90 e0       	ldi	r25, 0x00	; 0
    5d30:	a0 e2       	ldi	r26, 0x20	; 32
    5d32:	b1 e4       	ldi	r27, 0x41	; 65
    5d34:	8b 87       	std	Y+11, r24	; 0x0b
    5d36:	9c 87       	std	Y+12, r25	; 0x0c
    5d38:	ad 87       	std	Y+13, r26	; 0x0d
    5d3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d40:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d42:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d44:	20 e0       	ldi	r18, 0x00	; 0
    5d46:	30 e0       	ldi	r19, 0x00	; 0
    5d48:	4a ef       	ldi	r20, 0xFA	; 250
    5d4a:	54 e4       	ldi	r21, 0x44	; 68
    5d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d50:	dc 01       	movw	r26, r24
    5d52:	cb 01       	movw	r24, r22
    5d54:	8f 83       	std	Y+7, r24	; 0x07
    5d56:	98 87       	std	Y+8, r25	; 0x08
    5d58:	a9 87       	std	Y+9, r26	; 0x09
    5d5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5d5c:	6f 81       	ldd	r22, Y+7	; 0x07
    5d5e:	78 85       	ldd	r23, Y+8	; 0x08
    5d60:	89 85       	ldd	r24, Y+9	; 0x09
    5d62:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d64:	20 e0       	ldi	r18, 0x00	; 0
    5d66:	30 e0       	ldi	r19, 0x00	; 0
    5d68:	40 e8       	ldi	r20, 0x80	; 128
    5d6a:	5f e3       	ldi	r21, 0x3F	; 63
    5d6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5d70:	88 23       	and	r24, r24
    5d72:	2c f4       	brge	.+10     	; 0x5d7e <EntranceButton+0x8a>
		__ticks = 1;
    5d74:	81 e0       	ldi	r24, 0x01	; 1
    5d76:	90 e0       	ldi	r25, 0x00	; 0
    5d78:	9e 83       	std	Y+6, r25	; 0x06
    5d7a:	8d 83       	std	Y+5, r24	; 0x05
    5d7c:	3f c0       	rjmp	.+126    	; 0x5dfc <EntranceButton+0x108>
	else if (__tmp > 65535)
    5d7e:	6f 81       	ldd	r22, Y+7	; 0x07
    5d80:	78 85       	ldd	r23, Y+8	; 0x08
    5d82:	89 85       	ldd	r24, Y+9	; 0x09
    5d84:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d86:	20 e0       	ldi	r18, 0x00	; 0
    5d88:	3f ef       	ldi	r19, 0xFF	; 255
    5d8a:	4f e7       	ldi	r20, 0x7F	; 127
    5d8c:	57 e4       	ldi	r21, 0x47	; 71
    5d8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5d92:	18 16       	cp	r1, r24
    5d94:	4c f5       	brge	.+82     	; 0x5de8 <EntranceButton+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d96:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d98:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d9e:	20 e0       	ldi	r18, 0x00	; 0
    5da0:	30 e0       	ldi	r19, 0x00	; 0
    5da2:	40 e2       	ldi	r20, 0x20	; 32
    5da4:	51 e4       	ldi	r21, 0x41	; 65
    5da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5daa:	dc 01       	movw	r26, r24
    5dac:	cb 01       	movw	r24, r22
    5dae:	bc 01       	movw	r22, r24
    5db0:	cd 01       	movw	r24, r26
    5db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5db6:	dc 01       	movw	r26, r24
    5db8:	cb 01       	movw	r24, r22
    5dba:	9e 83       	std	Y+6, r25	; 0x06
    5dbc:	8d 83       	std	Y+5, r24	; 0x05
    5dbe:	0f c0       	rjmp	.+30     	; 0x5dde <EntranceButton+0xea>
    5dc0:	88 ec       	ldi	r24, 0xC8	; 200
    5dc2:	90 e0       	ldi	r25, 0x00	; 0
    5dc4:	9c 83       	std	Y+4, r25	; 0x04
    5dc6:	8b 83       	std	Y+3, r24	; 0x03
    5dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    5dca:	9c 81       	ldd	r25, Y+4	; 0x04
    5dcc:	01 97       	sbiw	r24, 0x01	; 1
    5dce:	f1 f7       	brne	.-4      	; 0x5dcc <EntranceButton+0xd8>
    5dd0:	9c 83       	std	Y+4, r25	; 0x04
    5dd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    5dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    5dd8:	01 97       	sbiw	r24, 0x01	; 1
    5dda:	9e 83       	std	Y+6, r25	; 0x06
    5ddc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5dde:	8d 81       	ldd	r24, Y+5	; 0x05
    5de0:	9e 81       	ldd	r25, Y+6	; 0x06
    5de2:	00 97       	sbiw	r24, 0x00	; 0
    5de4:	69 f7       	brne	.-38     	; 0x5dc0 <EntranceButton+0xcc>
    5de6:	14 c0       	rjmp	.+40     	; 0x5e10 <EntranceButton+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5de8:	6f 81       	ldd	r22, Y+7	; 0x07
    5dea:	78 85       	ldd	r23, Y+8	; 0x08
    5dec:	89 85       	ldd	r24, Y+9	; 0x09
    5dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    5df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5df4:	dc 01       	movw	r26, r24
    5df6:	cb 01       	movw	r24, r22
    5df8:	9e 83       	std	Y+6, r25	; 0x06
    5dfa:	8d 83       	std	Y+5, r24	; 0x05
    5dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    5dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    5e00:	9a 83       	std	Y+2, r25	; 0x02
    5e02:	89 83       	std	Y+1, r24	; 0x01
    5e04:	89 81       	ldd	r24, Y+1	; 0x01
    5e06:	9a 81       	ldd	r25, Y+2	; 0x02
    5e08:	01 97       	sbiw	r24, 0x01	; 1
    5e0a:	f1 f7       	brne	.-4      	; 0x5e08 <EntranceButton+0x114>
    5e0c:	9a 83       	std	Y+2, r25	; 0x02
    5e0e:	89 83       	std	Y+1, r24	; 0x01

void EntranceButton(void){
	DIO_voidWritePin(PORT_D, DIO_PIN_NUM_D7, DIO_LOW);

	//-90 degrees to servo (shut the door) using PWM
	for (u16ServoCounter =875; u16ServoCounter>750;u16ServoCounter--)
    5e10:	80 91 ec 00 	lds	r24, 0x00EC
    5e14:	90 91 ed 00 	lds	r25, 0x00ED
    5e18:	01 97       	sbiw	r24, 0x01	; 1
    5e1a:	90 93 ed 00 	sts	0x00ED, r25
    5e1e:	80 93 ec 00 	sts	0x00EC, r24
    5e22:	80 91 ec 00 	lds	r24, 0x00EC
    5e26:	90 91 ed 00 	lds	r25, 0x00ED
    5e2a:	22 e0       	ldi	r18, 0x02	; 2
    5e2c:	8f 3e       	cpi	r24, 0xEF	; 239
    5e2e:	92 07       	cpc	r25, r18
    5e30:	08 f0       	brcs	.+2      	; 0x5e34 <EntranceButton+0x140>
    5e32:	76 cf       	rjmp	.-276    	; 0x5d20 <EntranceButton+0x2c>
	{
		TIM1_voidSetCmpARegValue(u16ServoCounter);
		_delay_ms(10);
	}
}
    5e34:	2e 96       	adiw	r28, 0x0e	; 14
    5e36:	0f b6       	in	r0, 0x3f	; 63
    5e38:	f8 94       	cli
    5e3a:	de bf       	out	0x3e, r29	; 62
    5e3c:	0f be       	out	0x3f, r0	; 63
    5e3e:	cd bf       	out	0x3d, r28	; 61
    5e40:	cf 91       	pop	r28
    5e42:	df 91       	pop	r29
    5e44:	08 95       	ret

00005e46 <__mulsi3>:
    5e46:	62 9f       	mul	r22, r18
    5e48:	d0 01       	movw	r26, r0
    5e4a:	73 9f       	mul	r23, r19
    5e4c:	f0 01       	movw	r30, r0
    5e4e:	82 9f       	mul	r24, r18
    5e50:	e0 0d       	add	r30, r0
    5e52:	f1 1d       	adc	r31, r1
    5e54:	64 9f       	mul	r22, r20
    5e56:	e0 0d       	add	r30, r0
    5e58:	f1 1d       	adc	r31, r1
    5e5a:	92 9f       	mul	r25, r18
    5e5c:	f0 0d       	add	r31, r0
    5e5e:	83 9f       	mul	r24, r19
    5e60:	f0 0d       	add	r31, r0
    5e62:	74 9f       	mul	r23, r20
    5e64:	f0 0d       	add	r31, r0
    5e66:	65 9f       	mul	r22, r21
    5e68:	f0 0d       	add	r31, r0
    5e6a:	99 27       	eor	r25, r25
    5e6c:	72 9f       	mul	r23, r18
    5e6e:	b0 0d       	add	r27, r0
    5e70:	e1 1d       	adc	r30, r1
    5e72:	f9 1f       	adc	r31, r25
    5e74:	63 9f       	mul	r22, r19
    5e76:	b0 0d       	add	r27, r0
    5e78:	e1 1d       	adc	r30, r1
    5e7a:	f9 1f       	adc	r31, r25
    5e7c:	bd 01       	movw	r22, r26
    5e7e:	cf 01       	movw	r24, r30
    5e80:	11 24       	eor	r1, r1
    5e82:	08 95       	ret

00005e84 <__udivmodhi4>:
    5e84:	aa 1b       	sub	r26, r26
    5e86:	bb 1b       	sub	r27, r27
    5e88:	51 e1       	ldi	r21, 0x11	; 17
    5e8a:	07 c0       	rjmp	.+14     	; 0x5e9a <__udivmodhi4_ep>

00005e8c <__udivmodhi4_loop>:
    5e8c:	aa 1f       	adc	r26, r26
    5e8e:	bb 1f       	adc	r27, r27
    5e90:	a6 17       	cp	r26, r22
    5e92:	b7 07       	cpc	r27, r23
    5e94:	10 f0       	brcs	.+4      	; 0x5e9a <__udivmodhi4_ep>
    5e96:	a6 1b       	sub	r26, r22
    5e98:	b7 0b       	sbc	r27, r23

00005e9a <__udivmodhi4_ep>:
    5e9a:	88 1f       	adc	r24, r24
    5e9c:	99 1f       	adc	r25, r25
    5e9e:	5a 95       	dec	r21
    5ea0:	a9 f7       	brne	.-22     	; 0x5e8c <__udivmodhi4_loop>
    5ea2:	80 95       	com	r24
    5ea4:	90 95       	com	r25
    5ea6:	bc 01       	movw	r22, r24
    5ea8:	cd 01       	movw	r24, r26
    5eaa:	08 95       	ret

00005eac <__udivmodsi4>:
    5eac:	a1 e2       	ldi	r26, 0x21	; 33
    5eae:	1a 2e       	mov	r1, r26
    5eb0:	aa 1b       	sub	r26, r26
    5eb2:	bb 1b       	sub	r27, r27
    5eb4:	fd 01       	movw	r30, r26
    5eb6:	0d c0       	rjmp	.+26     	; 0x5ed2 <__udivmodsi4_ep>

00005eb8 <__udivmodsi4_loop>:
    5eb8:	aa 1f       	adc	r26, r26
    5eba:	bb 1f       	adc	r27, r27
    5ebc:	ee 1f       	adc	r30, r30
    5ebe:	ff 1f       	adc	r31, r31
    5ec0:	a2 17       	cp	r26, r18
    5ec2:	b3 07       	cpc	r27, r19
    5ec4:	e4 07       	cpc	r30, r20
    5ec6:	f5 07       	cpc	r31, r21
    5ec8:	20 f0       	brcs	.+8      	; 0x5ed2 <__udivmodsi4_ep>
    5eca:	a2 1b       	sub	r26, r18
    5ecc:	b3 0b       	sbc	r27, r19
    5ece:	e4 0b       	sbc	r30, r20
    5ed0:	f5 0b       	sbc	r31, r21

00005ed2 <__udivmodsi4_ep>:
    5ed2:	66 1f       	adc	r22, r22
    5ed4:	77 1f       	adc	r23, r23
    5ed6:	88 1f       	adc	r24, r24
    5ed8:	99 1f       	adc	r25, r25
    5eda:	1a 94       	dec	r1
    5edc:	69 f7       	brne	.-38     	; 0x5eb8 <__udivmodsi4_loop>
    5ede:	60 95       	com	r22
    5ee0:	70 95       	com	r23
    5ee2:	80 95       	com	r24
    5ee4:	90 95       	com	r25
    5ee6:	9b 01       	movw	r18, r22
    5ee8:	ac 01       	movw	r20, r24
    5eea:	bd 01       	movw	r22, r26
    5eec:	cf 01       	movw	r24, r30
    5eee:	08 95       	ret

00005ef0 <__prologue_saves__>:
    5ef0:	2f 92       	push	r2
    5ef2:	3f 92       	push	r3
    5ef4:	4f 92       	push	r4
    5ef6:	5f 92       	push	r5
    5ef8:	6f 92       	push	r6
    5efa:	7f 92       	push	r7
    5efc:	8f 92       	push	r8
    5efe:	9f 92       	push	r9
    5f00:	af 92       	push	r10
    5f02:	bf 92       	push	r11
    5f04:	cf 92       	push	r12
    5f06:	df 92       	push	r13
    5f08:	ef 92       	push	r14
    5f0a:	ff 92       	push	r15
    5f0c:	0f 93       	push	r16
    5f0e:	1f 93       	push	r17
    5f10:	cf 93       	push	r28
    5f12:	df 93       	push	r29
    5f14:	cd b7       	in	r28, 0x3d	; 61
    5f16:	de b7       	in	r29, 0x3e	; 62
    5f18:	ca 1b       	sub	r28, r26
    5f1a:	db 0b       	sbc	r29, r27
    5f1c:	0f b6       	in	r0, 0x3f	; 63
    5f1e:	f8 94       	cli
    5f20:	de bf       	out	0x3e, r29	; 62
    5f22:	0f be       	out	0x3f, r0	; 63
    5f24:	cd bf       	out	0x3d, r28	; 61
    5f26:	09 94       	ijmp

00005f28 <__epilogue_restores__>:
    5f28:	2a 88       	ldd	r2, Y+18	; 0x12
    5f2a:	39 88       	ldd	r3, Y+17	; 0x11
    5f2c:	48 88       	ldd	r4, Y+16	; 0x10
    5f2e:	5f 84       	ldd	r5, Y+15	; 0x0f
    5f30:	6e 84       	ldd	r6, Y+14	; 0x0e
    5f32:	7d 84       	ldd	r7, Y+13	; 0x0d
    5f34:	8c 84       	ldd	r8, Y+12	; 0x0c
    5f36:	9b 84       	ldd	r9, Y+11	; 0x0b
    5f38:	aa 84       	ldd	r10, Y+10	; 0x0a
    5f3a:	b9 84       	ldd	r11, Y+9	; 0x09
    5f3c:	c8 84       	ldd	r12, Y+8	; 0x08
    5f3e:	df 80       	ldd	r13, Y+7	; 0x07
    5f40:	ee 80       	ldd	r14, Y+6	; 0x06
    5f42:	fd 80       	ldd	r15, Y+5	; 0x05
    5f44:	0c 81       	ldd	r16, Y+4	; 0x04
    5f46:	1b 81       	ldd	r17, Y+3	; 0x03
    5f48:	aa 81       	ldd	r26, Y+2	; 0x02
    5f4a:	b9 81       	ldd	r27, Y+1	; 0x01
    5f4c:	ce 0f       	add	r28, r30
    5f4e:	d1 1d       	adc	r29, r1
    5f50:	0f b6       	in	r0, 0x3f	; 63
    5f52:	f8 94       	cli
    5f54:	de bf       	out	0x3e, r29	; 62
    5f56:	0f be       	out	0x3f, r0	; 63
    5f58:	cd bf       	out	0x3d, r28	; 61
    5f5a:	ed 01       	movw	r28, r26
    5f5c:	08 95       	ret

00005f5e <_exit>:
    5f5e:	f8 94       	cli

00005f60 <__stop_program>:
    5f60:	ff cf       	rjmp	.-2      	; 0x5f60 <__stop_program>
